 Percent |	Source code & Disassembly of main for cycles:u (382 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d67 <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_>:
         :	_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_():
         :	   * object's constructor with an initializer.
         :	   */
         :	#if __cplusplus >= 201103L
         :	  template<typename _T1, typename... _Args>
         :	    inline void
         :	    _Construct(_T1* __p, _Args&&... __args)
    6.02 :	  427d67:       push   %rbp
    0.26 :	  427d68:       mov    %rsp,%rbp
    1.05 :	  427d6b:       push   %rbx
    7.59 :	  427d6c:       sub    $0x18,%rsp
    1.05 :	  427d70:       mov    %rdi,-0x18(%rbp)
    0.52 :	  427d74:       mov    %rsi,-0x20(%rbp)
         :	    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
    6.54 :	  427d78:       mov    -0x20(%rbp),%rax
    1.83 :	  427d7c:       mov    %rax,%rdi
    0.52 :	  427d7f:       callq  427d59 <LLord const& std::forward<LLord const&>(std::remove_reference<LLord const&>::type&)>
    0.00 :	  427d84:       mov    %rax,%rbx
    5.50 :	  427d87:       mov    -0x18(%rbp),%rax
    5.24 :	  427d8b:       mov    %rax,%rsi
    0.79 :	  427d8e:       mov    $0x10,%edi
    0.00 :	  427d93:       callq  41eb2a <operator new(unsigned long, void*)>
    0.52 :	  427d98:       mov    %rax,%rcx
    0.26 :	  427d9b:       test   %rcx,%rcx
    0.00 :	  427d9e:       je     427dae <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_+0x47>
    3.40 :	  427da0:       mov    (%rbx),%rax
    6.02 :	  427da3:       mov    0x8(%rbx),%rdx
    2.09 :	  427da7:       mov    %rax,(%rcx)
   34.29 :	  427daa:       mov    %rdx,0x8(%rcx)
    7.85 :	  427dae:       add    $0x18,%rsp
    0.26 :	  427db2:       pop    %rbx
    4.97 :	  427db3:       pop    %rbp
    3.40 :	  427db4:       retq
 Percent |	Source code & Disassembly of main for cycles:u (299 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427cde <bool __gnu_cxx::operator!=<LLord const*, std::vector<LLord, std::allocator<LLord> > >(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&)>:
         :	_ZN9__gnu_cxxneIPK5LLordSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    2.01 :	  427cde:       push   %rbp
    2.01 :	  427cdf:       mov    %rsp,%rbp
    8.36 :	  427ce2:       push   %rbx
    0.00 :	  427ce3:       sub    $0x18,%rsp
    4.68 :	  427ce7:       mov    %rdi,-0x18(%rbp)
    5.02 :	  427ceb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
    1.00 :	  427cef:       mov    -0x18(%rbp),%rax
    2.01 :	  427cf3:       mov    %rax,%rdi
    5.69 :	  427cf6:       callq  4287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>
    4.01 :	  427cfb:       mov    (%rax),%rbx
    9.36 :	  427cfe:       mov    -0x20(%rbp),%rax
    1.34 :	  427d02:       mov    %rax,%rdi
    3.68 :	  427d05:       callq  4287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>
    2.01 :	  427d0a:       mov    (%rax),%rax
   22.41 :	  427d0d:       cmp    %rax,%rbx
    7.36 :	  427d10:       setne  %al
    8.70 :	  427d13:       add    $0x18,%rsp
    1.67 :	  427d17:       pop    %rbx
    0.33 :	  427d18:       pop    %rbp
    8.36 :	  427d19:       retq
 Percent |	Source code & Disassembly of main for cycles:u (177 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e7c <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>:
         :	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_():
         :	  template<bool _TrivialValueTypes>
         :	    struct __uninitialized_copy
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  426e7c:       push   %rbp
    0.00 :	  426e7d:       mov    %rsp,%rbp
    0.00 :	  426e80:       push   %rbx
    0.00 :	  426e81:       sub    $0x38,%rsp
    0.00 :	  426e85:       mov    %rdi,-0x30(%rbp)
    0.00 :	  426e89:       mov    %rsi,-0x40(%rbp)
    0.00 :	  426e8d:       mov    %rdx,-0x38(%rbp)
         :	                      _ForwardIterator __result)
         :	        {
         :	          _ForwardIterator __cur = __result;
    0.00 :	  426e91:       mov    -0x38(%rbp),%rax
    0.00 :	  426e95:       mov    %rax,-0x18(%rbp)
         :	          __try
         :	            {
         :	              for (; __first != __last; ++__first, ++__cur)
    0.00 :	  426e99:       jmp    426ed2 <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0x56>
         :	                std::_Construct(std::__addressof(*__cur), *__first);
   19.77 :	  426e9b:       lea    -0x30(%rbp),%rax
    0.00 :	  426e9f:       mov    %rax,%rdi
    0.00 :	  426ea2:       callq  427d48 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator*() const>
   14.12 :	  426ea7:       mov    %rax,%rbx
    0.00 :	  426eaa:       mov    -0x18(%rbp),%rax
    2.26 :	  426eae:       mov    %rax,%rdi
    0.56 :	  426eb1:       callq  427d3a <LLord* std::__addressof<LLord>(LLord&)>
   16.38 :	  426eb6:       mov    %rbx,%rsi
    0.00 :	  426eb9:       mov    %rax,%rdi
    3.39 :	  426ebc:       callq  427d67 <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_>
         :	              for (; __first != __last; ++__first, ++__cur)
    0.56 :	  426ec1:       lea    -0x30(%rbp),%rax
    0.00 :	  426ec5:       mov    %rax,%rdi
    7.34 :	  426ec8:       callq  427d1a <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator++()>
    0.56 :	  426ecd:       addq   $0x10,-0x18(%rbp)
   15.82 :	  426ed2:       lea    -0x40(%rbp),%rdx
    5.08 :	  426ed6:       lea    -0x30(%rbp),%rax
    0.56 :	  426eda:       mov    %rdx,%rsi
    0.56 :	  426edd:       mov    %rax,%rdi
   10.17 :	  426ee0:       callq  427cde <bool __gnu_cxx::operator!=<LLord const*, std::vector<LLord, std::allocator<LLord> > >(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&)>
    1.69 :	  426ee5:       test   %al,%al
    0.00 :	  426ee7:       jne    426e9b <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0x1f>
         :	              return __cur;
    0.56 :	  426ee9:       mov    -0x18(%rbp),%rax
    0.56 :	  426eed:       jmp    426f22 <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0xa6>
    0.00 :	  426eef:       mov    %rax,%rbx
         :	            }
         :	          __catch(...)
    0.00 :	  426ef2:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  426ef7:       mov    %rbx,%rax
    0.00 :	  426efa:       mov    %rax,%rdi
    0.00 :	  426efd:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  426f02:       mov    %rax,%rdi
    0.00 :	  426f05:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            {
         :	              std::_Destroy(__result, __cur);
    0.00 :	  426f0a:       mov    -0x18(%rbp),%rdx
    0.00 :	  426f0e:       mov    -0x38(%rbp),%rax
    0.00 :	  426f12:       mov    %rdx,%rsi
    0.00 :	  426f15:       mov    %rax,%rdi
    0.00 :	  426f18:       callq  42470a <void std::_Destroy<LLord*>(LLord*, LLord*)>
         :	              __throw_exception_again;
    0.00 :	  426f1d:       callq  41db40 <__cxa_rethrow@plt>
         :	            }
         :	        }
    0.00 :	  426f22:       add    $0x38,%rsp
    0.00 :	  426f26:       pop    %rbx
    0.00 :	  426f27:       pop    %rbp
    0.00 :	  426f28:       retq
 Percent |	Source code & Disassembly of main for cycles:u (148 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   20.27 :	  4287c2:       push   %rbp
    5.41 :	  4287c3:       mov    %rsp,%rbp
   36.49 :	  4287c6:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
   11.49 :	  4287ca:       mov    -0x8(%rbp),%rax
   14.86 :	  4287ce:       pop    %rbp
   11.49 :	  4287cf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (118 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d1a <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
   13.56 :	  427d1a:       push   %rbp
    0.00 :	  427d1b:       mov    %rsp,%rbp
   22.03 :	  427d1e:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    0.00 :	  427d22:       mov    -0x8(%rbp),%rax
    2.54 :	  427d26:       mov    (%rax),%rax
   20.34 :	  427d29:       lea    0x10(%rax),%rdx
    9.32 :	  427d2d:       mov    -0x8(%rbp),%rax
    3.39 :	  427d31:       mov    %rdx,(%rax)
         :	        return *this;
    8.47 :	  427d34:       mov    -0x8(%rbp),%rax
         :	      }
   11.02 :	  427d38:       pop    %rbp
    9.32 :	  427d39:       retq
 Percent |	Source code & Disassembly of main for cycles:u (105 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041eb2a <operator new(unsigned long, void*)>:
         :	_ZnwmPv():
         :	void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
         :	  __attribute__((__externally_visible__));
         :
         :	// Default placement versions of operator new.
         :	inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :	{ return __p; }
   20.95 :	  41eb2a:       push   %rbp
    2.86 :	  41eb2b:       mov    %rsp,%rbp
   16.19 :	  41eb2e:       mov    %rdi,-0x8(%rbp)
    9.52 :	  41eb32:       mov    %rsi,-0x10(%rbp)
    7.62 :	  41eb36:       mov    -0x10(%rbp),%rax
   35.24 :	  41eb3a:       pop    %rbp
    7.62 :	  41eb3b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (95 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430682 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
         :	_ZSt18generate_canonicalIdLm53ESt26linear_congruential_engineImLm16807ELm0ELm2147483647EEET_RT1_():
         :	    }
         :
         :	  template<typename _RealType, size_t __bits,
         :	           typename _UniformRandomNumberGenerator>
         :	    _RealType
         :	    generate_canonical(_UniformRandomNumberGenerator& __urng)
    1.05 :	  430682:       push   %rbp
    0.00 :	  430683:       mov    %rsp,%rbp
    0.00 :	  430686:       push   %rbx
    2.11 :	  430687:       sub    $0xa8,%rsp
    0.00 :	  43068e:       mov    %rdi,-0x78(%rbp)
         :	    {
         :	      const size_t __b
         :	        = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
         :	                   __bits);
    0.00 :	  430692:       movq   $0x35,-0x68(%rbp)
    1.05 :	  43069a:       movq   $0x35,-0x60(%rbp)
    0.00 :	  4306a2:       lea    -0x68(%rbp),%rdx
    0.00 :	  4306a6:       lea    -0x60(%rbp),%rax
    0.00 :	  4306aa:       mov    %rdx,%rsi
    1.05 :	  4306ad:       mov    %rax,%rdi
    0.00 :	  4306b0:       callq  427ae8 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    1.05 :	  4306b5:       mov    (%rax),%rax
    0.00 :	  4306b8:       mov    %rax,-0x30(%rbp)
         :	      const long double __r = static_cast<long double>(__urng.max())
         :	                            - static_cast<long double>(__urng.min()) + 1.0L;
    0.00 :	  4306bc:       callq  430677 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::max()>
    0.00 :	  4306c1:       mov    %rax,-0x88(%rbp)
    1.05 :	  4306c8:       fildll -0x88(%rbp)
    0.00 :	  4306ce:       fstpt  -0xa0(%rbp)
    0.00 :	  4306d4:       test   %rax,%rax
    0.00 :	  4306d7:       jns    4306ed <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x6b>
    0.00 :	  4306d9:       fldt   0x35c1(%rip)        # 433ca0 <std::ignore+0x1be>
    0.00 :	  4306df:       fldt   -0xa0(%rbp)
    0.00 :	  4306e5:       faddp  %st,%st(1)
    0.00 :	  4306e7:       fstpt  -0xa0(%rbp)
    0.00 :	  4306ed:       callq  43066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>
    0.00 :	  4306f2:       mov    %rax,-0x88(%rbp)
    0.00 :	  4306f9:       fildll -0x88(%rbp)
    1.05 :	  4306ff:       test   %rax,%rax
    0.00 :	  430702:       jns    43070c <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x8a>
    0.00 :	  430704:       fldt   0x3596(%rip)        # 433ca0 <std::ignore+0x1be>
    0.00 :	  43070a:       faddp  %st,%st(1)
    0.00 :	  43070c:       fldt   -0xa0(%rbp)
    2.11 :	  430712:       fsubp  %st,%st(1)
    0.00 :	  430714:       fld1
    1.05 :	  430716:       faddp  %st,%st(1)
    0.00 :	  430718:       fstpt  -0x40(%rbp)
         :	      const size_t __log2r = std::log(__r) / std::log(2.0L);
    5.26 :	  43071b:       mov    -0x40(%rbp),%rax
    1.05 :	  43071f:       mov    -0x38(%rbp),%edx
   11.58 :	  430722:       mov    %rax,(%rsp)
    0.00 :	  430726:       mov    %edx,0x8(%rsp)
    1.05 :	  43072a:       callq  41eb4a <std::log(long double)>
    0.00 :	  43072f:       fstpt  -0xa0(%rbp)
    0.00 :	  430735:       movabs $0x8000000000000000,%rax
    0.00 :	  43073f:       mov    $0x4000,%edx
    0.00 :	  430744:       mov    %rax,(%rsp)
    0.00 :	  430748:       mov    %edx,0x8(%rsp)
    0.00 :	  43074c:       callq  41eb4a <std::log(long double)>
    0.00 :	  430751:       fldt   -0xa0(%rbp)
    0.00 :	  430757:       fdivp  %st,%st(1)
    1.05 :	  430759:       fldt   0x3551(%rip)        # 433cb0 <std::ignore+0x1ce>
    1.05 :	  43075f:       fxch   %st(1)
    0.00 :	  430761:       fucomi %st(1),%st
    3.16 :	  430763:       fstp   %st(1)
    0.00 :	  430765:       jae    43076c <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0xea>
    1.05 :	  430767:       fisttpll -0x48(%rbp)
    0.00 :	  43076a:       jmp    430785 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x103>
    0.00 :	  43076c:       fldt   0x353e(%rip)        # 433cb0 <std::ignore+0x1ce>
    0.00 :	  430772:       fsubrp %st,%st(1)
    0.00 :	  430774:       fisttpll -0x48(%rbp)
    0.00 :	  430777:       movabs $0x8000000000000000,%rax
    0.00 :	  430781:       xor    %rax,-0x48(%rbp)
    0.00 :	  430785:       mov    -0x48(%rbp),%rax
    2.11 :	  430789:       mov    %rax,-0x48(%rbp)
         :	      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
    0.00 :	  43078d:       mov    -0x48(%rbp),%rax
    2.11 :	  430791:       mov    -0x30(%rbp),%rdx
    0.00 :	  430795:       add    %rdx,%rax
    1.05 :	  430798:       sub    $0x1,%rax
    0.00 :	  43079c:       mov    $0x0,%edx
    0.00 :	  4307a1:       divq   -0x48(%rbp)
   24.21 :	  4307a5:       mov    %rax,-0x58(%rbp)
    0.00 :	  4307a9:       movq   $0x1,-0x50(%rbp)
    0.00 :	  4307b1:       lea    -0x58(%rbp),%rdx
    0.00 :	  4307b5:       lea    -0x50(%rbp),%rax
    0.00 :	  4307b9:       mov    %rdx,%rsi
    0.00 :	  4307bc:       mov    %rax,%rdi
    0.00 :	  4307bf:       callq  425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    1.05 :	  4307c4:       mov    (%rax),%rax
    0.00 :	  4307c7:       mov    %rax,-0x18(%rbp)
         :	      _RealType __sum = _RealType(0);
    0.00 :	  4307cb:       mov    $0x0,%eax
    0.00 :	  4307d0:       mov    %rax,-0x20(%rbp)
         :	      _RealType __tmp = _RealType(1);
    1.05 :	  4307d4:       movabs $0x3ff0000000000000,%rax
    0.00 :	  4307de:       mov    %rax,-0x28(%rbp)
         :	      for (; __k != 0; --__k)
    0.00 :	  4307e2:       jmp    430842 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x1c0>
         :	        {
         :	          __sum += _RealType(__urng() - __urng.min()) * __tmp;
    1.05 :	  4307e4:       mov    -0x78(%rbp),%rax
    0.00 :	  4307e8:       mov    %rax,%rdi
    0.00 :	  4307eb:       callq  430f58 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>
    0.00 :	  4307f0:       mov    %rax,%rbx
    0.00 :	  4307f3:       callq  43066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>
    0.00 :	  4307f8:       sub    %rax,%rbx
    1.05 :	  4307fb:       mov    %rbx,%rax
    2.11 :	  4307fe:       test   %rax,%rax
    0.00 :	  430801:       js     43080a <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x188>
    0.00 :	  430803:       vcvtsi2sd %rax,%xmm0,%xmm0
    2.11 :	  430808:       jmp    43081f <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x19d>
    0.00 :	  43080a:       mov    %rax,%rdx
    0.00 :	  43080d:       shr    %rdx
    0.00 :	  430810:       and    $0x1,%eax
    0.00 :	  430813:       or     %rax,%rdx
    0.00 :	  430816:       vcvtsi2sd %rdx,%xmm0,%xmm0
    0.00 :	  43081b:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  43081f:       vmulsd -0x28(%rbp),%xmm0,%xmm0
    0.00 :	  430824:       vmovsd -0x20(%rbp),%xmm1
    0.00 :	  430829:       vaddsd %xmm0,%xmm1,%xmm0
    2.11 :	  43082d:       vmovsd %xmm0,-0x20(%rbp)
         :	          __tmp *= __r;
    0.00 :	  430832:       fldl   -0x28(%rbp)
    0.00 :	  430835:       fldt   -0x40(%rbp)
    1.05 :	  430838:       fmulp  %st,%st(1)
    0.00 :	  43083a:       fstpl  -0x28(%rbp)
         :	      for (; __k != 0; --__k)
    1.05 :	  43083d:       subq   $0x1,-0x18(%rbp)
    1.05 :	  430842:       cmpq   $0x0,-0x18(%rbp)
    0.00 :	  430847:       jne    4307e4 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x162>
         :	        }
         :	      return __sum / __tmp;
    0.00 :	  430849:       vmovsd -0x20(%rbp),%xmm0
    0.00 :	  43084e:       vdivsd -0x28(%rbp),%xmm0,%xmm0
   13.68 :	  430853:       vmovsd %xmm0,-0xa0(%rbp)
    0.00 :	  43085b:       mov    -0xa0(%rbp),%rax
         :	    }
    2.11 :	  430862:       mov    %rax,-0xa0(%rbp)
    0.00 :	  430869:       vmovsd -0xa0(%rbp),%xmm0
    2.11 :	  430871:       add    $0xa8,%rsp
    0.00 :	  430878:       pop    %rbx
    0.00 :	  430879:       pop    %rbp
    2.11 :	  43087a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (88 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429a79 <approxChol(LLMatOrd)>:
         :	_Z10approxChol8LLMatOrd():
         :
         :	    colspace = c;
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
         :	}
         :
         :	LDLinv approxChol(LLMatOrd a) {
    0.00 :	  429a79:       push   %rbp
    0.00 :	  429a7a:       mov    %rsp,%rbp
    0.00 :	  429a7d:       push   %rbx
    0.00 :	  429a7e:       sub    $0x1f8,%rsp
    0.00 :	  429a85:       mov    %rdi,-0x1e8(%rbp)
    0.00 :	  429a8c:       mov    %rsi,-0x1f0(%rbp)
         :	    auto n = a.n;
    0.00 :	  429a93:       mov    -0x1f0(%rbp),%rax
    0.00 :	  429a9a:       mov    (%rax),%rax
    0.00 :	  429a9d:       mov    %rax,-0x50(%rbp)
         :
         :	    // need to make custom one without col info later
         :	    LDLinv ldli(a);
    0.00 :	  429aa1:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429aa8:       lea    -0x110(%rbp),%rax
    0.00 :	  429aaf:       mov    %rdx,%rsi
    0.00 :	  429ab2:       mov    %rax,%rdi
    0.00 :	  429ab5:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.00 :	  429aba:       lea    -0x110(%rbp),%rdx
    0.00 :	  429ac1:       mov    -0x1e8(%rbp),%rax
    0.00 :	  429ac8:       mov    %rdx,%rsi
    0.00 :	  429acb:       mov    %rax,%rdi
    0.00 :	  429ace:       callq  42cdda <LDLinv::LDLinv(LLMatOrd)>
    0.00 :	  429ad3:       lea    -0x110(%rbp),%rax
    0.00 :	  429ada:       mov    %rax,%rdi
    0.00 :	  429add:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	    Tind ldli_row_ptr = 0;
    0.00 :	  429ae2:       movl   $0x0,-0x14(%rbp)
         :
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  429ae9:       lea    -0xd1(%rbp),%rax
    0.00 :	  429af0:       mov    %rax,%rdi
    0.00 :	  429af3:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  429af8:       mov    $0x0,%eax
    0.00 :	  429afd:       mov    %rax,-0xd0(%rbp)
    0.00 :	  429b04:       mov    -0x50(%rbp),%rsi
    0.00 :	  429b08:       lea    -0xd1(%rbp),%rcx
    0.00 :	  429b0f:       lea    -0xd0(%rbp),%rdx
    0.00 :	  429b16:       lea    -0x130(%rbp),%rax
    0.00 :	  429b1d:       mov    %rax,%rdi
    0.00 :	  429b20:       callq  41fd00 <std::vector<double, std::allocator<double> >::vector(unsigned long, double const&, std::allocator<double> const&)>
    0.00 :	  429b25:       lea    -0xd1(%rbp),%rax
    0.00 :	  429b2c:       mov    %rax,%rdi
    0.00 :	  429b2f:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  429b34:       lea    -0xc2(%rbp),%rax
    0.00 :	  429b3b:       mov    %rax,%rdi
    0.00 :	  429b3e:       callq  42d618 <std::allocator<LLcol>::allocator()>
    0.00 :	  429b43:       mov    -0x50(%rbp),%rcx
    0.00 :	  429b47:       lea    -0xc2(%rbp),%rdx
    0.00 :	  429b4e:       lea    -0x150(%rbp),%rax
    0.00 :	  429b55:       mov    %rcx,%rsi
    0.00 :	  429b58:       mov    %rax,%rdi
    0.00 :	  429b5b:       callq  42d64c <std::vector<LLcol, std::allocator<LLcol> >::vector(unsigned long, std::allocator<LLcol> const&)>
    0.00 :	  429b60:       lea    -0xc2(%rbp),%rax
    0.00 :	  429b67:       mov    %rax,%rdi
    0.00 :	  429b6a:       callq  42d632 <std::allocator<LLcol>::~allocator()>
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  429b6f:       lea    -0xc1(%rbp),%rax
    0.00 :	  429b76:       mov    %rax,%rdi
    0.00 :	  429b79:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  429b7e:       mov    -0x50(%rbp),%rcx
    0.00 :	  429b82:       lea    -0xc1(%rbp),%rdx
    0.00 :	  429b89:       lea    -0x170(%rbp),%rax
    0.00 :	  429b90:       mov    %rcx,%rsi
    0.00 :	  429b93:       mov    %rax,%rdi
    0.00 :	  429b96:       callq  42d6ae <std::vector<double, std::allocator<double> >::vector(unsigned long, std::allocator<double> const&)>
    0.00 :	  429b9b:       lea    -0xc1(%rbp),%rax
    0.00 :	  429ba2:       mov    %rax,%rdi
    0.00 :	  429ba5:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    // random engine and distribution
         :	    std::default_random_engine engine;
    0.00 :	  429baa:       lea    -0x180(%rbp),%rax
    0.00 :	  429bb1:       mov    $0x1,%esi
    0.00 :	  429bb6:       mov    %rax,%rdi
    0.00 :	  429bb9:       callq  42d710 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
         :	    std::uniform_real_distribution<Tval> u(0.0, 1.0);
    0.00 :	  429bbe:       lea    -0x190(%rbp),%rax
    0.00 :	  429bc5:       vmovsd 0xa0ab(%rip),%xmm1        # 433c78 <std::ignore+0x196>
    0.00 :	  429bcd:       vxorpd %xmm0,%xmm0,%xmm0
    0.00 :	  429bd1:       mov    %rax,%rdi
    0.00 :	  429bd4:       callq  42d736 <std::uniform_real_distribution<double>::uniform_real_distribution(double, double)>
         :
         :
         :	    for (long i = 0; i <= n-2; i++) {
    0.00 :	  429bd9:       movq   $0x0,-0x20(%rbp)
    0.00 :	  429be1:       jmpq   42a18c <approxChol(LLMatOrd)+0x713>
         :
         :	        ldli.col[i] = i;
    0.00 :	  429be6:       mov    -0x20(%rbp),%rdx
    0.00 :	  429bea:       mov    -0x1e8(%rbp),%rax
    0.00 :	  429bf1:       mov    %rdx,%rsi
    0.00 :	  429bf4:       mov    %rax,%rdi
    0.00 :	  429bf7:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429bfc:       mov    -0x20(%rbp),%rdx
    0.00 :	  429c00:       mov    %edx,(%rax)
         :	        ldli.colptr[i] = ldli_row_ptr;
    1.14 :	  429c02:       mov    -0x20(%rbp),%rax
    0.00 :	  429c06:       mov    -0x1e8(%rbp),%rdx
    0.00 :	  429c0d:       add    $0x18,%rdx
    0.00 :	  429c11:       mov    %rax,%rsi
    0.00 :	  429c14:       mov    %rdx,%rdi
    0.00 :	  429c17:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429c1c:       mov    -0x14(%rbp),%edx
    0.00 :	  429c1f:       mov    %edx,(%rax)
         :
         :	        int len = get_ll_col(a, i, colspace);
    0.00 :	  429c21:       mov    -0x20(%rbp),%rax
    0.00 :	  429c25:       mov    %eax,%ebx
    0.00 :	  429c27:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429c2e:       lea    -0xc0(%rbp),%rax
    0.00 :	  429c35:       mov    %rdx,%rsi
    0.00 :	  429c38:       mov    %rax,%rdi
    0.00 :	  429c3b:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.00 :	  429c40:       lea    -0x150(%rbp),%rdx
    0.00 :	  429c47:       lea    -0xc0(%rbp),%rax
    0.00 :	  429c4e:       mov    %ebx,%esi
    0.00 :	  429c50:       mov    %rax,%rdi
    0.00 :	  429c53:       callq  429632 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)>
    0.00 :	  429c58:       mov    %eax,-0x54(%rbp)
    0.00 :	  429c5b:       lea    -0xc0(%rbp),%rax
    0.00 :	  429c62:       mov    %rax,%rdi
    0.00 :	  429c65:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	        len = compressCol(colspace, len);
    0.00 :	  429c6a:       mov    -0x54(%rbp),%edx
    0.00 :	  429c6d:       lea    -0x150(%rbp),%rax
    0.00 :	  429c74:       mov    %edx,%esi
    0.00 :	  429c76:       mov    %rax,%rdi
    0.00 :	  429c79:       callq  429790 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)>
    0.00 :	  429c7e:       mov    %eax,-0x54(%rbp)
         :	        // flop count: sort LLcol len*log(len)?
         :
         :	        Tval csum = 0;
    0.00 :	  429c81:       mov    $0x0,%eax
    0.00 :	  429c86:       mov    %rax,-0x28(%rbp)
         :	        for (int ii = 0; ii < len; ii++) {
    0.00 :	  429c8a:       movl   $0x0,-0x2c(%rbp)
    0.00 :	  429c91:       jmp    429ce4 <approxChol(LLMatOrd)+0x26b>
         :	            csum += colspace[ii].cval;
    0.00 :	  429c93:       mov    -0x2c(%rbp),%eax
    0.00 :	  429c96:       movslq %eax,%rdx
    0.00 :	  429c99:       lea    -0x150(%rbp),%rax
    0.00 :	  429ca0:       mov    %rdx,%rsi
    0.00 :	  429ca3:       mov    %rax,%rdi
    0.00 :	  429ca6:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429cab:       vmovsd 0x8(%rax),%xmm0
    2.27 :	  429cb0:       vmovsd -0x28(%rbp),%xmm1
    0.00 :	  429cb5:       vaddsd %xmm0,%xmm1,%xmm0
    3.41 :	  429cb9:       vmovsd %xmm0,-0x28(%rbp)
         :	            // flop count: 1 add
         :	            cumspace[ii] = csum;
    0.00 :	  429cbe:       mov    -0x2c(%rbp),%eax
    0.00 :	  429cc1:       movslq %eax,%rdx
    0.00 :	  429cc4:       lea    -0x170(%rbp),%rax
    1.14 :	  429ccb:       mov    %rdx,%rsi
    2.27 :	  429cce:       mov    %rax,%rdi
    0.00 :	  429cd1:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  429cd6:       mov    %rax,%rdx
    1.14 :	  429cd9:       mov    -0x28(%rbp),%rax
    0.00 :	  429cdd:       mov    %rax,(%rdx)
         :	        for (int ii = 0; ii < len; ii++) {
    0.00 :	  429ce0:       addl   $0x1,-0x2c(%rbp)
    3.41 :	  429ce4:       mov    -0x2c(%rbp),%eax
    0.00 :	  429ce7:       cmp    -0x54(%rbp),%eax
    0.00 :	  429cea:       jl     429c93 <approxChol(LLMatOrd)+0x21a>
         :	        }
         :	        Tval wdeg = csum;
    1.14 :	  429cec:       mov    -0x28(%rbp),%rax
    0.00 :	  429cf0:       mov    %rax,-0x38(%rbp)
         :
         :	        Tval colScale = 1;
    0.00 :	  429cf4:       movabs $0x3ff0000000000000,%rax
    0.00 :	  429cfe:       mov    %rax,-0x40(%rbp)
         :
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    0.00 :	  429d02:       movl   $0x0,-0x44(%rbp)
    0.00 :	  429d09:       jmpq   42a0bb <approxChol(LLMatOrd)+0x642>
         :
         :	            LLcol llcol = colspace[joffset];
    6.82 :	  429d0e:       mov    -0x44(%rbp),%eax
    0.00 :	  429d11:       movslq %eax,%rdx
    0.00 :	  429d14:       lea    -0x150(%rbp),%rax
    0.00 :	  429d1b:       mov    %rdx,%rsi
    1.14 :	  429d1e:       mov    %rax,%rdi
    0.00 :	  429d21:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429d26:       mov    0x8(%rax),%rdx
    1.14 :	  429d2a:       mov    (%rax),%rax
    1.14 :	  429d2d:       mov    %rax,-0x1c0(%rbp)
    0.00 :	  429d34:       mov    %rdx,-0x1b8(%rbp)
         :	            Tval w = llcol.cval * colScale;
    0.00 :	  429d3b:       vmovsd -0x1b8(%rbp),%xmm0
    2.27 :	  429d43:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    3.41 :	  429d48:       vmovsd %xmm0,-0x60(%rbp)
         :	            Tind j = llcol.row;
    1.14 :	  429d4d:       mov    -0x1c0(%rbp),%eax
    0.00 :	  429d53:       mov    %eax,-0x1c4(%rbp)
         :
         :	            Tval f = w/wdeg;
    0.00 :	  429d59:       vmovsd -0x60(%rbp),%xmm0
    2.27 :	  429d5e:       vdivsd -0x38(%rbp),%xmm0,%xmm0
   10.23 :	  429d63:       vmovsd %xmm0,-0x1d0(%rbp)
         :	            // flop count: 1 mul
         :
         :	            Tval r = u(engine);
    0.00 :	  429d6b:       lea    -0x180(%rbp),%rdx
    0.00 :	  429d72:       lea    -0x190(%rbp),%rax
    0.00 :	  429d79:       mov    %rdx,%rsi
    0.00 :	  429d7c:       mov    %rax,%rdi
    1.14 :	  429d7f:       callq  42d774 <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    0.00 :	  429d84:       vmovsd %xmm0,-0x1f8(%rbp)
    0.00 :	  429d8c:       mov    -0x1f8(%rbp),%rax
    1.14 :	  429d93:       mov    %rax,-0x1d8(%rbp)
         :	            r = r * (csum - cumspace[joffset]) + cumspace[joffset];
    2.27 :	  429d9a:       mov    -0x44(%rbp),%eax
    0.00 :	  429d9d:       movslq %eax,%rdx
    0.00 :	  429da0:       lea    -0x170(%rbp),%rax
    0.00 :	  429da7:       mov    %rdx,%rsi
    0.00 :	  429daa:       mov    %rax,%rdi
    0.00 :	  429dad:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  429db2:       vmovsd (%rax),%xmm1
    0.00 :	  429db6:       vmovsd -0x28(%rbp),%xmm0
    0.00 :	  429dbb:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  429dbf:       vmovsd -0x1d8(%rbp),%xmm1
    0.00 :	  429dc7:       vmulsd %xmm1,%xmm0,%xmm2
    2.27 :	  429dcb:       vmovsd %xmm2,-0x1f8(%rbp)
    1.14 :	  429dd3:       mov    -0x44(%rbp),%eax
    0.00 :	  429dd6:       movslq %eax,%rdx
    0.00 :	  429dd9:       lea    -0x170(%rbp),%rax
    0.00 :	  429de0:       mov    %rdx,%rsi
    0.00 :	  429de3:       mov    %rax,%rdi
    0.00 :	  429de6:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  429deb:       vmovsd (%rax),%xmm0
    2.27 :	  429def:       vaddsd -0x1f8(%rbp),%xmm0,%xmm0
    0.00 :	  429df7:       vmovsd %xmm0,-0x1d8(%rbp)
         :	            // flop count: 1 mul 2 add
         :
         :	            auto cumspace_last = cumspace.begin();
    1.14 :	  429dff:       lea    -0x170(%rbp),%rax
    0.00 :	  429e06:       mov    %rax,%rdi
    0.00 :	  429e09:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.00 :	  429e0e:       mov    %rax,-0x1e0(%rbp)
         :	            std::advance(cumspace_last, len);
    1.14 :	  429e15:       mov    -0x54(%rbp),%edx
    0.00 :	  429e18:       lea    -0x1e0(%rbp),%rax
    0.00 :	  429e1f:       mov    %edx,%esi
    0.00 :	  429e21:       mov    %rax,%rdi
    1.14 :	  429e24:       callq  42d7af <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)>
         :	            int koff = std::distance(cumspace.begin(), std::lower_bound(cumspace.begin(), cumspace_last, r));
    0.00 :	  429e29:       lea    -0x170(%rbp),%rax
    0.00 :	  429e30:       mov    %rax,%rdi
    0.00 :	  429e33:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.00 :	  429e38:       lea    -0x1d8(%rbp),%rdx
    0.00 :	  429e3f:       mov    -0x1e0(%rbp),%rcx
    0.00 :	  429e46:       mov    %rcx,%rsi
    0.00 :	  429e49:       mov    %rax,%rdi
    1.14 :	  429e4c:       callq  42d7fb <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)>
    0.00 :	  429e51:       mov    %rax,%rbx
    0.00 :	  429e54:       lea    -0x170(%rbp),%rax
    0.00 :	  429e5b:       mov    %rax,%rdi
    0.00 :	  429e5e:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    1.14 :	  429e63:       mov    %rbx,%rsi
    0.00 :	  429e66:       mov    %rax,%rdi
    0.00 :	  429e69:       callq  42d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>
    0.00 :	  429e6e:       mov    %eax,-0x64(%rbp)
         :	            // flop count: len?
         :
         :	            Tind k = colspace[koff].row;
    0.00 :	  429e71:       mov    -0x64(%rbp),%eax
    0.00 :	  429e74:       movslq %eax,%rdx
    1.14 :	  429e77:       lea    -0x150(%rbp),%rax
    0.00 :	  429e7e:       mov    %rdx,%rsi
    0.00 :	  429e81:       mov    %rax,%rdi
    0.00 :	  429e84:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429e89:       mov    (%rax),%eax
    3.41 :	  429e8b:       mov    %eax,-0x68(%rbp)
         :
         :	            Tval newEdgeVal = w*(1-f);
    0.00 :	  429e8e:       vmovsd -0x1d0(%rbp),%xmm1
    0.00 :	  429e96:       vmovsd 0x9dda(%rip),%xmm0        # 433c78 <std::ignore+0x196>
    0.00 :	  429e9e:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  429ea2:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.00 :	  429ea7:       vmovsd %xmm0,-0x70(%rbp)
         :	            // flop count: 1 mul 1 add
         :
         :
         :	            // create edge (j,k) with newEdgeVal
         :	            // do it by reassigning ll
         :	            if (j < k) {    // put it in col j
    0.00 :	  429eac:       mov    -0x1c4(%rbp),%eax
    0.00 :	  429eb2:       cmp    -0x68(%rbp),%eax
    0.00 :	  429eb5:       jge    429f79 <approxChol(LLMatOrd)+0x500>
         :	                Tind jhead = a.cols[j];
    1.14 :	  429ebb:       mov    -0x1c4(%rbp),%eax
    1.14 :	  429ec1:       cltq
    0.00 :	  429ec3:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429eca:       add    $0x8,%rdx
    0.00 :	  429ece:       mov    %rax,%rsi
    0.00 :	  429ed1:       mov    %rdx,%rdi
    0.00 :	  429ed4:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429ed9:       mov    (%rax),%eax
    1.14 :	  429edb:       mov    %eax,-0x74(%rbp)
         :	                a.lles[llcol.ptr].row = k;
    0.00 :	  429ede:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429ee4:       cltq
    0.00 :	  429ee6:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429eed:       add    $0x20,%rdx
    0.00 :	  429ef1:       mov    %rax,%rsi
    0.00 :	  429ef4:       mov    %rdx,%rdi
    0.00 :	  429ef7:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429efc:       mov    -0x68(%rbp),%edx
    0.00 :	  429eff:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = jhead;
    2.27 :	  429f01:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f07:       cltq
    0.00 :	  429f09:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f10:       add    $0x20,%rdx
    0.00 :	  429f14:       mov    %rax,%rsi
    0.00 :	  429f17:       mov    %rdx,%rdi
    0.00 :	  429f1a:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429f1f:       mov    -0x74(%rbp),%edx
    0.00 :	  429f22:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    0.00 :	  429f25:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f2b:       cltq
    0.00 :	  429f2d:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f34:       add    $0x20,%rdx
    0.00 :	  429f38:       mov    %rax,%rsi
    0.00 :	  429f3b:       mov    %rdx,%rdi
    0.00 :	  429f3e:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429f43:       mov    %rax,%rdx
    0.00 :	  429f46:       mov    -0x70(%rbp),%rax
    1.14 :	  429f4a:       mov    %rax,0x8(%rdx)
         :	                a.cols[j] = llcol.ptr;
    1.14 :	  429f4e:       mov    -0x1c4(%rbp),%eax
    0.00 :	  429f54:       cltq
    0.00 :	  429f56:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f5d:       add    $0x8,%rdx
    1.14 :	  429f61:       mov    %rax,%rsi
    0.00 :	  429f64:       mov    %rdx,%rdi
    0.00 :	  429f67:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429f6c:       mov    -0x1bc(%rbp),%edx
    0.00 :	  429f72:       mov    %edx,(%rax)
    3.41 :	  429f74:       jmpq   42a02f <approxChol(LLMatOrd)+0x5b6>
         :	            } else {        // put it in col k
         :	                Tind khead = a.cols[k];
    1.14 :	  429f79:       mov    -0x68(%rbp),%eax
    0.00 :	  429f7c:       cltq
    0.00 :	  429f7e:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f85:       add    $0x8,%rdx
    0.00 :	  429f89:       mov    %rax,%rsi
    0.00 :	  429f8c:       mov    %rdx,%rdi
    1.14 :	  429f8f:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429f94:       mov    (%rax),%eax
    1.14 :	  429f96:       mov    %eax,-0x78(%rbp)
         :	                a.lles[llcol.ptr].row = j;
    0.00 :	  429f99:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f9f:       cltq
    0.00 :	  429fa1:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429fa8:       add    $0x20,%rdx
    0.00 :	  429fac:       mov    %rax,%rsi
    0.00 :	  429faf:       mov    %rdx,%rdi
    0.00 :	  429fb2:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429fb7:       mov    -0x1c4(%rbp),%edx
    0.00 :	  429fbd:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = khead;
    0.00 :	  429fbf:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429fc5:       cltq
    0.00 :	  429fc7:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429fce:       add    $0x20,%rdx
    0.00 :	  429fd2:       mov    %rax,%rsi
    0.00 :	  429fd5:       mov    %rdx,%rdi
    0.00 :	  429fd8:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    1.14 :	  429fdd:       mov    -0x78(%rbp),%edx
    0.00 :	  429fe0:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    1.14 :	  429fe3:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429fe9:       cltq
    0.00 :	  429feb:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429ff2:       add    $0x20,%rdx
    1.14 :	  429ff6:       mov    %rax,%rsi
    0.00 :	  429ff9:       mov    %rdx,%rdi
    0.00 :	  429ffc:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    1.14 :	  42a001:       mov    %rax,%rdx
    0.00 :	  42a004:       mov    -0x70(%rbp),%rax
    0.00 :	  42a008:       mov    %rax,0x8(%rdx)
         :	                a.cols[k] = llcol.ptr;
    0.00 :	  42a00c:       mov    -0x68(%rbp),%eax
    0.00 :	  42a00f:       cltq
    0.00 :	  42a011:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  42a018:       add    $0x8,%rdx
    0.00 :	  42a01c:       mov    %rax,%rsi
    0.00 :	  42a01f:       mov    %rdx,%rdi
    0.00 :	  42a022:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42a027:       mov    -0x1bc(%rbp),%edx
    0.00 :	  42a02d:       mov    %edx,(%rax)
         :	            }
         :
         :	            colScale *= 1 - f;
    2.27 :	  42a02f:       vmovsd -0x1d0(%rbp),%xmm1
    0.00 :	  42a037:       vmovsd 0x9c39(%rip),%xmm0        # 433c78 <std::ignore+0x196>
    0.00 :	  42a03f:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  42a043:       vmovsd -0x40(%rbp),%xmm1
    1.14 :	  42a048:       vmulsd %xmm0,%xmm1,%xmm0
    0.00 :	  42a04c:       vmovsd %xmm0,-0x40(%rbp)
         :	            wdeg = wdeg - 2*w + w*f;
    1.14 :	  42a051:       vmovsd -0x60(%rbp),%xmm0
    0.00 :	  42a056:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  42a05a:       vmovsd -0x38(%rbp),%xmm1
    0.00 :	  42a05f:       vsubsd %xmm0,%xmm1,%xmm1
    0.00 :	  42a063:       vmovsd -0x1d0(%rbp),%xmm0
    1.14 :	  42a06b:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.00 :	  42a070:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  42a074:       vmovsd %xmm0,-0x38(%rbp)
         :	            // flop count: 3 mul 3 add
         :
         :	            ldli.rowval.push_back(j);
    0.00 :	  42a079:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a080:       lea    0x30(%rax),%rdx
    0.00 :	  42a084:       lea    -0x1c4(%rbp),%rax
    0.00 :	  42a08b:       mov    %rax,%rsi
    0.00 :	  42a08e:       mov    %rdx,%rdi
    0.00 :	  42a091:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	            ldli.fval.push_back(f);
    1.14 :	  42a096:       mov    -0x1e8(%rbp),%rax
    1.14 :	  42a09d:       lea    0x48(%rax),%rdx
    0.00 :	  42a0a1:       lea    -0x1d0(%rbp),%rax
    0.00 :	  42a0a8:       mov    %rax,%rsi
    1.14 :	  42a0ab:       mov    %rdx,%rdi
    0.00 :	  42a0ae:       callq  42d904 <std::vector<double, std::allocator<double> >::push_back(double const&)>
         :	            ldli_row_ptr += 1;
    0.00 :	  42a0b3:       addl   $0x1,-0x14(%rbp)
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    1.14 :	  42a0b7:       addl   $0x1,-0x44(%rbp)
    0.00 :	  42a0bb:       mov    -0x54(%rbp),%eax
    0.00 :	  42a0be:       sub    $0x2,%eax
    0.00 :	  42a0c1:       cmp    -0x44(%rbp),%eax
    0.00 :	  42a0c4:       jge    429d0e <approxChol(LLMatOrd)+0x295>
         :	        }
         :
         :	        LLcol llcol = colspace[len-1];
    0.00 :	  42a0ca:       mov    -0x54(%rbp),%eax
    1.14 :	  42a0cd:       sub    $0x1,%eax
    0.00 :	  42a0d0:       movslq %eax,%rdx
    0.00 :	  42a0d3:       lea    -0x150(%rbp),%rax
    0.00 :	  42a0da:       mov    %rdx,%rsi
    0.00 :	  42a0dd:       mov    %rax,%rdi
    0.00 :	  42a0e0:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a0e5:       mov    0x8(%rax),%rdx
    0.00 :	  42a0e9:       mov    (%rax),%rax
    0.00 :	  42a0ec:       mov    %rax,-0x1a0(%rbp)
    0.00 :	  42a0f3:       mov    %rdx,-0x198(%rbp)
         :	        Tval w = llcol.cval * colScale;
    1.14 :	  42a0fa:       vmovsd -0x198(%rbp),%xmm0
    0.00 :	  42a102:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    0.00 :	  42a107:       vmovsd %xmm0,-0x80(%rbp)
         :	        // flop count: 1 mul
         :	        Tind j = llcol.row;
    1.14 :	  42a10c:       mov    -0x1a0(%rbp),%eax
    0.00 :	  42a112:       mov    %eax,-0x1a4(%rbp)
         :
         :	        ldli.rowval.push_back(j);
    0.00 :	  42a118:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a11f:       lea    0x30(%rax),%rdx
    0.00 :	  42a123:       lea    -0x1a4(%rbp),%rax
    0.00 :	  42a12a:       mov    %rax,%rsi
    0.00 :	  42a12d:       mov    %rdx,%rdi
    0.00 :	  42a130:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	        ldli.fval.push_back(1);
    0.00 :	  42a135:       movabs $0x3ff0000000000000,%rax
    0.00 :	  42a13f:       mov    %rax,-0x88(%rbp)
    0.00 :	  42a146:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a14d:       lea    0x48(%rax),%rdx
    0.00 :	  42a151:       lea    -0x88(%rbp),%rax
    0.00 :	  42a158:       mov    %rax,%rsi
    0.00 :	  42a15b:       mov    %rdx,%rdi
    0.00 :	  42a15e:       callq  42d97e <std::vector<double, std::allocator<double> >::push_back(double&&)>
         :	        ldli_row_ptr += 1;
    0.00 :	  42a163:       addl   $0x1,-0x14(%rbp)
         :
         :	        d[i] = w;
    0.00 :	  42a167:       mov    -0x20(%rbp),%rdx
    0.00 :	  42a16b:       lea    -0x130(%rbp),%rax
    0.00 :	  42a172:       mov    %rdx,%rsi
    0.00 :	  42a175:       mov    %rax,%rdi
    0.00 :	  42a178:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  42a17d:       mov    %rax,%rdx
    0.00 :	  42a180:       mov    -0x80(%rbp),%rax
    0.00 :	  42a184:       mov    %rax,(%rdx)
         :	    for (long i = 0; i <= n-2; i++) {
    0.00 :	  42a187:       addq   $0x1,-0x20(%rbp)
    0.00 :	  42a18c:       mov    -0x50(%rbp),%rax
    0.00 :	  42a190:       sub    $0x2,%rax
    0.00 :	  42a194:       cmp    -0x20(%rbp),%rax
    0.00 :	  42a198:       jge    429be6 <approxChol(LLMatOrd)+0x16d>
         :	    }
         :
         :	    ldli.colptr[n-1] = ldli_row_ptr;
    0.00 :	  42a19e:       mov    -0x50(%rbp),%rax
    0.00 :	  42a1a2:       sub    $0x1,%rax
    0.00 :	  42a1a6:       mov    -0x1e8(%rbp),%rdx
    0.00 :	  42a1ad:       add    $0x18,%rdx
    0.00 :	  42a1b1:       mov    %rax,%rsi
    0.00 :	  42a1b4:       mov    %rdx,%rdi
    0.00 :	  42a1b7:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42a1bc:       mov    -0x14(%rbp),%edx
    0.00 :	  42a1bf:       mov    %edx,(%rax)
         :	    ldli.d = d;
    0.00 :	  42a1c1:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a1c8:       lea    0x60(%rax),%rdx
    0.00 :	  42a1cc:       lea    -0x130(%rbp),%rax
    0.00 :	  42a1d3:       mov    %rax,%rsi
    0.00 :	  42a1d6:       mov    %rdx,%rdi
    0.00 :	  42a1d9:       callq  42d9ba <std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> > const&)>
         :
         :	    return ldli;
    0.00 :	  42a1de:       nop
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42a1df:       lea    -0x170(%rbp),%rax
    0.00 :	  42a1e6:       mov    %rax,%rdi
    0.00 :	  42a1e9:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42a1ee:       lea    -0x150(%rbp),%rax
    0.00 :	  42a1f5:       mov    %rax,%rdi
    0.00 :	  42a1f8:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42a1fd:       lea    -0x130(%rbp),%rax
    0.00 :	  42a204:       mov    %rax,%rdi
    0.00 :	  42a207:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  42a20c:       jmpq   42a2d3 <approxChol(LLMatOrd)+0x85a>
    0.00 :	  42a211:       mov    %rax,%rbx
    0.00 :	  42a214:       lea    -0x110(%rbp),%rax
    0.00 :	  42a21b:       mov    %rax,%rdi
    0.00 :	  42a21e:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42a223:       mov    %rbx,%rax
    0.00 :	  42a226:       jmpq   42a2cb <approxChol(LLMatOrd)+0x852>
    0.00 :	  42a22b:       mov    %rax,%rbx
    0.00 :	  42a22e:       lea    -0xd1(%rbp),%rax
    0.00 :	  42a235:       mov    %rax,%rdi
    0.00 :	  42a238:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42a23d:       jmp    42a2b7 <approxChol(LLMatOrd)+0x83e>
    0.00 :	  42a23f:       mov    %rax,%rbx
    0.00 :	  42a242:       lea    -0xc2(%rbp),%rax
    0.00 :	  42a249:       mov    %rax,%rdi
    0.00 :	  42a24c:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42a251:       jmp    42a2a8 <approxChol(LLMatOrd)+0x82f>
    0.00 :	  42a253:       mov    %rax,%rbx
    0.00 :	  42a256:       lea    -0xc1(%rbp),%rax
    0.00 :	  42a25d:       mov    %rax,%rdi
    0.00 :	  42a260:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42a265:       jmp    42a299 <approxChol(LLMatOrd)+0x820>
    0.00 :	  42a267:       mov    %rax,%rbx
         :	        int len = get_ll_col(a, i, colspace);
    0.00 :	  42a26a:       lea    -0xc0(%rbp),%rax
    0.00 :	  42a271:       mov    %rax,%rdi
    0.00 :	  42a274:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42a279:       mov    %rbx,%rax
    0.00 :	  42a27c:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a27e:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a280:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a282:       mov    %rax,%rbx
    0.00 :	  42a285:       jmp    42a28a <approxChol(LLMatOrd)+0x811>
    0.00 :	  42a287:       mov    %rax,%rbx
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42a28a:       lea    -0x170(%rbp),%rax
    0.00 :	  42a291:       mov    %rax,%rdi
    0.00 :	  42a294:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42a299:       lea    -0x150(%rbp),%rax
    0.00 :	  42a2a0:       mov    %rax,%rdi
    0.00 :	  42a2a3:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42a2a8:       lea    -0x130(%rbp),%rax
    0.00 :	  42a2af:       mov    %rax,%rdi
    0.00 :	  42a2b2:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  42a2b7:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a2be:       mov    %rax,%rdi
    0.00 :	  42a2c1:       callq  41f9b8 <LDLinv::~LDLinv()>
    0.00 :	  42a2c6:       mov    %rbx,%rax
    0.00 :	  42a2c9:       jmp    42a2cb <approxChol(LLMatOrd)+0x852>
    0.00 :	  42a2cb:       mov    %rax,%rdi
    0.00 :	  42a2ce:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  42a2d3:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a2da:       add    $0x1f8,%rsp
    0.00 :	  42a2e1:       pop    %rbx
    0.00 :	  42a2e2:       pop    %rbp
    0.00 :	  42a2e3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (74 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d7fb <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)>:
         :	_ZSt11lower_boundIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET_S7_S7_RKT0_():
         :	   *                  @a val.
         :	   *  @ingroup binary_search_algorithms
         :	  */
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    _ForwardIterator
         :	    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    0.00 :	  42d7fb:       push   %rbp
    0.00 :	  42d7fc:       mov    %rsp,%rbp
    1.35 :	  42d7ff:       sub    $0x40,%rsp
    0.00 :	  42d803:       mov    %rdi,-0x30(%rbp)
    0.00 :	  42d807:       mov    %rsi,-0x40(%rbp)
    1.35 :	  42d80b:       mov    %rdx,-0x38(%rbp)
         :	      // concept requirements
         :	      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
         :	      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)
         :	      __glibcxx_requires_partitioned_lower(__first, __last, __val);
         :
         :	      _DistanceType __len = std::distance(__first, __last);
    0.00 :	  42d80f:       mov    -0x40(%rbp),%rdx
    1.35 :	  42d813:       mov    -0x30(%rbp),%rax
    0.00 :	  42d817:       mov    %rdx,%rsi
    1.35 :	  42d81a:       mov    %rax,%rdi
    0.00 :	  42d81d:       callq  42d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>
    0.00 :	  42d822:       mov    %rax,-0x8(%rbp)
         :
         :	      while (__len > 0)
    0.00 :	  42d826:       jmp    42d8a5 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xaa>
         :	        {
         :	          _DistanceType __half = __len >> 1;
    5.41 :	  42d828:       mov    -0x8(%rbp),%rax
    1.35 :	  42d82c:       sar    %rax
    0.00 :	  42d82f:       mov    %rax,-0x10(%rbp)
         :	          _ForwardIterator __middle = __first;
    2.70 :	  42d833:       mov    -0x30(%rbp),%rax
    5.41 :	  42d837:       mov    %rax,-0x20(%rbp)
         :	          std::advance(__middle, __half);
    0.00 :	  42d83b:       mov    -0x10(%rbp),%rdx
    6.76 :	  42d83f:       lea    -0x20(%rbp),%rax
    0.00 :	  42d843:       mov    %rdx,%rsi
    0.00 :	  42d846:       mov    %rax,%rdi
    0.00 :	  42d849:       callq  42e9c4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long)>
         :	          if (*__middle < __val)
    0.00 :	  42d84e:       lea    -0x20(%rbp),%rax
    0.00 :	  42d852:       mov    %rax,%rdi
    1.35 :	  42d855:       callq  420636 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator*() const>
    0.00 :	  42d85a:       vmovsd (%rax),%xmm1
    9.46 :	  42d85e:       mov    -0x38(%rbp),%rax
    0.00 :	  42d862:       vmovsd (%rax),%xmm0
    1.35 :	  42d866:       vucomisd %xmm1,%xmm0
   12.16 :	  42d86a:       seta   %al
    4.05 :	  42d86d:       test   %al,%al
    0.00 :	  42d86f:       je     42d89d <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xa2>
         :	            {
         :	              __first = __middle;
    1.35 :	  42d871:       mov    -0x20(%rbp),%rax
    2.70 :	  42d875:       mov    %rax,-0x30(%rbp)
         :	              ++__first;
    1.35 :	  42d879:       lea    -0x30(%rbp),%rax
    0.00 :	  42d87d:       mov    %rax,%rdi
    1.35 :	  42d880:       callq  420616 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator++()>
         :	              __len = __len - __half - 1;
    0.00 :	  42d885:       mov    -0x10(%rbp),%rax
    0.00 :	  42d889:       mov    -0x8(%rbp),%rdx
    0.00 :	  42d88d:       sub    %rax,%rdx
    0.00 :	  42d890:       mov    %rdx,%rax
    0.00 :	  42d893:       sub    $0x1,%rax
    0.00 :	  42d897:       mov    %rax,-0x8(%rbp)
    4.05 :	  42d89b:       jmp    42d8a5 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xaa>
         :	            }
         :	          else
         :	            __len = __half;
   12.16 :	  42d89d:       mov    -0x10(%rbp),%rax
    6.76 :	  42d8a1:       mov    %rax,-0x8(%rbp)
         :	      while (__len > 0)
    4.05 :	  42d8a5:       cmpq   $0x0,-0x8(%rbp)
    2.70 :	  42d8aa:       jg     42d828 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0x2d>
         :	        }
         :	      return __first;
    5.41 :	  42d8b0:       mov    -0x30(%rbp),%rax
    2.70 :	  42d8b4:       jmp    42d8be <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xc3>
    0.00 :	  42d8b6:       mov    %rax,%rdi
    0.00 :	  42d8b9:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  42d8be:       leaveq
    0.00 :	  42d8bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (70 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d59 <LLord const& std::forward<LLord const&>(std::remove_reference<LLord const&>::type&)>:
         :	_ZSt7forwardIRK5LLordEOT_RNSt16remove_referenceIS3_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   34.29 :	  427d59:       push   %rbp
    0.00 :	  427d5a:       mov    %rsp,%rbp
    5.71 :	  427d5d:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
   28.57 :	  427d61:       mov    -0x8(%rbp),%rax
   30.00 :	  427d65:       pop    %rbp
    1.43 :	  427d66:       retq
 Percent |	Source code & Disassembly of main for cycles:u (67 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __unguarded_linear_insert(_RandomAccessIterator __last,
    0.00 :	  430390:       push   %rbp
    0.00 :	  430391:       mov    %rsp,%rbp
    0.00 :	  430394:       push   %rbx
    0.00 :	  430395:       sub    $0x38,%rsp
    0.00 :	  430399:       mov    %rdi,-0x40(%rbp)
    0.00 :	  43039d:       mov    %rsi,-0x38(%rbp)
         :	                              _Compare __comp)
         :	    {
         :	      typename iterator_traits<_RandomAccessIterator>::value_type
         :	        __val = _GLIBCXX_MOVE(*__last);
    0.00 :	  4303a1:       lea    -0x40(%rbp),%rax
    0.00 :	  4303a5:       mov    %rax,%rdi
    0.00 :	  4303a8:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4303ad:       mov    %rax,%rdi
    0.00 :	  4303b0:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  4303b5:       mov    0x8(%rax),%rdx
    2.99 :	  4303b9:       mov    (%rax),%rax
    0.00 :	  4303bc:       mov    %rax,-0x20(%rbp)
    1.49 :	  4303c0:       mov    %rdx,-0x18(%rbp)
         :	      _RandomAccessIterator __next = __last;
    0.00 :	  4303c4:       mov    -0x40(%rbp),%rax
    0.00 :	  4303c8:       mov    %rax,-0x30(%rbp)
         :	      --__next;
    0.00 :	  4303cc:       lea    -0x30(%rbp),%rax
    0.00 :	  4303d0:       mov    %rax,%rdi
    2.99 :	  4303d3:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	      while (__comp(__val, *__next))
    0.00 :	  4303d8:       jmp    43041f <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x8f>
         :	        {
         :	          *__last = _GLIBCXX_MOVE(*__next);
   10.45 :	  4303da:       lea    -0x40(%rbp),%rax
    2.99 :	  4303de:       mov    %rax,%rdi
    0.00 :	  4303e1:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    7.46 :	  4303e6:       mov    %rax,%rbx
    0.00 :	  4303e9:       lea    -0x30(%rbp),%rax
    0.00 :	  4303ed:       mov    %rax,%rdi
    0.00 :	  4303f0:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4303f5:       mov    %rax,%rdi
    0.00 :	  4303f8:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  4303fd:       mov    0x8(%rax),%rdx
   10.45 :	  430401:       mov    (%rax),%rax
    2.99 :	  430404:       mov    %rax,(%rbx)
    2.99 :	  430407:       mov    %rdx,0x8(%rbx)
         :	          __last = __next;
    1.49 :	  43040b:       mov    -0x30(%rbp),%rax
    1.49 :	  43040f:       mov    %rax,-0x40(%rbp)
         :	          --__next;
    0.00 :	  430413:       lea    -0x30(%rbp),%rax
    0.00 :	  430417:       mov    %rax,%rdi
    1.49 :	  43041a:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	      while (__comp(__val, *__next))
    2.99 :	  43041f:       lea    -0x30(%rbp),%rax
    4.48 :	  430423:       mov    %rax,%rdi
    0.00 :	  430426:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  43042b:       mov    %rax,%rcx
    1.49 :	  43042e:       lea    -0x20(%rbp),%rdx
    1.49 :	  430432:       mov    -0x38(%rbp),%rax
    1.49 :	  430436:       mov    %rcx,%rsi
    0.00 :	  430439:       mov    %rdx,%rdi
    1.49 :	  43043c:       callq  *%rax
    0.00 :	  43043e:       test   %al,%al
    7.46 :	  430440:       jne    4303da <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x4a>
         :	        }
         :	      *__last = _GLIBCXX_MOVE(__val);
   10.45 :	  430442:       lea    -0x40(%rbp),%rax
    5.97 :	  430446:       mov    %rax,%rdi
    0.00 :	  430449:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  43044e:       mov    %rax,%rbx
    0.00 :	  430451:       lea    -0x20(%rbp),%rax
    2.99 :	  430455:       mov    %rax,%rdi
    0.00 :	  430458:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    1.49 :	  43045d:       mov    0x8(%rax),%rdx
    4.48 :	  430461:       mov    (%rax),%rax
    0.00 :	  430464:       mov    %rax,(%rbx)
    2.99 :	  430467:       mov    %rdx,0x8(%rbx)
    1.49 :	  43046b:       jmp    430475 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xe5>
    0.00 :	  43046d:       mov    %rax,%rdi
    0.00 :	  430470:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  430475:       add    $0x38,%rsp
    0.00 :	  430479:       pop    %rbx
    0.00 :	  43047a:       pop    %rbp
    0.00 :	  43047b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (65 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d48 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
   46.15 :	  427d48:       push   %rbp
    0.00 :	  427d49:       mov    %rsp,%rbp
    0.00 :	  427d4c:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
   44.62 :	  427d50:       mov    -0x8(%rbp),%rax
    3.08 :	  427d54:       mov    (%rax),%rax
    6.15 :	  427d57:       pop    %rbp
    0.00 :	  427d58:       retq
 Percent |	Source code & Disassembly of main for cycles:u (65 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d3a <LLord* std::__addressof<LLord>(LLord&)>:
         :	_ZSt11__addressofI5LLordEPT_RS1_():
         :	   *  @brief Same as C++11 std::addressof
         :	   *  @ingroup utilities
         :	   */
         :	  template<typename _Tp>
         :	    inline _Tp*
         :	    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   49.23 :	  427d3a:       push   %rbp
    3.08 :	  427d3b:       mov    %rsp,%rbp
   32.31 :	  427d3e:       mov    %rdi,-0x8(%rbp)
         :	    {
         :	      return reinterpret_cast<_Tp*>
         :	        (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    3.08 :	  427d42:       mov    -0x8(%rbp),%rax
         :	    }
   12.31 :	  427d46:       pop    %rbp
    0.00 :	  427d47:       retq
 Percent |	Source code & Disassembly of main for cycles:u (56 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
   16.07 :	  430210:       push   %rbp
   12.50 :	  430211:       mov    %rsp,%rbp
    7.14 :	  430214:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
   14.29 :	  430218:       mov    -0x8(%rbp),%rax
    8.93 :	  43021c:       mov    (%rax),%rax
   33.93 :	  43021f:       pop    %rbp
    7.14 :	  430220:       retq
 Percent |	Source code & Disassembly of main for cycles:u (41 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    9.76 :	  42d0b6:       push   %rbp
   14.63 :	  42d0b7:       mov    %rsp,%rbp
   12.20 :	  42d0ba:       mov    %rdi,-0x8(%rbp)
    2.44 :	  42d0be:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
   17.07 :	  42d0c2:       mov    -0x8(%rbp),%rax
    2.44 :	  42d0c6:       mov    (%rax),%rax
   14.63 :	  42d0c9:       mov    -0x10(%rbp),%rdx
    7.32 :	  42d0cd:       shl    $0x4,%rdx
    9.76 :	  42d0d1:       add    %rdx,%rax
    7.32 :	  42d0d4:       pop    %rbp
    2.44 :	  42d0d5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (37 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042974a <cmp_row(LLcol const&, LLcol const&)>:
         :	_Z7cmp_rowRK5LLcolS1_():
         :	    }
         :
         :	    return len;
         :	}
         :
         :	bool cmp_row(const LLcol &a, const LLcol &b) {
    5.41 :	  42974a:       push   %rbp
    8.11 :	  42974b:       mov    %rsp,%rbp
    5.41 :	  42974e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  429752:       mov    %rsi,-0x10(%rbp)
         :	    return a.row < b.row;
    2.70 :	  429756:       mov    -0x8(%rbp),%rax
    8.11 :	  42975a:       mov    (%rax),%edx
   27.03 :	  42975c:       mov    -0x10(%rbp),%rax
    5.41 :	  429760:       mov    (%rax),%eax
   21.62 :	  429762:       cmp    %eax,%edx
   10.81 :	  429764:       setl   %al
         :	}
    5.41 :	  429767:       pop    %rbp
    0.00 :	  429768:       retq
 Percent |	Source code & Disassembly of main for cycles:u (36 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429790 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)>:
         :	_Z11compressColRSt6vectorI5LLcolSaIS0_EEi():
         :
         :	bool cmp_val(const LLcol &a, const LLcol &b) {
         :	    return a.cval < b.cval;
         :	}
         :
         :	Tind compressCol(std::vector<LLcol> &colspace, int len) {
    0.00 :	  429790:       push   %rbp
    0.00 :	  429791:       mov    %rsp,%rbp
    0.00 :	  429794:       push   %rbx
    0.00 :	  429795:       sub    $0x78,%rsp
    0.00 :	  429799:       mov    %rdi,-0x78(%rbp)
    0.00 :	  42979d:       mov    %esi,-0x7c(%rbp)
         :
         :	    // sort colspace ? DY: just checked, yes!
         :	    std::sort(colspace.begin(), colspace.begin() + len, cmp_row);
    0.00 :	  4297a0:       mov    -0x7c(%rbp),%eax
    0.00 :	  4297a3:       cltq
    0.00 :	  4297a5:       mov    %rax,-0x58(%rbp)
    0.00 :	  4297a9:       mov    -0x78(%rbp),%rax
    0.00 :	  4297ad:       mov    %rax,%rdi
    0.00 :	  4297b0:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  4297b5:       mov    %rax,-0x50(%rbp)
    0.00 :	  4297b9:       lea    -0x58(%rbp),%rdx
    0.00 :	  4297bd:       lea    -0x50(%rbp),%rax
    0.00 :	  4297c1:       mov    %rdx,%rsi
    0.00 :	  4297c4:       mov    %rax,%rdi
    0.00 :	  4297c7:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  4297cc:       mov    %rax,%rbx
    0.00 :	  4297cf:       mov    -0x78(%rbp),%rax
    0.00 :	  4297d3:       mov    %rax,%rdi
    0.00 :	  4297d6:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  4297db:       mov    $0x42974a,%edx
    0.00 :	  4297e0:       mov    %rbx,%rsi
    0.00 :	  4297e3:       mov    %rax,%rdi
    0.00 :	  4297e6:       callq  42d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :
         :	    std::vector<LLcol> c = colspace;
    0.00 :	  4297eb:       mov    -0x78(%rbp),%rdx
    0.00 :	  4297ef:       lea    -0x70(%rbp),%rax
    0.00 :	  4297f3:       mov    %rdx,%rsi
    0.00 :	  4297f6:       mov    %rax,%rdi
    0.00 :	  4297f9:       callq  42d1bc <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :
         :	    Tind ptr = -1;
    0.00 :	  4297fe:       movl   $0xffffffff,-0x14(%rbp)
         :	    Tind currow = c[0].row;     // julia index start from 1?
    2.78 :	  429805:       lea    -0x70(%rbp),%rax
    0.00 :	  429809:       mov    $0x0,%esi
    0.00 :	  42980e:       mov    %rax,%rdi
    0.00 :	  429811:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429816:       mov    (%rax),%eax
    0.00 :	  429818:       mov    %eax,-0x18(%rbp)
         :	    Tval curval = c[0].cval;
    0.00 :	  42981b:       lea    -0x70(%rbp),%rax
    0.00 :	  42981f:       mov    $0x0,%esi
    0.00 :	  429824:       mov    %rax,%rdi
    0.00 :	  429827:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42982c:       mov    0x8(%rax),%rax
    0.00 :	  429830:       mov    %rax,-0x20(%rbp)
         :	    Tind curptr = c[0].ptr;
    0.00 :	  429834:       lea    -0x70(%rbp),%rax
    0.00 :	  429838:       mov    $0x0,%esi
    0.00 :	  42983d:       mov    %rax,%rdi
    0.00 :	  429840:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429845:       mov    0x4(%rax),%eax
    0.00 :	  429848:       mov    %eax,-0x24(%rbp)
         :
         :	    // not consider inbounds
         :	    for (int i = 1; i < len; i++) {
    0.00 :	  42984b:       movl   $0x1,-0x28(%rbp)
    0.00 :	  429852:       jmpq   429955 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x1c5>
         :
         :	        if (c[i].row != currow) {
    2.78 :	  429857:       mov    -0x28(%rbp),%eax
    0.00 :	  42985a:       movslq %eax,%rdx
    0.00 :	  42985d:       lea    -0x70(%rbp),%rax
    0.00 :	  429861:       mov    %rdx,%rsi
    2.78 :	  429864:       mov    %rax,%rdi
    0.00 :	  429867:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    2.78 :	  42986c:       mov    (%rax),%eax
    8.33 :	  42986e:       cmp    -0x18(%rbp),%eax
    0.00 :	  429871:       setne  %al
    0.00 :	  429874:       test   %al,%al
    0.00 :	  429876:       je     429929 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x199>
         :
         :	            ptr += 1;
    5.56 :	  42987c:       addl   $0x1,-0x14(%rbp)
         :	            c[ptr].row = currow;
    0.00 :	  429880:       mov    -0x14(%rbp),%eax
    0.00 :	  429883:       movslq %eax,%rdx
    0.00 :	  429886:       lea    -0x70(%rbp),%rax
    0.00 :	  42988a:       mov    %rdx,%rsi
    0.00 :	  42988d:       mov    %rax,%rdi
    0.00 :	  429890:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429895:       mov    -0x18(%rbp),%edx
    0.00 :	  429898:       mov    %edx,(%rax)
         :	            c[ptr].cval = curval;
    8.33 :	  42989a:       mov    -0x14(%rbp),%eax
    0.00 :	  42989d:       movslq %eax,%rdx
    0.00 :	  4298a0:       lea    -0x70(%rbp),%rax
    0.00 :	  4298a4:       mov    %rdx,%rsi
    0.00 :	  4298a7:       mov    %rax,%rdi
    0.00 :	  4298aa:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4298af:       mov    %rax,%rdx
    2.78 :	  4298b2:       mov    -0x20(%rbp),%rax
    0.00 :	  4298b6:       mov    %rax,0x8(%rdx)
         :	            c[ptr].ptr = curptr;
    2.78 :	  4298ba:       mov    -0x14(%rbp),%eax
    0.00 :	  4298bd:       movslq %eax,%rdx
    0.00 :	  4298c0:       lea    -0x70(%rbp),%rax
    0.00 :	  4298c4:       mov    %rdx,%rsi
    0.00 :	  4298c7:       mov    %rax,%rdi
    0.00 :	  4298ca:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4298cf:       mov    -0x24(%rbp),%edx
    0.00 :	  4298d2:       mov    %edx,0x4(%rax)
         :
         :	            currow = c[i].row;
    0.00 :	  4298d5:       mov    -0x28(%rbp),%eax
    0.00 :	  4298d8:       movslq %eax,%rdx
    2.78 :	  4298db:       lea    -0x70(%rbp),%rax
    0.00 :	  4298df:       mov    %rdx,%rsi
    0.00 :	  4298e2:       mov    %rax,%rdi
    0.00 :	  4298e5:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4298ea:       mov    (%rax),%eax
    5.56 :	  4298ec:       mov    %eax,-0x18(%rbp)
         :	            curval = c[i].cval;
    2.78 :	  4298ef:       mov    -0x28(%rbp),%eax
    0.00 :	  4298f2:       movslq %eax,%rdx
    0.00 :	  4298f5:       lea    -0x70(%rbp),%rax
    0.00 :	  4298f9:       mov    %rdx,%rsi
    0.00 :	  4298fc:       mov    %rax,%rdi
    0.00 :	  4298ff:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429904:       mov    0x8(%rax),%rax
    2.78 :	  429908:       mov    %rax,-0x20(%rbp)
         :	            curptr = c[i].ptr;
    0.00 :	  42990c:       mov    -0x28(%rbp),%eax
    0.00 :	  42990f:       movslq %eax,%rdx
    0.00 :	  429912:       lea    -0x70(%rbp),%rax
    0.00 :	  429916:       mov    %rdx,%rsi
    0.00 :	  429919:       mov    %rax,%rdi
    0.00 :	  42991c:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429921:       mov    0x4(%rax),%eax
    2.78 :	  429924:       mov    %eax,-0x24(%rbp)
    0.00 :	  429927:       jmp    429951 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x1c1>
         :
         :	        } else {
         :
         :	            curval += c[i].cval;
   11.11 :	  429929:       mov    -0x28(%rbp),%eax
    2.78 :	  42992c:       movslq %eax,%rdx
    0.00 :	  42992f:       lea    -0x70(%rbp),%rax
    0.00 :	  429933:       mov    %rdx,%rsi
    0.00 :	  429936:       mov    %rax,%rdi
    0.00 :	  429939:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42993e:       vmovsd 0x8(%rax),%xmm0
    0.00 :	  429943:       vmovsd -0x20(%rbp),%xmm1
    0.00 :	  429948:       vaddsd %xmm0,%xmm1,%xmm0
    2.78 :	  42994c:       vmovsd %xmm0,-0x20(%rbp)
         :	    for (int i = 1; i < len; i++) {
    0.00 :	  429951:       addl   $0x1,-0x28(%rbp)
    5.56 :	  429955:       mov    -0x28(%rbp),%eax
    0.00 :	  429958:       cmp    -0x7c(%rbp),%eax
    0.00 :	  42995b:       jl     429857 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0xc7>
         :
         :	        }
         :	    }
         :
         :	    // emit the last row
         :	    ptr += 1;
    2.78 :	  429961:       addl   $0x1,-0x14(%rbp)
         :	    c[ptr].row = currow;
    2.78 :	  429965:       mov    -0x14(%rbp),%eax
    2.78 :	  429968:       movslq %eax,%rdx
    0.00 :	  42996b:       lea    -0x70(%rbp),%rax
    0.00 :	  42996f:       mov    %rdx,%rsi
    0.00 :	  429972:       mov    %rax,%rdi
    0.00 :	  429975:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42997a:       mov    -0x18(%rbp),%edx
    0.00 :	  42997d:       mov    %edx,(%rax)
         :	    c[ptr].cval = curval;
    2.78 :	  42997f:       mov    -0x14(%rbp),%eax
    2.78 :	  429982:       movslq %eax,%rdx
    0.00 :	  429985:       lea    -0x70(%rbp),%rax
    0.00 :	  429989:       mov    %rdx,%rsi
    0.00 :	  42998c:       mov    %rax,%rdi
    0.00 :	  42998f:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429994:       mov    %rax,%rdx
    0.00 :	  429997:       mov    -0x20(%rbp),%rax
    0.00 :	  42999b:       mov    %rax,0x8(%rdx)
         :	    c[ptr].ptr = curptr;
    0.00 :	  42999f:       mov    -0x14(%rbp),%eax
    0.00 :	  4299a2:       movslq %eax,%rdx
    0.00 :	  4299a5:       lea    -0x70(%rbp),%rax
    0.00 :	  4299a9:       mov    %rdx,%rsi
    0.00 :	  4299ac:       mov    %rax,%rdi
    0.00 :	  4299af:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4299b4:       mov    -0x24(%rbp),%edx
    0.00 :	  4299b7:       mov    %edx,0x4(%rax)
         :
         :	    std::sort(c.begin(), c.begin() + ptr + 1, cmp_val);
    0.00 :	  4299ba:       movq   $0x1,-0x48(%rbp)
    0.00 :	  4299c2:       mov    -0x14(%rbp),%eax
    0.00 :	  4299c5:       cltq
    2.78 :	  4299c7:       mov    %rax,-0x38(%rbp)
    0.00 :	  4299cb:       lea    -0x70(%rbp),%rax
    0.00 :	  4299cf:       mov    %rax,%rdi
    0.00 :	  4299d2:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  4299d7:       mov    %rax,-0x30(%rbp)
    0.00 :	  4299db:       lea    -0x38(%rbp),%rdx
    0.00 :	  4299df:       lea    -0x30(%rbp),%rax
    0.00 :	  4299e3:       mov    %rdx,%rsi
    0.00 :	  4299e6:       mov    %rax,%rdi
    0.00 :	  4299e9:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  4299ee:       mov    %rax,-0x40(%rbp)
    0.00 :	  4299f2:       lea    -0x48(%rbp),%rdx
    0.00 :	  4299f6:       lea    -0x40(%rbp),%rax
    0.00 :	  4299fa:       mov    %rdx,%rsi
    0.00 :	  4299fd:       mov    %rax,%rdi
    0.00 :	  429a00:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  429a05:       mov    %rax,%rbx
    0.00 :	  429a08:       lea    -0x70(%rbp),%rax
    0.00 :	  429a0c:       mov    %rax,%rdi
    0.00 :	  429a0f:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  429a14:       mov    $0x429769,%edx
    0.00 :	  429a19:       mov    %rbx,%rsi
    0.00 :	  429a1c:       mov    %rax,%rdi
    0.00 :	  429a1f:       callq  42d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :
         :	    colspace = c;
    0.00 :	  429a24:       lea    -0x70(%rbp),%rdx
    0.00 :	  429a28:       mov    -0x78(%rbp),%rax
    2.78 :	  429a2c:       mov    %rdx,%rsi
    0.00 :	  429a2f:       mov    %rax,%rdi
    0.00 :	  429a32:       callq  42d302 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
    0.00 :	  429a37:       mov    -0x14(%rbp),%eax
    0.00 :	  429a3a:       lea    0x1(%rax),%ebx
    0.00 :	  429a3d:       lea    -0x70(%rbp),%rax
    0.00 :	  429a41:       mov    %rax,%rdi
    0.00 :	  429a44:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    2.78 :	  429a49:       mov    %ebx,%eax
    0.00 :	  429a4b:       jmp    429a72 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2e2>
    0.00 :	  429a4d:       jmp    429a6a <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2da>
    0.00 :	  429a4f:       jmp    429a51 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2c1>
    0.00 :	  429a51:       mov    %rax,%rbx
    0.00 :	  429a54:       jmp    429a59 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2c9>
    0.00 :	  429a56:       mov    %rax,%rbx
    0.00 :	  429a59:       lea    -0x70(%rbp),%rax
    0.00 :	  429a5d:       mov    %rax,%rdi
    0.00 :	  429a60:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    0.00 :	  429a65:       mov    %rbx,%rax
    0.00 :	  429a68:       jmp    429a6a <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2da>
    0.00 :	  429a6a:       mov    %rax,%rdi
    0.00 :	  429a6d:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  429a72:       add    $0x78,%rsp
    0.00 :	  429a76:       pop    %rbx
    0.00 :	  429a77:       pop    %rbp
    0.00 :	  429a78:       retq
 Percent |	Source code & Disassembly of main for cycles:u (28 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxneIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   10.71 :	  42e1be:       push   %rbp
    0.00 :	  42e1bf:       mov    %rsp,%rbp
    7.14 :	  42e1c2:       push   %rbx
    0.00 :	  42e1c3:       sub    $0x18,%rsp
    3.57 :	  42e1c7:       mov    %rdi,-0x18(%rbp)
    3.57 :	  42e1cb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
    0.00 :	  42e1cf:       mov    -0x18(%rbp),%rax
   10.71 :	  42e1d3:       mov    %rax,%rdi
    0.00 :	  42e1d6:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    3.57 :	  42e1db:       mov    (%rax),%rbx
   35.71 :	  42e1de:       mov    -0x20(%rbp),%rax
    0.00 :	  42e1e2:       mov    %rax,%rdi
    0.00 :	  42e1e5:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  42e1ea:       mov    (%rax),%rax
   21.43 :	  42e1ed:       cmp    %rax,%rbx
    0.00 :	  42e1f0:       setne  %al
    3.57 :	  42e1f3:       add    $0x18,%rsp
    0.00 :	  42e1f7:       pop    %rbx
    0.00 :	  42e1f8:       pop    %rbp
    0.00 :	  42e1f9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (28 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429632 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)>:
         :	_Z10get_ll_col8LLMatOrdiRSt6vectorI5LLcolSaIS1_EE():
         :
         :	        ptr = ll.next;
         :	    }
         :	}
         :
         :	int get_ll_col(LLMatOrd llmat, int i, std::vector<LLcol> &colspace) {
    0.00 :	  429632:       push   %rbp
    0.00 :	  429633:       mov    %rsp,%rbp
    0.00 :	  429636:       push   %rbx
    0.00 :	  429637:       sub    $0x48,%rsp
    0.00 :	  42963b:       mov    %rdi,-0x38(%rbp)
    0.00 :	  42963f:       mov    %esi,-0x3c(%rbp)
    0.00 :	  429642:       mov    %rdx,-0x48(%rbp)
         :
         :	    Tind ptr = llmat.cols[i];
    0.00 :	  429646:       mov    -0x3c(%rbp),%eax
    0.00 :	  429649:       cltq
    0.00 :	  42964b:       mov    -0x38(%rbp),%rdx
    0.00 :	  42964f:       add    $0x8,%rdx
    0.00 :	  429653:       mov    %rax,%rsi
    0.00 :	  429656:       mov    %rdx,%rdi
    0.00 :	  429659:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42965e:       mov    (%rax),%eax
    0.00 :	  429660:       mov    %eax,-0x14(%rbp)
         :	    int len = 0;
    3.57 :	  429663:       movl   $0x0,-0x18(%rbp)
         :
         :	    while (ptr != -1) {
    0.00 :	  42966a:       jmpq   42972c <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xfa>
         :	        LLcol item = {llmat.lles[ptr].row, ptr, llmat.lles[ptr].val};
    0.00 :	  42966f:       mov    -0x14(%rbp),%eax
    3.57 :	  429672:       cltq
    0.00 :	  429674:       mov    -0x38(%rbp),%rdx
    3.57 :	  429678:       add    $0x20,%rdx
    0.00 :	  42967c:       mov    %rax,%rsi
    0.00 :	  42967f:       mov    %rdx,%rdi
    0.00 :	  429682:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429687:       mov    (%rax),%eax
   21.43 :	  429689:       mov    %eax,-0x30(%rbp)
    7.14 :	  42968c:       mov    -0x14(%rbp),%eax
    0.00 :	  42968f:       mov    %eax,-0x2c(%rbp)
    0.00 :	  429692:       mov    -0x14(%rbp),%eax
    0.00 :	  429695:       cltq
    0.00 :	  429697:       mov    -0x38(%rbp),%rdx
    0.00 :	  42969b:       add    $0x20,%rdx
    0.00 :	  42969f:       mov    %rax,%rsi
    0.00 :	  4296a2:       mov    %rdx,%rdi
    3.57 :	  4296a5:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  4296aa:       mov    0x8(%rax),%rax
    0.00 :	  4296ae:       mov    %rax,-0x28(%rbp)
         :
         :	        if (len >= colspace.size()) {
    0.00 :	  4296b2:       mov    -0x18(%rbp),%eax
    0.00 :	  4296b5:       movslq %eax,%rbx
    0.00 :	  4296b8:       mov    -0x48(%rbp),%rax
    0.00 :	  4296bc:       mov    %rax,%rdi
    0.00 :	  4296bf:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  4296c4:       cmp    %rax,%rbx
    0.00 :	  4296c7:       setae  %al
    0.00 :	  4296ca:       test   %al,%al
    0.00 :	  4296cc:       je     4296e3 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xb1>
         :	            colspace.push_back(item);
    0.00 :	  4296ce:       lea    -0x30(%rbp),%rdx
    0.00 :	  4296d2:       mov    -0x48(%rbp),%rax
    0.00 :	  4296d6:       mov    %rdx,%rsi
    0.00 :	  4296d9:       mov    %rax,%rdi
    0.00 :	  4296dc:       callq  42d04a <std::vector<LLcol, std::allocator<LLcol> >::push_back(LLcol const&)>
    0.00 :	  4296e1:       jmp    42970a <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xd8>
         :	        } else {
         :	            colspace[len] = item;
    7.14 :	  4296e3:       mov    -0x18(%rbp),%eax
    0.00 :	  4296e6:       movslq %eax,%rdx
    0.00 :	  4296e9:       mov    -0x48(%rbp),%rax
    0.00 :	  4296ed:       mov    %rdx,%rsi
    0.00 :	  4296f0:       mov    %rax,%rdi
    0.00 :	  4296f3:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4296f8:       mov    %rax,%rcx
    3.57 :	  4296fb:       mov    -0x30(%rbp),%rax
    0.00 :	  4296ff:       mov    -0x28(%rbp),%rdx
    0.00 :	  429703:       mov    %rax,(%rcx)
    0.00 :	  429706:       mov    %rdx,0x8(%rcx)
         :	        }
         :
         :	        len += 1;
    0.00 :	  42970a:       addl   $0x1,-0x18(%rbp)
         :	        ptr = llmat.lles[ptr].next;
    0.00 :	  42970e:       mov    -0x14(%rbp),%eax
    0.00 :	  429711:       cltq
    0.00 :	  429713:       mov    -0x38(%rbp),%rdx
    0.00 :	  429717:       add    $0x20,%rdx
    0.00 :	  42971b:       mov    %rax,%rsi
    0.00 :	  42971e:       mov    %rdx,%rdi
    0.00 :	  429721:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429726:       mov    0x4(%rax),%eax
    7.14 :	  429729:       mov    %eax,-0x14(%rbp)
         :	    while (ptr != -1) {
    0.00 :	  42972c:       cmpl   $0xffffffff,-0x14(%rbp)
   21.43 :	  429730:       jne    42966f <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0x3d>
         :	    }
         :
         :	    return len;
   10.71 :	  429736:       mov    -0x18(%rbp),%eax
    0.00 :	  429739:       jmp    429743 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0x111>
    0.00 :	  42973b:       mov    %rax,%rdi
    0.00 :	  42973e:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  429743:       add    $0x48,%rsp
    3.57 :	  429747:       pop    %rbx
    3.57 :	  429748:       pop    %rbp
    0.00 :	  429749:       retq
 Percent |	Source code & Disassembly of main for cycles:u (27 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e9c4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long)>:
         :	_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElEvRT_T0_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator, typename _Distance>
         :	    inline void
         :	    advance(_InputIterator& __i, _Distance __n)
    3.70 :	  42e9c4:       push   %rbp
    3.70 :	  42e9c5:       mov    %rsp,%rbp
   18.52 :	  42e9c8:       push   %rbx
    3.70 :	  42e9c9:       sub    $0x38,%rsp
    0.00 :	  42e9cd:       mov    %rdi,-0x28(%rbp)
    7.41 :	  42e9d1:       mov    %rsi,-0x30(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __advance
         :	      typename iterator_traits<_InputIterator>::difference_type __d = __n;
    0.00 :	  42e9d5:       mov    -0x30(%rbp),%rax
   22.22 :	  42e9d9:       mov    %rax,-0x18(%rbp)
         :	      std::__advance(__i, __d, std::__iterator_category(__i));
    3.70 :	  42e9dd:       mov    -0x28(%rbp),%rax
    3.70 :	  42e9e1:       mov    %rax,%rdi
    0.00 :	  42e9e4:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.00 :	  42e9e9:       mov    -0x18(%rbp),%rdx
   14.81 :	  42e9ed:       mov    -0x28(%rbp),%rax
    0.00 :	  42e9f1:       mov    %bl,(%rsp)
    0.00 :	  42e9f4:       mov    %rdx,%rsi
    7.41 :	  42e9f7:       mov    %rax,%rdi
    0.00 :	  42e9fa:       callq  42e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>
         :	    }
    3.70 :	  42e9ff:       add    $0x38,%rsp
    7.41 :	  42ea03:       pop    %rbx
    0.00 :	  42ea04:       pop    %rbp
    0.00 :	  42ea05:       retq
 Percent |	Source code & Disassembly of main for cycles:u (24 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429769 <cmp_val(LLcol const&, LLcol const&)>:
         :	_Z7cmp_valRK5LLcolS1_():
         :
         :	bool cmp_row(const LLcol &a, const LLcol &b) {
         :	    return a.row < b.row;
         :	}
         :
         :	bool cmp_val(const LLcol &a, const LLcol &b) {
    0.00 :	  429769:       push   %rbp
    8.33 :	  42976a:       mov    %rsp,%rbp
    0.00 :	  42976d:       mov    %rdi,-0x8(%rbp)
    4.17 :	  429771:       mov    %rsi,-0x10(%rbp)
         :	    return a.cval < b.cval;
    0.00 :	  429775:       mov    -0x8(%rbp),%rax
    0.00 :	  429779:       vmovsd 0x8(%rax),%xmm1
    8.33 :	  42977e:       mov    -0x10(%rbp),%rax
    0.00 :	  429782:       vmovsd 0x8(%rax),%xmm0
   25.00 :	  429787:       vucomisd %xmm1,%xmm0
   45.83 :	  42978b:       seta   %al
         :	}
    8.33 :	  42978e:       pop    %rbp
    0.00 :	  42978f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (20 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f896 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator+=(long const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEpLERKl():
         :	      reference
         :	      operator[](const difference_type& __n) const
         :	      { return _M_current[__n]; }
         :
         :	      __normal_iterator&
         :	      operator+=(const difference_type& __n)
    0.00 :	  42f896:       push   %rbp
   10.00 :	  42f897:       mov    %rsp,%rbp
    0.00 :	  42f89a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f89e:       mov    %rsi,-0x10(%rbp)
         :	      { _M_current += __n; return *this; }
   15.00 :	  42f8a2:       mov    -0x8(%rbp),%rax
   10.00 :	  42f8a6:       mov    (%rax),%rdx
   30.00 :	  42f8a9:       mov    -0x10(%rbp),%rax
    0.00 :	  42f8ad:       mov    (%rax),%rax
   10.00 :	  42f8b0:       shl    $0x3,%rax
    0.00 :	  42f8b4:       add    %rax,%rdx
   10.00 :	  42f8b7:       mov    -0x8(%rbp),%rax
    0.00 :	  42f8bb:       mov    %rdx,(%rax)
   10.00 :	  42f8be:       mov    -0x8(%rbp),%rax
    5.00 :	  42f8c2:       pop    %rbp
    0.00 :	  42f8c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (18 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEmmEv():
         :	      operator++(int)
         :	      { return __normal_iterator(_M_current++); }
         :
         :	      // Bidirectional iterator requirements
         :	      __normal_iterator&
         :	      operator--()
   11.11 :	  430d40:       push   %rbp
   16.67 :	  430d41:       mov    %rsp,%rbp
    5.56 :	  430d44:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        --_M_current;
    5.56 :	  430d48:       mov    -0x8(%rbp),%rax
    5.56 :	  430d4c:       mov    (%rax),%rax
   11.11 :	  430d4f:       lea    -0x10(%rax),%rdx
   16.67 :	  430d53:       mov    -0x8(%rbp),%rax
    0.00 :	  430d57:       mov    %rdx,(%rax)
         :	        return *this;
    5.56 :	  430d5a:       mov    -0x8(%rbp),%rax
         :	      }
   22.22 :	  430d5e:       pop    %rbp
    0.00 :	  430d5f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (17 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   23.53 :	  42f1a6:       push   %rbp
   23.53 :	  42f1a7:       mov    %rsp,%rbp
    5.88 :	  42f1aa:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
   11.76 :	  42f1ae:       mov    -0x8(%rbp),%rax
   35.29 :	  42f1b2:       pop    %rbp
    0.00 :	  42f1b3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (16 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __insertion_sort(_RandomAccessIterator __first,
    0.00 :	  42f304:       push   %rbp
    0.00 :	  42f305:       mov    %rsp,%rbp
    0.00 :	  42f308:       push   %rbx
    0.00 :	  42f309:       sub    $0x58,%rsp
    0.00 :	  42f30d:       mov    %rdi,-0x50(%rbp)
    0.00 :	  42f311:       mov    %rsi,-0x60(%rbp)
    0.00 :	  42f315:       mov    %rdx,-0x58(%rbp)
         :	                     _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      if (__first == __last) return;
    0.00 :	  42f319:       lea    -0x60(%rbp),%rdx
    0.00 :	  42f31d:       lea    -0x50(%rbp),%rax
    0.00 :	  42f321:       mov    %rdx,%rsi
    0.00 :	  42f324:       mov    %rax,%rdi
    0.00 :	  42f327:       callq  4302ee <bool __gnu_cxx::operator==<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42f32c:       test   %al,%al
    0.00 :	  42f32e:       je     42f335 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x31>
    0.00 :	  42f330:       jmpq   42f44c <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x148>
         :
         :	      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    0.00 :	  42f335:       movq   $0x1,-0x20(%rbp)
    0.00 :	  42f33d:       lea    -0x20(%rbp),%rdx
    0.00 :	  42f341:       lea    -0x50(%rbp),%rax
    0.00 :	  42f345:       mov    %rdx,%rsi
    0.00 :	  42f348:       mov    %rax,%rdi
    0.00 :	  42f34b:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42f350:       mov    %rax,-0x30(%rbp)
    0.00 :	  42f354:       jmpq   42f425 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x121>
         :	        {
         :	          if (__comp(*__i, *__first))
   12.50 :	  42f359:       lea    -0x50(%rbp),%rax
    0.00 :	  42f35d:       mov    %rax,%rdi
    0.00 :	  42f360:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    6.25 :	  42f365:       mov    %rax,%rbx
    0.00 :	  42f368:       lea    -0x30(%rbp),%rax
    0.00 :	  42f36c:       mov    %rax,%rdi
    0.00 :	  42f36f:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f374:       mov    %rax,%rdx
    0.00 :	  42f377:       mov    -0x58(%rbp),%rax
    6.25 :	  42f37b:       mov    %rbx,%rsi
    0.00 :	  42f37e:       mov    %rdx,%rdi
    0.00 :	  42f381:       callq  *%rax
    0.00 :	  42f383:       test   %al,%al
    0.00 :	  42f385:       je     42f406 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x102>
         :	            {
         :	              typename iterator_traits<_RandomAccessIterator>::value_type
         :	                __val = _GLIBCXX_MOVE(*__i);
    0.00 :	  42f387:       lea    -0x30(%rbp),%rax
   12.50 :	  42f38b:       mov    %rax,%rdi
    0.00 :	  42f38e:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f393:       mov    %rax,%rdi
    0.00 :	  42f396:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  42f39b:       mov    0x8(%rax),%rdx
    6.25 :	  42f39f:       mov    (%rax),%rax
    0.00 :	  42f3a2:       mov    %rax,-0x40(%rbp)
    0.00 :	  42f3a6:       mov    %rdx,-0x38(%rbp)
         :	              _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
    0.00 :	  42f3aa:       movq   $0x1,-0x18(%rbp)
    0.00 :	  42f3b2:       lea    -0x18(%rbp),%rdx
    0.00 :	  42f3b6:       lea    -0x30(%rbp),%rax
    0.00 :	  42f3ba:       mov    %rdx,%rsi
    0.00 :	  42f3bd:       mov    %rax,%rdi
    0.00 :	  42f3c0:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42f3c5:       mov    %rax,%rdx
    0.00 :	  42f3c8:       mov    -0x30(%rbp),%rcx
    0.00 :	  42f3cc:       mov    -0x50(%rbp),%rax
    0.00 :	  42f3d0:       mov    %rcx,%rsi
    6.25 :	  42f3d3:       mov    %rax,%rdi
    0.00 :	  42f3d6:       callq  43034a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::move_backward<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	              *__first = _GLIBCXX_MOVE(__val);
    0.00 :	  42f3db:       lea    -0x50(%rbp),%rax
    6.25 :	  42f3df:       mov    %rax,%rdi
    0.00 :	  42f3e2:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f3e7:       mov    %rax,%rbx
    6.25 :	  42f3ea:       lea    -0x40(%rbp),%rax
    0.00 :	  42f3ee:       mov    %rax,%rdi
    0.00 :	  42f3f1:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  42f3f6:       mov    0x8(%rax),%rdx
    6.25 :	  42f3fa:       mov    (%rax),%rax
    0.00 :	  42f3fd:       mov    %rax,(%rbx)
    0.00 :	  42f400:       mov    %rdx,0x8(%rbx)
    0.00 :	  42f404:       jmp    42f419 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x115>
         :	            }
         :	          else
         :	            std::__unguarded_linear_insert(__i, __comp);
    0.00 :	  42f406:       mov    -0x58(%rbp),%rdx
    0.00 :	  42f40a:       mov    -0x30(%rbp),%rax
    0.00 :	  42f40e:       mov    %rdx,%rsi
    0.00 :	  42f411:       mov    %rax,%rdi
   12.50 :	  42f414:       callq  430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    0.00 :	  42f419:       lea    -0x30(%rbp),%rax
    0.00 :	  42f41d:       mov    %rax,%rdi
    0.00 :	  42f420:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
    0.00 :	  42f425:       lea    -0x60(%rbp),%rdx
   12.50 :	  42f429:       lea    -0x30(%rbp),%rax
    0.00 :	  42f42d:       mov    %rdx,%rsi
    0.00 :	  42f430:       mov    %rax,%rdi
    0.00 :	  42f433:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42f438:       test   %al,%al
    0.00 :	  42f43a:       jne    42f359 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x55>
    0.00 :	  42f440:       jmp    42f44c <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x148>
    0.00 :	  42f442:       jmp    42f444 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x140>
    0.00 :	  42f444:       mov    %rax,%rdi
    0.00 :	  42f447:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
         :	    }
    0.00 :	  42f44c:       add    $0x58,%rsp
    0.00 :	  42f450:       pop    %rbx
    6.25 :	  42f451:       pop    %rbp
    0.00 :	  42f452:       retq
 Percent |	Source code & Disassembly of main for cycles:u (15 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f8c4 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type __gnu_cxx::operator-<double*, std::vector<double, std::allocator<double> > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>:
         :	_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_():
         :	#endif
         :	    { return __lhs.base() - __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :	    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    0.00 :	  42f8c4:       push   %rbp
    0.00 :	  42f8c5:       mov    %rsp,%rbp
   20.00 :	  42f8c8:       push   %rbx
    6.67 :	  42f8c9:       sub    $0x18,%rsp
   13.33 :	  42f8cd:       mov    %rdi,-0x18(%rbp)
    6.67 :	  42f8d1:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() - __rhs.base(); }
    0.00 :	  42f8d5:       mov    -0x18(%rbp),%rax
    0.00 :	  42f8d9:       mov    %rax,%rdi
    0.00 :	  42f8dc:       callq  4224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>
    0.00 :	  42f8e1:       mov    (%rax),%rax
   33.33 :	  42f8e4:       mov    %rax,%rbx
    0.00 :	  42f8e7:       mov    -0x20(%rbp),%rax
    0.00 :	  42f8eb:       mov    %rax,%rdi
    0.00 :	  42f8ee:       callq  4224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>
    0.00 :	  42f8f3:       mov    (%rax),%rax
   13.33 :	  42f8f6:       sub    %rax,%rbx
    0.00 :	  42f8f9:       mov    %rbx,%rax
    0.00 :	  42f8fc:       sar    $0x3,%rax
    6.67 :	  42f900:       add    $0x18,%rsp
    0.00 :	  42f904:       pop    %rbx
    0.00 :	  42f905:       pop    %rbp
    0.00 :	  42f906:       retq
 Percent |	Source code & Disassembly of main for cycles:u (15 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430221 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES2_PFbRKS2_S9_EET_SC_SC_RKT0_T1_():
         :	    }
         :
         :	  /// This is a helper function...
         :	  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
         :	    _RandomAccessIterator
         :	    __unguarded_partition(_RandomAccessIterator __first,
    0.00 :	  430221:       push   %rbp
    0.00 :	  430222:       mov    %rsp,%rbp
    0.00 :	  430225:       sub    $0x20,%rsp
    0.00 :	  430229:       mov    %rdi,-0x10(%rbp)
    0.00 :	  43022d:       mov    %rsi,-0x20(%rbp)
    0.00 :	  430231:       mov    %rdx,-0x18(%rbp)
    0.00 :	  430235:       mov    %rcx,-0x8(%rbp)
         :	                          _RandomAccessIterator __last,
         :	                          const _Tp& __pivot, _Compare __comp)
         :	    {
         :	      while (true)
         :	        {
         :	          while (__comp(*__first, __pivot))
    0.00 :	  430239:       jmp    430247 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x26>
         :	            ++__first;
    6.67 :	  43023b:       lea    -0x10(%rbp),%rax
   20.00 :	  43023f:       mov    %rax,%rdi
    0.00 :	  430242:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
         :	          while (__comp(*__first, __pivot))
    0.00 :	  430247:       lea    -0x10(%rbp),%rax
    0.00 :	  43024b:       mov    %rax,%rdi
    0.00 :	  43024e:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  430253:       mov    %rax,%rdx
    0.00 :	  430256:       mov    -0x18(%rbp),%rcx
    6.67 :	  43025a:       mov    -0x8(%rbp),%rax
    0.00 :	  43025e:       mov    %rcx,%rsi
    6.67 :	  430261:       mov    %rdx,%rdi
    0.00 :	  430264:       callq  *%rax
    0.00 :	  430266:       test   %al,%al
    0.00 :	  430268:       jne    43023b <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x1a>
         :	          --__last;
    0.00 :	  43026a:       lea    -0x20(%rbp),%rax
    0.00 :	  43026e:       mov    %rax,%rdi
    0.00 :	  430271:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	          while (__comp(__pivot, *__last))
    0.00 :	  430276:       jmp    430284 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x63>
         :	            --__last;
   13.33 :	  430278:       lea    -0x20(%rbp),%rax
    6.67 :	  43027c:       mov    %rax,%rdi
    0.00 :	  43027f:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	          while (__comp(__pivot, *__last))
    0.00 :	  430284:       lea    -0x20(%rbp),%rax
    0.00 :	  430288:       mov    %rax,%rdi
    0.00 :	  43028b:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  430290:       mov    %rax,%rcx
    0.00 :	  430293:       mov    -0x18(%rbp),%rdx
    0.00 :	  430297:       mov    -0x8(%rbp),%rax
    0.00 :	  43029b:       mov    %rcx,%rsi
    0.00 :	  43029e:       mov    %rdx,%rdi
    0.00 :	  4302a1:       callq  *%rax
    0.00 :	  4302a3:       test   %al,%al
    0.00 :	  4302a5:       jne    430278 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x57>
         :	          if (!(__first < __last))
   20.00 :	  4302a7:       lea    -0x20(%rbp),%rdx
    0.00 :	  4302ab:       lea    -0x10(%rbp),%rax
    0.00 :	  4302af:       mov    %rdx,%rsi
    0.00 :	  4302b2:       mov    %rax,%rdi
    0.00 :	  4302b5:       callq  430c3c <bool __gnu_cxx::operator< <LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  4302ba:       xor    $0x1,%eax
    0.00 :	  4302bd:       test   %al,%al
    0.00 :	  4302bf:       je     4302c7 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0xa6>
         :	            return __first;
    6.67 :	  4302c1:       mov    -0x10(%rbp),%rax
    6.67 :	  4302c5:       jmp    4302ec <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0xcb>
         :	          std::iter_swap(__first, __last);
    0.00 :	  4302c7:       mov    -0x20(%rbp),%rdx
    0.00 :	  4302cb:       mov    -0x10(%rbp),%rax
    0.00 :	  4302cf:       mov    %rdx,%rsi
    0.00 :	  4302d2:       mov    %rax,%rdi
    6.67 :	  4302d5:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	          ++__first;
    0.00 :	  4302da:       lea    -0x10(%rbp),%rax
    0.00 :	  4302de:       mov    %rax,%rdi
    0.00 :	  4302e1:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
         :	    __unguarded_partition(_RandomAccessIterator __first,
    0.00 :	  4302e6:       nop
         :	          while (__comp(*__first, __pivot))
    0.00 :	  4302e7:       jmpq   430247 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x26>
         :	        }
         :	    }
    0.00 :	  4302ec:       leaveq
    0.00 :	  4302ed:       retq
 Percent |	Source code & Disassembly of main for cycles:u (15 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>:
         :	_ZNSt6vectorI5LLordSaIS0_EEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    6.67 :	  42cff6:       push   %rbp
    6.67 :	  42cff7:       mov    %rsp,%rbp
   13.33 :	  42cffa:       mov    %rdi,-0x8(%rbp)
    6.67 :	  42cffe:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
    6.67 :	  42d002:       mov    -0x8(%rbp),%rax
   13.33 :	  42d006:       mov    (%rax),%rax
   20.00 :	  42d009:       mov    -0x10(%rbp),%rdx
   13.33 :	  42d00d:       shl    $0x4,%rdx
    0.00 :	  42d011:       add    %rdx,%rax
   13.33 :	  42d014:       pop    %rbp
    0.00 :	  42d015:       retq
 Percent |	Source code & Disassembly of main for cycles:u (15 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>:
         :	_ZNSt6vectorIiSaIiEEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    6.67 :	  41fdba:       push   %rbp
   13.33 :	  41fdbb:       mov    %rsp,%rbp
    0.00 :	  41fdbe:       mov    %rdi,-0x8(%rbp)
   13.33 :	  41fdc2:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
   13.33 :	  41fdc6:       mov    -0x8(%rbp),%rax
   13.33 :	  41fdca:       mov    (%rax),%rax
   26.67 :	  41fdcd:       mov    -0x10(%rbp),%rdx
    6.67 :	  41fdd1:       shl    $0x2,%rdx
    6.67 :	  41fdd5:       add    %rdx,%rax
    0.00 :	  41fdd8:       pop    %rbp
    0.00 :	  41fdd9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (14 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEplERKl():
         :	      __normal_iterator&
         :	      operator+=(const difference_type& __n)
         :	      { _M_current += __n; return *this; }
         :
         :	      __normal_iterator
         :	      operator+(const difference_type& __n) const
    0.00 :	  42d0fc:       push   %rbp
    0.00 :	  42d0fd:       mov    %rsp,%rbp
    0.00 :	  42d100:       sub    $0x20,%rsp
    7.14 :	  42d104:       mov    %rdi,-0x18(%rbp)
   14.29 :	  42d108:       mov    %rsi,-0x20(%rbp)
         :	      { return __normal_iterator(_M_current + __n); }
    0.00 :	  42d10c:       mov    -0x18(%rbp),%rax
    0.00 :	  42d110:       mov    (%rax),%rdx
    7.14 :	  42d113:       mov    -0x20(%rbp),%rax
    0.00 :	  42d117:       mov    (%rax),%rax
    0.00 :	  42d11a:       shl    $0x4,%rax
    0.00 :	  42d11e:       add    %rdx,%rax
    7.14 :	  42d121:       mov    %rax,-0x8(%rbp)
    0.00 :	  42d125:       lea    -0x8(%rbp),%rdx
    0.00 :	  42d129:       lea    -0x10(%rbp),%rax
    0.00 :	  42d12d:       mov    %rdx,%rsi
    0.00 :	  42d130:       mov    %rax,%rdi
    0.00 :	  42d133:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  42d138:       mov    -0x10(%rbp),%rax
   64.29 :	  42d13c:       leaveq
    0.00 :	  42d13d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (14 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420636 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
    7.14 :	  420636:       push   %rbp
    7.14 :	  420637:       mov    %rsp,%rbp
    7.14 :	  42063a:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
    0.00 :	  42063e:       mov    -0x8(%rbp),%rax
   21.43 :	  420642:       mov    (%rax),%rax
   57.14 :	  420645:       pop    %rbp
    0.00 :	  420646:       retq
 Percent |	Source code & Disassembly of main for cycles:u (13 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>:
         :	_ZSt9__advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElEvRT_T0_St26random_access_iterator_tag():
         :	          --__i;
         :	    }
         :
         :	  template<typename _RandomAccessIterator, typename _Distance>
         :	    inline void
         :	    __advance(_RandomAccessIterator& __i, _Distance __n,
    0.00 :	  42e99f:       push   %rbp
   23.08 :	  42e9a0:       mov    %rsp,%rbp
    0.00 :	  42e9a3:       sub    $0x10,%rsp
    0.00 :	  42e9a7:       mov    %rdi,-0x8(%rbp)
    7.69 :	  42e9ab:       mov    %rsi,-0x10(%rbp)
         :	              random_access_iterator_tag)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_RandomAccessIteratorConcept<
         :	                                  _RandomAccessIterator>)
         :	      __i += __n;
    7.69 :	  42e9af:       lea    -0x10(%rbp),%rdx
    0.00 :	  42e9b3:       mov    -0x8(%rbp),%rax
    7.69 :	  42e9b7:       mov    %rdx,%rsi
   23.08 :	  42e9ba:       mov    %rax,%rdi
    0.00 :	  42e9bd:       callq  42f896 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator+=(long const&)>
         :	    }
    0.00 :	  42e9c2:       leaveq
   30.77 :	  42e9c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (13 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004318ac <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
         :	_ZNSt8__detail4_ModImLm2147483647ELm16807ELm0ELb1ELb1EE6__calcEm():
         :	    // - a * (m - 1) + c fits in _Tp, there is no overflow.
         :	    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
         :	      struct _Mod<_Tp, __m, __a, __c, true, __s>
         :	      {
         :	        static _Tp
         :	        __calc(_Tp __x)
    0.00 :	  4318ac:       push   %rbp
    7.69 :	  4318ad:       mov    %rsp,%rbp
    0.00 :	  4318b0:       mov    %rdi,-0x18(%rbp)
         :	        {
         :	          _Tp __res = __a * __x + __c;
    0.00 :	  4318b4:       mov    -0x18(%rbp),%rax
   15.38 :	  4318b8:       imul   $0x41a7,%rax,%rax
    0.00 :	  4318bf:       mov    %rax,-0x8(%rbp)
         :	          if (__m)
         :	            __res %= __m;
    0.00 :	  4318c3:       mov    -0x8(%rbp),%rcx
   15.38 :	  4318c7:       movabs $0x200000005,%rdx
    0.00 :	  4318d1:       mov    %rcx,%rax
    0.00 :	  4318d4:       mul    %rdx
    0.00 :	  4318d7:       mov    %rcx,%rax
    7.69 :	  4318da:       sub    %rdx,%rax
    0.00 :	  4318dd:       shr    %rax
    0.00 :	  4318e0:       add    %rdx,%rax
    0.00 :	  4318e3:       shr    $0x1e,%rax
   15.38 :	  4318e7:       mov    %rax,%rdx
    0.00 :	  4318ea:       mov    %rdx,%rax
    7.69 :	  4318ed:       shl    $0x1f,%rax
    0.00 :	  4318f1:       sub    %rdx,%rax
    0.00 :	  4318f4:       sub    %rax,%rcx
    0.00 :	  4318f7:       mov    %rcx,%rax
    0.00 :	  4318fa:       mov    %rax,-0x8(%rbp)
         :	          return __res;
   15.38 :	  4318fe:       mov    -0x8(%rbp),%rax
         :	        }
   15.38 :	  431902:       pop    %rbp
    0.00 :	  431903:       retq
 Percent |	Source code & Disassembly of main for cycles:u (12 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f866 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::operator()()>:
         :	_ZNSt8__detail8_AdaptorISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEdEclEv():
         :	         * Converts a value generated by the adapted random number generator
         :	         * into a value in the input domain for the dependent random number
         :	         * distribution.
         :	         */
         :	        _DInputType
         :	        operator()()
    0.00 :	  42f866:       push   %rbp
    0.00 :	  42f867:       mov    %rsp,%rbp
    8.33 :	  42f86a:       sub    $0x10,%rsp
    0.00 :	  42f86e:       mov    %rdi,-0x8(%rbp)
         :	        {
         :	          return std::generate_canonical<_DInputType,
         :	                                    std::numeric_limits<_DInputType>::digits,
         :	                                    _Engine>(_M_g);
    0.00 :	  42f872:       mov    -0x8(%rbp),%rax
    8.33 :	  42f876:       mov    (%rax),%rax
    0.00 :	  42f879:       mov    %rax,%rdi
    0.00 :	  42f87c:       callq  430682 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    0.00 :	  42f881:       vmovsd %xmm0,-0x10(%rbp)
    0.00 :	  42f886:       mov    -0x10(%rbp),%rax
         :	        }
   41.67 :	  42f88a:       mov    %rax,-0x10(%rbp)
    8.33 :	  42f88e:       vmovsd -0x10(%rbp),%xmm0
   33.33 :	  42f893:       leaveq
    0.00 :	  42f894:       retq
 Percent |	Source code & Disassembly of main for cycles:u (12 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>:
         :	_ZSt4moveIR5LLcolEONSt16remove_referenceIT_E4typeEOS3_():
         :	   *  @param  __t  A thing of arbitrary type.
         :	   *  @return The parameter cast to an rvalue-reference to allow moving it.
         :	  */
         :	  template<typename _Tp>
         :	    constexpr typename std::remove_reference<_Tp>::type&&
         :	    move(_Tp&& __t) noexcept
   33.33 :	  42f2f6:       push   %rbp
    8.33 :	  42f2f7:       mov    %rsp,%rbp
    0.00 :	  42f2fa:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    8.33 :	  42f2fe:       mov    -0x8(%rbp),%rax
   50.00 :	  42f302:       pop    %rbp
    0.00 :	  42f303:       retq
 Percent |	Source code & Disassembly of main for cycles:u (12 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d904 <std::vector<double, std::allocator<double> >::push_back(double const&)>:
         :	_ZNSt6vectorIdSaIdEE9push_backERKd():
         :	       *  to it.  Due to the nature of a %vector this operation can be
         :	       *  done in constant time if the %vector has preallocated space
         :	       *  available.
         :	       */
         :	      void
         :	      push_back(const value_type& __x)
    0.00 :	  42d904:       push   %rbp
    0.00 :	  42d905:       mov    %rsp,%rbp
    8.33 :	  42d908:       sub    $0x10,%rsp
    0.00 :	  42d90c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d910:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  42d914:       mov    -0x8(%rbp),%rax
    8.33 :	  42d918:       mov    0x8(%rax),%rdx
   16.67 :	  42d91c:       mov    -0x8(%rbp),%rax
    0.00 :	  42d920:       mov    0x10(%rax),%rax
    8.33 :	  42d924:       cmp    %rax,%rdx
    0.00 :	  42d927:       je     42d95a <std::vector<double, std::allocator<double> >::push_back(double const&)+0x56>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     __x);
   16.67 :	  42d929:       mov    -0x8(%rbp),%rax
    0.00 :	  42d92d:       mov    0x8(%rax),%rcx
    8.33 :	  42d931:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  42d935:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d939:       mov    %rcx,%rsi
    0.00 :	  42d93c:       mov    %rax,%rdi
    0.00 :	  42d93f:       callq  42ea2b <decltype (_S_construct({parm#1}, {parm#2}, (forward<double const&>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double const&>(std::allocator<double>&, double*, double const&)>
         :	            ++this->_M_impl._M_finish;
    0.00 :	  42d944:       mov    -0x8(%rbp),%rax
   16.67 :	  42d948:       mov    0x8(%rax),%rax
    8.33 :	  42d94c:       lea    0x8(%rax),%rdx
    0.00 :	  42d950:       mov    -0x8(%rbp),%rax
    0.00 :	  42d954:       mov    %rdx,0x8(%rax)
    0.00 :	  42d958:       jmp    42d96d <std::vector<double, std::allocator<double> >::push_back(double const&)+0x69>
         :	          }
         :	        else
         :	#if __cplusplus >= 201103L
         :	          _M_emplace_back_aux(__x);
    0.00 :	  42d95a:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d95e:       mov    -0x8(%rbp),%rax
    0.00 :	  42d962:       mov    %rdx,%rsi
    0.00 :	  42d965:       mov    %rax,%rdi
    0.00 :	  42d968:       callq  42ea64 <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double const&>(double const&)>
         :	#else
         :	          _M_insert_aux(end(), __x);
         :	#endif
         :	      }
    0.00 :	  42d96d:       leaveq
    8.33 :	  42d96e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (11 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
   18.18 :	  43032a:       push   %rbp
    9.09 :	  43032b:       mov    %rsp,%rbp
    0.00 :	  43032e:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    9.09 :	  430332:       mov    -0x8(%rbp),%rax
   18.18 :	  430336:       mov    (%rax),%rax
    9.09 :	  430339:       lea    0x10(%rax),%rdx
    0.00 :	  43033d:       mov    -0x8(%rbp),%rax
    0.00 :	  430341:       mov    %rdx,(%rax)
         :	        return *this;
    9.09 :	  430344:       mov    -0x8(%rbp),%rax
         :	      }
   18.18 :	  430348:       pop    %rbp
    9.09 :	  430349:       retq
 Percent |	Source code & Disassembly of main for cycles:u (11 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>:
         :	_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator>
         :	    inline typename iterator_traits<_InputIterator>::difference_type
         :	    distance(_InputIterator __first, _InputIterator __last)
    0.00 :	  42d8c0:       push   %rbp
    0.00 :	  42d8c1:       mov    %rsp,%rbp
    0.00 :	  42d8c4:       push   %rbx
    9.09 :	  42d8c5:       sub    $0x48,%rsp
   18.18 :	  42d8c9:       mov    %rdi,-0x30(%rbp)
    9.09 :	  42d8cd:       mov    %rsi,-0x40(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __distance
         :	      return std::__distance(__first, __last,
         :	                             std::__iterator_category(__first));
    0.00 :	  42d8d1:       lea    -0x30(%rbp),%rax
    9.09 :	  42d8d5:       mov    %rax,%rdi
    0.00 :	  42d8d8:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.00 :	  42d8dd:       mov    -0x40(%rbp),%rdx
    9.09 :	  42d8e1:       mov    -0x30(%rbp),%rax
    9.09 :	  42d8e5:       mov    %bl,(%rsp)
    0.00 :	  42d8e8:       mov    %rdx,%rsi
    0.00 :	  42d8eb:       mov    %rax,%rdi
    9.09 :	  42d8ee:       callq  42ea06 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::__distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, std::random_access_iterator_tag)>
    0.00 :	  42d8f3:       jmp    42d8fd <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)+0x3d>
    0.00 :	  42d8f5:       mov    %rax,%rdi
    0.00 :	  42d8f8:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    9.09 :	  42d8fd:       add    $0x48,%rsp
    0.00 :	  42d901:       pop    %rbx
    0.00 :	  42d902:       pop    %rbp
   18.18 :	  42d903:       retq
 Percent |	Source code & Disassembly of main for cycles:u (11 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e8fe <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)>:
         :	_ZNSt25uniform_real_distributionIdEclISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEEdRT_RKNS0_10param_typeE():
         :	        operator()(_UniformRandomNumberGenerator& __urng)
         :	        { return this->operator()(__urng, _M_param); }
         :
         :	      template<typename _UniformRandomNumberGenerator>
         :	        result_type
         :	        operator()(_UniformRandomNumberGenerator& __urng,
    0.00 :	  42e8fe:       push   %rbp
    9.09 :	  42e8ff:       mov    %rsp,%rbp
    0.00 :	  42e902:       sub    $0x40,%rsp
    0.00 :	  42e906:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42e90a:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42e90e:       mov    %rdx,-0x28(%rbp)
         :	                   const param_type& __p)
         :	        {
         :	          __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
         :	            __aurng(__urng);
    0.00 :	  42e912:       mov    -0x20(%rbp),%rdx
    0.00 :	  42e916:       lea    -0x10(%rbp),%rax
    0.00 :	  42e91a:       mov    %rdx,%rsi
    0.00 :	  42e91d:       mov    %rax,%rdi
    0.00 :	  42e920:       callq  42f816 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::_Adaptor(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
         :	          return (__aurng() * (__p.b() - __p.a())) + __p.a();
    0.00 :	  42e925:       lea    -0x10(%rbp),%rax
    0.00 :	  42e929:       mov    %rax,%rdi
    0.00 :	  42e92c:       callq  42f866 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::operator()()>
    9.09 :	  42e931:       vmovsd %xmm0,-0x30(%rbp)
    0.00 :	  42e936:       mov    -0x28(%rbp),%rax
    0.00 :	  42e93a:       mov    %rax,%rdi
    0.00 :	  42e93d:       callq  42f84a <std::uniform_real_distribution<double>::param_type::b() const>
    0.00 :	  42e942:       vmovsd %xmm0,-0x38(%rbp)
    0.00 :	  42e947:       mov    -0x28(%rbp),%rax
    0.00 :	  42e94b:       mov    %rax,%rdi
    0.00 :	  42e94e:       callq  42f830 <std::uniform_real_distribution<double>::param_type::a() const>
    0.00 :	  42e953:       vmovsd -0x38(%rbp),%xmm1
    0.00 :	  42e958:       vsubsd %xmm0,%xmm1,%xmm0
    0.00 :	  42e95c:       vmulsd -0x30(%rbp),%xmm0,%xmm2
    0.00 :	  42e961:       vmovsd %xmm2,-0x30(%rbp)
   27.27 :	  42e966:       mov    -0x28(%rbp),%rax
    0.00 :	  42e96a:       mov    %rax,%rdi
    9.09 :	  42e96d:       callq  42f830 <std::uniform_real_distribution<double>::param_type::a() const>
    9.09 :	  42e972:       vaddsd -0x30(%rbp),%xmm0,%xmm0
    9.09 :	  42e977:       vmovsd %xmm0,-0x30(%rbp)
    0.00 :	  42e97c:       mov    -0x30(%rbp),%rax
   18.18 :	  42e980:       jmp    42e98a <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)+0x8c>
    0.00 :	  42e982:       mov    %rax,%rdi
    0.00 :	  42e985:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
    0.00 :	  42e98a:       mov    %rax,-0x30(%rbp)
    0.00 :	  42e98e:       vmovsd -0x30(%rbp),%xmm0
    9.09 :	  42e993:       leaveq
    0.00 :	  42e994:       retq
 Percent |	Source code & Disassembly of main for cycles:u (10 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEC2ERKS2_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
   10.00 :	  42e1a2:       push   %rbp
    0.00 :	  42e1a3:       mov    %rsp,%rbp
    0.00 :	  42e1a6:       mov    %rdi,-0x8(%rbp)
   10.00 :	  42e1aa:       mov    %rsi,-0x10(%rbp)
   30.00 :	  42e1ae:       mov    -0x10(%rbp),%rax
   20.00 :	  42e1b2:       mov    (%rax),%rdx
   20.00 :	  42e1b5:       mov    -0x8(%rbp),%rax
    0.00 :	  42e1b9:       mov    %rdx,(%rax)
   10.00 :	  42e1bc:       pop    %rbp
    0.00 :	  42e1bd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (9 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004317ee <LLcol* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<LLcol>(LLcol const*, LLcol const*, LLcol*)>:
         :	_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI5LLcolEEPT_PKS4_S7_S5_():
         :	  template<bool _IsMove>
         :	    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
         :	    {
         :	      template<typename _Tp>
         :	        static _Tp*
         :	        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
    0.00 :	  4317ee:       push   %rbp
    0.00 :	  4317ef:       mov    %rsp,%rbp
    0.00 :	  4317f2:       sub    $0x30,%rsp
    0.00 :	  4317f6:       mov    %rdi,-0x18(%rbp)
    0.00 :	  4317fa:       mov    %rsi,-0x20(%rbp)
    0.00 :	  4317fe:       mov    %rdx,-0x28(%rbp)
         :	        {
         :	          const ptrdiff_t _Num = __last - __first;
    0.00 :	  431802:       mov    -0x20(%rbp),%rdx
    0.00 :	  431806:       mov    -0x18(%rbp),%rax
   11.11 :	  43180a:       sub    %rax,%rdx
   11.11 :	  43180d:       mov    %rdx,%rax
    0.00 :	  431810:       sar    $0x4,%rax
   11.11 :	  431814:       mov    %rax,-0x8(%rbp)
         :	          if (_Num)
    0.00 :	  431818:       cmpq   $0x0,-0x8(%rbp)
   11.11 :	  43181d:       je     43184e <LLcol* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<LLcol>(LLcol const*, LLcol const*, LLcol*)+0x60>
         :	            __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   22.22 :	  43181f:       mov    -0x8(%rbp),%rax
    0.00 :	  431823:       shl    $0x4,%rax
    0.00 :	  431827:       mov    %rax,%rdx
    0.00 :	  43182a:       mov    -0x8(%rbp),%rax
    0.00 :	  43182e:       shl    $0x4,%rax
    0.00 :	  431832:       neg    %rax
    0.00 :	  431835:       mov    %rax,%rcx
    0.00 :	  431838:       mov    -0x28(%rbp),%rax
    0.00 :	  43183c:       add    %rax,%rcx
    0.00 :	  43183f:       mov    -0x18(%rbp),%rax
   11.11 :	  431843:       mov    %rax,%rsi
    0.00 :	  431846:       mov    %rcx,%rdi
    0.00 :	  431849:       callq  41dc60 <memmove@plt>
         :	          return __result - _Num;
    0.00 :	  43184e:       mov    -0x8(%rbp),%rax
    0.00 :	  431852:       shl    $0x4,%rax
    0.00 :	  431856:       neg    %rax
    0.00 :	  431859:       mov    %rax,%rdx
    0.00 :	  43185c:       mov    -0x28(%rbp),%rax
    0.00 :	  431860:       add    %rdx,%rax
         :	        }
    0.00 :	  431863:       leaveq
   22.22 :	  431864:       retq
 Percent |	Source code & Disassembly of main for cycles:u (9 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430f58 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>:
         :	_ZNSt26linear_congruential_engineImLm16807ELm0ELm2147483647EEclEv():
         :
         :	      /**
         :	       * @brief Gets the next random number in the sequence.
         :	       */
         :	      result_type
         :	      operator()()
   11.11 :	  430f58:       push   %rbp
    0.00 :	  430f59:       mov    %rsp,%rbp
    0.00 :	  430f5c:       sub    $0x10,%rsp
   11.11 :	  430f60:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
    0.00 :	  430f64:       mov    -0x8(%rbp),%rax
    0.00 :	  430f68:       mov    (%rax),%rax
    0.00 :	  430f6b:       mov    %rax,%rdi
   11.11 :	  430f6e:       callq  431555 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>
    0.00 :	  430f73:       mov    -0x8(%rbp),%rdx
    0.00 :	  430f77:       mov    %rax,(%rdx)
         :	        return _M_x;
   44.44 :	  430f7a:       mov    -0x8(%rbp),%rax
    0.00 :	  430f7e:       mov    (%rax),%rax
         :	      }
   22.22 :	  430f81:       leaveq
    0.00 :	  430f82:       retq
 Percent |	Source code & Disassembly of main for cycles:u (9 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>:
         :	_ZNSt6vectorIiSaIiEE9push_backERKi():
         :	       *  to it.  Due to the nature of a %vector this operation can be
         :	       *  done in constant time if the %vector has preallocated space
         :	       *  available.
         :	       */
         :	      void
         :	      push_back(const value_type& __x)
    0.00 :	  420760:       push   %rbp
    0.00 :	  420761:       mov    %rsp,%rbp
    0.00 :	  420764:       sub    $0x10,%rsp
    0.00 :	  420768:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42076c:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  420770:       mov    -0x8(%rbp),%rax
    0.00 :	  420774:       mov    0x8(%rax),%rdx
   11.11 :	  420778:       mov    -0x8(%rbp),%rax
   11.11 :	  42077c:       mov    0x10(%rax),%rax
    0.00 :	  420780:       cmp    %rax,%rdx
    0.00 :	  420783:       je     4207b6 <std::vector<int, std::allocator<int> >::push_back(int const&)+0x56>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     __x);
    0.00 :	  420785:       mov    -0x8(%rbp),%rax
    0.00 :	  420789:       mov    0x8(%rax),%rcx
    0.00 :	  42078d:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  420791:       mov    -0x10(%rbp),%rdx
   11.11 :	  420795:       mov    %rcx,%rsi
    0.00 :	  420798:       mov    %rax,%rdi
    0.00 :	  42079b:       callq  422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
         :	            ++this->_M_impl._M_finish;
   11.11 :	  4207a0:       mov    -0x8(%rbp),%rax
   11.11 :	  4207a4:       mov    0x8(%rax),%rax
   33.33 :	  4207a8:       lea    0x4(%rax),%rdx
    0.00 :	  4207ac:       mov    -0x8(%rbp),%rax
    0.00 :	  4207b0:       mov    %rdx,0x8(%rax)
   11.11 :	  4207b4:       jmp    4207c9 <std::vector<int, std::allocator<int> >::push_back(int const&)+0x69>
         :	          }
         :	        else
         :	#if __cplusplus >= 201103L
         :	          _M_emplace_back_aux(__x);
    0.00 :	  4207b6:       mov    -0x10(%rbp),%rdx
    0.00 :	  4207ba:       mov    -0x8(%rbp),%rax
    0.00 :	  4207be:       mov    %rdx,%rsi
    0.00 :	  4207c1:       mov    %rax,%rdi
    0.00 :	  4207c4:       callq  42293c <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)>
         :	#else
         :	          _M_insert_aux(end(), __x);
         :	#endif
         :	      }
    0.00 :	  4207c9:       leaveq
    0.00 :	  4207ca:       retq
 Percent |	Source code & Disassembly of main for cycles:u (7 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420616 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
    0.00 :	  420616:       push   %rbp
    0.00 :	  420617:       mov    %rsp,%rbp
    0.00 :	  42061a:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    0.00 :	  42061e:       mov    -0x8(%rbp),%rax
   14.29 :	  420622:       mov    (%rax),%rax
   85.71 :	  420625:       lea    0x8(%rax),%rdx
    0.00 :	  420629:       mov    -0x8(%rbp),%rax
    0.00 :	  42062d:       mov    %rdx,(%rax)
         :	        return *this;
    0.00 :	  420630:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  420634:       pop    %rbp
    0.00 :	  420635:       retq
 Percent |	Source code & Disassembly of main for cycles:u (7 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>:
         :	_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   14.29 :	  422e23:       push   %rbp
   14.29 :	  422e24:       mov    %rsp,%rbp
   28.57 :	  422e27:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
    0.00 :	  422e2b:       mov    -0x8(%rbp),%rax
   14.29 :	  422e2f:       pop    %rbp
   28.57 :	  422e30:       retq
 Percent |	Source code & Disassembly of main for cycles:u (6 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422496 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::__normal_iterator(double* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC2ERKS1_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    0.00 :	  422496:       push   %rbp
   33.33 :	  422497:       mov    %rsp,%rbp
   16.67 :	  42249a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42249e:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4224a2:       mov    -0x10(%rbp),%rax
    0.00 :	  4224a6:       mov    (%rax),%rdx
   50.00 :	  4224a9:       mov    -0x8(%rbp),%rax
    0.00 :	  4224ad:       mov    %rdx,(%rax)
    0.00 :	  4224b0:       pop    %rbp
    0.00 :	  4224b1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (6 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxmiIP5LLcolSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_():
         :	#endif
         :	    { return __lhs.base() - __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :	    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    0.00 :	  42e1fa:       push   %rbp
    0.00 :	  42e1fb:       mov    %rsp,%rbp
    0.00 :	  42e1fe:       push   %rbx
    0.00 :	  42e1ff:       sub    $0x18,%rsp
    0.00 :	  42e203:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42e207:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() - __rhs.base(); }
    0.00 :	  42e20b:       mov    -0x18(%rbp),%rax
    0.00 :	  42e20f:       mov    %rax,%rdi
    0.00 :	  42e212:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
   16.67 :	  42e217:       mov    (%rax),%rax
   33.33 :	  42e21a:       mov    %rax,%rbx
    0.00 :	  42e21d:       mov    -0x20(%rbp),%rax
    0.00 :	  42e221:       mov    %rax,%rdi
    0.00 :	  42e224:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  42e229:       mov    (%rax),%rax
   33.33 :	  42e22c:       sub    %rax,%rbx
   16.67 :	  42e22f:       mov    %rbx,%rax
    0.00 :	  42e232:       sar    $0x4,%rax
    0.00 :	  42e236:       add    $0x18,%rsp
    0.00 :	  42e23a:       pop    %rbx
    0.00 :	  42e23b:       pop    %rbp
    0.00 :	  42e23c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (6 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041eb4a <std::log(long double)>:
         :	_ZSt3loge():
         :	  log(float __x)
         :	  { return __builtin_logf(__x); }
         :
         :	  inline _GLIBCXX_CONSTEXPR long double
         :	  log(long double __x)
         :	  { return __builtin_logl(__x); }
    0.00 :	  41eb4a:       push   %rbp
    0.00 :	  41eb4b:       mov    %rsp,%rbp
    0.00 :	  41eb4e:       sub    $0x10,%rsp
    0.00 :	  41eb52:       mov    0x10(%rbp),%rax
    0.00 :	  41eb56:       mov    0x18(%rbp),%edx
   33.33 :	  41eb59:       mov    %rax,(%rsp)
    0.00 :	  41eb5d:       mov    %edx,0x8(%rsp)
   50.00 :	  41eb61:       callq  41dcc0 <logl@plt>
    0.00 :	  41eb66:       leaveq
   16.67 :	  41eb67:       retq
 Percent |	Source code & Disassembly of main for cycles:u (6 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>:
         :	_ZNSt6vectorIdSaIdEEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    0.00 :	  41fdfa:       push   %rbp
    0.00 :	  41fdfb:       mov    %rsp,%rbp
    0.00 :	  41fdfe:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41fe02:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
   33.33 :	  41fe06:       mov    -0x8(%rbp),%rax
    0.00 :	  41fe0a:       mov    (%rax),%rax
    0.00 :	  41fe0d:       mov    -0x10(%rbp),%rdx
   33.33 :	  41fe11:       shl    $0x3,%rdx
   33.33 :	  41fe15:       add    %rdx,%rax
    0.00 :	  41fe18:       pop    %rbp
    0.00 :	  41fe19:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   20.00 :	  4224b2:       push   %rbp
    0.00 :	  4224b3:       mov    %rsp,%rbp
   20.00 :	  4224b6:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
   20.00 :	  4224ba:       mov    -0x8(%rbp),%rax
   40.00 :	  4224be:       pop    %rbp
    0.00 :	  4224bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043087c <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)>:
         :	_ZN9__gnu_cxx13new_allocatorIdE9constructIdIRKdEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
   20.00 :	  43087c:       push   %rbp
    0.00 :	  43087d:       mov    %rsp,%rbp
    0.00 :	  430880:       push   %rbx
    0.00 :	  430881:       sub    $0x28,%rsp
    0.00 :	  430885:       mov    %rdi,-0x18(%rbp)
    0.00 :	  430889:       mov    %rsi,-0x20(%rbp)
    0.00 :	  43088d:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  430891:       mov    -0x28(%rbp),%rax
    0.00 :	  430895:       mov    %rax,%rdi
    0.00 :	  430898:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
    0.00 :	  43089d:       mov    (%rax),%rbx
   20.00 :	  4308a0:       mov    -0x20(%rbp),%rax
    0.00 :	  4308a4:       mov    %rax,%rsi
    0.00 :	  4308a7:       mov    $0x8,%edi
    0.00 :	  4308ac:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  4308b1:       test   %rax,%rax
    0.00 :	  4308b4:       je     4308b9 <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)+0x3d>
   20.00 :	  4308b6:       mov    %rbx,(%rax)
   40.00 :	  4308b9:       add    $0x28,%rsp
    0.00 :	  4308bd:       pop    %rbx
    0.00 :	  4308be:       pop    %rbp
    0.00 :	  4308bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ea06 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::__distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, std::random_access_iterator_tag)>:
         :	_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag():
         :	      return __n;
         :	    }
         :
         :	  template<typename _RandomAccessIterator>
         :	    inline typename iterator_traits<_RandomAccessIterator>::difference_type
         :	    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    0.00 :	  42ea06:       push   %rbp
   20.00 :	  42ea07:       mov    %rsp,%rbp
   20.00 :	  42ea0a:       sub    $0x20,%rsp
    0.00 :	  42ea0e:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42ea12:       mov    %rsi,-0x20(%rbp)
         :	               random_access_iterator_tag)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_RandomAccessIteratorConcept<
         :	                                  _RandomAccessIterator>)
         :	      return __last - __first;
    0.00 :	  42ea16:       lea    -0x10(%rbp),%rdx
    0.00 :	  42ea1a:       lea    -0x20(%rbp),%rax
    0.00 :	  42ea1e:       mov    %rdx,%rsi
   20.00 :	  42ea21:       mov    %rax,%rdi
   20.00 :	  42ea24:       callq  42f8c4 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type __gnu_cxx::operator-<double*, std::vector<double, std::allocator<double> > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
         :	    }
    0.00 :	  42ea29:       leaveq
   20.00 :	  42ea2a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>:
         :	_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_():
         :	   *  This function is not a part of the C++ standard but is syntactic
         :	   *  sugar for internal library use only.
         :	  */
         :	  template<typename _Iter>
         :	    inline typename iterator_traits<_Iter>::iterator_category
         :	    __iterator_category(const _Iter&)
   20.00 :	  42e995:       push   %rbp
   40.00 :	  42e996:       mov    %rsp,%rbp
    0.00 :	  42e999:       mov    %rdi,-0x8(%rbp)
         :	    { return typename iterator_traits<_Iter>::iterator_category(); }
   20.00 :	  42e99d:       pop    %rbp
   20.00 :	  42e99e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  430517:       push   %rbp
    0.00 :	  430518:       mov    %rsp,%rbp
    0.00 :	  43051b:       sub    $0x10,%rsp
    0.00 :	  43051f:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  430523:       mov    -0x10(%rbp),%rax
   40.00 :	  430527:       mov    %rax,%rdi
    0.00 :	  43052a:       callq  430e8e <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
   20.00 :	  43052f:       leaveq
   40.00 :	  430530:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424fee <std::enable_if<std::allocator_traits<std::allocator<int> >::__construct_helper<int<int const&> >::value, void>::type std::allocator_traits<std::allocator<int> >::_S_construct<int, int const&>(std::allocator<int>&, int*, int const&)>:
         :	_ZNSt16allocator_traitsISaIiEE12_S_constructIiIRKiEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_():
         :	        };
         :
         :	      template<typename _Tp, typename... _Args>
         :	        static typename
         :	        enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
         :	        _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   20.00 :	  424fee:       push   %rbp
    0.00 :	  424fef:       mov    %rsp,%rbp
    0.00 :	  424ff2:       sub    $0x20,%rsp
    0.00 :	  424ff6:       mov    %rdi,-0x8(%rbp)
    0.00 :	  424ffa:       mov    %rsi,-0x10(%rbp)
    0.00 :	  424ffe:       mov    %rdx,-0x18(%rbp)
         :	        { __a.construct(__p, std::forward<_Args>(__args)...); }
   20.00 :	  425002:       mov    -0x18(%rbp),%rax
    0.00 :	  425006:       mov    %rax,%rdi
    0.00 :	  425009:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  42500e:       mov    %rax,%rdx
    0.00 :	  425011:       mov    -0x10(%rbp),%rcx
    0.00 :	  425015:       mov    -0x8(%rbp),%rax
    0.00 :	  425019:       mov    %rcx,%rsi
    0.00 :	  42501c:       mov    %rax,%rdi
    0.00 :	  42501f:       callq  426d7a <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)>
   20.00 :	  425024:       leaveq
   40.00 :	  425025:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>:
         :	_ZNSt16allocator_traitsISaIiEE9constructIiIRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_():
         :	       *  if that expression is well-formed, otherwise uses placement-new
         :	       *  to construct an object of type @a _Tp at location @a __p from the
         :	       *  arguments @a __args...
         :	      */
         :	      template<typename _Tp, typename... _Args>
         :	        static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   20.00 :	  422904:       push   %rbp
    0.00 :	  422905:       mov    %rsp,%rbp
    0.00 :	  422908:       sub    $0x20,%rsp
    0.00 :	  42290c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  422910:       mov    %rsi,-0x10(%rbp)
    0.00 :	  422914:       mov    %rdx,-0x18(%rbp)
         :	        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
         :	        { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    0.00 :	  422918:       mov    -0x18(%rbp),%rax
    0.00 :	  42291c:       mov    %rax,%rdi
    0.00 :	  42291f:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  422924:       mov    %rax,%rdx
   20.00 :	  422927:       mov    -0x10(%rbp),%rcx
   20.00 :	  42292b:       mov    -0x8(%rbp),%rax
    0.00 :	  42292f:       mov    %rcx,%rsi
    0.00 :	  422932:       mov    %rax,%rdi
   20.00 :	  422935:       callq  424fee <std::enable_if<std::allocator_traits<std::allocator<int> >::__construct_helper<int<int const&> >::value, void>::type std::allocator_traits<std::allocator<int> >::_S_construct<int, int const&>(std::allocator<int>&, int*, int const&)>
   20.00 :	  42293a:       leaveq
    0.00 :	  42293b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f830 <std::uniform_real_distribution<double>::param_type::a() const>:
         :	_ZNKSt25uniform_real_distributionIdE10param_type1aEv():
         :	        {
         :	          _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);
         :	        }
         :
         :	        result_type
         :	        a() const
    0.00 :	  42f830:       push   %rbp
    0.00 :	  42f831:       mov    %rsp,%rbp
    0.00 :	  42f834:       mov    %rdi,-0x8(%rbp)
         :	        { return _M_a; }
   40.00 :	  42f838:       mov    -0x8(%rbp),%rax
   20.00 :	  42f83c:       mov    (%rax),%rax
    0.00 :	  42f83f:       mov    %rax,-0x10(%rbp)
    0.00 :	  42f843:       vmovsd -0x10(%rbp),%xmm0
    0.00 :	  42f848:       pop    %rbp
   40.00 :	  42f849:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042058a <std::vector<double, std::allocator<double> >::begin()>:
         :	_ZNSt6vectorIdSaIdEE5beginEv():
         :	       *  Returns a read/write iterator that points to the first
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      begin() _GLIBCXX_NOEXCEPT
   40.00 :	  42058a:       push   %rbp
    0.00 :	  42058b:       mov    %rsp,%rbp
    0.00 :	  42058e:       sub    $0x20,%rsp
   20.00 :	  420592:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_start); }
    0.00 :	  420596:       mov    -0x18(%rbp),%rdx
    0.00 :	  42059a:       lea    -0x10(%rbp),%rax
    0.00 :	  42059e:       mov    %rdx,%rsi
    0.00 :	  4205a1:       mov    %rax,%rdi
    0.00 :	  4205a4:       callq  422496 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::__normal_iterator(double* const&)>
    0.00 :	  4205a9:       mov    -0x10(%rbp),%rax
   40.00 :	  4205ad:       leaveq
    0.00 :	  4205ae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b8e <std::vector<int, std::allocator<int> >::end() const>:
         :	_ZNKSt6vectorIiSaIiEE3endEv():
         :	       *  Returns a read-only (constant) iterator that points one past
         :	       *  the last element in the %vector.  Iteration is done in
         :	       *  ordinary element order.
         :	       */
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
    0.00 :	  422b8e:       push   %rbp
    0.00 :	  422b8f:       mov    %rsp,%rbp
    0.00 :	  422b92:       sub    $0x20,%rsp
   40.00 :	  422b96:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_finish); }
    0.00 :	  422b9a:       mov    -0x18(%rbp),%rax
    0.00 :	  422b9e:       mov    0x8(%rax),%rax
   40.00 :	  422ba2:       mov    %rax,-0x8(%rbp)
    0.00 :	  422ba6:       lea    -0x8(%rbp),%rdx
    0.00 :	  422baa:       lea    -0x10(%rbp),%rax
    0.00 :	  422bae:       mov    %rdx,%rsi
    0.00 :	  422bb1:       mov    %rax,%rdi
    0.00 :	  422bb4:       callq  42509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>
    0.00 :	  422bb9:       mov    -0x10(%rbp),%rax
   20.00 :	  422bbd:       leaveq
    0.00 :	  422bbe:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004207cc <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)>:
         :	_ZNSt6vectorIiSaIiEEC2ERKS1_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    0.00 :	  4207cc:       push   %rbp
    0.00 :	  4207cd:       mov    %rsp,%rbp
    0.00 :	  4207d0:       push   %r13
    0.00 :	  4207d2:       push   %r12
    0.00 :	  4207d4:       push   %rbx
    0.00 :	  4207d5:       sub    $0x28,%rsp
   20.00 :	  4207d9:       mov    %rdi,-0x38(%rbp)
    0.00 :	  4207dd:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  4207e1:       mov    -0x40(%rbp),%rax
    0.00 :	  4207e5:       mov    %rax,%rdi
    0.00 :	  4207e8:       callq  422b50 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>
    0.00 :	  4207ed:       mov    %rax,%rdx
    0.00 :	  4207f0:       lea    -0x21(%rbp),%rax
    0.00 :	  4207f4:       mov    %rdx,%rsi
    0.00 :	  4207f7:       mov    %rax,%rdi
    0.00 :	  4207fa:       callq  422b26 <__gnu_cxx::__alloc_traits<std::allocator<int> >::_S_select_on_copy(std::allocator<int> const&)>
    0.00 :	  4207ff:       mov    -0x40(%rbp),%rax
    0.00 :	  420803:       mov    %rax,%rdi
    0.00 :	  420806:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  42080b:       mov    %rax,%rcx
    0.00 :	  42080e:       mov    -0x38(%rbp),%rax
    0.00 :	  420812:       lea    -0x21(%rbp),%rdx
    0.00 :	  420816:       mov    %rcx,%rsi
    0.00 :	  420819:       mov    %rax,%rdi
    0.00 :	  42081c:       callq  42212e <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)>
    0.00 :	  420821:       lea    -0x21(%rbp),%rax
    0.00 :	  420825:       mov    %rax,%rdi
    0.00 :	  420828:       callq  42048a <std::allocator<int>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    0.00 :	  42082d:       mov    -0x38(%rbp),%rax
    0.00 :	  420831:       mov    %rax,%rdi
    0.00 :	  420834:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  420839:       mov    %rax,%r13
    0.00 :	  42083c:       mov    -0x38(%rbp),%rax
   20.00 :	  420840:       mov    (%rax),%r12
   20.00 :	  420843:       mov    -0x40(%rbp),%rax
    0.00 :	  420847:       mov    %rax,%rdi
    0.00 :	  42084a:       callq  422b8e <std::vector<int, std::allocator<int> >::end() const>
    0.00 :	  42084f:       mov    %rax,%rbx
    0.00 :	  420852:       mov    -0x40(%rbp),%rax
    0.00 :	  420856:       mov    %rax,%rdi
    0.00 :	  420859:       callq  422b5e <std::vector<int, std::allocator<int> >::begin() const>
    0.00 :	  42085e:       mov    %r13,%rcx
    0.00 :	  420861:       mov    %r12,%rdx
    0.00 :	  420864:       mov    %rbx,%rsi
    0.00 :	  420867:       mov    %rax,%rdi
    0.00 :	  42086a:       callq  422bbf <int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&)>
         :	      { this->_M_impl._M_finish =
   20.00 :	  42086f:       mov    -0x38(%rbp),%rdx
    0.00 :	  420873:       mov    %rax,0x8(%rdx)
    0.00 :	  420877:       jmp    4208ad <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)+0xe1>
    0.00 :	  420879:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42087c:       lea    -0x21(%rbp),%rax
    0.00 :	  420880:       mov    %rax,%rdi
    0.00 :	  420883:       callq  42048a <std::allocator<int>::~allocator()>
    0.00 :	  420888:       mov    %rbx,%rax
    0.00 :	  42088b:       mov    %rax,%rdi
    0.00 :	  42088e:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  420893:       mov    %rax,%rbx
    0.00 :	  420896:       mov    -0x38(%rbp),%rax
    0.00 :	  42089a:       mov    %rax,%rdi
    0.00 :	  42089d:       callq  420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
    0.00 :	  4208a2:       mov    %rbx,%rax
    0.00 :	  4208a5:       mov    %rax,%rdi
    0.00 :	  4208a8:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  4208ad:       add    $0x28,%rsp
    0.00 :	  4208b1:       pop    %rbx
   20.00 :	  4208b2:       pop    %r12
    0.00 :	  4208b4:       pop    %r13
    0.00 :	  4208b6:       pop    %rbp
    0.00 :	  4208b7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>:
         :	_ZN8LLMatOrdC2ERKS_():
         :	    LLord(Tind row, Tind next, Tval val):row(row), next(next), val(val){}
         :	};
         :
         :	std::vector<Tind> invperm(std::vector<Tind> &perm);
         :
         :	struct LLMatOrd{
    0.00 :	  41f922:       push   %rbp
    0.00 :	  41f923:       mov    %rsp,%rbp
    0.00 :	  41f926:       push   %rbx
   50.00 :	  41f927:       sub    $0x18,%rsp
    0.00 :	  41f92b:       mov    %rdi,-0x18(%rbp)
    0.00 :	  41f92f:       mov    %rsi,-0x20(%rbp)
    0.00 :	  41f933:       mov    -0x20(%rbp),%rax
    0.00 :	  41f937:       mov    (%rax),%rdx
    0.00 :	  41f93a:       mov    -0x18(%rbp),%rax
    0.00 :	  41f93e:       mov    %rdx,(%rax)
    0.00 :	  41f941:       mov    -0x20(%rbp),%rax
    0.00 :	  41f945:       lea    0x8(%rax),%rdx
    0.00 :	  41f949:       mov    -0x18(%rbp),%rax
    0.00 :	  41f94d:       add    $0x8,%rax
    0.00 :	  41f951:       mov    %rdx,%rsi
    0.00 :	  41f954:       mov    %rax,%rdi
    0.00 :	  41f957:       callq  4207cc <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)>
    0.00 :	  41f95c:       mov    -0x20(%rbp),%rax
    0.00 :	  41f960:       lea    0x20(%rax),%rdx
    0.00 :	  41f964:       mov    -0x18(%rbp),%rax
    0.00 :	  41f968:       add    $0x20,%rax
    0.00 :	  41f96c:       mov    %rdx,%rsi
    0.00 :	  41f96f:       mov    %rax,%rdi
    0.00 :	  41f972:       callq  4208b8 <std::vector<LLord, std::allocator<LLord> >::vector(std::vector<LLord, std::allocator<LLord> > const&)>
    0.00 :	  41f977:       jmp    41f997 <LLMatOrd::LLMatOrd(LLMatOrd const&)+0x75>
    0.00 :	  41f979:       mov    %rax,%rbx
    0.00 :	  41f97c:       mov    -0x18(%rbp),%rax
    0.00 :	  41f980:       add    $0x8,%rax
    0.00 :	  41f984:       mov    %rax,%rdi
    0.00 :	  41f987:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41f98c:       mov    %rbx,%rax
    0.00 :	  41f98f:       mov    %rax,%rdi
    0.00 :	  41f992:       callq  41dda0 <_Unwind_Resume@plt>
   25.00 :	  41f997:       add    $0x18,%rsp
    0.00 :	  41f99b:       pop    %rbx
    0.00 :	  41f99c:       pop    %rbp
   25.00 :	  41f99d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004302ee <bool __gnu_cxx::operator==<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxeqIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() == __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
    0.00 :	  4302ee:       push   %rbp
    0.00 :	  4302ef:       mov    %rsp,%rbp
    0.00 :	  4302f2:       push   %rbx
    0.00 :	  4302f3:       sub    $0x18,%rsp
    0.00 :	  4302f7:       mov    %rdi,-0x18(%rbp)
    0.00 :	  4302fb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() == __rhs.base(); }
    0.00 :	  4302ff:       mov    -0x18(%rbp),%rax
    0.00 :	  430303:       mov    %rax,%rdi
   50.00 :	  430306:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  43030b:       mov    (%rax),%rbx
    0.00 :	  43030e:       mov    -0x20(%rbp),%rax
    0.00 :	  430312:       mov    %rax,%rdi
    0.00 :	  430315:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  43031a:       mov    (%rax),%rax
    0.00 :	  43031d:       cmp    %rax,%rbx
    0.00 :	  430320:       sete   %al
   25.00 :	  430323:       add    $0x18,%rsp
    0.00 :	  430327:       pop    %rbx
    0.00 :	  430328:       pop    %rbp
   25.00 :	  430329:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430db8 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_backward_a2<true, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_():
         :	                                                                 __result);
         :	    }
         :
         :	  template<bool _IsMove, typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    0.00 :	  430db8:       push   %rbp
    0.00 :	  430db9:       mov    %rsp,%rbp
    0.00 :	  430dbc:       push   %r12
    0.00 :	  430dbe:       push   %rbx
    0.00 :	  430dbf:       sub    $0x40,%rsp
    0.00 :	  430dc3:       mov    %rdi,-0x30(%rbp)
   25.00 :	  430dc7:       mov    %rsi,-0x40(%rbp)
    0.00 :	  430dcb:       mov    %rdx,-0x50(%rbp)
         :	    {
         :	      return _BI2(std::__copy_move_backward_a<_IsMove>
         :	                  (std::__niter_base(__first), std::__niter_base(__last),
         :	                   std::__niter_base(__result)));
    0.00 :	  430dcf:       mov    -0x50(%rbp),%rax
    0.00 :	  430dd3:       mov    %rax,%rdi
    0.00 :	  430dd6:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
   50.00 :	  430ddb:       mov    %rax,%r12
    0.00 :	  430dde:       mov    -0x40(%rbp),%rax
    0.00 :	  430de2:       mov    %rax,%rdi
    0.00 :	  430de5:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430dea:       mov    %rax,%rbx
    0.00 :	  430ded:       mov    -0x30(%rbp),%rax
    0.00 :	  430df1:       mov    %rax,%rdi
    0.00 :	  430df4:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
   25.00 :	  430df9:       mov    %r12,%rdx
    0.00 :	  430dfc:       mov    %rbx,%rsi
    0.00 :	  430dff:       mov    %rax,%rdi
    0.00 :	  430e02:       callq  431488 <LLcol* std::__copy_move_backward_a<true, LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>
    0.00 :	  430e07:       mov    %rax,-0x18(%rbp)
    0.00 :	  430e0b:       lea    -0x18(%rbp),%rdx
    0.00 :	  430e0f:       lea    -0x20(%rbp),%rax
    0.00 :	  430e13:       mov    %rdx,%rsi
    0.00 :	  430e16:       mov    %rax,%rdi
    0.00 :	  430e19:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  430e1e:       mov    -0x20(%rbp),%rax
         :	    }
    0.00 :	  430e22:       add    $0x40,%rsp
    0.00 :	  430e26:       pop    %rbx
    0.00 :	  430e27:       pop    %r12
    0.00 :	  430e29:       pop    %rbp
    0.00 :	  430e2a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431555 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
         :	_ZNSt8__detail5__modImLm2147483647ELm16807ELm0EEET_S1_():
         :	        }
         :	      };
         :
         :	    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
         :	      inline _Tp
         :	      __mod(_Tp __x)
    0.00 :	  431555:       push   %rbp
    0.00 :	  431556:       mov    %rsp,%rbp
   50.00 :	  431559:       sub    $0x10,%rsp
    0.00 :	  43155d:       mov    %rdi,-0x8(%rbp)
         :	      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }
    0.00 :	  431561:       mov    -0x8(%rbp),%rax
   25.00 :	  431565:       mov    %rax,%rdi
    0.00 :	  431568:       callq  4318ac <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
    0.00 :	  43156d:       leaveq
   25.00 :	  43156e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d7af <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)>:
         :	_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEiEvRT_T0_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator, typename _Distance>
         :	    inline void
         :	    advance(_InputIterator& __i, _Distance __n)
    0.00 :	  42d7af:       push   %rbp
    0.00 :	  42d7b0:       mov    %rsp,%rbp
    0.00 :	  42d7b3:       push   %rbx
    0.00 :	  42d7b4:       sub    $0x38,%rsp
   25.00 :	  42d7b8:       mov    %rdi,-0x28(%rbp)
    0.00 :	  42d7bc:       mov    %esi,-0x2c(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __advance
         :	      typename iterator_traits<_InputIterator>::difference_type __d = __n;
    0.00 :	  42d7bf:       mov    -0x2c(%rbp),%eax
    0.00 :	  42d7c2:       cltq
   25.00 :	  42d7c4:       mov    %rax,-0x18(%rbp)
         :	      std::__advance(__i, __d, std::__iterator_category(__i));
    0.00 :	  42d7c8:       mov    -0x28(%rbp),%rax
    0.00 :	  42d7cc:       mov    %rax,%rdi
    0.00 :	  42d7cf:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.00 :	  42d7d4:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d7d8:       mov    -0x28(%rbp),%rax
    0.00 :	  42d7dc:       mov    %bl,(%rsp)
    0.00 :	  42d7df:       mov    %rdx,%rsi
    0.00 :	  42d7e2:       mov    %rax,%rdi
    0.00 :	  42d7e5:       callq  42e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>
         :	    }
   25.00 :	  42d7ea:       jmp    42d7f4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)+0x45>
    0.00 :	  42d7ec:       mov    %rax,%rdi
    0.00 :	  42d7ef:       callq  41dda0 <_Unwind_Resume@plt>
   25.00 :	  42d7f4:       add    $0x38,%rsp
    0.00 :	  42d7f8:       pop    %rbx
    0.00 :	  42d7f9:       pop    %rbp
    0.00 :	  42d7fa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f907 <std::enable_if<std::allocator_traits<std::allocator<double> >::__construct_helper<double<double const&> >::value, void>::type std::allocator_traits<std::allocator<double> >::_S_construct<double, double const&>(std::allocator<double>&, double*, double const&)>:
         :	_ZNSt16allocator_traitsISaIdEE12_S_constructIdIRKdEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_():
         :	        };
         :
         :	      template<typename _Tp, typename... _Args>
         :	        static typename
         :	        enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
         :	        _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    0.00 :	  42f907:       push   %rbp
    0.00 :	  42f908:       mov    %rsp,%rbp
    0.00 :	  42f90b:       sub    $0x20,%rsp
    0.00 :	  42f90f:       mov    %rdi,-0x8(%rbp)
   25.00 :	  42f913:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42f917:       mov    %rdx,-0x18(%rbp)
         :	        { __a.construct(__p, std::forward<_Args>(__args)...); }
    0.00 :	  42f91b:       mov    -0x18(%rbp),%rax
    0.00 :	  42f91f:       mov    %rax,%rdi
    0.00 :	  42f922:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
    0.00 :	  42f927:       mov    %rax,%rdx
    0.00 :	  42f92a:       mov    -0x10(%rbp),%rcx
   25.00 :	  42f92e:       mov    -0x8(%rbp),%rax
    0.00 :	  42f932:       mov    %rcx,%rsi
    0.00 :	  42f935:       mov    %rax,%rdi
   25.00 :	  42f938:       callq  43087c <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)>
    0.00 :	  42f93d:       leaveq
   25.00 :	  42f93e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>:
         :	_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    0.00 :	  420751:       push   %rbp
    0.00 :	  420752:       mov    %rsp,%rbp
   75.00 :	  420755:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
    0.00 :	  420759:       mov    -0x8(%rbp),%rax
   25.00 :	  42075d:       pop    %rbp
    0.00 :	  42075e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>:
         :	_ZSt3maxImERKT_S2_S2_():
         :	   *  temporary expressions, since they are only evaluated once, unlike a
         :	   *  preprocessor macro.
         :	  */
         :	  template<typename _Tp>
         :	    inline const _Tp&
         :	    max(const _Tp& __a, const _Tp& __b)
   25.00 :	  425b86:       push   %rbp
    0.00 :	  425b87:       mov    %rsp,%rbp
    0.00 :	  425b8a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425b8e:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :	      //return  __a < __b ? __b : __a;
         :	      if (__a < __b)
    0.00 :	  425b92:       mov    -0x8(%rbp),%rax
    0.00 :	  425b96:       mov    (%rax),%rdx
    0.00 :	  425b99:       mov    -0x10(%rbp),%rax
    0.00 :	  425b9d:       mov    (%rax),%rax
   25.00 :	  425ba0:       cmp    %rax,%rdx
    0.00 :	  425ba3:       jae    425bab <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
         :	        return __b;
   50.00 :	  425ba5:       mov    -0x10(%rbp),%rax
    0.00 :	  425ba9:       jmp    425baf <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
         :	      return __a;
    0.00 :	  425bab:       mov    -0x8(%rbp),%rax
         :	    }
    0.00 :	  425baf:       pop    %rbp
    0.00 :	  425bb0:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d774 <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
         :	_ZNSt25uniform_real_distributionIdEclISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEEdRT_():
         :	      /**
         :	       * @brief Generating functions.
         :	       */
         :	      template<typename _UniformRandomNumberGenerator>
         :	        result_type
         :	        operator()(_UniformRandomNumberGenerator& __urng)
    0.00 :	  42d774:       push   %rbp
    0.00 :	  42d775:       mov    %rsp,%rbp
    0.00 :	  42d778:       sub    $0x20,%rsp
    0.00 :	  42d77c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d780:       mov    %rsi,-0x10(%rbp)
         :	        { return this->operator()(__urng, _M_param); }
   25.00 :	  42d784:       mov    -0x8(%rbp),%rdx
    0.00 :	  42d788:       mov    -0x10(%rbp),%rcx
    0.00 :	  42d78c:       mov    -0x8(%rbp),%rax
    0.00 :	  42d790:       mov    %rcx,%rsi
   25.00 :	  42d793:       mov    %rax,%rdi
    0.00 :	  42d796:       callq  42e8fe <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)>
    0.00 :	  42d79b:       vmovsd %xmm0,-0x18(%rbp)
    0.00 :	  42d7a0:       mov    -0x18(%rbp),%rax
   50.00 :	  42d7a4:       mov    %rax,-0x18(%rbp)
    0.00 :	  42d7a8:       vmovsd -0x18(%rbp),%xmm0
    0.00 :	  42d7ad:       leaveq
    0.00 :	  42d7ae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d1bc <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEC2ERKS2_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    0.00 :	  42d1bc:       push   %rbp
    0.00 :	  42d1bd:       mov    %rsp,%rbp
    0.00 :	  42d1c0:       push   %r13
    0.00 :	  42d1c2:       push   %r12
    0.00 :	  42d1c4:       push   %rbx
    0.00 :	  42d1c5:       sub    $0x28,%rsp
    0.00 :	  42d1c9:       mov    %rdi,-0x38(%rbp)
    0.00 :	  42d1cd:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42d1d1:       mov    -0x40(%rbp),%rax
    0.00 :	  42d1d5:       mov    %rax,%rdi
    0.00 :	  42d1d8:       callq  42e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>
    0.00 :	  42d1dd:       mov    %rax,%rdx
    0.00 :	  42d1e0:       lea    -0x21(%rbp),%rax
    0.00 :	  42d1e4:       mov    %rdx,%rsi
    0.00 :	  42d1e7:       mov    %rax,%rdi
    0.00 :	  42d1ea:       callq  42e3a0 <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_select_on_copy(std::allocator<LLcol> const&)>
    0.00 :	  42d1ef:       mov    -0x40(%rbp),%rax
    0.00 :	  42d1f3:       mov    %rax,%rdi
    0.00 :	  42d1f6:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42d1fb:       mov    %rax,%rcx
    0.00 :	  42d1fe:       mov    -0x38(%rbp),%rax
    0.00 :	  42d202:       lea    -0x21(%rbp),%rdx
    0.00 :	  42d206:       mov    %rcx,%rsi
    0.00 :	  42d209:       mov    %rax,%rdi
    0.00 :	  42d20c:       callq  42e3f2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_base(unsigned long, std::allocator<LLcol> const&)>
    0.00 :	  42d211:       lea    -0x21(%rbp),%rax
    0.00 :	  42d215:       mov    %rax,%rdi
    0.00 :	  42d218:       callq  42d632 <std::allocator<LLcol>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    0.00 :	  42d21d:       mov    -0x38(%rbp),%rax
    0.00 :	  42d221:       mov    %rax,%rdi
    0.00 :	  42d224:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d229:       mov    %rax,%r13
    0.00 :	  42d22c:       mov    -0x38(%rbp),%rax
    0.00 :	  42d230:       mov    (%rax),%r12
   50.00 :	  42d233:       mov    -0x40(%rbp),%rax
    0.00 :	  42d237:       mov    %rax,%rdi
    0.00 :	  42d23a:       callq  42e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>
    0.00 :	  42d23f:       mov    %rax,%rbx
    0.00 :	  42d242:       mov    -0x40(%rbp),%rax
    0.00 :	  42d246:       mov    %rax,%rdi
    0.00 :	  42d249:       callq  42e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>
    0.00 :	  42d24e:       mov    %r13,%rcx
    0.00 :	  42d251:       mov    %r12,%rdx
    0.00 :	  42d254:       mov    %rbx,%rsi
    0.00 :	  42d257:       mov    %rax,%rdi
    0.00 :	  42d25a:       callq  42e510 <LLcol* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, LLcol>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, std::allocator<LLcol>&)>
         :	      { this->_M_impl._M_finish =
   25.00 :	  42d25f:       mov    -0x38(%rbp),%rdx
    0.00 :	  42d263:       mov    %rax,0x8(%rdx)
    0.00 :	  42d267:       jmp    42d29d <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)+0xe1>
    0.00 :	  42d269:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42d26c:       lea    -0x21(%rbp),%rax
    0.00 :	  42d270:       mov    %rax,%rdi
    0.00 :	  42d273:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42d278:       mov    %rbx,%rax
    0.00 :	  42d27b:       mov    %rax,%rdi
    0.00 :	  42d27e:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42d283:       mov    %rax,%rbx
    0.00 :	  42d286:       mov    -0x38(%rbp),%rax
    0.00 :	  42d28a:       mov    %rax,%rdi
    0.00 :	  42d28d:       callq  42e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>
    0.00 :	  42d292:       mov    %rbx,%rax
    0.00 :	  42d295:       mov    %rax,%rdi
    0.00 :	  42d298:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  42d29d:       add    $0x28,%rsp
    0.00 :	  42d2a1:       pop    %rbx
   25.00 :	  42d2a2:       pop    %r12
    0.00 :	  42d2a4:       pop    %r13
    0.00 :	  42d2a6:       pop    %rbp
    0.00 :	  42d2a7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004208b8 <std::vector<LLord, std::allocator<LLord> >::vector(std::vector<LLord, std::allocator<LLord> > const&)>:
         :	_ZNSt6vectorI5LLordSaIS0_EEC2ERKS2_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    0.00 :	  4208b8:       push   %rbp
    0.00 :	  4208b9:       mov    %rsp,%rbp
    0.00 :	  4208bc:       push   %r13
    0.00 :	  4208be:       push   %r12
    0.00 :	  4208c0:       push   %rbx
    0.00 :	  4208c1:       sub    $0x28,%rsp
    0.00 :	  4208c5:       mov    %rdi,-0x38(%rbp)
    0.00 :	  4208c9:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  4208cd:       mov    -0x40(%rbp),%rax
   50.00 :	  4208d1:       mov    %rax,%rdi
    0.00 :	  4208d4:       callq  422c40 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator() const>
    0.00 :	  4208d9:       mov    %rax,%rdx
    0.00 :	  4208dc:       lea    -0x21(%rbp),%rax
    0.00 :	  4208e0:       mov    %rdx,%rsi
    0.00 :	  4208e3:       mov    %rax,%rdi
    0.00 :	  4208e6:       callq  422c16 <__gnu_cxx::__alloc_traits<std::allocator<LLord> >::_S_select_on_copy(std::allocator<LLord> const&)>
    0.00 :	  4208eb:       mov    -0x40(%rbp),%rax
   25.00 :	  4208ef:       mov    %rax,%rdi
    0.00 :	  4208f2:       callq  422bf0 <std::vector<LLord, std::allocator<LLord> >::size() const>
    0.00 :	  4208f7:       mov    %rax,%rcx
    0.00 :	  4208fa:       mov    -0x38(%rbp),%rax
    0.00 :	  4208fe:       lea    -0x21(%rbp),%rdx
    0.00 :	  420902:       mov    %rcx,%rsi
    0.00 :	  420905:       mov    %rax,%rdi
    0.00 :	  420908:       callq  422c68 <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_base(unsigned long, std::allocator<LLord> const&)>
    0.00 :	  42090d:       lea    -0x21(%rbp),%rax
    0.00 :	  420911:       mov    %rax,%rdi
    0.00 :	  420914:       callq  422c4e <std::allocator<LLord>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    0.00 :	  420919:       mov    -0x38(%rbp),%rax
    0.00 :	  42091d:       mov    %rax,%rdi
    0.00 :	  420920:       callq  422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>
    0.00 :	  420925:       mov    %rax,%r13
    0.00 :	  420928:       mov    -0x38(%rbp),%rax
    0.00 :	  42092c:       mov    (%rax),%r12
    0.00 :	  42092f:       mov    -0x40(%rbp),%rax
    0.00 :	  420933:       mov    %rax,%rdi
    0.00 :	  420936:       callq  422cf6 <std::vector<LLord, std::allocator<LLord> >::end() const>
    0.00 :	  42093b:       mov    %rax,%rbx
    0.00 :	  42093e:       mov    -0x40(%rbp),%rax
    0.00 :	  420942:       mov    %rax,%rdi
    0.00 :	  420945:       callq  422cc6 <std::vector<LLord, std::allocator<LLord> >::begin() const>
    0.00 :	  42094a:       mov    %r13,%rcx
    0.00 :	  42094d:       mov    %r12,%rdx
    0.00 :	  420950:       mov    %rbx,%rsi
    0.00 :	  420953:       mov    %rax,%rdi
    0.00 :	  420956:       callq  422d27 <LLord* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, LLord>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, std::allocator<LLord>&)>
         :	      { this->_M_impl._M_finish =
    0.00 :	  42095b:       mov    -0x38(%rbp),%rdx
    0.00 :	  42095f:       mov    %rax,0x8(%rdx)
   25.00 :	  420963:       jmp    420999 <std::vector<LLord, std::allocator<LLord> >::vector(std::vector<LLord, std::allocator<LLord> > const&)+0xe1>
    0.00 :	  420965:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  420968:       lea    -0x21(%rbp),%rax
    0.00 :	  42096c:       mov    %rax,%rdi
    0.00 :	  42096f:       callq  422c4e <std::allocator<LLord>::~allocator()>
    0.00 :	  420974:       mov    %rbx,%rax
    0.00 :	  420977:       mov    %rax,%rdi
    0.00 :	  42097a:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42097f:       mov    %rax,%rbx
    0.00 :	  420982:       mov    -0x38(%rbp),%rax
    0.00 :	  420986:       mov    %rax,%rdi
    0.00 :	  420989:       callq  422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>
    0.00 :	  42098e:       mov    %rbx,%rax
    0.00 :	  420991:       mov    %rax,%rdi
    0.00 :	  420994:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  420999:       add    $0x28,%rsp
    0.00 :	  42099d:       pop    %rbx
    0.00 :	  42099e:       pop    %r12
    0.00 :	  4209a0:       pop    %r13
    0.00 :	  4209a2:       pop    %rbp
    0.00 :	  4209a3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426d7a <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)>:
         :	_ZN9__gnu_cxx13new_allocatorIiE9constructIiIRKiEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    0.00 :	  426d7a:       push   %rbp
    0.00 :	  426d7b:       mov    %rsp,%rbp
    0.00 :	  426d7e:       push   %rbx
    0.00 :	  426d7f:       sub    $0x28,%rsp
    0.00 :	  426d83:       mov    %rdi,-0x18(%rbp)
    0.00 :	  426d87:       mov    %rsi,-0x20(%rbp)
    0.00 :	  426d8b:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  426d8f:       mov    -0x28(%rbp),%rax
   33.33 :	  426d93:       mov    %rax,%rdi
    0.00 :	  426d96:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  426d9b:       mov    (%rax),%ebx
   33.33 :	  426d9d:       mov    -0x20(%rbp),%rax
    0.00 :	  426da1:       mov    %rax,%rsi
    0.00 :	  426da4:       mov    $0x4,%edi
    0.00 :	  426da9:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  426dae:       test   %rax,%rax
    0.00 :	  426db1:       je     426db5 <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)+0x3b>
    0.00 :	  426db3:       mov    %ebx,(%rax)
   33.33 :	  426db5:       add    $0x28,%rsp
    0.00 :	  426db9:       pop    %rbx
    0.00 :	  426dba:       pop    %rbp
    0.00 :	  426dbb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043147a <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEELb0EE7_S_baseES7_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  43147a:       push   %rbp
    0.00 :	  43147b:       mov    %rsp,%rbp
    0.00 :	  43147e:       mov    %rdi,-0x10(%rbp)
         :	      { return __it; }
    0.00 :	  431482:       mov    -0x10(%rbp),%rax
  100.00 :	  431486:       pop    %rbp
    0.00 :	  431487:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425184 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_create_storage(unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE17_M_create_storageEm():
         :	          _M_impl.deallocate(__p, __n);
         :	      }
         :
         :	    private:
         :	      void
         :	      _M_create_storage(size_t __n)
    0.00 :	  425184:       push   %rbp
    0.00 :	  425185:       mov    %rsp,%rbp
    0.00 :	  425188:       sub    $0x10,%rsp
    0.00 :	  42518c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425190:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :	  425194:       mov    -0x10(%rbp),%rdx
    0.00 :	  425198:       mov    -0x8(%rbp),%rax
    0.00 :	  42519c:       mov    %rdx,%rsi
    0.00 :	  42519f:       mov    %rax,%rdi
    0.00 :	  4251a2:       callq  4267ac <std::_Vector_base<LLord, std::allocator<LLord> >::_M_allocate(unsigned long)>
    0.00 :	  4251a7:       mov    -0x8(%rbp),%rdx
   33.33 :	  4251ab:       mov    %rax,(%rdx)
         :	        this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :	  4251ae:       mov    -0x8(%rbp),%rax
   33.33 :	  4251b2:       mov    (%rax),%rdx
    0.00 :	  4251b5:       mov    -0x8(%rbp),%rax
    0.00 :	  4251b9:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :	  4251bd:       mov    -0x8(%rbp),%rax
    0.00 :	  4251c1:       mov    (%rax),%rax
    0.00 :	  4251c4:       mov    -0x10(%rbp),%rdx
    0.00 :	  4251c8:       shl    $0x4,%rdx
    0.00 :	  4251cc:       add    %rax,%rdx
    0.00 :	  4251cf:       mov    -0x8(%rbp),%rax
    0.00 :	  4251d3:       mov    %rdx,0x10(%rax)
         :	      }
   33.33 :	  4251d7:       leaveq
    0.00 :	  4251d8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424998 <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>:
         :	_ZNSt12_Vector_baseIiSaIiEE17_M_create_storageEm():
         :	          _M_impl.deallocate(__p, __n);
         :	      }
         :
         :	    private:
         :	      void
         :	      _M_create_storage(size_t __n)
    0.00 :	  424998:       push   %rbp
    0.00 :	  424999:       mov    %rsp,%rbp
    0.00 :	  42499c:       sub    $0x10,%rsp
   33.33 :	  4249a0:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4249a4:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :	  4249a8:       mov    -0x10(%rbp),%rdx
   33.33 :	  4249ac:       mov    -0x8(%rbp),%rax
    0.00 :	  4249b0:       mov    %rdx,%rsi
    0.00 :	  4249b3:       mov    %rax,%rdi
    0.00 :	  4249b6:       callq  423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    0.00 :	  4249bb:       mov    -0x8(%rbp),%rdx
    0.00 :	  4249bf:       mov    %rax,(%rdx)
         :	        this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :	  4249c2:       mov    -0x8(%rbp),%rax
    0.00 :	  4249c6:       mov    (%rax),%rdx
    0.00 :	  4249c9:       mov    -0x8(%rbp),%rax
    0.00 :	  4249cd:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :	  4249d1:       mov    -0x8(%rbp),%rax
    0.00 :	  4249d5:       mov    (%rax),%rax
    0.00 :	  4249d8:       mov    -0x10(%rbp),%rdx
    0.00 :	  4249dc:       shl    $0x2,%rdx
   33.33 :	  4249e0:       add    %rax,%rdx
    0.00 :	  4249e3:       mov    -0x8(%rbp),%rax
    0.00 :	  4249e7:       mov    %rdx,0x10(%rax)
         :	      }
    0.00 :	  4249eb:       leaveq
    0.00 :	  4249ec:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseIiSaIiEED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
    0.00 :	  420dfe:       push   %rbp
    0.00 :	  420dff:       mov    %rsp,%rbp
    0.00 :	  420e02:       sub    $0x10,%rsp
    0.00 :	  420e06:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    0.00 :	  420e0a:       mov    -0x8(%rbp),%rax
   33.33 :	  420e0e:       mov    0x10(%rax),%rax
   33.33 :	  420e12:       mov    %rax,%rdx
    0.00 :	  420e15:       mov    -0x8(%rbp),%rax
    0.00 :	  420e19:       mov    (%rax),%rax
    0.00 :	  420e1c:       sub    %rax,%rdx
    0.00 :	  420e1f:       mov    %rdx,%rax
    0.00 :	  420e22:       sar    $0x2,%rax
    0.00 :	  420e26:       mov    %rax,%rdx
    0.00 :	  420e29:       mov    -0x8(%rbp),%rax
    0.00 :	  420e2d:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  420e30:       mov    -0x8(%rbp),%rax
    0.00 :	  420e34:       mov    %rcx,%rsi
    0.00 :	  420e37:       mov    %rax,%rdi
    0.00 :	  420e3a:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    0.00 :	  420e3f:       mov    -0x8(%rbp),%rax
    0.00 :	  420e43:       mov    %rax,%rdi
    0.00 :	  420e46:       callq  420dca <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  420e4b:       leaveq
   33.33 :	  420e4c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428a25 <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)>:
         :	_ZSt10__fill_n_aIPdmdEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_():
         :	    }
         :
         :	  template<typename _OutputIterator, typename _Size, typename _Tp>
         :	    inline typename
         :	    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :	    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    0.00 :	  428a25:       push   %rbp
    0.00 :	  428a26:       mov    %rsp,%rbp
    0.00 :	  428a29:       mov    %rdi,-0x18(%rbp)
    0.00 :	  428a2d:       mov    %rsi,-0x20(%rbp)
    0.00 :	  428a31:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      const _Tp __tmp = __value;
    0.00 :	  428a35:       mov    -0x28(%rbp),%rax
    0.00 :	  428a39:       mov    (%rax),%rax
    0.00 :	  428a3c:       mov    %rax,-0x10(%rbp)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428a40:       mov    -0x20(%rbp),%rax
    0.00 :	  428a44:       mov    %rax,-0x8(%rbp)
    0.00 :	  428a48:       jmp    428a5f <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)+0x3a>
         :	           __niter > 0; --__niter, ++__first)
         :	        *__first = __tmp;
    0.00 :	  428a4a:       mov    -0x18(%rbp),%rdx
    0.00 :	  428a4e:       mov    -0x10(%rbp),%rax
    0.00 :	  428a52:       mov    %rax,(%rdx)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428a55:       subq   $0x1,-0x8(%rbp)
   33.33 :	  428a5a:       addq   $0x8,-0x18(%rbp)
    0.00 :	  428a5f:       cmpq   $0x0,-0x8(%rbp)
   33.33 :	  428a64:       jne    428a4a <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)+0x25>
         :	      return __first;
    0.00 :	  428a66:       mov    -0x18(%rbp),%rax
         :	    }
   33.33 :	  428a6a:       pop    %rbp
    0.00 :	  428a6b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeESA_():
         :	    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Miter_base<_Iterator>::iterator_type
         :	    __miter_base(_Iterator __it)
    0.00 :	  42f682:       push   %rbp
    0.00 :	  42f683:       mov    %rsp,%rbp
    0.00 :	  42f686:       sub    $0x10,%rsp
    0.00 :	  42f68a:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Miter_base<_Iterator>::_S_base(__it); }
    0.00 :	  42f68e:       mov    -0x10(%rbp),%rax
   33.33 :	  42f692:       mov    %rax,%rdi
    0.00 :	  42f695:       callq  4304ef <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42f69a:       leaveq
   66.67 :	  42f69b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043057e <std::_Niter_base<LLcol*>::iterator_type std::__niter_base<LLcol*>(LLcol*)>:
         :	_ZSt12__niter_baseIP5LLcolENSt11_Niter_baseIT_E13iterator_typeES3_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  43057e:       push   %rbp
   66.67 :	  43057f:       mov    %rsp,%rbp
   33.33 :	  430582:       sub    $0x10,%rsp
    0.00 :	  430586:       mov    %rdi,-0x8(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  43058a:       mov    -0x8(%rbp),%rax
    0.00 :	  43058e:       mov    %rax,%rdi
    0.00 :	  430591:       callq  430570 <std::_Iter_base<LLcol*, false>::_S_base(LLcol*)>
    0.00 :	  430596:       leaveq
    0.00 :	  430597:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f453 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    inline void
         :	    __unguarded_insertion_sort(_RandomAccessIterator __first,
    0.00 :	  42f453:       push   %rbp
    0.00 :	  42f454:       mov    %rsp,%rbp
    0.00 :	  42f457:       sub    $0x30,%rsp
    0.00 :	  42f45b:       mov    %rdi,-0x20(%rbp)
    0.00 :	  42f45f:       mov    %rsi,-0x30(%rbp)
    0.00 :	  42f463:       mov    %rdx,-0x28(%rbp)
         :	                               _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      typedef typename iterator_traits<_RandomAccessIterator>::value_type
         :	        _ValueType;
         :
         :	      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
    0.00 :	  42f467:       mov    -0x20(%rbp),%rax
    0.00 :	  42f46b:       mov    %rax,-0x10(%rbp)
    0.00 :	  42f46f:       jmp    42f490 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x3d>
         :	        std::__unguarded_linear_insert(__i, __comp);
   33.33 :	  42f471:       mov    -0x28(%rbp),%rdx
    0.00 :	  42f475:       mov    -0x10(%rbp),%rax
    0.00 :	  42f479:       mov    %rdx,%rsi
    0.00 :	  42f47c:       mov    %rax,%rdi
    0.00 :	  42f47f:       callq  430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
    0.00 :	  42f484:       lea    -0x10(%rbp),%rax
    0.00 :	  42f488:       mov    %rax,%rdi
    0.00 :	  42f48b:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
    0.00 :	  42f490:       lea    -0x30(%rbp),%rdx
    0.00 :	  42f494:       lea    -0x10(%rbp),%rax
    0.00 :	  42f498:       mov    %rdx,%rsi
    0.00 :	  42f49b:       mov    %rax,%rdi
   33.33 :	  42f49e:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42f4a3:       test   %al,%al
    0.00 :	  42f4a5:       jne    42f471 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x1e>
    0.00 :	  42f4a7:       jmp    42f4b1 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x5e>
    0.00 :	  42f4a9:       mov    %rax,%rdi
    0.00 :	  42f4ac:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  42f4b1:       leaveq
   33.33 :	  42f4b2:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f4dc <std::allocator<LLcol>::allocator(std::allocator<LLcol> const&)>:
         :	_ZNSaI5LLcolEC2ERKS0_():
         :	      typedef true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      allocator() throw() { }
         :
         :	      allocator(const allocator& __a) throw()
    0.00 :	  42f4dc:       push   %rbp
    0.00 :	  42f4dd:       mov    %rsp,%rbp
    0.00 :	  42f4e0:       sub    $0x10,%rsp
    0.00 :	  42f4e4:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f4e8:       mov    %rsi,-0x10(%rbp)
         :	      : __allocator_base<_Tp>(__a) { }
   33.33 :	  42f4ec:       mov    -0x10(%rbp),%rdx
   66.67 :	  42f4f0:       mov    -0x8(%rbp),%rax
    0.00 :	  42f4f4:       mov    %rdx,%rsi
    0.00 :	  42f4f7:       mov    %rax,%rdi
    0.00 :	  42f4fa:       callq  4304a6 <__gnu_cxx::new_allocator<LLcol>::new_allocator(__gnu_cxx::new_allocator<LLcol> const&)>
    0.00 :	  42f4ff:       leaveq
    0.00 :	  42f500:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422c4e <std::allocator<LLord>::~allocator()>:
         :	_ZNSaI5LLordED2Ev():
         :	      : __allocator_base<_Tp>(__a) { }
         :
         :	      template<typename _Tp1>
         :	        allocator(const allocator<_Tp1>&) throw() { }
         :
         :	      ~allocator() throw() { }
    0.00 :	  422c4e:       push   %rbp
    0.00 :	  422c4f:       mov    %rsp,%rbp
    0.00 :	  422c52:       sub    $0x10,%rsp
    0.00 :	  422c56:       mov    %rdi,-0x8(%rbp)
    0.00 :	  422c5a:       mov    -0x8(%rbp),%rax
  100.00 :	  422c5e:       mov    %rax,%rdi
    0.00 :	  422c61:       callq  425132 <__gnu_cxx::new_allocator<LLord>::~new_allocator()>
    0.00 :	  422c66:       leaveq
    0.00 :	  422c67:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ea2b <decltype (_S_construct({parm#1}, {parm#2}, (forward<double const&>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double const&>(std::allocator<double>&, double*, double const&)>:
         :	_ZNSt16allocator_traitsISaIdEE9constructIdIRKdEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_():
         :	       *  if that expression is well-formed, otherwise uses placement-new
         :	       *  to construct an object of type @a _Tp at location @a __p from the
         :	       *  arguments @a __args...
         :	      */
         :	      template<typename _Tp, typename... _Args>
         :	        static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    0.00 :	  42ea2b:       push   %rbp
    0.00 :	  42ea2c:       mov    %rsp,%rbp
    0.00 :	  42ea2f:       sub    $0x20,%rsp
    0.00 :	  42ea33:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42ea37:       mov    %rsi,-0x10(%rbp)
   33.33 :	  42ea3b:       mov    %rdx,-0x18(%rbp)
         :	        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
         :	        { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    0.00 :	  42ea3f:       mov    -0x18(%rbp),%rax
    0.00 :	  42ea43:       mov    %rax,%rdi
    0.00 :	  42ea46:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
    0.00 :	  42ea4b:       mov    %rax,%rdx
    0.00 :	  42ea4e:       mov    -0x10(%rbp),%rcx
   33.33 :	  42ea52:       mov    -0x8(%rbp),%rax
    0.00 :	  42ea56:       mov    %rcx,%rsi
    0.00 :	  42ea59:       mov    %rax,%rdi
    0.00 :	  42ea5c:       callq  42f907 <std::enable_if<std::allocator_traits<std::allocator<double> >::__construct_helper<double<double const&> >::value, void>::type std::allocator_traits<std::allocator<double> >::_S_construct<double, double const&>(std::allocator<double>&, double*, double const&)>
    0.00 :	  42ea61:       leaveq
   33.33 :	  42ea62:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>:
         :	_ZNSt26linear_congruential_engineImLm16807ELm0ELm2147483647EE3minEv():
         :	       *
         :	       * The minimum depends on the @p __c parameter: if it is zero, the
         :	       * minimum generated must be > 0, otherwise 0 is allowed.
         :	       */
         :	      static constexpr result_type
         :	      min()
   66.67 :	  43066c:       push   %rbp
    0.00 :	  43066d:       mov    %rsp,%rbp
         :	      { return __c == 0u ? 1u : 0u; }
    0.00 :	  430670:       mov    $0x1,%eax
   33.33 :	  430675:       pop    %rbp
    0.00 :	  430676:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427ae8 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
         :	_ZSt3minImERKT_S2_S2_():
         :	   *  temporary expressions, since they are only evaluated once, unlike a
         :	   *  preprocessor macro.
         :	  */
         :	  template<typename _Tp>
         :	    inline const _Tp&
         :	    min(const _Tp& __a, const _Tp& __b)
    0.00 :	  427ae8:       push   %rbp
   66.67 :	  427ae9:       mov    %rsp,%rbp
    0.00 :	  427aec:       mov    %rdi,-0x8(%rbp)
    0.00 :	  427af0:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :	      //return __b < __a ? __b : __a;
         :	      if (__b < __a)
    0.00 :	  427af4:       mov    -0x10(%rbp),%rax
    0.00 :	  427af8:       mov    (%rax),%rdx
   33.33 :	  427afb:       mov    -0x8(%rbp),%rax
    0.00 :	  427aff:       mov    (%rax),%rax
    0.00 :	  427b02:       cmp    %rax,%rdx
    0.00 :	  427b05:       jae    427b0d <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
         :	        return __b;
    0.00 :	  427b07:       mov    -0x10(%rbp),%rax
    0.00 :	  427b0b:       jmp    427b11 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
         :	      return __a;
    0.00 :	  427b0d:       mov    -0x8(%rbp),%rax
         :	    }
    0.00 :	  427b11:       pop    %rbp
    0.00 :	  427b12:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE3endEv():
         :	       *  Returns a read-only (constant) iterator that points one past
         :	       *  the last element in the %vector.  Iteration is done in
         :	       *  ordinary element order.
         :	       */
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
   33.33 :	  42e4d0:       push   %rbp
    0.00 :	  42e4d1:       mov    %rsp,%rbp
   33.33 :	  42e4d4:       sub    $0x20,%rsp
    0.00 :	  42e4d8:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_finish); }
    0.00 :	  42e4dc:       mov    -0x18(%rbp),%rax
    0.00 :	  42e4e0:       mov    0x8(%rax),%rax
    0.00 :	  42e4e4:       mov    %rax,-0x8(%rbp)
    0.00 :	  42e4e8:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e4ec:       lea    -0x10(%rbp),%rax
    0.00 :	  42e4f0:       mov    %rdx,%rsi
    0.00 :	  42e4f3:       mov    %rax,%rdi
    0.00 :	  42e4f6:       callq  42f5a0 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol const* const&)>
    0.00 :	  42e4fb:       mov    -0x10(%rbp),%rax
   33.33 :	  42e4ff:       leaveq
    0.00 :	  42e500:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.00 :	  42d016:       push   %rbp
   33.33 :	  42d017:       mov    %rsp,%rbp
    0.00 :	  42d01a:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   33.33 :	  42d01e:       mov    -0x8(%rbp),%rax
    0.00 :	  42d022:       mov    0x8(%rax),%rax
    0.00 :	  42d026:       mov    %rax,%rdx
    0.00 :	  42d029:       mov    -0x8(%rbp),%rax
    0.00 :	  42d02d:       mov    (%rax),%rax
    0.00 :	  42d030:       sub    %rax,%rdx
   33.33 :	  42d033:       mov    %rdx,%rax
    0.00 :	  42d036:       sar    $0x4,%rax
    0.00 :	  42d03a:       pop    %rbp
    0.00 :	  42d03b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004212e6 <std::vector<int, std::allocator<int> >::size() const>:
         :	_ZNKSt6vectorIiSaIiEE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.00 :	  4212e6:       push   %rbp
    0.00 :	  4212e7:       mov    %rsp,%rbp
    0.00 :	  4212ea:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :	  4212ee:       mov    -0x8(%rbp),%rax
   66.67 :	  4212f2:       mov    0x8(%rax),%rax
    0.00 :	  4212f6:       mov    %rax,%rdx
    0.00 :	  4212f9:       mov    -0x8(%rbp),%rax
    0.00 :	  4212fd:       mov    (%rax),%rax
    0.00 :	  421300:       sub    %rax,%rdx
    0.00 :	  421303:       mov    %rdx,%rax
   33.33 :	  421306:       sar    $0x2,%rax
    0.00 :	  42130a:       pop    %rbp
    0.00 :	  42130b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041ec22 <Edge::operator<(Edge const&) const>:
         :	_ZNK4EdgeltERKS_():
         :	        //     r = c;
         :	        //     c = tmp;
         :	        // }
         :	    }
         :
         :	    bool operator < (const Edge& e) const
    0.00 :	  41ec22:       push   %rbp
    0.00 :	  41ec23:       mov    %rsp,%rbp
    0.00 :	  41ec26:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41ec2a:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	        return (this->c < e.c) || ((this->c == e.c) && this->r < e.r);
    0.00 :	  41ec2e:       mov    -0x8(%rbp),%rax
    0.00 :	  41ec32:       mov    0x4(%rax),%edx
    0.00 :	  41ec35:       mov    -0x10(%rbp),%rax
    0.00 :	  41ec39:       mov    0x4(%rax),%eax
   50.00 :	  41ec3c:       cmp    %eax,%edx
    0.00 :	  41ec3e:       jl     41ec62 <Edge::operator<(Edge const&) const+0x40>
    0.00 :	  41ec40:       mov    -0x8(%rbp),%rax
    0.00 :	  41ec44:       mov    0x4(%rax),%edx
    0.00 :	  41ec47:       mov    -0x10(%rbp),%rax
    0.00 :	  41ec4b:       mov    0x4(%rax),%eax
    0.00 :	  41ec4e:       cmp    %eax,%edx
    0.00 :	  41ec50:       jne    41ec69 <Edge::operator<(Edge const&) const+0x47>
    0.00 :	  41ec52:       mov    -0x8(%rbp),%rax
   50.00 :	  41ec56:       mov    (%rax),%edx
    0.00 :	  41ec58:       mov    -0x10(%rbp),%rax
    0.00 :	  41ec5c:       mov    (%rax),%eax
    0.00 :	  41ec5e:       cmp    %eax,%edx
    0.00 :	  41ec60:       jge    41ec69 <Edge::operator<(Edge const&) const+0x47>
    0.00 :	  41ec62:       mov    $0x1,%eax
    0.00 :	  41ec67:       jmp    41ec6e <Edge::operator<(Edge const&) const+0x4c>
    0.00 :	  41ec69:       mov    $0x0,%eax
         :	    }
    0.00 :	  41ec6e:       pop    %rbp
    0.00 :	  41ec6f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304a6 <__gnu_cxx::new_allocator<LLcol>::new_allocator(__gnu_cxx::new_allocator<LLcol> const&)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolEC2ERKS2_():
         :	      typedef std::true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   50.00 :	  4304a6:       push   %rbp
    0.00 :	  4304a7:       mov    %rsp,%rbp
   50.00 :	  4304aa:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4304ae:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4304b2:       pop    %rbp
    0.00 :	  4304b3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004274b0 <__gnu_cxx::new_allocator<int>::max_size() const>:
         :	_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv():
         :	      void
         :	      deallocate(pointer __p, size_type)
         :	      { ::operator delete(__p); }
         :
         :	      size_type
         :	      max_size() const _GLIBCXX_USE_NOEXCEPT
    0.00 :	  4274b0:       push   %rbp
    0.00 :	  4274b1:       mov    %rsp,%rbp
    0.00 :	  4274b4:       mov    %rdi,-0x8(%rbp)
         :	      { return size_t(-1) / sizeof(_Tp); }
   50.00 :	  4274b8:       movabs $0x3fffffffffffffff,%rax
   50.00 :	  4274c2:       pop    %rbp
    0.00 :	  4274c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430c3c <bool __gnu_cxx::operator< <LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxltIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	              const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() < __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
    0.00 :	  430c3c:       push   %rbp
    0.00 :	  430c3d:       mov    %rsp,%rbp
    0.00 :	  430c40:       push   %rbx
    0.00 :	  430c41:       sub    $0x18,%rsp
    0.00 :	  430c45:       mov    %rdi,-0x18(%rbp)
    0.00 :	  430c49:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() < __rhs.base(); }
    0.00 :	  430c4d:       mov    -0x18(%rbp),%rax
    0.00 :	  430c51:       mov    %rax,%rdi
    0.00 :	  430c54:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  430c59:       mov    (%rax),%rbx
    0.00 :	  430c5c:       mov    -0x20(%rbp),%rax
    0.00 :	  430c60:       mov    %rax,%rdi
    0.00 :	  430c63:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  430c68:       mov    (%rax),%rax
   50.00 :	  430c6b:       cmp    %rax,%rbx
   50.00 :	  430c6e:       setb   %al
    0.00 :	  430c71:       add    $0x18,%rsp
    0.00 :	  430c75:       pop    %rbx
    0.00 :	  430c76:       pop    %rbp
    0.00 :	  430c77:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e71 <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES8_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  430e71:       push   %rbp
    0.00 :	  430e72:       mov    %rsp,%rbp
    0.00 :	  430e75:       sub    $0x10,%rsp
    0.00 :	  430e79:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
   50.00 :	  430e7d:       lea    -0x10(%rbp),%rax
    0.00 :	  430e81:       mov    %rax,%rdi
    0.00 :	  430e84:       callq  431512 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
   50.00 :	  430e89:       mov    (%rax),%rax
    0.00 :	  430e8c:       leaveq
    0.00 :	  430e8d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e8e <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES7_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  430e8e:       push   %rbp
   50.00 :	  430e8f:       mov    %rsp,%rbp
    0.00 :	  430e92:       sub    $0x10,%rsp
    0.00 :	  430e96:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
   50.00 :	  430e9a:       lea    -0x10(%rbp),%rax
    0.00 :	  430e9e:       mov    %rax,%rdi
    0.00 :	  430ea1:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  430ea6:       mov    (%rax),%rax
    0.00 :	  430ea9:       leaveq
    0.00 :	  430eaa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f54a <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_create_storage(unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE17_M_create_storageEm():
         :	          _M_impl.deallocate(__p, __n);
         :	      }
         :
         :	    private:
         :	      void
         :	      _M_create_storage(size_t __n)
    0.00 :	  42f54a:       push   %rbp
    0.00 :	  42f54b:       mov    %rsp,%rbp
    0.00 :	  42f54e:       sub    $0x10,%rsp
    0.00 :	  42f552:       mov    %rdi,-0x8(%rbp)
   50.00 :	  42f556:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :	  42f55a:       mov    -0x10(%rbp),%rdx
    0.00 :	  42f55e:       mov    -0x8(%rbp),%rax
    0.00 :	  42f562:       mov    %rdx,%rsi
    0.00 :	  42f565:       mov    %rax,%rdi
    0.00 :	  42f568:       callq  42f0fa <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)>
    0.00 :	  42f56d:       mov    -0x8(%rbp),%rdx
    0.00 :	  42f571:       mov    %rax,(%rdx)
         :	        this->_M_impl._M_finish = this->_M_impl._M_start;
    0.00 :	  42f574:       mov    -0x8(%rbp),%rax
   50.00 :	  42f578:       mov    (%rax),%rdx
    0.00 :	  42f57b:       mov    -0x8(%rbp),%rax
    0.00 :	  42f57f:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :	  42f583:       mov    -0x8(%rbp),%rax
    0.00 :	  42f587:       mov    (%rax),%rax
    0.00 :	  42f58a:       mov    -0x10(%rbp),%rdx
    0.00 :	  42f58e:       shl    $0x4,%rdx
    0.00 :	  42f592:       add    %rax,%rdx
    0.00 :	  42f595:       mov    -0x8(%rbp),%rax
    0.00 :	  42f599:       mov    %rdx,0x10(%rax)
         :	      }
    0.00 :	  42f59d:       leaveq
    0.00 :	  42f59e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE19_M_get_Tp_allocatorEv():
         :
         :	    public:
         :	      typedef _Alloc allocator_type;
         :
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   50.00 :	  42e502:       push   %rbp
    0.00 :	  42e503:       mov    %rsp,%rbp
   50.00 :	  42e506:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    0.00 :	  42e50a:       mov    -0x8(%rbp),%rax
    0.00 :	  42e50e:       pop    %rbp
    0.00 :	  42e50f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
   50.00 :	  42e450:       push   %rbp
    0.00 :	  42e451:       mov    %rsp,%rbp
    0.00 :	  42e454:       sub    $0x10,%rsp
    0.00 :	  42e458:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    0.00 :	  42e45c:       mov    -0x8(%rbp),%rax
    0.00 :	  42e460:       mov    0x10(%rax),%rax
   50.00 :	  42e464:       mov    %rax,%rdx
    0.00 :	  42e467:       mov    -0x8(%rbp),%rax
    0.00 :	  42e46b:       mov    (%rax),%rax
    0.00 :	  42e46e:       sub    %rax,%rdx
    0.00 :	  42e471:       mov    %rdx,%rax
    0.00 :	  42e474:       sar    $0x4,%rax
    0.00 :	  42e478:       mov    %rax,%rdx
    0.00 :	  42e47b:       mov    -0x8(%rbp),%rax
    0.00 :	  42e47f:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  42e482:       mov    -0x8(%rbp),%rax
    0.00 :	  42e486:       mov    %rcx,%rsi
    0.00 :	  42e489:       mov    %rax,%rdi
    0.00 :	  42e48c:       callq  42e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    0.00 :	  42e491:       mov    -0x8(%rbp),%rax
    0.00 :	  42e495:       mov    %rax,%rdi
    0.00 :	  42e498:       callq  42e3d8 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42e49d:       leaveq
    0.00 :	  42e49e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE19_M_get_Tp_allocatorEv():
         :
         :	    public:
         :	      typedef _Alloc allocator_type;
         :
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    0.00 :	  422052:       push   %rbp
    0.00 :	  422053:       mov    %rsp,%rbp
    0.00 :	  422056:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    0.00 :	  42205a:       mov    -0x8(%rbp),%rax
  100.00 :	  42205e:       pop    %rbp
    0.00 :	  42205f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042212e <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)>:
         :	_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_():
         :
         :	      _Vector_base(size_t __n)
         :	      : _M_impl()
         :	      { _M_create_storage(__n); }
         :
         :	      _Vector_base(size_t __n, const allocator_type& __a)
    0.00 :	  42212e:       push   %rbp
    0.00 :	  42212f:       mov    %rsp,%rbp
    0.00 :	  422132:       push   %rbx
    0.00 :	  422133:       sub    $0x28,%rsp
    0.00 :	  422137:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42213b:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42213f:       mov    %rdx,-0x28(%rbp)
         :	      : _M_impl(__a)
    0.00 :	  422143:       mov    -0x18(%rbp),%rax
    0.00 :	  422147:       mov    -0x28(%rbp),%rdx
   50.00 :	  42214b:       mov    %rdx,%rsi
    0.00 :	  42214e:       mov    %rax,%rdi
    0.00 :	  422151:       callq  424950 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)>
         :	      { _M_create_storage(__n); }
    0.00 :	  422156:       mov    -0x20(%rbp),%rdx
   50.00 :	  42215a:       mov    -0x18(%rbp),%rax
    0.00 :	  42215e:       mov    %rdx,%rsi
    0.00 :	  422161:       mov    %rax,%rdi
    0.00 :	  422164:       callq  424998 <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>
    0.00 :	  422169:       jmp    422185 <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)+0x57>
    0.00 :	  42216b:       mov    %rax,%rbx
         :	      : _M_impl(__a)
    0.00 :	  42216e:       mov    -0x18(%rbp),%rax
    0.00 :	  422172:       mov    %rax,%rdi
    0.00 :	  422175:       callq  420dca <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42217a:       mov    %rbx,%rax
    0.00 :	  42217d:       mov    %rax,%rdi
    0.00 :	  422180:       callq  41dda0 <_Unwind_Resume@plt>
         :	      { _M_create_storage(__n); }
    0.00 :	  422185:       add    $0x28,%rsp
    0.00 :	  422189:       pop    %rbx
    0.00 :	  42218a:       pop    %rbp
    0.00 :	  42218b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424950 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)>:
         :	_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC2ERKS0_():
         :
         :	        _Vector_impl()
         :	        : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
         :	        { }
         :
         :	        _Vector_impl(_Tp_alloc_type const& __a)
    0.00 :	  424950:       push   %rbp
    0.00 :	  424951:       mov    %rsp,%rbp
    0.00 :	  424954:       sub    $0x10,%rsp
    0.00 :	  424958:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42495c:       mov    %rsi,-0x10(%rbp)
         :	        : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    0.00 :	  424960:       mov    -0x10(%rbp),%rdx
   50.00 :	  424964:       mov    -0x8(%rbp),%rax
    0.00 :	  424968:       mov    %rdx,%rsi
    0.00 :	  42496b:       mov    %rax,%rdi
    0.00 :	  42496e:       callq  425074 <std::allocator<int>::allocator(std::allocator<int> const&)>
    0.00 :	  424973:       mov    -0x8(%rbp),%rax
    0.00 :	  424977:       movq   $0x0,(%rax)
   50.00 :	  42497e:       mov    -0x8(%rbp),%rax
    0.00 :	  424982:       movq   $0x0,0x8(%rax)
    0.00 :	  42498a:       mov    -0x8(%rbp),%rax
    0.00 :	  42498e:       movq   $0x0,0x10(%rax)
         :	        { }
    0.00 :	  424996:       leaveq
    0.00 :	  424997:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f69c <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET1_T0_SC_SB_():
         :	    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
         :	                   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a2(_II __first, _II __last, _OI __result)
   50.00 :	  42f69c:       push   %rbp
    0.00 :	  42f69d:       mov    %rsp,%rbp
    0.00 :	  42f6a0:       push   %r12
    0.00 :	  42f6a2:       push   %rbx
    0.00 :	  42f6a3:       sub    $0x40,%rsp
    0.00 :	  42f6a7:       mov    %rdi,-0x30(%rbp)
    0.00 :	  42f6ab:       mov    %rsi,-0x40(%rbp)
    0.00 :	  42f6af:       mov    %rdx,-0x50(%rbp)
         :	    {
         :	      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
         :	                                             std::__niter_base(__last),
         :	                                             std::__niter_base(__result)));
    0.00 :	  42f6b3:       mov    -0x50(%rbp),%rax
    0.00 :	  42f6b7:       mov    %rax,%rdi
    0.00 :	  42f6ba:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42f6bf:       mov    %rax,%r12
    0.00 :	  42f6c2:       mov    -0x40(%rbp),%rax
   50.00 :	  42f6c6:       mov    %rax,%rdi
    0.00 :	  42f6c9:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42f6ce:       mov    %rax,%rbx
    0.00 :	  42f6d1:       mov    -0x30(%rbp),%rax
    0.00 :	  42f6d5:       mov    %rax,%rdi
    0.00 :	  42f6d8:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42f6dd:       mov    %r12,%rdx
    0.00 :	  42f6e0:       mov    %rbx,%rsi
    0.00 :	  42f6e3:       mov    %rax,%rdi
    0.00 :	  42f6e6:       callq  430531 <LLcol* std::__copy_move_a<false, LLcol const*, LLcol*>(LLcol const*, LLcol const*, LLcol*)>
    0.00 :	  42f6eb:       mov    %rax,-0x18(%rbp)
    0.00 :	  42f6ef:       lea    -0x18(%rbp),%rdx
    0.00 :	  42f6f3:       lea    -0x20(%rbp),%rax
    0.00 :	  42f6f7:       mov    %rdx,%rsi
    0.00 :	  42f6fa:       mov    %rax,%rdi
    0.00 :	  42f6fd:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  42f702:       mov    -0x20(%rbp),%rax
         :	    }
    0.00 :	  42f706:       add    $0x40,%rsp
    0.00 :	  42f70a:       pop    %rbx
    0.00 :	  42f70b:       pop    %r12
    0.00 :	  42f70d:       pop    %rbp
    0.00 :	  42f70e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431488 <LLcol* std::__copy_move_backward_a<true, LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>:
         :	_ZSt22__copy_move_backward_aILb1EP5LLcolS1_ET1_T0_S3_S2_():
         :	        }
         :	    };
         :
         :	  template<bool _IsMove, typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    0.00 :	  431488:       push   %rbp
    0.00 :	  431489:       mov    %rsp,%rbp
    0.00 :	  43148c:       sub    $0x30,%rsp
    0.00 :	  431490:       mov    %rdi,-0x18(%rbp)
   50.00 :	  431494:       mov    %rsi,-0x20(%rbp)
    0.00 :	  431498:       mov    %rdx,-0x28(%rbp)
         :	      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
         :	      typedef typename iterator_traits<_BI1>::iterator_category _Category;
         :	      const bool __simple = (__is_trivial(_ValueType1)
         :	                             && __is_pointer<_BI1>::__value
         :	                             && __is_pointer<_BI2>::__value
         :	                             && __are_same<_ValueType1, _ValueType2>::__value);
    0.00 :	  43149c:       movb   $0x1,-0x1(%rbp)
         :
         :	      return std::__copy_move_backward<_IsMove, __simple,
         :	                                       _Category>::__copy_move_b(__first,
         :	                                                                 __last,
         :	                                                                 __result);
    0.00 :	  4314a0:       mov    -0x28(%rbp),%rdx
    0.00 :	  4314a4:       mov    -0x20(%rbp),%rcx
    0.00 :	  4314a8:       mov    -0x18(%rbp),%rax
    0.00 :	  4314ac:       mov    %rcx,%rsi
    0.00 :	  4314af:       mov    %rax,%rdi
    0.00 :	  4314b2:       callq  4317ee <LLcol* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<LLcol>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    0.00 :	  4314b7:       leaveq
   50.00 :	  4314b8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428acc <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)>:
         :	_ZSt10__fill_n_aIPimiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_():
         :	    }
         :
         :	  template<typename _OutputIterator, typename _Size, typename _Tp>
         :	    inline typename
         :	    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :	    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    0.00 :	  428acc:       push   %rbp
    0.00 :	  428acd:       mov    %rsp,%rbp
    0.00 :	  428ad0:       mov    %rdi,-0x18(%rbp)
   50.00 :	  428ad4:       mov    %rsi,-0x20(%rbp)
    0.00 :	  428ad8:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      const _Tp __tmp = __value;
    0.00 :	  428adc:       mov    -0x28(%rbp),%rax
    0.00 :	  428ae0:       mov    (%rax),%eax
    0.00 :	  428ae2:       mov    %eax,-0xc(%rbp)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428ae5:       mov    -0x20(%rbp),%rax
    0.00 :	  428ae9:       mov    %rax,-0x8(%rbp)
    0.00 :	  428aed:       jmp    428b02 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)+0x36>
         :	           __niter > 0; --__niter, ++__first)
         :	        *__first = __tmp;
    0.00 :	  428aef:       mov    -0x18(%rbp),%rax
    0.00 :	  428af3:       mov    -0xc(%rbp),%edx
    0.00 :	  428af6:       mov    %edx,(%rax)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428af8:       subq   $0x1,-0x8(%rbp)
    0.00 :	  428afd:       addq   $0x4,-0x18(%rbp)
    0.00 :	  428b02:       cmpq   $0x0,-0x8(%rbp)
   50.00 :	  428b07:       jne    428aef <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)+0x23>
         :	      return __first;
    0.00 :	  428b09:       mov    -0x18(%rbp),%rax
         :	    }
    0.00 :	  428b0d:       pop    %rbp
    0.00 :	  428b0e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041eb06 <std::__lg(long)>:
         :	_ZSt4__lgl():
         :	  __lg(unsigned __n)
         :	  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
         :
         :	  inline _GLIBCXX_CONSTEXPR long
         :	  __lg(long __n)
         :	  { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }
   50.00 :	  41eb06:       push   %rbp
    0.00 :	  41eb07:       mov    %rsp,%rbp
    0.00 :	  41eb0a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41eb0e:       mov    $0x40,%edx
    0.00 :	  41eb13:       mov    -0x8(%rbp),%rax
   50.00 :	  41eb17:       lzcnt  %rax,%rax
    0.00 :	  41eb1c:       cltq
    0.00 :	  41eb1e:       sub    %rax,%rdx
    0.00 :	  41eb21:       mov    %rdx,%rax
    0.00 :	  41eb24:       sub    $0x1,%rax
    0.00 :	  41eb28:       pop    %rbp
    0.00 :	  41eb29:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f1fd <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EET_SC_SC_T0_():
         :
         :
         :	  /// This is a helper function...
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    inline _RandomAccessIterator
         :	    __unguarded_partition_pivot(_RandomAccessIterator __first,
    0.00 :	  42f1fd:       push   %rbp
    0.00 :	  42f1fe:       mov    %rsp,%rbp
    0.00 :	  42f201:       push   %rbx
   50.00 :	  42f202:       sub    $0x58,%rsp
    0.00 :	  42f206:       mov    %rdi,-0x50(%rbp)
    0.00 :	  42f20a:       mov    %rsi,-0x60(%rbp)
    0.00 :	  42f20e:       mov    %rdx,-0x58(%rbp)
         :	                                _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
    0.00 :	  42f212:       lea    -0x50(%rbp),%rdx
    0.00 :	  42f216:       lea    -0x60(%rbp),%rax
    0.00 :	  42f21a:       mov    %rdx,%rsi
    0.00 :	  42f21d:       mov    %rax,%rdi
    0.00 :	  42f220:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42f225:       mov    %rax,%rdx
    0.00 :	  42f228:       shr    $0x3f,%rdx
    0.00 :	  42f22c:       add    %rdx,%rax
    0.00 :	  42f22f:       sar    %rax
    0.00 :	  42f232:       mov    %rax,-0x30(%rbp)
    0.00 :	  42f236:       lea    -0x30(%rbp),%rdx
    0.00 :	  42f23a:       lea    -0x50(%rbp),%rax
    0.00 :	  42f23e:       mov    %rdx,%rsi
    0.00 :	  42f241:       mov    %rax,%rdi
    0.00 :	  42f244:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42f249:       mov    %rax,-0x40(%rbp)
         :	      std::__move_median_to_first(__first, __first + 1, __mid, (__last - 2),
         :	                                  __comp);
    0.00 :	  42f24d:       movq   $0x2,-0x28(%rbp)
    0.00 :	  42f255:       lea    -0x28(%rbp),%rdx
    0.00 :	  42f259:       lea    -0x60(%rbp),%rax
    0.00 :	  42f25d:       mov    %rdx,%rsi
    0.00 :	  42f260:       mov    %rax,%rdi
    0.00 :	  42f263:       callq  430038 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator-(long const&) const>
    0.00 :	  42f268:       mov    %rax,%rbx
    0.00 :	  42f26b:       movq   $0x1,-0x20(%rbp)
    0.00 :	  42f273:       lea    -0x20(%rbp),%rdx
    0.00 :	  42f277:       lea    -0x50(%rbp),%rax
    0.00 :	  42f27b:       mov    %rdx,%rsi
    0.00 :	  42f27e:       mov    %rax,%rdi
    0.00 :	  42f281:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
   50.00 :	  42f286:       mov    %rax,%rsi
         :	      std::__move_median_to_first(__first, __first + 1, __mid, (__last - 2),
    0.00 :	  42f289:       mov    -0x58(%rbp),%rcx
    0.00 :	  42f28d:       mov    -0x40(%rbp),%rdx
    0.00 :	  42f291:       mov    -0x50(%rbp),%rax
    0.00 :	  42f295:       mov    %rcx,%r8
    0.00 :	  42f298:       mov    %rbx,%rcx
    0.00 :	  42f29b:       mov    %rax,%rdi
    0.00 :	  42f29e:       callq  43007d <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    0.00 :	  42f2a3:       lea    -0x50(%rbp),%rax
    0.00 :	  42f2a7:       mov    %rax,%rdi
    0.00 :	  42f2aa:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f2af:       mov    %rax,%rbx
    0.00 :	  42f2b2:       movq   $0x1,-0x18(%rbp)
    0.00 :	  42f2ba:       lea    -0x18(%rbp),%rdx
    0.00 :	  42f2be:       lea    -0x50(%rbp),%rax
    0.00 :	  42f2c2:       mov    %rdx,%rsi
    0.00 :	  42f2c5:       mov    %rax,%rdi
    0.00 :	  42f2c8:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42f2cd:       mov    -0x58(%rbp),%rdx
    0.00 :	  42f2d1:       mov    -0x60(%rbp),%rsi
    0.00 :	  42f2d5:       mov    %rdx,%rcx
    0.00 :	  42f2d8:       mov    %rbx,%rdx
    0.00 :	  42f2db:       mov    %rax,%rdi
    0.00 :	  42f2de:       callq  430221 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))>
    0.00 :	  42f2e3:       jmp    42f2ef <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xf2>
    0.00 :	  42f2e5:       jmp    42f2e7 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xea>
    0.00 :	  42f2e7:       mov    %rax,%rdi
    0.00 :	  42f2ea:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  42f2ef:       add    $0x58,%rsp
    0.00 :	  42f2f3:       pop    %rbx
    0.00 :	  42f2f4:       pop    %rbp
    0.00 :	  42f2f5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e510 <LLcol* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, LLcol>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, std::allocator<LLcol>&)>:
         :	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E():
         :	        }
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         :	    inline _ForwardIterator
         :	    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    0.00 :	  42e510:       push   %rbp
    0.00 :	  42e511:       mov    %rsp,%rbp
    0.00 :	  42e514:       sub    $0x20,%rsp
    0.00 :	  42e518:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42e51c:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42e520:       mov    %rdx,-0x18(%rbp)
    0.00 :	  42e524:       mov    %rcx,-0x8(%rbp)
         :	                           _ForwardIterator __result, allocator<_Tp>&)
         :	    { return std::uninitialized_copy(__first, __last, __result); }
    0.00 :	  42e528:       mov    -0x18(%rbp),%rdx
   50.00 :	  42e52c:       mov    -0x20(%rbp),%rcx
    0.00 :	  42e530:       mov    -0x10(%rbp),%rax
    0.00 :	  42e534:       mov    %rcx,%rsi
    0.00 :	  42e537:       mov    %rax,%rdi
    0.00 :	  42e53a:       callq  42f5bc <LLcol* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>
   50.00 :	  42e53f:       leaveq
    0.00 :	  42e540:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422d27 <LLord* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, LLord>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, std::allocator<LLord>&)>:
         :	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E():
         :	        }
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         :	    inline _ForwardIterator
         :	    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    0.00 :	  422d27:       push   %rbp
    0.00 :	  422d28:       mov    %rsp,%rbp
    0.00 :	  422d2b:       sub    $0x20,%rsp
    0.00 :	  422d2f:       mov    %rdi,-0x10(%rbp)
    0.00 :	  422d33:       mov    %rsi,-0x20(%rbp)
    0.00 :	  422d37:       mov    %rdx,-0x18(%rbp)
    0.00 :	  422d3b:       mov    %rcx,-0x8(%rbp)
         :	                           _ForwardIterator __result, allocator<_Tp>&)
         :	    { return std::uninitialized_copy(__first, __last, __result); }
    0.00 :	  422d3f:       mov    -0x18(%rbp),%rdx
    0.00 :	  422d43:       mov    -0x20(%rbp),%rcx
    0.00 :	  422d47:       mov    -0x10(%rbp),%rax
    0.00 :	  422d4b:       mov    %rcx,%rsi
    0.00 :	  422d4e:       mov    %rax,%rdi
    0.00 :	  422d51:       callq  4251f6 <LLord* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>
    0.00 :	  422d56:       leaveq
  100.00 :	  422d57:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422bbf <int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&)>:
         :	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiiET0_T_SA_S9_RSaIT1_E():
         :	        }
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         :	    inline _ForwardIterator
         :	    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    0.00 :	  422bbf:       push   %rbp
    0.00 :	  422bc0:       mov    %rsp,%rbp
    0.00 :	  422bc3:       sub    $0x20,%rsp
    0.00 :	  422bc7:       mov    %rdi,-0x10(%rbp)
    0.00 :	  422bcb:       mov    %rsi,-0x20(%rbp)
    0.00 :	  422bcf:       mov    %rdx,-0x18(%rbp)
    0.00 :	  422bd3:       mov    %rcx,-0x8(%rbp)
         :	                           _ForwardIterator __result, allocator<_Tp>&)
         :	    { return std::uninitialized_copy(__first, __last, __result); }
    0.00 :	  422bd7:       mov    -0x18(%rbp),%rdx
    0.00 :	  422bdb:       mov    -0x20(%rbp),%rcx
   50.00 :	  422bdf:       mov    -0x10(%rbp),%rax
    0.00 :	  422be3:       mov    %rcx,%rsi
    0.00 :	  422be6:       mov    %rax,%rdi
    0.00 :	  422be9:       callq  4250b6 <int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
    0.00 :	  422bee:       leaveq
   50.00 :	  422bef:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042510c <std::allocator<LLord>::allocator(std::allocator<LLord> const&)>:
         :	_ZNSaI5LLordEC2ERKS0_():
         :	      typedef true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      allocator() throw() { }
         :
         :	      allocator(const allocator& __a) throw()
    0.00 :	  42510c:       push   %rbp
    0.00 :	  42510d:       mov    %rsp,%rbp
    0.00 :	  425110:       sub    $0x10,%rsp
    0.00 :	  425114:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425118:       mov    %rsi,-0x10(%rbp)
         :	      : __allocator_base<_Tp>(__a) { }
    0.00 :	  42511c:       mov    -0x10(%rbp),%rdx
   50.00 :	  425120:       mov    -0x8(%rbp),%rax
    0.00 :	  425124:       mov    %rdx,%rsi
    0.00 :	  425127:       mov    %rax,%rdi
   50.00 :	  42512a:       callq  426e6e <__gnu_cxx::new_allocator<LLord>::new_allocator(__gnu_cxx::new_allocator<LLord> const&)>
    0.00 :	  42512f:       leaveq
    0.00 :	  425130:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004250e3 <std::allocator_traits<std::allocator<LLord> >::select_on_container_copy_construction(std::allocator<LLord> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLordEE37select_on_container_copy_constructionERKS1_():
         :	       *
         :	       *  Returns @c __rhs.select_on_container_copy_construction() if that
         :	       *  expression is well-formed, otherwise returns @a __rhs
         :	      */
         :	      static _Alloc
         :	      select_on_container_copy_construction(const _Alloc& __rhs)
    0.00 :	  4250e3:       push   %rbp
    0.00 :	  4250e4:       mov    %rsp,%rbp
    0.00 :	  4250e7:       sub    $0x10,%rsp
    0.00 :	  4250eb:       mov    %rdi,-0x8(%rbp)
   50.00 :	  4250ef:       mov    %rsi,-0x10(%rbp)
         :	      { return _S_select(__rhs); }
    0.00 :	  4250f3:       mov    -0x8(%rbp),%rax
   50.00 :	  4250f7:       mov    -0x10(%rbp),%rdx
    0.00 :	  4250fb:       mov    %rdx,%rsi
    0.00 :	  4250fe:       mov    %rax,%rdi
    0.00 :	  425101:       callq  426e45 <std::enable_if<!std::allocator_traits<std::allocator<LLord> >::__select_helper<std::allocator<LLord> const>::value, std::allocator<LLord> const>::type std::allocator_traits<std::allocator<LLord> >::_S_select<std::allocator<LLord> const>(std::allocator<LLord> const&)>
    0.00 :	  425106:       mov    -0x8(%rbp),%rax
    0.00 :	  42510a:       leaveq
    0.00 :	  42510b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043034a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::move_backward<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_():
         :	   *  Result may not be in the range (first,last].  Use move instead.  Note
         :	   *  that the start of the output range may overlap [first,last).
         :	  */
         :	  template<typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    0.00 :	  43034a:       push   %rbp
    0.00 :	  43034b:       mov    %rsp,%rbp
    0.00 :	  43034e:       push   %rbx
    0.00 :	  43034f:       sub    $0x38,%rsp
    0.00 :	  430353:       mov    %rdi,-0x20(%rbp)
    0.00 :	  430357:       mov    %rsi,-0x30(%rbp)
    0.00 :	  43035b:       mov    %rdx,-0x40(%rbp)
         :	            typename iterator_traits<_BI2>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
         :	                                                std::__miter_base(__last),
         :	                                                __result);
    0.00 :	  43035f:       mov    -0x30(%rbp),%rax
    0.00 :	  430363:       mov    %rax,%rdi
    0.00 :	  430366:       callq  430d9e <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  43036b:       mov    %rax,%rbx
    0.00 :	  43036e:       mov    -0x20(%rbp),%rax
   50.00 :	  430372:       mov    %rax,%rdi
    0.00 :	  430375:       callq  430d9e <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  43037a:       mov    -0x40(%rbp),%rdx
   50.00 :	  43037e:       mov    %rbx,%rsi
    0.00 :	  430381:       mov    %rax,%rdi
    0.00 :	  430384:       callq  430db8 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_backward_a2<true, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    0.00 :	  430389:       add    $0x38,%rsp
    0.00 :	  43038d:       pop    %rbx
    0.00 :	  43038e:       pop    %rbp
    0.00 :	  43038f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE5beginEv():
         :	       *  Returns a read-only (constant) iterator that points to the
         :	       *  first element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      const_iterator
         :	      begin() const _GLIBCXX_NOEXCEPT
    0.00 :	  42e4a0:       push   %rbp
    0.00 :	  42e4a1:       mov    %rsp,%rbp
    0.00 :	  42e4a4:       sub    $0x20,%rsp
    0.00 :	  42e4a8:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_start); }
    0.00 :	  42e4ac:       mov    -0x18(%rbp),%rax
    0.00 :	  42e4b0:       mov    (%rax),%rax
   50.00 :	  42e4b3:       mov    %rax,-0x8(%rbp)
    0.00 :	  42e4b7:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e4bb:       lea    -0x10(%rbp),%rax
    0.00 :	  42e4bf:       mov    %rdx,%rsi
    0.00 :	  42e4c2:       mov    %rax,%rdi
    0.00 :	  42e4c5:       callq  42f5a0 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol const* const&)>
    0.00 :	  42e4ca:       mov    -0x10(%rbp),%rax
   50.00 :	  42e4ce:       leaveq
    0.00 :	  42e4cf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422bf0 <std::vector<LLord, std::allocator<LLord> >::size() const>:
         :	_ZNKSt6vectorI5LLordSaIS0_EE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.00 :	  422bf0:       push   %rbp
   50.00 :	  422bf1:       mov    %rsp,%rbp
    0.00 :	  422bf4:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :	  422bf8:       mov    -0x8(%rbp),%rax
   50.00 :	  422bfc:       mov    0x8(%rax),%rax
    0.00 :	  422c00:       mov    %rax,%rdx
    0.00 :	  422c03:       mov    -0x8(%rbp),%rax
    0.00 :	  422c07:       mov    (%rax),%rax
    0.00 :	  422c0a:       sub    %rax,%rdx
    0.00 :	  422c0d:       mov    %rdx,%rax
    0.00 :	  422c10:       sar    $0x4,%rax
    0.00 :	  422c14:       pop    %rbp
    0.00 :	  422c15:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ea64 <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double const&>(double const&)>:
         :	_ZNSt6vectorIdSaIdEE19_M_emplace_back_auxIIRKdEEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    0.00 :	  42ea64:       push   %rbp
    0.00 :	  42ea65:       mov    %rsp,%rbp
    0.00 :	  42ea68:       push   %rbx
    0.00 :	  42ea69:       sub    $0x38,%rsp
    0.00 :	  42ea6d:       mov    %rdi,-0x38(%rbp)
    0.00 :	  42ea71:       mov    %rsi,-0x40(%rbp)
         :	      _M_emplace_back_aux(_Args&&... __args)
         :	      {
         :	        const size_type __len =
         :	          _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
    0.00 :	  42ea75:       mov    -0x38(%rbp),%rax
    0.00 :	  42ea79:       mov    $0x433c56,%edx
    0.00 :	  42ea7e:       mov    $0x1,%esi
    0.00 :	  42ea83:       mov    %rax,%rdi
    0.00 :	  42ea86:       callq  423440 <std::vector<double, std::allocator<double> >::_M_check_len(unsigned long, char const*) const>
    0.00 :	  42ea8b:       mov    %rax,-0x20(%rbp)
         :	        pointer __new_start(this->_M_allocate(__len));
    0.00 :	  42ea8f:       mov    -0x38(%rbp),%rax
    0.00 :	  42ea93:       mov    -0x20(%rbp),%rdx
    0.00 :	  42ea97:       mov    %rdx,%rsi
    0.00 :	  42ea9a:       mov    %rax,%rdi
    0.00 :	  42ea9d:       callq  42350a <std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long)>
    0.00 :	  42eaa2:       mov    %rax,-0x28(%rbp)
         :	        pointer __new_finish(__new_start);
   50.00 :	  42eaa6:       mov    -0x28(%rbp),%rax
    0.00 :	  42eaaa:       mov    %rax,-0x18(%rbp)
         :	        __try
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  42eaae:       mov    -0x40(%rbp),%rax
    0.00 :	  42eab2:       mov    %rax,%rdi
    0.00 :	  42eab5:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
    0.00 :	  42eaba:       mov    %rax,%rbx
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  42eabd:       mov    -0x38(%rbp),%rax
    0.00 :	  42eac1:       mov    %rax,%rdi
    0.00 :	  42eac4:       callq  41fe5e <std::vector<double, std::allocator<double> >::size() const>
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  42eac9:       lea    0x0(,%rax,8),%rdx
    0.00 :	  42ead1:       mov    -0x28(%rbp),%rax
    0.00 :	  42ead5:       lea    (%rdx,%rax,1),%rcx
    0.00 :	  42ead9:       mov    -0x38(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  42eadd:       mov    %rbx,%rdx
    0.00 :	  42eae0:       mov    %rcx,%rsi
    0.00 :	  42eae3:       mov    %rax,%rdi
    0.00 :	  42eae6:       callq  42ea2b <decltype (_S_construct({parm#1}, {parm#2}, (forward<double const&>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double const&>(std::allocator<double>&, double*, double const&)>
         :	            __new_finish = 0;
    0.00 :	  42eaeb:       movq   $0x0,-0x18(%rbp)
         :
         :	            __new_finish
         :	              = std::__uninitialized_move_if_noexcept_a
         :	              (this->_M_impl._M_start, this->_M_impl._M_finish,
         :	               __new_start, _M_get_Tp_allocator());
    0.00 :	  42eaf3:       mov    -0x38(%rbp),%rax
    0.00 :	  42eaf7:       mov    %rax,%rdi
    0.00 :	  42eafa:       callq  420d92 <std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator()>
    0.00 :	  42eaff:       mov    %rax,%rcx
    0.00 :	  42eb02:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb06:       mov    0x8(%rax),%rsi
   50.00 :	  42eb0a:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb0e:       mov    (%rax),%rax
         :	            __new_finish
    0.00 :	  42eb11:       mov    -0x28(%rbp),%rdx
    0.00 :	  42eb15:       mov    %rax,%rdi
    0.00 :	  42eb18:       callq  423542 <double* std::__uninitialized_move_if_noexcept_a<double*, double*, std::allocator<double> >(double*, double*, double*, std::allocator<double>&)>
    0.00 :	  42eb1d:       mov    %rax,-0x18(%rbp)
         :
         :	            ++__new_finish;
    0.00 :	  42eb21:       addq   $0x8,-0x18(%rbp)
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
         :	            _M_deallocate(__new_start, __len);
         :	            __throw_exception_again;
         :	          }
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator());
    0.00 :	  42eb26:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb2a:       mov    %rax,%rdi
    0.00 :	  42eb2d:       callq  420d92 <std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator()>
    0.00 :	  42eb32:       mov    %rax,%rdx
    0.00 :	  42eb35:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb39:       mov    0x8(%rax),%rcx
    0.00 :	  42eb3d:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb41:       mov    (%rax),%rax
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  42eb44:       mov    %rcx,%rsi
    0.00 :	  42eb47:       mov    %rax,%rdi
    0.00 :	  42eb4a:       callq  420da0 <void std::_Destroy<double*, double>(double*, double*, std::allocator<double>&)>
         :	        _M_deallocate(this->_M_impl._M_start,
         :	                      this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start);
    0.00 :	  42eb4f:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb53:       mov    0x10(%rax),%rax
    0.00 :	  42eb57:       mov    %rax,%rdx
    0.00 :	  42eb5a:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb5e:       mov    (%rax),%rax
    0.00 :	  42eb61:       sub    %rax,%rdx
    0.00 :	  42eb64:       mov    %rdx,%rax
    0.00 :	  42eb67:       sar    $0x3,%rax
    0.00 :	  42eb6b:       mov    %rax,%rdx
    0.00 :	  42eb6e:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb72:       mov    (%rax),%rcx
    0.00 :	  42eb75:       mov    -0x38(%rbp),%rax
         :	        _M_deallocate(this->_M_impl._M_start,
    0.00 :	  42eb79:       mov    %rcx,%rsi
    0.00 :	  42eb7c:       mov    %rax,%rdi
    0.00 :	  42eb7f:       callq  422fe4 <std::_Vector_base<double, std::allocator<double> >::_M_deallocate(double*, unsigned long)>
         :	        this->_M_impl._M_start = __new_start;
    0.00 :	  42eb84:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb88:       mov    -0x28(%rbp),%rdx
    0.00 :	  42eb8c:       mov    %rdx,(%rax)
         :	        this->_M_impl._M_finish = __new_finish;
    0.00 :	  42eb8f:       mov    -0x38(%rbp),%rax
    0.00 :	  42eb93:       mov    -0x18(%rbp),%rdx
    0.00 :	  42eb97:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :	  42eb9b:       mov    -0x20(%rbp),%rax
    0.00 :	  42eb9f:       lea    0x0(,%rax,8),%rdx
    0.00 :	  42eba7:       mov    -0x28(%rbp),%rax
    0.00 :	  42ebab:       add    %rax,%rdx
    0.00 :	  42ebae:       mov    -0x38(%rbp),%rax
    0.00 :	  42ebb2:       mov    %rdx,0x10(%rax)
    0.00 :	  42ebb6:       jmpq   42ec47 <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double const&>(double const&)+0x1e3>
    0.00 :	  42ebbb:       mov    %rax,%rbx
         :	        __catch(...)
    0.00 :	  42ebbe:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  42ebc3:       mov    %rbx,%rax
    0.00 :	  42ebc6:       mov    %rax,%rdi
    0.00 :	  42ebc9:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42ebce:       mov    %rax,%rdi
    0.00 :	  42ebd1:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            if (!__new_finish)
    0.00 :	  42ebd6:       cmpq   $0x0,-0x18(%rbp)
    0.00 :	  42ebdb:       jne    42ec09 <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double const&>(double const&)+0x1a5>
         :	              _Alloc_traits::destroy(this->_M_impl, __new_start + size());
    0.00 :	  42ebdd:       mov    -0x38(%rbp),%rax
    0.00 :	  42ebe1:       mov    %rax,%rdi
    0.00 :	  42ebe4:       callq  41fe5e <std::vector<double, std::allocator<double> >::size() const>
    0.00 :	  42ebe9:       lea    0x0(,%rax,8),%rdx
    0.00 :	  42ebf1:       mov    -0x28(%rbp),%rax
    0.00 :	  42ebf5:       add    %rax,%rdx
    0.00 :	  42ebf8:       mov    -0x38(%rbp),%rax
    0.00 :	  42ebfc:       mov    %rdx,%rsi
    0.00 :	  42ebff:       mov    %rax,%rdi
    0.00 :	  42ec02:       callq  42f93f <void std::allocator_traits<std::allocator<double> >::destroy<double>(std::allocator<double>&, double*)>
    0.00 :	  42ec07:       jmp    42ec2b <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double const&>(double const&)+0x1c7>
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
    0.00 :	  42ec09:       mov    -0x38(%rbp),%rax
    0.00 :	  42ec0d:       mov    %rax,%rdi
    0.00 :	  42ec10:       callq  420d92 <std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator()>
    0.00 :	  42ec15:       mov    %rax,%rdx
    0.00 :	  42ec18:       mov    -0x18(%rbp),%rcx
    0.00 :	  42ec1c:       mov    -0x28(%rbp),%rax
    0.00 :	  42ec20:       mov    %rcx,%rsi
    0.00 :	  42ec23:       mov    %rax,%rdi
    0.00 :	  42ec26:       callq  420da0 <void std::_Destroy<double*, double>(double*, double*, std::allocator<double>&)>
         :	            _M_deallocate(__new_start, __len);
    0.00 :	  42ec2b:       mov    -0x38(%rbp),%rax
    0.00 :	  42ec2f:       mov    -0x20(%rbp),%rdx
    0.00 :	  42ec33:       mov    -0x28(%rbp),%rcx
    0.00 :	  42ec37:       mov    %rcx,%rsi
    0.00 :	  42ec3a:       mov    %rax,%rdi
    0.00 :	  42ec3d:       callq  422fe4 <std::_Vector_base<double, std::allocator<double> >::_M_deallocate(double*, unsigned long)>
         :	            __throw_exception_again;
    0.00 :	  42ec42:       callq  41db40 <__cxa_rethrow@plt>
         :	      }
    0.00 :	  42ec47:       add    $0x38,%rsp
    0.00 :	  42ec4b:       pop    %rbx
    0.00 :	  42ec4c:       pop    %rbp
    0.00 :	  42ec4d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041f8f4 <LLMatOrd::~LLMatOrd()>:
         :	_ZN8LLMatOrdD2Ev():
         :	    LLord(Tind row, Tind next, Tval val):row(row), next(next), val(val){}
         :	};
         :
         :	std::vector<Tind> invperm(std::vector<Tind> &perm);
         :
         :	struct LLMatOrd{
    0.00 :	  41f8f4:       push   %rbp
    0.00 :	  41f8f5:       mov    %rsp,%rbp
    0.00 :	  41f8f8:       sub    $0x10,%rsp
    0.00 :	  41f8fc:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41f900:       mov    -0x8(%rbp),%rax
    0.00 :	  41f904:       add    $0x20,%rax
    0.00 :	  41f908:       mov    %rax,%rdi
    0.00 :	  41f90b:       callq  4203ee <std::vector<LLord, std::allocator<LLord> >::~vector()>
    0.00 :	  41f910:       mov    -0x8(%rbp),%rax
  100.00 :	  41f914:       add    $0x8,%rax
    0.00 :	  41f918:       mov    %rax,%rdi
    0.00 :	  41f91b:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41f920:       leaveq
    0.00 :	  41f921:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430038 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator-(long const&) const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEmiERKl():
         :	      __normal_iterator&
         :	      operator-=(const difference_type& __n)
         :	      { _M_current -= __n; return *this; }
         :
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
    0.00 :	  430038:       push   %rbp
    0.00 :	  430039:       mov    %rsp,%rbp
    0.00 :	  43003c:       sub    $0x20,%rsp
    0.00 :	  430040:       mov    %rdi,-0x18(%rbp)
    0.00 :	  430044:       mov    %rsi,-0x20(%rbp)
         :	      { return __normal_iterator(_M_current - __n); }
    0.00 :	  430048:       mov    -0x18(%rbp),%rax
    0.00 :	  43004c:       mov    (%rax),%rdx
    0.00 :	  43004f:       mov    -0x20(%rbp),%rax
    0.00 :	  430053:       mov    (%rax),%rax
    0.00 :	  430056:       shl    $0x4,%rax
    0.00 :	  43005a:       neg    %rax
    0.00 :	  43005d:       add    %rdx,%rax
    0.00 :	  430060:       mov    %rax,-0x8(%rbp)
    0.00 :	  430064:       lea    -0x8(%rbp),%rdx
    0.00 :	  430068:       lea    -0x10(%rbp),%rax
    0.00 :	  43006c:       mov    %rdx,%rsi
    0.00 :	  43006f:       mov    %rax,%rdi
    0.00 :	  430072:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  430077:       mov    -0x10(%rbp),%rax
  100.00 :	  43007b:       leaveq
    0.00 :	  43007c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e7d6 <__gnu_cxx::new_allocator<LLcol>::~new_allocator()>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolED2Ev():
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      template<typename _Tp1>
         :	        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    0.00 :	  42e7d6:       push   %rbp
    0.00 :	  42e7d7:       mov    %rsp,%rbp
    0.00 :	  42e7da:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42e7de:       pop    %rbp
  100.00 :	  42e7df:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427a16 <__gnu_cxx::new_allocator<LLord>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  427a16:       push   %rbp
    0.00 :	  427a17:       mov    %rsp,%rbp
    0.00 :	  427a1a:       sub    $0x20,%rsp
    0.00 :	  427a1e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  427a22:       mov    %rsi,-0x10(%rbp)
    0.00 :	  427a26:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.00 :	  427a2a:       mov    -0x8(%rbp),%rax
  100.00 :	  427a2e:       mov    %rax,%rdi
    0.00 :	  427a31:       callq  4285b2 <__gnu_cxx::new_allocator<LLord>::max_size() const>
    0.00 :	  427a36:       cmp    -0x10(%rbp),%rax
    0.00 :	  427a3a:       setb   %al
    0.00 :	  427a3d:       test   %al,%al
    0.00 :	  427a3f:       je     427a46 <__gnu_cxx::new_allocator<LLord>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  427a41:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :	  427a46:       mov    -0x10(%rbp),%rax
    0.00 :	  427a4a:       shl    $0x4,%rax
    0.00 :	  427a4e:       mov    %rax,%rdi
    0.00 :	  427a51:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.00 :	  427a56:       leaveq
    0.00 :	  427a57:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042667a <__gnu_cxx::new_allocator<LLord>::deallocate(LLord*, unsigned long)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordE10deallocateEPS1_m():
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
         :	      }
         :
         :	      // __p is not permitted to be a null pointer.
         :	      void
         :	      deallocate(pointer __p, size_type)
    0.00 :	  42667a:       push   %rbp
    0.00 :	  42667b:       mov    %rsp,%rbp
  100.00 :	  42667e:       sub    $0x20,%rsp
    0.00 :	  426682:       mov    %rdi,-0x8(%rbp)
    0.00 :	  426686:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42668a:       mov    %rdx,-0x18(%rbp)
         :	      { ::operator delete(__p); }
    0.00 :	  42668e:       mov    -0x10(%rbp),%rax
    0.00 :	  426692:       mov    %rax,%rdi
    0.00 :	  426695:       callq  41db20 <operator delete(void*)@plt>
    0.00 :	  42669a:       leaveq
    0.00 :	  42669b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425132 <__gnu_cxx::new_allocator<LLord>::~new_allocator()>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordED2Ev():
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      template<typename _Tp1>
         :	        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  100.00 :	  425132:       push   %rbp
    0.00 :	  425133:       mov    %rsp,%rbp
    0.00 :	  425136:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42513a:       pop    %rbp
    0.00 :	  42513b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425c92 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  425c92:       push   %rbp
    0.00 :	  425c93:       mov    %rsp,%rbp
    0.00 :	  425c96:       sub    $0x20,%rsp
    0.00 :	  425c9a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425c9e:       mov    %rsi,-0x10(%rbp)
    0.00 :	  425ca2:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.00 :	  425ca6:       mov    -0x8(%rbp),%rax
    0.00 :	  425caa:       mov    %rax,%rdi
    0.00 :	  425cad:       callq  4274b0 <__gnu_cxx::new_allocator<int>::max_size() const>
    0.00 :	  425cb2:       cmp    -0x10(%rbp),%rax
    0.00 :	  425cb6:       setb   %al
    0.00 :	  425cb9:       test   %al,%al
    0.00 :	  425cbb:       je     425cc2 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  425cbd:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :	  425cc2:       mov    -0x10(%rbp),%rax
    0.00 :	  425cc6:       shl    $0x2,%rax
    0.00 :	  425cca:       mov    %rax,%rdi
    0.00 :	  425ccd:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.00 :	  425cd2:       leaveq
  100.00 :	  425cd3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004255bc <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long)>:
         :	_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim():
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
         :	      }
         :
         :	      // __p is not permitted to be a null pointer.
         :	      void
         :	      deallocate(pointer __p, size_type)
    0.00 :	  4255bc:       push   %rbp
    0.00 :	  4255bd:       mov    %rsp,%rbp
    0.00 :	  4255c0:       sub    $0x20,%rsp
    0.00 :	  4255c4:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4255c8:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4255cc:       mov    %rdx,-0x18(%rbp)
         :	      { ::operator delete(__p); }
    0.00 :	  4255d0:       mov    -0x10(%rbp),%rax
    0.00 :	  4255d4:       mov    %rax,%rdi
    0.00 :	  4255d7:       callq  41db20 <operator delete(void*)@plt>
  100.00 :	  4255dc:       leaveq
    0.00 :	  4255dd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042a422 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)>:
         :	_Z16getPartition_rowRSt6vectorI5LLcolSaIS0_EEiiRiS4_():
         :
         :	    return len;
         :	}
         :
         :	int getPartition_row(std::vector<LLcol> &nums, int low, int height, int &intops, int &intcomp)
         :	{
    0.00 :	  42a422:       push   %rbp
    0.00 :	  42a423:       mov    %rsp,%rbp
    0.00 :	  42a426:       push   %rbx
    0.00 :	  42a427:       sub    $0x38,%rsp
    0.00 :	  42a42b:       mov    %rdi,-0x28(%rbp)
    0.00 :	  42a42f:       mov    %esi,-0x2c(%rbp)
    0.00 :	  42a432:       mov    %edx,-0x30(%rbp)
    0.00 :	  42a435:       mov    %rcx,-0x38(%rbp)
    0.00 :	  42a439:       mov    %r8,-0x40(%rbp)
         :	    LLcol keyVal = nums[low];
    0.00 :	  42a43d:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a440:       movslq %eax,%rdx
    0.00 :	  42a443:       mov    -0x28(%rbp),%rax
    0.00 :	  42a447:       mov    %rdx,%rsi
    0.00 :	  42a44a:       mov    %rax,%rdi
    0.00 :	  42a44d:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a452:       mov    0x8(%rax),%rdx
    0.00 :	  42a456:       mov    (%rax),%rax
    0.00 :	  42a459:       mov    %rax,-0x20(%rbp)
    0.00 :	  42a45d:       mov    %rdx,-0x18(%rbp)
         :	    while (low<height)
    0.00 :	  42a461:       jmpq   42a5bd <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x19b>
         :	    {
         :	        intcomp++;
    0.00 :	  42a466:       mov    -0x40(%rbp),%rax
    0.00 :	  42a46a:       mov    (%rax),%eax
    0.00 :	  42a46c:       lea    0x1(%rax),%edx
    0.00 :	  42a46f:       mov    -0x40(%rbp),%rax
    0.00 :	  42a473:       mov    %edx,(%rax)
         :	        while (low < height && nums[height].row >= keyVal.row) {
    0.00 :	  42a475:       jmp    42a499 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x77>
         :	            height--;
    0.00 :	  42a477:       subl   $0x1,-0x30(%rbp)
         :	            intcomp += 2;
    0.00 :	  42a47b:       mov    -0x40(%rbp),%rax
    0.00 :	  42a47f:       mov    (%rax),%eax
    0.00 :	  42a481:       lea    0x2(%rax),%edx
    0.00 :	  42a484:       mov    -0x40(%rbp),%rax
    0.00 :	  42a488:       mov    %edx,(%rax)
         :	            intops++;
    0.00 :	  42a48a:       mov    -0x38(%rbp),%rax
    0.00 :	  42a48e:       mov    (%rax),%eax
    0.00 :	  42a490:       lea    0x1(%rax),%edx
    0.00 :	  42a493:       mov    -0x38(%rbp),%rax
    0.00 :	  42a497:       mov    %edx,(%rax)
         :	        while (low < height && nums[height].row >= keyVal.row) {
    0.00 :	  42a499:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a49c:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a49f:       jge    42a4c6 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xa4>
    0.00 :	  42a4a1:       mov    -0x30(%rbp),%eax
    0.00 :	  42a4a4:       movslq %eax,%rdx
    0.00 :	  42a4a7:       mov    -0x28(%rbp),%rax
    0.00 :	  42a4ab:       mov    %rdx,%rsi
    0.00 :	  42a4ae:       mov    %rax,%rdi
    0.00 :	  42a4b1:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a4b6:       mov    (%rax),%edx
  100.00 :	  42a4b8:       mov    -0x20(%rbp),%eax
    0.00 :	  42a4bb:       cmp    %eax,%edx
    0.00 :	  42a4bd:       jl     42a4c6 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xa4>
    0.00 :	  42a4bf:       mov    $0x1,%eax
    0.00 :	  42a4c4:       jmp    42a4cb <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xa9>
    0.00 :	  42a4c6:       mov    $0x0,%eax
    0.00 :	  42a4cb:       test   %al,%al
    0.00 :	  42a4cd:       jne    42a477 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x55>
         :	        }
         :	        intcomp += 2;
    0.00 :	  42a4cf:       mov    -0x40(%rbp),%rax
    0.00 :	  42a4d3:       mov    (%rax),%eax
    0.00 :	  42a4d5:       lea    0x2(%rax),%edx
    0.00 :	  42a4d8:       mov    -0x40(%rbp),%rax
    0.00 :	  42a4dc:       mov    %edx,(%rax)
         :	        nums[low] = nums[height];
    0.00 :	  42a4de:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a4e1:       movslq %eax,%rdx
    0.00 :	  42a4e4:       mov    -0x28(%rbp),%rax
    0.00 :	  42a4e8:       mov    %rdx,%rsi
    0.00 :	  42a4eb:       mov    %rax,%rdi
    0.00 :	  42a4ee:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a4f3:       mov    %rax,%rbx
    0.00 :	  42a4f6:       mov    -0x30(%rbp),%eax
    0.00 :	  42a4f9:       movslq %eax,%rdx
    0.00 :	  42a4fc:       mov    -0x28(%rbp),%rax
    0.00 :	  42a500:       mov    %rdx,%rsi
    0.00 :	  42a503:       mov    %rax,%rdi
    0.00 :	  42a506:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a50b:       mov    0x8(%rax),%rdx
    0.00 :	  42a50f:       mov    (%rax),%rax
    0.00 :	  42a512:       mov    %rax,(%rbx)
    0.00 :	  42a515:       mov    %rdx,0x8(%rbx)
         :	        while (low < height && nums[low].row <= keyVal.row) {
    0.00 :	  42a519:       jmp    42a53d <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x11b>
         :	            low++;
    0.00 :	  42a51b:       addl   $0x1,-0x2c(%rbp)
         :	            intcomp += 2;
    0.00 :	  42a51f:       mov    -0x40(%rbp),%rax
    0.00 :	  42a523:       mov    (%rax),%eax
    0.00 :	  42a525:       lea    0x2(%rax),%edx
    0.00 :	  42a528:       mov    -0x40(%rbp),%rax
    0.00 :	  42a52c:       mov    %edx,(%rax)
         :	            intops++;
    0.00 :	  42a52e:       mov    -0x38(%rbp),%rax
    0.00 :	  42a532:       mov    (%rax),%eax
    0.00 :	  42a534:       lea    0x1(%rax),%edx
    0.00 :	  42a537:       mov    -0x38(%rbp),%rax
    0.00 :	  42a53b:       mov    %edx,(%rax)
         :	        while (low < height && nums[low].row <= keyVal.row) {
    0.00 :	  42a53d:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a540:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a543:       jge    42a56a <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x148>
    0.00 :	  42a545:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a548:       movslq %eax,%rdx
    0.00 :	  42a54b:       mov    -0x28(%rbp),%rax
    0.00 :	  42a54f:       mov    %rdx,%rsi
    0.00 :	  42a552:       mov    %rax,%rdi
    0.00 :	  42a555:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a55a:       mov    (%rax),%edx
    0.00 :	  42a55c:       mov    -0x20(%rbp),%eax
    0.00 :	  42a55f:       cmp    %eax,%edx
    0.00 :	  42a561:       jg     42a56a <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x148>
    0.00 :	  42a563:       mov    $0x1,%eax
    0.00 :	  42a568:       jmp    42a56f <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x14d>
    0.00 :	  42a56a:       mov    $0x0,%eax
    0.00 :	  42a56f:       test   %al,%al
    0.00 :	  42a571:       jne    42a51b <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xf9>
         :	        }
         :	        intcomp += 2;
    0.00 :	  42a573:       mov    -0x40(%rbp),%rax
    0.00 :	  42a577:       mov    (%rax),%eax
    0.00 :	  42a579:       lea    0x2(%rax),%edx
    0.00 :	  42a57c:       mov    -0x40(%rbp),%rax
    0.00 :	  42a580:       mov    %edx,(%rax)
         :	        nums[height] = nums[low];
    0.00 :	  42a582:       mov    -0x30(%rbp),%eax
    0.00 :	  42a585:       movslq %eax,%rdx
    0.00 :	  42a588:       mov    -0x28(%rbp),%rax
    0.00 :	  42a58c:       mov    %rdx,%rsi
    0.00 :	  42a58f:       mov    %rax,%rdi
    0.00 :	  42a592:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a597:       mov    %rax,%rbx
    0.00 :	  42a59a:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a59d:       movslq %eax,%rdx
    0.00 :	  42a5a0:       mov    -0x28(%rbp),%rax
    0.00 :	  42a5a4:       mov    %rdx,%rsi
    0.00 :	  42a5a7:       mov    %rax,%rdi
    0.00 :	  42a5aa:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a5af:       mov    0x8(%rax),%rdx
    0.00 :	  42a5b3:       mov    (%rax),%rax
    0.00 :	  42a5b6:       mov    %rax,(%rbx)
    0.00 :	  42a5b9:       mov    %rdx,0x8(%rbx)
         :	    while (low<height)
    0.00 :	  42a5bd:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a5c0:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a5c3:       jl     42a466 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x44>
         :	    }
         :	    intcomp++;
    0.00 :	  42a5c9:       mov    -0x40(%rbp),%rax
    0.00 :	  42a5cd:       mov    (%rax),%eax
    0.00 :	  42a5cf:       lea    0x1(%rax),%edx
    0.00 :	  42a5d2:       mov    -0x40(%rbp),%rax
    0.00 :	  42a5d6:       mov    %edx,(%rax)
         :	    nums[low] = keyVal;
    0.00 :	  42a5d8:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a5db:       movslq %eax,%rdx
    0.00 :	  42a5de:       mov    -0x28(%rbp),%rax
    0.00 :	  42a5e2:       mov    %rdx,%rsi
    0.00 :	  42a5e5:       mov    %rax,%rdi
    0.00 :	  42a5e8:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a5ed:       mov    %rax,%rcx
    0.00 :	  42a5f0:       mov    -0x20(%rbp),%rax
    0.00 :	  42a5f4:       mov    -0x18(%rbp),%rdx
    0.00 :	  42a5f8:       mov    %rax,(%rcx)
    0.00 :	  42a5fb:       mov    %rdx,0x8(%rcx)
         :	    return low;
    0.00 :	  42a5ff:       mov    -0x2c(%rbp),%eax
         :	}
    0.00 :	  42a602:       add    $0x38,%rsp
    0.00 :	  42a606:       pop    %rbx
    0.00 :	  42a607:       pop    %rbp
    0.00 :	  42a608:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422060 <void std::_Destroy<LLord*, LLord>(LLord*, LLord*, std::allocator<LLord>&)>:
         :	_ZSt8_DestroyIP5LLordS0_EvT_S2_RSaIT0_E():
         :	        __traits::destroy(__alloc, std::__addressof(*__first));
         :	    }
         :
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    0.00 :	  422060:       push   %rbp
    0.00 :	  422061:       mov    %rsp,%rbp
    0.00 :	  422064:       sub    $0x20,%rsp
    0.00 :	  422068:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42206c:       mov    %rsi,-0x10(%rbp)
    0.00 :	  422070:       mov    %rdx,-0x18(%rbp)
         :	             allocator<_Tp>&)
         :	    {
         :	      _Destroy(__first, __last);
    0.00 :	  422074:       mov    -0x10(%rbp),%rdx
    0.00 :	  422078:       mov    -0x8(%rbp),%rax
    0.00 :	  42207c:       mov    %rdx,%rsi
    0.00 :	  42207f:       mov    %rax,%rdi
    0.00 :	  422082:       callq  42470a <void std::_Destroy<LLord*>(LLord*, LLord*)>
         :	    }
    0.00 :	  422087:       leaveq
  100.00 :	  422088:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042470a <void std::_Destroy<LLord*>(LLord*, LLord*)>:
         :	_ZSt8_DestroyIP5LLordEvT_S2_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    0.00 :	  42470a:       push   %rbp
    0.00 :	  42470b:       mov    %rsp,%rbp
    0.00 :	  42470e:       sub    $0x10,%rsp
    0.00 :	  424712:       mov    %rdi,-0x8(%rbp)
  100.00 :	  424716:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    0.00 :	  42471a:       mov    -0x10(%rbp),%rdx
    0.00 :	  42471e:       mov    -0x8(%rbp),%rax
    0.00 :	  424722:       mov    %rdx,%rsi
    0.00 :	  424725:       mov    %rax,%rdi
    0.00 :	  424728:       callq  42669c <void std::_Destroy_aux<true>::__destroy<LLord*>(LLord*, LLord*)>
         :	        __destroy(__first, __last);
         :	    }
    0.00 :	  42472d:       leaveq
    0.00 :	  42472e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f70f <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEEvT_S8_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    0.00 :	  42f70f:       push   %rbp
    0.00 :	  42f710:       mov    %rsp,%rbp
    0.00 :	  42f713:       sub    $0x20,%rsp
    0.00 :	  42f717:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42f71b:       mov    %rsi,-0x20(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    0.00 :	  42f71f:       mov    -0x20(%rbp),%rdx
  100.00 :	  42f723:       mov    -0x10(%rbp),%rax
    0.00 :	  42f727:       mov    %rdx,%rsi
    0.00 :	  42f72a:       mov    %rax,%rdi
    0.00 :	  42f72d:       callq  430562 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	        __destroy(__first, __last);
         :	    }
    0.00 :	  42f732:       leaveq
    0.00 :	  42f733:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e72b <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, std::allocator<LLcol>&)>:
         :	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES2_EvT_S8_RSaIT0_E():
         :	        __traits::destroy(__alloc, std::__addressof(*__first));
         :	    }
         :
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    0.00 :	  42e72b:       push   %rbp
    0.00 :	  42e72c:       mov    %rsp,%rbp
    0.00 :	  42e72f:       sub    $0x20,%rsp
    0.00 :	  42e733:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42e737:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42e73b:       mov    %rdx,-0x18(%rbp)
         :	             allocator<_Tp>&)
         :	    {
         :	      _Destroy(__first, __last);
    0.00 :	  42e73f:       mov    -0x20(%rbp),%rdx
    0.00 :	  42e743:       mov    -0x10(%rbp),%rax
    0.00 :	  42e747:       mov    %rdx,%rsi
    0.00 :	  42e74a:       mov    %rax,%rdi
    0.00 :	  42e74d:       callq  42f70f <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    0.00 :	  42e752:       leaveq
  100.00 :	  42e753:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304ef <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEELb0EE7_S_baseES8_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  4304ef:       push   %rbp
    0.00 :	  4304f0:       mov    %rsp,%rbp
    0.00 :	  4304f3:       mov    %rdi,-0x10(%rbp)
         :	      { return __it; }
    0.00 :	  4304f7:       mov    -0x10(%rbp),%rax
  100.00 :	  4304fb:       pop    %rbp
    0.00 :	  4304fc:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004263ea <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_Node_allocator()>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE21_M_get_Node_allocatorEv():
         :	      typedef size_t                            size_type;
         :	      typedef ptrdiff_t                         difference_type;
         :	      typedef _Alloc                            allocator_type;
         :
         :	      _Node_allocator&
         :	      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
    0.00 :	  4263ea:       push   %rbp
    0.00 :	  4263eb:       mov    %rsp,%rbp
    0.00 :	  4263ee:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
    0.00 :	  4263f2:       mov    -0x8(%rbp),%rax
  100.00 :	  4263f6:       pop    %rbp
    0.00 :	  4263f7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421d7e <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE16_M_insert_uniqueIS0_EESt4pairISt17_Rb_tree_iteratorIS0_EbEOT_():
         :	#if __cplusplus >= 201103L
         :	    template<typename _Arg>
         :	#endif
         :	    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::iterator, bool>
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  421d7e:       push   %rbp
    0.00 :	  421d7f:       mov    %rsp,%rbp
    0.00 :	  421d82:       push   %rbx
    0.00 :	  421d83:       sub    $0x98,%rsp
    0.00 :	  421d8a:       mov    %rdi,-0x98(%rbp)
    0.00 :	  421d91:       mov    %rsi,-0xa0(%rbp)
         :	    _M_insert_unique(const _Val& __v)
         :	#endif
         :	    {
         :	      typedef pair<iterator, bool> _Res;
         :	      pair<_Base_ptr, _Base_ptr> __res
         :	        = _M_get_insert_unique_pos(_KeyOfValue()(__v));
    0.00 :	  421d98:       mov    -0xa0(%rbp),%rdx
    0.00 :	  421d9f:       lea    -0x71(%rbp),%rax
    0.00 :	  421da3:       mov    %rdx,%rsi
    0.00 :	  421da6:       mov    %rax,%rdi
    0.00 :	  421da9:       callq  424418 <std::_Identity<Edge>::operator()(Edge&) const>
    0.00 :	  421dae:       mov    %rax,%rdx
    0.00 :	  421db1:       mov    -0x98(%rbp),%rax
    0.00 :	  421db8:       mov    %rdx,%rsi
    0.00 :	  421dbb:       mov    %rax,%rdi
    0.00 :	  421dbe:       callq  42429e <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)>
    0.00 :	  421dc3:       mov    %rax,-0x90(%rbp)
    0.00 :	  421dca:       mov    %rdx,-0x88(%rbp)
         :
         :	      if (__res.second)
    0.00 :	  421dd1:       mov    -0x88(%rbp),%rax
    0.00 :	  421dd8:       test   %rax,%rax
    0.00 :	  421ddb:       je     421e35 <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0xb7>
         :	        return _Res(_M_insert_(__res.first, __res.second,
         :	                               _GLIBCXX_FORWARD(_Arg, __v)),
         :	                    true);
    0.00 :	  421ddd:       movb   $0x1,-0x51(%rbp)
         :	                               _GLIBCXX_FORWARD(_Arg, __v)),
    0.00 :	  421de1:       mov    -0xa0(%rbp),%rax
    0.00 :	  421de8:       mov    %rax,%rdi
    0.00 :	  421deb:       callq  421751 <Edge&& std::forward<Edge>(std::remove_reference<Edge>::type&)>
    0.00 :	  421df0:       mov    %rax,%rcx
    0.00 :	  421df3:       mov    -0x88(%rbp),%rdx
    0.00 :	  421dfa:       mov    -0x90(%rbp),%rsi
         :	                    true);
    0.00 :	  421e01:       mov    -0x98(%rbp),%rax
    0.00 :	  421e08:       mov    %rax,%rdi
    0.00 :	  421e0b:       callq  42442a <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)>
    0.00 :	  421e10:       mov    %rax,-0x50(%rbp)
    0.00 :	  421e14:       lea    -0x51(%rbp),%rdx
    0.00 :	  421e18:       lea    -0x50(%rbp),%rcx
    0.00 :	  421e1c:       lea    -0x70(%rbp),%rax
    0.00 :	  421e20:       mov    %rcx,%rsi
    0.00 :	  421e23:       mov    %rax,%rdi
    0.00 :	  421e26:       callq  421d3c <std::pair<std::_Rb_tree_iterator<Edge>, bool>::pair<std::_Rb_tree_iterator<Edge>, bool, void>(std::_Rb_tree_iterator<Edge>&&, bool&&)>
    0.00 :	  421e2b:       mov    -0x70(%rbp),%rax
    0.00 :	  421e2f:       mov    -0x68(%rbp),%rdx
  100.00 :	  421e33:       jmp    421e6e <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0xf0>
         :
         :	      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    0.00 :	  421e35:       movb   $0x0,-0x21(%rbp)
    0.00 :	  421e39:       mov    -0x90(%rbp),%rdx
    0.00 :	  421e40:       lea    -0x20(%rbp),%rax
    0.00 :	  421e44:       mov    %rdx,%rsi
    0.00 :	  421e47:       mov    %rax,%rdi
    0.00 :	  421e4a:       callq  424534 <std::_Rb_tree_iterator<Edge>::_Rb_tree_iterator(std::_Rb_tree_node<Edge>*)>
    0.00 :	  421e4f:       lea    -0x21(%rbp),%rdx
    0.00 :	  421e53:       lea    -0x20(%rbp),%rcx
    0.00 :	  421e57:       lea    -0x40(%rbp),%rax
    0.00 :	  421e5b:       mov    %rcx,%rsi
    0.00 :	  421e5e:       mov    %rax,%rdi
    0.00 :	  421e61:       callq  421d3c <std::pair<std::_Rb_tree_iterator<Edge>, bool>::pair<std::_Rb_tree_iterator<Edge>, bool, void>(std::_Rb_tree_iterator<Edge>&&, bool&&)>
    0.00 :	  421e66:       mov    -0x40(%rbp),%rax
    0.00 :	  421e6a:       mov    -0x38(%rbp),%rdx
    0.00 :	  421e6e:       mov    %rax,%rcx
    0.00 :	  421e71:       mov    %rdx,%rbx
    0.00 :	  421e74:       jmp    421e80 <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0x102>
    0.00 :	  421e76:       jmp    421e78 <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0xfa>
    0.00 :	  421e78:       mov    %rax,%rdi
    0.00 :	  421e7b:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  421e80:       mov    %rcx,%rax
    0.00 :	  421e83:       add    $0x98,%rsp
    0.00 :	  421e8a:       pop    %rbx
    0.00 :	  421e8b:       pop    %rbp
    0.00 :	  421e8c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428f5a <std::_Rb_tree_node<int>::_Rb_tree_node<int const&>(int const&)>:
         :	_ZNSt13_Rb_tree_nodeIiEC2IIRKiEEEDpOT_():
         :	      typedef _Rb_tree_node<_Val>* _Link_type;
         :	      _Val _M_value_field;
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename... _Args>
         :	        _Rb_tree_node(_Args&&... __args)
    0.00 :	  428f5a:       push   %rbp
    0.00 :	  428f5b:       mov    %rsp,%rbp
    0.00 :	  428f5e:       sub    $0x10,%rsp
    0.00 :	  428f62:       mov    %rdi,-0x8(%rbp)
    0.00 :	  428f66:       mov    %rsi,-0x10(%rbp)
         :	        : _Rb_tree_node_base(),
         :	          _M_value_field(std::forward<_Args>(__args)...) { }
    0.00 :	  428f6a:       mov    -0x8(%rbp),%rax
    0.00 :	  428f6e:       movl   $0x0,(%rax)
    0.00 :	  428f74:       mov    -0x8(%rbp),%rax
    0.00 :	  428f78:       movq   $0x0,0x8(%rax)
    0.00 :	  428f80:       mov    -0x8(%rbp),%rax
    0.00 :	  428f84:       movq   $0x0,0x10(%rax)
  100.00 :	  428f8c:       mov    -0x8(%rbp),%rax
    0.00 :	  428f90:       movq   $0x0,0x18(%rax)
    0.00 :	  428f98:       mov    -0x10(%rbp),%rax
    0.00 :	  428f9c:       mov    %rax,%rdi
    0.00 :	  428f9f:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  428fa4:       mov    (%rax),%edx
    0.00 :	  428fa6:       mov    -0x8(%rbp),%rax
    0.00 :	  428faa:       mov    %edx,0x20(%rax)
    0.00 :	  428fad:       leaveq
    0.00 :	  428fae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f0fa <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE11_M_allocateEm():
         :
         :	    public:
         :	      _Vector_impl _M_impl;
         :
         :	      pointer
         :	      _M_allocate(size_t __n)
    0.00 :	  42f0fa:       push   %rbp
    0.00 :	  42f0fb:       mov    %rsp,%rbp
    0.00 :	  42f0fe:       sub    $0x10,%rsp
    0.00 :	  42f102:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f106:       mov    %rsi,-0x10(%rbp)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    0.00 :	  42f10a:       cmpq   $0x0,-0x10(%rbp)
    0.00 :	  42f10f:       je     42f12b <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)+0x31>
    0.00 :	  42f111:       mov    -0x8(%rbp),%rax
    0.00 :	  42f115:       mov    -0x10(%rbp),%rcx
    0.00 :	  42f119:       mov    $0x0,%edx
    0.00 :	  42f11e:       mov    %rcx,%rsi
    0.00 :	  42f121:       mov    %rax,%rdi
    0.00 :	  42f124:       callq  42fe6c <__gnu_cxx::new_allocator<LLcol>::allocate(unsigned long, void const*)>
  100.00 :	  42f129:       jmp    42f130 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)+0x36>
    0.00 :	  42f12b:       mov    $0x0,%eax
    0.00 :	  42f130:       leaveq
    0.00 :	  42f131:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::_Vector_impl(std::allocator<LLcol> const&)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE12_Vector_implC2ERKS1_():
         :
         :	        _Vector_impl()
         :	        : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
         :	        { }
         :
         :	        _Vector_impl(_Tp_alloc_type const& __a)
    0.00 :	  42f502:       push   %rbp
    0.00 :	  42f503:       mov    %rsp,%rbp
    0.00 :	  42f506:       sub    $0x10,%rsp
    0.00 :	  42f50a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f50e:       mov    %rsi,-0x10(%rbp)
         :	        : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    0.00 :	  42f512:       mov    -0x10(%rbp),%rdx
    0.00 :	  42f516:       mov    -0x8(%rbp),%rax
    0.00 :	  42f51a:       mov    %rdx,%rsi
    0.00 :	  42f51d:       mov    %rax,%rdi
    0.00 :	  42f520:       callq  42f4dc <std::allocator<LLcol>::allocator(std::allocator<LLcol> const&)>
    0.00 :	  42f525:       mov    -0x8(%rbp),%rax
    0.00 :	  42f529:       movq   $0x0,(%rax)
  100.00 :	  42f530:       mov    -0x8(%rbp),%rax
    0.00 :	  42f534:       movq   $0x0,0x8(%rax)
    0.00 :	  42f53c:       mov    -0x8(%rbp),%rax
    0.00 :	  42f540:       movq   $0x0,0x10(%rax)
         :	        { }
    0.00 :	  42f548:       leaveq
    0.00 :	  42f549:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042513c <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::_Vector_impl(std::allocator<LLord> const&)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE12_Vector_implC2ERKS1_():
         :
         :	        _Vector_impl()
         :	        : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
         :	        { }
         :
         :	        _Vector_impl(_Tp_alloc_type const& __a)
    0.00 :	  42513c:       push   %rbp
    0.00 :	  42513d:       mov    %rsp,%rbp
  100.00 :	  425140:       sub    $0x10,%rsp
    0.00 :	  425144:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425148:       mov    %rsi,-0x10(%rbp)
         :	        : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    0.00 :	  42514c:       mov    -0x10(%rbp),%rdx
    0.00 :	  425150:       mov    -0x8(%rbp),%rax
    0.00 :	  425154:       mov    %rdx,%rsi
    0.00 :	  425157:       mov    %rax,%rdi
    0.00 :	  42515a:       callq  42510c <std::allocator<LLord>::allocator(std::allocator<LLord> const&)>
    0.00 :	  42515f:       mov    -0x8(%rbp),%rax
    0.00 :	  425163:       movq   $0x0,(%rax)
    0.00 :	  42516a:       mov    -0x8(%rbp),%rax
    0.00 :	  42516e:       movq   $0x0,0x8(%rax)
    0.00 :	  425176:       mov    -0x8(%rbp),%rax
    0.00 :	  42517a:       movq   $0x0,0x10(%rax)
         :	        { }
    0.00 :	  425182:       leaveq
    0.00 :	  425183:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421fce <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::~_Vector_impl()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE12_Vector_implD2Ev():
         :	      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
         :	        rebind<_Tp>::other _Tp_alloc_type;
         :	      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
         :	        pointer;
         :
         :	      struct _Vector_impl
    0.00 :	  421fce:       push   %rbp
  100.00 :	  421fcf:       mov    %rsp,%rbp
    0.00 :	  421fd2:       sub    $0x10,%rsp
    0.00 :	  421fd6:       mov    %rdi,-0x8(%rbp)
    0.00 :	  421fda:       mov    -0x8(%rbp),%rax
    0.00 :	  421fde:       mov    %rax,%rdi
    0.00 :	  421fe1:       callq  422c4e <std::allocator<LLord>::~allocator()>
    0.00 :	  421fe6:       leaveq
    0.00 :	  421fe7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
    0.00 :	  422002:       push   %rbp
    0.00 :	  422003:       mov    %rsp,%rbp
    0.00 :	  422006:       sub    $0x10,%rsp
    0.00 :	  42200a:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    0.00 :	  42200e:       mov    -0x8(%rbp),%rax
    0.00 :	  422012:       mov    0x10(%rax),%rax
    0.00 :	  422016:       mov    %rax,%rdx
    0.00 :	  422019:       mov    -0x8(%rbp),%rax
    0.00 :	  42201d:       mov    (%rax),%rax
    0.00 :	  422020:       sub    %rax,%rdx
  100.00 :	  422023:       mov    %rdx,%rax
    0.00 :	  422026:       sar    $0x4,%rax
    0.00 :	  42202a:       mov    %rax,%rdx
    0.00 :	  42202d:       mov    -0x8(%rbp),%rax
    0.00 :	  422031:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  422034:       mov    -0x8(%rbp),%rax
    0.00 :	  422038:       mov    %rcx,%rsi
    0.00 :	  42203b:       mov    %rax,%rdi
    0.00 :	  42203e:       callq  4246d6 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_deallocate(LLord*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    0.00 :	  422043:       mov    -0x8(%rbp),%rax
    0.00 :	  422047:       mov    %rax,%rdi
    0.00 :	  42204a:       callq  421fce <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42204f:       leaveq
    0.00 :	  422050:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004273f4 <std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator() const>:
         :	_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv():
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
         :
         :	      const _Tp_alloc_type&
         :	      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  100.00 :	  4273f4:       push   %rbp
    0.00 :	  4273f5:       mov    %rsp,%rbp
    0.00 :	  4273f8:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
    0.00 :	  4273fc:       mov    -0x8(%rbp),%rax
    0.00 :	  427400:       pop    %rbp
    0.00 :	  427401:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>:
         :	_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm():
         :
         :	    public:
         :	      _Vector_impl _M_impl;
         :
         :	      pointer
         :	      _M_allocate(size_t __n)
    0.00 :	  423684:       push   %rbp
    0.00 :	  423685:       mov    %rsp,%rbp
    0.00 :	  423688:       sub    $0x10,%rsp
    0.00 :	  42368c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  423690:       mov    %rsi,-0x10(%rbp)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    0.00 :	  423694:       cmpq   $0x0,-0x10(%rbp)
    0.00 :	  423699:       je     4236b5 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)+0x31>
  100.00 :	  42369b:       mov    -0x8(%rbp),%rax
    0.00 :	  42369f:       mov    -0x10(%rbp),%rcx
    0.00 :	  4236a3:       mov    $0x0,%edx
    0.00 :	  4236a8:       mov    %rcx,%rsi
    0.00 :	  4236ab:       mov    %rax,%rdi
    0.00 :	  4236ae:       callq  425c92 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)>
    0.00 :	  4236b3:       jmp    4236ba <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)+0x36>
    0.00 :	  4236b5:       mov    $0x0,%eax
    0.00 :	  4236ba:       leaveq
    0.00 :	  4236bb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>:
         :	_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim():
         :	      pointer
         :	      _M_allocate(size_t __n)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
         :
         :	      void
         :	      _M_deallocate(pointer __p, size_t __n)
    0.00 :	  42307c:       push   %rbp
    0.00 :	  42307d:       mov    %rsp,%rbp
    0.00 :	  423080:       sub    $0x20,%rsp
    0.00 :	  423084:       mov    %rdi,-0x8(%rbp)
    0.00 :	  423088:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42308c:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__p)
    0.00 :	  423090:       cmpq   $0x0,-0x10(%rbp)
    0.00 :	  423095:       je     4230ae <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)+0x32>
         :	          _M_impl.deallocate(__p, __n);
    0.00 :	  423097:       mov    -0x8(%rbp),%rax
    0.00 :	  42309b:       mov    -0x18(%rbp),%rdx
    0.00 :	  42309f:       mov    -0x10(%rbp),%rcx
    0.00 :	  4230a3:       mov    %rcx,%rsi
    0.00 :	  4230a6:       mov    %rax,%rdi
    0.00 :	  4230a9:       callq  4255bc <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long)>
         :	      }
  100.00 :	  4230ae:       leaveq
    0.00 :	  4230af:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b50 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>:
         :	_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv():
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
         :
         :	      const _Tp_alloc_type&
         :	      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    0.00 :	  422b50:       push   %rbp
    0.00 :	  422b51:       mov    %rsp,%rbp
  100.00 :	  422b54:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
    0.00 :	  422b58:       mov    -0x8(%rbp),%rax
    0.00 :	  422b5c:       pop    %rbp
    0.00 :	  422b5d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420dca <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>:
         :	_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD2Ev():
         :	      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
         :	        rebind<_Tp>::other _Tp_alloc_type;
         :	      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
         :	        pointer;
         :
         :	      struct _Vector_impl
    0.00 :	  420dca:       push   %rbp
    0.00 :	  420dcb:       mov    %rsp,%rbp
    0.00 :	  420dce:       sub    $0x10,%rsp
    0.00 :	  420dd2:       mov    %rdi,-0x8(%rbp)
    0.00 :	  420dd6:       mov    -0x8(%rbp),%rax
    0.00 :	  420dda:       mov    %rax,%rdi
    0.00 :	  420ddd:       callq  42048a <std::allocator<int>::~allocator()>
    0.00 :	  420de2:       leaveq
  100.00 :	  420de3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430eab <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)>:
         :	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5LLcolEEPT_PKS4_S7_S5_():
         :	  template<bool _IsMove>
         :	    struct __copy_move<_IsMove, true, random_access_iterator_tag>
         :	    {
         :	      template<typename _Tp>
         :	        static _Tp*
         :	        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    0.00 :	  430eab:       push   %rbp
    0.00 :	  430eac:       mov    %rsp,%rbp
    0.00 :	  430eaf:       sub    $0x30,%rsp
    0.00 :	  430eb3:       mov    %rdi,-0x18(%rbp)
    0.00 :	  430eb7:       mov    %rsi,-0x20(%rbp)
    0.00 :	  430ebb:       mov    %rdx,-0x28(%rbp)
         :	        {
         :	          const ptrdiff_t _Num = __last - __first;
  100.00 :	  430ebf:       mov    -0x20(%rbp),%rdx
    0.00 :	  430ec3:       mov    -0x18(%rbp),%rax
    0.00 :	  430ec7:       sub    %rax,%rdx
    0.00 :	  430eca:       mov    %rdx,%rax
    0.00 :	  430ecd:       sar    $0x4,%rax
    0.00 :	  430ed1:       mov    %rax,-0x8(%rbp)
         :	          if (_Num)
    0.00 :	  430ed5:       cmpq   $0x0,-0x8(%rbp)
    0.00 :	  430eda:       je     430efa <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)+0x4f>
         :	            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :	  430edc:       mov    -0x8(%rbp),%rax
    0.00 :	  430ee0:       shl    $0x4,%rax
    0.00 :	  430ee4:       mov    %rax,%rdx
    0.00 :	  430ee7:       mov    -0x18(%rbp),%rcx
    0.00 :	  430eeb:       mov    -0x28(%rbp),%rax
    0.00 :	  430eef:       mov    %rcx,%rsi
    0.00 :	  430ef2:       mov    %rax,%rdi
    0.00 :	  430ef5:       callq  41dc60 <memmove@plt>
         :	          return __result + _Num;
    0.00 :	  430efa:       mov    -0x8(%rbp),%rax
    0.00 :	  430efe:       shl    $0x4,%rax
    0.00 :	  430f02:       mov    %rax,%rdx
    0.00 :	  430f05:       mov    -0x28(%rbp),%rax
    0.00 :	  430f09:       add    %rdx,%rax
         :	        }
    0.00 :	  430f0c:       leaveq
    0.00 :	  430f0d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042918b <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)>:
         :	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_():
         :	  template<bool _IsMove>
         :	    struct __copy_move<_IsMove, true, random_access_iterator_tag>
         :	    {
         :	      template<typename _Tp>
         :	        static _Tp*
         :	        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    0.00 :	  42918b:       push   %rbp
    0.00 :	  42918c:       mov    %rsp,%rbp
    0.00 :	  42918f:       sub    $0x30,%rsp
    0.00 :	  429193:       mov    %rdi,-0x18(%rbp)
    0.00 :	  429197:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42919b:       mov    %rdx,-0x28(%rbp)
         :	        {
         :	          const ptrdiff_t _Num = __last - __first;
    0.00 :	  42919f:       mov    -0x20(%rbp),%rdx
  100.00 :	  4291a3:       mov    -0x18(%rbp),%rax
    0.00 :	  4291a7:       sub    %rax,%rdx
    0.00 :	  4291aa:       mov    %rdx,%rax
    0.00 :	  4291ad:       sar    $0x2,%rax
    0.00 :	  4291b1:       mov    %rax,-0x8(%rbp)
         :	          if (_Num)
    0.00 :	  4291b5:       cmpq   $0x0,-0x8(%rbp)
    0.00 :	  4291ba:       je     4291db <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)+0x50>
         :	            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.00 :	  4291bc:       mov    -0x8(%rbp),%rax
    0.00 :	  4291c0:       lea    0x0(,%rax,4),%rdx
    0.00 :	  4291c8:       mov    -0x18(%rbp),%rcx
    0.00 :	  4291cc:       mov    -0x28(%rbp),%rax
    0.00 :	  4291d0:       mov    %rcx,%rsi
    0.00 :	  4291d3:       mov    %rax,%rdi
    0.00 :	  4291d6:       callq  41dc60 <memmove@plt>
         :	          return __result + _Num;
    0.00 :	  4291db:       mov    -0x8(%rbp),%rax
    0.00 :	  4291df:       lea    0x0(,%rax,4),%rdx
    0.00 :	  4291e7:       mov    -0x28(%rbp),%rax
    0.00 :	  4291eb:       add    %rdx,%rax
         :	        }
    0.00 :	  4291ee:       leaveq
    0.00 :	  4291ef:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004314b9 <LLcol* std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_():
         :	    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
         :	                   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a2(_II __first, _II __last, _OI __result)
    0.00 :	  4314b9:       push   %rbp
    0.00 :	  4314ba:       mov    %rsp,%rbp
    0.00 :	  4314bd:       push   %r12
    0.00 :	  4314bf:       push   %rbx
    0.00 :	  4314c0:       sub    $0x20,%rsp
    0.00 :	  4314c4:       mov    %rdi,-0x20(%rbp)
    0.00 :	  4314c8:       mov    %rsi,-0x30(%rbp)
    0.00 :	  4314cc:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
         :	                                             std::__niter_base(__last),
         :	                                             std::__niter_base(__result)));
    0.00 :	  4314d0:       mov    -0x28(%rbp),%rax
    0.00 :	  4314d4:       mov    %rax,%rdi
    0.00 :	  4314d7:       callq  43057e <std::_Niter_base<LLcol*>::iterator_type std::__niter_base<LLcol*>(LLcol*)>
  100.00 :	  4314dc:       mov    %rax,%r12
    0.00 :	  4314df:       mov    -0x30(%rbp),%rax
    0.00 :	  4314e3:       mov    %rax,%rdi
    0.00 :	  4314e6:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  4314eb:       mov    %rax,%rbx
    0.00 :	  4314ee:       mov    -0x20(%rbp),%rax
    0.00 :	  4314f2:       mov    %rax,%rdi
    0.00 :	  4314f5:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  4314fa:       mov    %r12,%rdx
    0.00 :	  4314fd:       mov    %rbx,%rsi
    0.00 :	  431500:       mov    %rax,%rdi
    0.00 :	  431503:       callq  430531 <LLcol* std::__copy_move_a<false, LLcol const*, LLcol*>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    0.00 :	  431508:       add    $0x20,%rsp
    0.00 :	  43150c:       pop    %rbx
    0.00 :	  43150d:       pop    %r12
    0.00 :	  43150f:       pop    %rbp
    0.00 :	  431510:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431865 <__gnu_cxx::__enable_if<!std::__is_scalar<LLcol>::__value, LLcol*>::__type std::__fill_n_a<LLcol*, unsigned long, LLcol>(LLcol*, unsigned long, LLcol const&)>:
         :	_ZSt10__fill_n_aIP5LLcolmS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_():
         :	    }
         :
         :	  template<typename _OutputIterator, typename _Size, typename _Tp>
         :	    inline typename
         :	    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :	    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    0.00 :	  431865:       push   %rbp
    0.00 :	  431866:       mov    %rsp,%rbp
    0.00 :	  431869:       mov    %rdi,-0x18(%rbp)
    0.00 :	  43186d:       mov    %rsi,-0x20(%rbp)
    0.00 :	  431871:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  431875:       mov    -0x20(%rbp),%rax
    0.00 :	  431879:       mov    %rax,-0x8(%rbp)
    0.00 :	  43187d:       jmp    43189f <__gnu_cxx::__enable_if<!std::__is_scalar<LLcol>::__value, LLcol*>::__type std::__fill_n_a<LLcol*, unsigned long, LLcol>(LLcol*, unsigned long, LLcol const&)+0x3a>
         :	           __niter > 0; --__niter, ++__first)
         :	        *__first = __value;
    0.00 :	  43187f:       mov    -0x18(%rbp),%rcx
    0.00 :	  431883:       mov    -0x28(%rbp),%rax
    0.00 :	  431887:       mov    0x8(%rax),%rdx
    0.00 :	  43188b:       mov    (%rax),%rax
    0.00 :	  43188e:       mov    %rax,(%rcx)
    0.00 :	  431891:       mov    %rdx,0x8(%rcx)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  431895:       subq   $0x1,-0x8(%rbp)
    0.00 :	  43189a:       addq   $0x10,-0x18(%rbp)
    0.00 :	  43189f:       cmpq   $0x0,-0x8(%rbp)
  100.00 :	  4318a4:       jne    43187f <__gnu_cxx::__enable_if<!std::__is_scalar<LLcol>::__value, LLcol*>::__type std::__fill_n_a<LLcol*, unsigned long, LLcol>(LLcol*, unsigned long, LLcol const&)+0x1a>
         :	      return __first;
    0.00 :	  4318a6:       mov    -0x18(%rbp),%rax
         :	    }
    0.00 :	  4318aa:       pop    %rbp
    0.00 :	  4318ab:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e2e2 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __final_insertion_sort(_RandomAccessIterator __first,
    0.00 :	  42e2e2:       push   %rbp
    0.00 :	  42e2e3:       mov    %rsp,%rbp
    0.00 :	  42e2e6:       sub    $0x30,%rsp
    0.00 :	  42e2ea:       mov    %rdi,-0x20(%rbp)
    0.00 :	  42e2ee:       mov    %rsi,-0x30(%rbp)
    0.00 :	  42e2f2:       mov    %rdx,-0x28(%rbp)
         :	                           _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      if (__last - __first > int(_S_threshold))
    0.00 :	  42e2f6:       lea    -0x20(%rbp),%rdx
    0.00 :	  42e2fa:       lea    -0x30(%rbp),%rax
    0.00 :	  42e2fe:       mov    %rdx,%rsi
    0.00 :	  42e301:       mov    %rax,%rdi
    0.00 :	  42e304:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42e309:       cmp    $0x10,%rax
    0.00 :	  42e30d:       setg   %al
    0.00 :	  42e310:       test   %al,%al
    0.00 :	  42e312:       je     42e375 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x93>
         :	        {
         :	          std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
    0.00 :	  42e314:       movq   $0x10,-0x10(%rbp)
    0.00 :	  42e31c:       lea    -0x10(%rbp),%rdx
    0.00 :	  42e320:       lea    -0x20(%rbp),%rax
    0.00 :	  42e324:       mov    %rdx,%rsi
    0.00 :	  42e327:       mov    %rax,%rdi
    0.00 :	  42e32a:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42e32f:       mov    %rax,%rcx
    0.00 :	  42e332:       mov    -0x28(%rbp),%rdx
    0.00 :	  42e336:       mov    -0x20(%rbp),%rax
    0.00 :	  42e33a:       mov    %rcx,%rsi
    0.00 :	  42e33d:       mov    %rax,%rdi
    0.00 :	  42e340:       callq  42f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	          std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
         :	                                          __comp);
    0.00 :	  42e345:       movq   $0x10,-0x8(%rbp)
    0.00 :	  42e34d:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e351:       lea    -0x20(%rbp),%rax
    0.00 :	  42e355:       mov    %rdx,%rsi
    0.00 :	  42e358:       mov    %rax,%rdi
    0.00 :	  42e35b:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
         :	          std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
    0.00 :	  42e360:       mov    -0x28(%rbp),%rdx
    0.00 :	  42e364:       mov    -0x30(%rbp),%rcx
    0.00 :	  42e368:       mov    %rcx,%rsi
    0.00 :	  42e36b:       mov    %rax,%rdi
    0.00 :	  42e36e:       callq  42f453 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
  100.00 :	  42e373:       jmp    42e39e <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xbc>
         :	        }
         :	      else
         :	        std::__insertion_sort(__first, __last, __comp);
    0.00 :	  42e375:       mov    -0x28(%rbp),%rdx
    0.00 :	  42e379:       mov    -0x30(%rbp),%rcx
    0.00 :	  42e37d:       mov    -0x20(%rbp),%rax
    0.00 :	  42e381:       mov    %rcx,%rsi
    0.00 :	  42e384:       mov    %rax,%rdi
    0.00 :	  42e387:       callq  42f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	    }
    0.00 :	  42e38c:       jmp    42e39e <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xbc>
    0.00 :	  42e38e:       mov    %rax,%rdi
    0.00 :	  42e391:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42e396:       mov    %rax,%rdi
    0.00 :	  42e399:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42e39e:       leaveq
    0.00 :	  42e39f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428750 <std::_Miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
         :	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEENSt11_Miter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Miter_base<_Iterator>::iterator_type
         :	    __miter_base(_Iterator __it)
  100.00 :	  428750:       push   %rbp
    0.00 :	  428751:       mov    %rsp,%rbp
    0.00 :	  428754:       sub    $0x10,%rsp
    0.00 :	  428758:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Miter_base<_Iterator>::_S_base(__it); }
    0.00 :	  42875c:       mov    -0x10(%rbp),%rax
    0.00 :	  428760:       mov    %rax,%rdi
    0.00 :	  428763:       callq  428e01 <std::_Iter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, false>::_S_base(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    0.00 :	  428768:       leaveq
    0.00 :	  428769:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeESA_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  4304fd:       push   %rbp
    0.00 :	  4304fe:       mov    %rsp,%rbp
    0.00 :	  430501:       sub    $0x10,%rsp
    0.00 :	  430505:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  430509:       mov    -0x10(%rbp),%rax
  100.00 :	  43050d:       mov    %rax,%rdi
    0.00 :	  430510:       callq  430e71 <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430515:       leaveq
    0.00 :	  430516:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428ab2 <std::_Niter_base<int*>::iterator_type std::__niter_base<int*>(int*)>:
         :	_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  428ab2:       push   %rbp
    0.00 :	  428ab3:       mov    %rsp,%rbp
    0.00 :	  428ab6:       sub    $0x10,%rsp
    0.00 :	  428aba:       mov    %rdi,-0x8(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  428abe:       mov    -0x8(%rbp),%rax
  100.00 :	  428ac2:       mov    %rax,%rdi
    0.00 :	  428ac5:       callq  428eda <std::_Iter_base<int*, false>::_S_base(int*)>
    0.00 :	  428aca:       leaveq
    0.00 :	  428acb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425cf9 <int* std::__uninitialized_copy_a<std::move_iterator<int*>, int*, int>(std::move_iterator<int*>, std::move_iterator<int*>, int*, std::allocator<int>&)>:
         :	_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E():
         :	        }
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         :	    inline _ForwardIterator
         :	    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    0.00 :	  425cf9:       push   %rbp
    0.00 :	  425cfa:       mov    %rsp,%rbp
    0.00 :	  425cfd:       sub    $0x20,%rsp
    0.00 :	  425d01:       mov    %rdi,-0x10(%rbp)
    0.00 :	  425d05:       mov    %rsi,-0x20(%rbp)
    0.00 :	  425d09:       mov    %rdx,-0x18(%rbp)
    0.00 :	  425d0d:       mov    %rcx,-0x8(%rbp)
         :	                           _ForwardIterator __result, allocator<_Tp>&)
         :	    { return std::uninitialized_copy(__first, __last, __result); }
    0.00 :	  425d11:       mov    -0x18(%rbp),%rdx
    0.00 :	  425d15:       mov    -0x20(%rbp),%rcx
    0.00 :	  425d19:       mov    -0x10(%rbp),%rax
    0.00 :	  425d1d:       mov    %rcx,%rsi
    0.00 :	  425d20:       mov    %rax,%rdi
    0.00 :	  425d23:       callq  4274dd <int* std::uninitialized_copy<std::move_iterator<int*>, int*>(std::move_iterator<int*>, std::move_iterator<int*>, int*)>
    0.00 :	  425d28:       leaveq
  100.00 :	  425d29:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d632 <std::allocator<LLcol>::~allocator()>:
         :	_ZNSaI5LLcolED2Ev():
         :	      : __allocator_base<_Tp>(__a) { }
         :
         :	      template<typename _Tp1>
         :	        allocator(const allocator<_Tp1>&) throw() { }
         :
         :	      ~allocator() throw() { }
  100.00 :	  42d632:       push   %rbp
    0.00 :	  42d633:       mov    %rsp,%rbp
    0.00 :	  42d636:       sub    $0x10,%rsp
    0.00 :	  42d63a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d63e:       mov    -0x8(%rbp),%rax
    0.00 :	  42d642:       mov    %rax,%rdi
    0.00 :	  42d645:       callq  42e7d6 <__gnu_cxx::new_allocator<LLcol>::~new_allocator()>
    0.00 :	  42d64a:       leaveq
    0.00 :	  42d64b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042048a <std::allocator<int>::~allocator()>:
         :	_ZNSaIiED2Ev():
         :	      : __allocator_base<_Tp>(__a) { }
         :
         :	      template<typename _Tp1>
         :	        allocator(const allocator<_Tp1>&) throw() { }
         :
         :	      ~allocator() throw() { }
    0.00 :	  42048a:       push   %rbp
    0.00 :	  42048b:       mov    %rsp,%rbp
    0.00 :	  42048e:       sub    $0x10,%rsp
    0.00 :	  420492:       mov    %rdi,-0x8(%rbp)
    0.00 :	  420496:       mov    -0x8(%rbp),%rax
  100.00 :	  42049a:       mov    %rax,%rdi
    0.00 :	  42049d:       callq  422124 <__gnu_cxx::new_allocator<int>::~new_allocator()>
    0.00 :	  4204a2:       leaveq
    0.00 :	  4204a3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043047c <std::enable_if<!std::allocator_traits<std::allocator<LLcol> >::__select_helper<std::allocator<LLcol> const>::value, std::allocator<LLcol> const>::type std::allocator_traits<std::allocator<LLcol> >::_S_select<std::allocator<LLcol> const>(std::allocator<LLcol> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLcolEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_():
         :	        { return __a.select_on_container_copy_construction(); }
         :
         :	      template<typename _Alloc2>
         :	        static typename
         :	        enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
         :	        _S_select(_Alloc2& __a)
    0.00 :	  43047c:       push   %rbp
    0.00 :	  43047d:       mov    %rsp,%rbp
    0.00 :	  430480:       sub    $0x10,%rsp
    0.00 :	  430484:       mov    %rdi,-0x8(%rbp)
    0.00 :	  430488:       mov    %rsi,-0x10(%rbp)
         :	        { return __a; }
    0.00 :	  43048c:       mov    -0x10(%rbp),%rdx
    0.00 :	  430490:       mov    -0x8(%rbp),%rax
    0.00 :	  430494:       mov    %rdx,%rsi
    0.00 :	  430497:       mov    %rax,%rdi
    0.00 :	  43049a:       callq  42f4dc <std::allocator<LLcol>::allocator(std::allocator<LLcol> const&)>
    0.00 :	  43049f:       mov    -0x8(%rbp),%rax
  100.00 :	  4304a3:       leaveq
    0.00 :	  4304a4:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e45 <std::enable_if<!std::allocator_traits<std::allocator<LLord> >::__select_helper<std::allocator<LLord> const>::value, std::allocator<LLord> const>::type std::allocator_traits<std::allocator<LLord> >::_S_select<std::allocator<LLord> const>(std::allocator<LLord> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLordEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_():
         :	        { return __a.select_on_container_copy_construction(); }
         :
         :	      template<typename _Alloc2>
         :	        static typename
         :	        enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
         :	        _S_select(_Alloc2& __a)
  100.00 :	  426e45:       push   %rbp
    0.00 :	  426e46:       mov    %rsp,%rbp
    0.00 :	  426e49:       sub    $0x10,%rsp
    0.00 :	  426e4d:       mov    %rdi,-0x8(%rbp)
    0.00 :	  426e51:       mov    %rsi,-0x10(%rbp)
         :	        { return __a; }
    0.00 :	  426e55:       mov    -0x10(%rbp),%rdx
    0.00 :	  426e59:       mov    -0x8(%rbp),%rax
    0.00 :	  426e5d:       mov    %rdx,%rsi
    0.00 :	  426e60:       mov    %rax,%rdi
    0.00 :	  426e63:       callq  42510c <std::allocator<LLord>::allocator(std::allocator<LLord> const&)>
    0.00 :	  426e68:       mov    -0x8(%rbp),%rax
    0.00 :	  426e6c:       leaveq
    0.00 :	  426e6d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f964 <decltype (_S_construct({parm#1}, {parm#2}, (forward<double>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double>(std::allocator<double>&, double*, double&&)>:
         :	_ZNSt16allocator_traitsISaIdEE9constructIdIdEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS3_():
         :	       *  if that expression is well-formed, otherwise uses placement-new
         :	       *  to construct an object of type @a _Tp at location @a __p from the
         :	       *  arguments @a __args...
         :	      */
         :	      template<typename _Tp, typename... _Args>
         :	        static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    0.00 :	  42f964:       push   %rbp
    0.00 :	  42f965:       mov    %rsp,%rbp
    0.00 :	  42f968:       sub    $0x20,%rsp
    0.00 :	  42f96c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f970:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42f974:       mov    %rdx,-0x18(%rbp)
         :	        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
         :	        { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    0.00 :	  42f978:       mov    -0x18(%rbp),%rax
    0.00 :	  42f97c:       mov    %rax,%rdi
    0.00 :	  42f97f:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42f984:       mov    %rax,%rdx
    0.00 :	  42f987:       mov    -0x10(%rbp),%rcx
    0.00 :	  42f98b:       mov    -0x8(%rbp),%rax
    0.00 :	  42f98f:       mov    %rcx,%rsi
    0.00 :	  42f992:       mov    %rax,%rdi
    0.00 :	  42f995:       callq  4308e5 <std::enable_if<std::allocator_traits<std::allocator<double> >::__construct_helper<double<double> >::value, void>::type std::allocator_traits<std::allocator<double> >::_S_construct<double, double>(std::allocator<double>&, double*, double&&)>
    0.00 :	  42f99a:       leaveq
  100.00 :	  42f99b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004282b2 <std::enable_if<std::allocator_traits<std::allocator<int> >::__maxsize_helper<std::allocator<int> const>::value, unsigned long>::type std::allocator_traits<std::allocator<int> >::_S_max_size<std::allocator<int> const>(std::allocator<int> const&)>:
         :	_ZNSt16allocator_traitsISaIiEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_():
         :	        };
         :
         :	      template<typename _Alloc2>
         :	        static typename
         :	        enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
         :	        _S_max_size(_Alloc2& __a)
    0.00 :	  4282b2:       push   %rbp
  100.00 :	  4282b3:       mov    %rsp,%rbp
    0.00 :	  4282b6:       sub    $0x10,%rsp
    0.00 :	  4282ba:       mov    %rdi,-0x8(%rbp)
         :	        { return __a.max_size(); }
    0.00 :	  4282be:       mov    -0x8(%rbp),%rax
    0.00 :	  4282c2:       mov    %rax,%rdi
    0.00 :	  4282c5:       callq  4274b0 <__gnu_cxx::new_allocator<int>::max_size() const>
    0.00 :	  4282ca:       leaveq
    0.00 :	  4282cb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042504b <std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const&)>:
         :	_ZNSt16allocator_traitsISaIiEE37select_on_container_copy_constructionERKS0_():
         :	       *
         :	       *  Returns @c __rhs.select_on_container_copy_construction() if that
         :	       *  expression is well-formed, otherwise returns @a __rhs
         :	      */
         :	      static _Alloc
         :	      select_on_container_copy_construction(const _Alloc& __rhs)
  100.00 :	  42504b:       push   %rbp
    0.00 :	  42504c:       mov    %rsp,%rbp
    0.00 :	  42504f:       sub    $0x10,%rsp
    0.00 :	  425053:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425057:       mov    %rsi,-0x10(%rbp)
         :	      { return _S_select(__rhs); }
    0.00 :	  42505b:       mov    -0x8(%rbp),%rax
    0.00 :	  42505f:       mov    -0x10(%rbp),%rdx
    0.00 :	  425063:       mov    %rdx,%rsi
    0.00 :	  425066:       mov    %rax,%rdi
    0.00 :	  425069:       callq  426de1 <std::enable_if<!std::allocator_traits<std::allocator<int> >::__select_helper<std::allocator<int> const>::value, std::allocator<int> const>::type std::allocator_traits<std::allocator<int> >::_S_select<std::allocator<int> const>(std::allocator<int> const&)>
    0.00 :	  42506e:       mov    -0x8(%rbp),%rax
    0.00 :	  425072:       leaveq
    0.00 :	  425073:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e2b <LLcol* std::copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_():
         :	   *  Note that the end of the output range is permitted to be contained
         :	   *  within [first,last).
         :	  */
         :	  template<typename _II, typename _OI>
         :	    inline _OI
         :	    copy(_II __first, _II __last, _OI __result)
    0.00 :	  430e2b:       push   %rbp
    0.00 :	  430e2c:       mov    %rsp,%rbp
    0.00 :	  430e2f:       push   %rbx
    0.00 :	  430e30:       sub    $0x28,%rsp
    0.00 :	  430e34:       mov    %rdi,-0x20(%rbp)
    0.00 :	  430e38:       mov    %rsi,-0x30(%rbp)
    0.00 :	  430e3c:       mov    %rdx,-0x28(%rbp)
         :	            typename iterator_traits<_II>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
         :	              (std::__miter_base(__first), std::__miter_base(__last),
         :	               __result));
    0.00 :	  430e40:       mov    -0x30(%rbp),%rax
    0.00 :	  430e44:       mov    %rax,%rdi
    0.00 :	  430e47:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430e4c:       mov    %rax,%rbx
    0.00 :	  430e4f:       mov    -0x20(%rbp),%rax
    0.00 :	  430e53:       mov    %rax,%rdi
    0.00 :	  430e56:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430e5b:       mov    -0x28(%rbp),%rdx
  100.00 :	  430e5f:       mov    %rbx,%rsi
    0.00 :	  430e62:       mov    %rax,%rdi
    0.00 :	  430e65:       callq  4314b9 <LLcol* std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>
         :	    }
    0.00 :	  430e6a:       add    $0x28,%rsp
    0.00 :	  430e6e:       pop    %rbx
    0.00 :	  430e6f:       pop    %rbp
    0.00 :	  430e70:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e6bb <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_():
         :	   *  Note that the end of the output range is permitted to be contained
         :	   *  within [first,last).
         :	  */
         :	  template<typename _II, typename _OI>
         :	    inline _OI
         :	    copy(_II __first, _II __last, _OI __result)
    0.00 :	  42e6bb:       push   %rbp
    0.00 :	  42e6bc:       mov    %rsp,%rbp
    0.00 :	  42e6bf:       push   %rbx
    0.00 :	  42e6c0:       sub    $0x38,%rsp
    0.00 :	  42e6c4:       mov    %rdi,-0x20(%rbp)
    0.00 :	  42e6c8:       mov    %rsi,-0x30(%rbp)
    0.00 :	  42e6cc:       mov    %rdx,-0x40(%rbp)
         :	            typename iterator_traits<_II>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
         :	              (std::__miter_base(__first), std::__miter_base(__last),
         :	               __result));
    0.00 :	  42e6d0:       mov    -0x30(%rbp),%rax
    0.00 :	  42e6d4:       mov    %rax,%rdi
    0.00 :	  42e6d7:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42e6dc:       mov    %rax,%rbx
    0.00 :	  42e6df:       mov    -0x20(%rbp),%rax
  100.00 :	  42e6e3:       mov    %rax,%rdi
    0.00 :	  42e6e6:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42e6eb:       mov    -0x40(%rbp),%rdx
    0.00 :	  42e6ef:       mov    %rbx,%rsi
    0.00 :	  42e6f2:       mov    %rax,%rdi
    0.00 :	  42e6f5:       callq  42f69c <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    0.00 :	  42e6fa:       add    $0x38,%rsp
    0.00 :	  42e6fe:       pop    %rbx
    0.00 :	  42e6ff:       pop    %rbp
    0.00 :	  42e700:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428a6c <double* std::copy<std::move_iterator<double*>, double*>(std::move_iterator<double*>, std::move_iterator<double*>, double*)>:
         :	_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_():
         :	   *  Note that the end of the output range is permitted to be contained
         :	   *  within [first,last).
         :	  */
         :	  template<typename _II, typename _OI>
         :	    inline _OI
         :	    copy(_II __first, _II __last, _OI __result)
    0.00 :	  428a6c:       push   %rbp
    0.00 :	  428a6d:       mov    %rsp,%rbp
    0.00 :	  428a70:       push   %rbx
    0.00 :	  428a71:       sub    $0x28,%rsp
    0.00 :	  428a75:       mov    %rdi,-0x20(%rbp)
    0.00 :	  428a79:       mov    %rsi,-0x30(%rbp)
    0.00 :	  428a7d:       mov    %rdx,-0x28(%rbp)
         :	            typename iterator_traits<_II>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
         :	              (std::__miter_base(__first), std::__miter_base(__last),
         :	               __result));
    0.00 :	  428a81:       mov    -0x30(%rbp),%rax
    0.00 :	  428a85:       mov    %rax,%rdi
    0.00 :	  428a88:       callq  428e68 <std::_Miter_base<std::move_iterator<double*> >::iterator_type std::__miter_base<std::move_iterator<double*> >(std::move_iterator<double*>)>
    0.00 :	  428a8d:       mov    %rax,%rbx
    0.00 :	  428a90:       mov    -0x20(%rbp),%rax
    0.00 :	  428a94:       mov    %rax,%rdi
    0.00 :	  428a97:       callq  428e68 <std::_Miter_base<std::move_iterator<double*> >::iterator_type std::__miter_base<std::move_iterator<double*> >(std::move_iterator<double*>)>
    0.00 :	  428a9c:       mov    -0x28(%rbp),%rdx
  100.00 :	  428aa0:       mov    %rbx,%rsi
    0.00 :	  428aa3:       mov    %rax,%rdi
    0.00 :	  428aa6:       callq  428e82 <double* std::__copy_move_a2<true, double*, double*>(double*, double*, double*)>
         :	    }
    0.00 :	  428aab:       add    $0x28,%rsp
    0.00 :	  428aaf:       pop    %rbx
    0.00 :	  428ab0:       pop    %rbp
    0.00 :	  428ab1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>:
         :	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    0.00 :	  42ec4e:       push   %rbp
    0.00 :	  42ec4f:       mov    %rsp,%rbp
    0.00 :	  42ec52:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
  100.00 :	  42ec56:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec5a:       pop    %rbp
    0.00 :	  42ec5b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES7_EvT_T0_():
         :	   *  This function swaps the values pointed to by two iterators, not the
         :	   *  iterators themselves.
         :	  */
         :	  template<typename _ForwardIterator1, typename _ForwardIterator2>
         :	    inline void
         :	    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    0.00 :	  430d60:       push   %rbp
    0.00 :	  430d61:       mov    %rsp,%rbp
    0.00 :	  430d64:       push   %rbx
    0.00 :	  430d65:       sub    $0x28,%rsp
  100.00 :	  430d69:       mov    %rdi,-0x20(%rbp)
    0.00 :	  430d6d:       mov    %rsi,-0x30(%rbp)
         :	      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
         :	        && __are_same<_ValueType1&, _ReferenceType1>::__value
         :	        && __are_same<_ValueType2&, _ReferenceType2>::__value>::
         :	        iter_swap(__a, __b);
         :	#else
         :	      swap(*__a, *__b);
    0.00 :	  430d71:       lea    -0x30(%rbp),%rax
    0.00 :	  430d75:       mov    %rax,%rdi
    0.00 :	  430d78:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  430d7d:       mov    %rax,%rbx
    0.00 :	  430d80:       lea    -0x20(%rbp),%rax
    0.00 :	  430d84:       mov    %rax,%rdi
    0.00 :	  430d87:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  430d8c:       mov    %rbx,%rsi
    0.00 :	  430d8f:       mov    %rax,%rdi
    0.00 :	  430d92:       callq  431411 <void std::swap<LLcol>(LLcol&, LLcol&)>
         :	#endif
         :	    }
    0.00 :	  430d97:       add    $0x28,%rsp
    0.00 :	  430d9b:       pop    %rbx
    0.00 :	  430d9c:       pop    %rbp
    0.00 :	  430d9d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430677 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::max()>:
         :	_ZNSt26linear_congruential_engineImLm16807ELm0ELm2147483647EE3maxEv():
         :
         :	      /**
         :	       * @brief Gets the largest possible value in the output range.
         :	       */
         :	      static constexpr result_type
         :	      max()
  100.00 :	  430677:       push   %rbp
    0.00 :	  430678:       mov    %rsp,%rbp
         :	      { return __m - 1u; }
    0.00 :	  43067b:       mov    $0x7ffffffe,%eax
    0.00 :	  430680:       pop    %rbp
    0.00 :	  430681:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	   *  The relative ordering of equivalent elements is not preserved, use
         :	   *  @p stable_sort() if this is needed.
         :	  */
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    inline void
         :	    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    0.00 :	  42d13e:       push   %rbp
    0.00 :	  42d13f:       mov    %rsp,%rbp
    0.00 :	  42d142:       sub    $0x20,%rsp
    0.00 :	  42d146:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42d14a:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42d14e:       mov    %rdx,-0x18(%rbp)
         :	            _RandomAccessIterator>)
         :	      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _ValueType,
         :	                                  _ValueType>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      if (__first != __last)
    0.00 :	  42d152:       lea    -0x20(%rbp),%rdx
    0.00 :	  42d156:       lea    -0x10(%rbp),%rax
    0.00 :	  42d15a:       mov    %rdx,%rsi
    0.00 :	  42d15d:       mov    %rax,%rdi
    0.00 :	  42d160:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42d165:       test   %al,%al
    0.00 :	  42d167:       je     42d1b9 <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x7b>
         :	        {
         :	          std::__introsort_loop(__first, __last,
         :	                                std::__lg(__last - __first) * 2, __comp);
    0.00 :	  42d169:       lea    -0x10(%rbp),%rdx
    0.00 :	  42d16d:       lea    -0x20(%rbp),%rax
  100.00 :	  42d171:       mov    %rdx,%rsi
    0.00 :	  42d174:       mov    %rax,%rdi
    0.00 :	  42d177:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42d17c:       mov    %rax,%rdi
    0.00 :	  42d17f:       callq  41eb06 <std::__lg(long)>
    0.00 :	  42d184:       lea    (%rax,%rax,1),%rdi
         :	          std::__introsort_loop(__first, __last,
    0.00 :	  42d188:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d18c:       mov    -0x20(%rbp),%rsi
    0.00 :	  42d190:       mov    -0x10(%rbp),%rax
    0.00 :	  42d194:       mov    %rdx,%rcx
    0.00 :	  42d197:       mov    %rdi,%rdx
    0.00 :	  42d19a:       mov    %rax,%rdi
    0.00 :	  42d19d:       callq  42e23d <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))>
         :	          std::__final_insertion_sort(__first, __last, __comp);
    0.00 :	  42d1a2:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d1a6:       mov    -0x20(%rbp),%rcx
    0.00 :	  42d1aa:       mov    -0x10(%rbp),%rax
    0.00 :	  42d1ae:       mov    %rcx,%rsi
    0.00 :	  42d1b1:       mov    %rax,%rdi
    0.00 :	  42d1b4:       callq  42e2e2 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	        }
         :	    }
    0.00 :	  42d1b9:       leaveq
    0.00 :	  42d1ba:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431411 <void std::swap<LLcol>(LLcol&, LLcol&)>:
         :	_ZSt4swapI5LLcolEvRT_S2_():
         :	   *  @param  __b  Another thing of arbitrary type.
         :	   *  @return   Nothing.
         :	  */
         :	  template<typename _Tp>
         :	    inline void
         :	    swap(_Tp& __a, _Tp& __b)
    0.00 :	  431411:       push   %rbp
    0.00 :	  431412:       mov    %rsp,%rbp
    0.00 :	  431415:       sub    $0x20,%rsp
    0.00 :	  431419:       mov    %rdi,-0x18(%rbp)
    0.00 :	  43141d:       mov    %rsi,-0x20(%rbp)
         :	#endif
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :	      _Tp __tmp = _GLIBCXX_MOVE(__a);
    0.00 :	  431421:       mov    -0x18(%rbp),%rax
    0.00 :	  431425:       mov    %rax,%rdi
    0.00 :	  431428:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  43142d:       mov    0x8(%rax),%rdx
    0.00 :	  431431:       mov    (%rax),%rax
    0.00 :	  431434:       mov    %rax,-0x10(%rbp)
    0.00 :	  431438:       mov    %rdx,-0x8(%rbp)
         :	      __a = _GLIBCXX_MOVE(__b);
    0.00 :	  43143c:       mov    -0x20(%rbp),%rax
    0.00 :	  431440:       mov    %rax,%rdi
    0.00 :	  431443:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  431448:       mov    -0x18(%rbp),%rcx
    0.00 :	  43144c:       mov    0x8(%rax),%rdx
    0.00 :	  431450:       mov    (%rax),%rax
    0.00 :	  431453:       mov    %rax,(%rcx)
  100.00 :	  431456:       mov    %rdx,0x8(%rcx)
         :	      __b = _GLIBCXX_MOVE(__tmp);
    0.00 :	  43145a:       lea    -0x10(%rbp),%rax
    0.00 :	  43145e:       mov    %rax,%rdi
    0.00 :	  431461:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  431466:       mov    -0x20(%rbp),%rcx
    0.00 :	  43146a:       mov    0x8(%rax),%rdx
    0.00 :	  43146e:       mov    (%rax),%rax
    0.00 :	  431471:       mov    %rax,(%rcx)
    0.00 :	  431474:       mov    %rdx,0x8(%rcx)
         :	    }
    0.00 :	  431478:       leaveq
    0.00 :	  431479:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f84a <std::uniform_real_distribution<double>::param_type::b() const>:
         :	_ZNKSt25uniform_real_distributionIdE10param_type1bEv():
         :	        result_type
         :	        a() const
         :	        { return _M_a; }
         :
         :	        result_type
         :	        b() const
    0.00 :	  42f84a:       push   %rbp
    0.00 :	  42f84b:       mov    %rsp,%rbp
    0.00 :	  42f84e:       mov    %rdi,-0x8(%rbp)
         :	        { return _M_b; }
  100.00 :	  42f852:       mov    -0x8(%rbp),%rax
    0.00 :	  42f856:       mov    0x8(%rax),%rax
    0.00 :	  42f85a:       mov    %rax,-0x10(%rbp)
    0.00 :	  42f85e:       vmovsd -0x10(%rbp),%xmm0
    0.00 :	  42f863:       pop    %rbp
    0.00 :	  42f864:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f5bc <LLcol* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_():
         :	   *
         :	   *  Like copy(), but does not require an initialized output range.
         :	  */
         :	  template<typename _InputIterator, typename _ForwardIterator>
         :	    inline _ForwardIterator
         :	    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  42f5bc:       push   %rbp
    0.00 :	  42f5bd:       mov    %rsp,%rbp
    0.00 :	  42f5c0:       sub    $0x20,%rsp
    0.00 :	  42f5c4:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42f5c8:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42f5cc:       mov    %rdx,-0x18(%rbp)
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType2;
         :
         :	      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
         :	                                        && __is_trivial(_ValueType2))>::
         :	        __uninit_copy(__first, __last, __result);
    0.00 :	  42f5d0:       mov    -0x18(%rbp),%rdx
    0.00 :	  42f5d4:       mov    -0x20(%rbp),%rcx
    0.00 :	  42f5d8:       mov    -0x10(%rbp),%rax
    0.00 :	  42f5dc:       mov    %rcx,%rsi
    0.00 :	  42f5df:       mov    %rax,%rdi
    0.00 :	  42f5e2:       callq  4304b4 <LLcol* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>
         :	    }
    0.00 :	  42f5e7:       leaveq
  100.00 :	  42f5e8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004251f6 <LLord* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>:
         :	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_():
         :	   *
         :	   *  Like copy(), but does not require an initialized output range.
         :	  */
         :	  template<typename _InputIterator, typename _ForwardIterator>
         :	    inline _ForwardIterator
         :	    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  4251f6:       push   %rbp
    0.00 :	  4251f7:       mov    %rsp,%rbp
    0.00 :	  4251fa:       sub    $0x20,%rsp
    0.00 :	  4251fe:       mov    %rdi,-0x10(%rbp)
    0.00 :	  425202:       mov    %rsi,-0x20(%rbp)
    0.00 :	  425206:       mov    %rdx,-0x18(%rbp)
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType2;
         :
         :	      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
         :	                                        && __is_trivial(_ValueType2))>::
         :	        __uninit_copy(__first, __last, __result);
    0.00 :	  42520a:       mov    -0x18(%rbp),%rdx
    0.00 :	  42520e:       mov    -0x20(%rbp),%rcx
    0.00 :	  425212:       mov    -0x10(%rbp),%rax
    0.00 :	  425216:       mov    %rcx,%rsi
    0.00 :	  425219:       mov    %rax,%rdi
    0.00 :	  42521c:       callq  426e7c <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>
         :	    }
    0.00 :	  425221:       leaveq
  100.00 :	  425222:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>:
         :	_ZNSt6vectorI5LLcolSaIS0_EE5beginEv():
         :	       *  Returns a read/write iterator that points to the first
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      begin() _GLIBCXX_NOEXCEPT
    0.00 :	  42d0d6:       push   %rbp
    0.00 :	  42d0d7:       mov    %rsp,%rbp
  100.00 :	  42d0da:       sub    $0x20,%rsp
    0.00 :	  42d0de:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_start); }
    0.00 :	  42d0e2:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d0e6:       lea    -0x10(%rbp),%rax
    0.00 :	  42d0ea:       mov    %rdx,%rsi
    0.00 :	  42d0ed:       mov    %rax,%rdi
    0.00 :	  42d0f0:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  42d0f5:       mov    -0x10(%rbp),%rax
    0.00 :	  42d0f9:       leaveq
    0.00 :	  42d0fa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e702 <std::vector<LLcol, std::allocator<LLcol> >::end()>:
         :	_ZNSt6vectorI5LLcolSaIS0_EE3endEv():
         :	       *  Returns a read/write iterator that points one past the last
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      end() _GLIBCXX_NOEXCEPT
    0.00 :	  42e702:       push   %rbp
    0.00 :	  42e703:       mov    %rsp,%rbp
    0.00 :	  42e706:       sub    $0x20,%rsp
    0.00 :	  42e70a:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_finish); }
    0.00 :	  42e70e:       mov    -0x18(%rbp),%rax
    0.00 :	  42e712:       lea    0x8(%rax),%rdx
    0.00 :	  42e716:       lea    -0x10(%rbp),%rax
    0.00 :	  42e71a:       mov    %rdx,%rsi
    0.00 :	  42e71d:       mov    %rax,%rdi
    0.00 :	  42e720:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  42e725:       mov    -0x10(%rbp),%rax
  100.00 :	  42e729:       leaveq
    0.00 :	  42e72a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422cc6 <std::vector<LLord, std::allocator<LLord> >::begin() const>:
         :	_ZNKSt6vectorI5LLordSaIS0_EE5beginEv():
         :	       *  Returns a read-only (constant) iterator that points to the
         :	       *  first element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      const_iterator
         :	      begin() const _GLIBCXX_NOEXCEPT
    0.00 :	  422cc6:       push   %rbp
    0.00 :	  422cc7:       mov    %rsp,%rbp
    0.00 :	  422cca:       sub    $0x20,%rsp
    0.00 :	  422cce:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_start); }
    0.00 :	  422cd2:       mov    -0x18(%rbp),%rax
    0.00 :	  422cd6:       mov    (%rax),%rax
    0.00 :	  422cd9:       mov    %rax,-0x8(%rbp)
    0.00 :	  422cdd:       lea    -0x8(%rbp),%rdx
    0.00 :	  422ce1:       lea    -0x10(%rbp),%rax
    0.00 :	  422ce5:       mov    %rdx,%rsi
    0.00 :	  422ce8:       mov    %rax,%rdi
    0.00 :	  422ceb:       callq  4251da <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::__normal_iterator(LLord const* const&)>
    0.00 :	  422cf0:       mov    -0x10(%rbp),%rax
  100.00 :	  422cf4:       leaveq
    0.00 :	  422cf5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004203ee <std::vector<LLord, std::allocator<LLord> >::~vector()>:
         :	_ZNSt6vectorI5LLordSaIS0_EED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    0.00 :	  4203ee:       push   %rbp
    0.00 :	  4203ef:       mov    %rsp,%rbp
    0.00 :	  4203f2:       sub    $0x10,%rsp
    0.00 :	  4203f6:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  4203fa:       mov    -0x8(%rbp),%rax
    0.00 :	  4203fe:       mov    %rax,%rdi
    0.00 :	  420401:       callq  422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>
    0.00 :	  420406:       mov    %rax,%rdx
    0.00 :	  420409:       mov    -0x8(%rbp),%rax
    0.00 :	  42040d:       mov    0x8(%rax),%rcx
    0.00 :	  420411:       mov    -0x8(%rbp),%rax
    0.00 :	  420415:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  420418:       mov    %rcx,%rsi
    0.00 :	  42041b:       mov    %rax,%rdi
    0.00 :	  42041e:       callq  422060 <void std::_Destroy<LLord*, LLord>(LLord*, LLord*, std::allocator<LLord>&)>
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  420423:       mov    -0x8(%rbp),%rax
  100.00 :	  420427:       mov    %rax,%rdi
    0.00 :	  42042a:       callq  422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>
    0.00 :	  42042f:       leaveq
    0.00 :	  420430:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ec5c <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)>:
         :	_ZNSt6vectorIdSaIdEE12emplace_backIIdEEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    0.00 :	  42ec5c:       push   %rbp
    0.00 :	  42ec5d:       mov    %rsp,%rbp
    0.00 :	  42ec60:       sub    $0x10,%rsp
    0.00 :	  42ec64:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42ec68:       mov    %rsi,-0x10(%rbp)
         :	      emplace_back(_Args&&... __args)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  42ec6c:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec70:       mov    0x8(%rax),%rdx
    0.00 :	  42ec74:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec78:       mov    0x10(%rax),%rax
    0.00 :	  42ec7c:       cmp    %rax,%rdx
    0.00 :	  42ec7f:       je     42ecbd <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)+0x61>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  42ec81:       mov    -0x10(%rbp),%rax
    0.00 :	  42ec85:       mov    %rax,%rdi
    0.00 :	  42ec88:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42ec8d:       mov    %rax,%rdx
    0.00 :	  42ec90:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec94:       mov    0x8(%rax),%rcx
    0.00 :	  42ec98:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  42ec9c:       mov    %rcx,%rsi
    0.00 :	  42ec9f:       mov    %rax,%rdi
    0.00 :	  42eca2:       callq  42f964 <decltype (_S_construct({parm#1}, {parm#2}, (forward<double>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double>(std::allocator<double>&, double*, double&&)>
         :	            ++this->_M_impl._M_finish;
    0.00 :	  42eca7:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecab:       mov    0x8(%rax),%rax
  100.00 :	  42ecaf:       lea    0x8(%rax),%rdx
    0.00 :	  42ecb3:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecb7:       mov    %rdx,0x8(%rax)
    0.00 :	  42ecbb:       jmp    42ecdb <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)+0x7f>
         :	          }
         :	        else
         :	          _M_emplace_back_aux(std::forward<_Args>(__args)...);
    0.00 :	  42ecbd:       mov    -0x10(%rbp),%rax
    0.00 :	  42ecc1:       mov    %rax,%rdi
    0.00 :	  42ecc4:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42ecc9:       mov    %rax,%rdx
    0.00 :	  42eccc:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecd0:       mov    %rdx,%rsi
    0.00 :	  42ecd3:       mov    %rax,%rdi
    0.00 :	  42ecd6:       callq  42f99c <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&)>
         :	      }
    0.00 :	  42ecdb:       leaveq
    0.00 :	  42ecdc:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004205b0 <std::vector<double, std::allocator<double> >::end()>:
         :	_ZNSt6vectorIdSaIdEE3endEv():
         :	       *  Returns a read/write iterator that points one past the last
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      end() _GLIBCXX_NOEXCEPT
    0.00 :	  4205b0:       push   %rbp
  100.00 :	  4205b1:       mov    %rsp,%rbp
    0.00 :	  4205b4:       sub    $0x20,%rsp
    0.00 :	  4205b8:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_finish); }
    0.00 :	  4205bc:       mov    -0x18(%rbp),%rax
    0.00 :	  4205c0:       lea    0x8(%rax),%rdx
    0.00 :	  4205c4:       lea    -0x10(%rbp),%rax
    0.00 :	  4205c8:       mov    %rdx,%rsi
    0.00 :	  4205cb:       mov    %rax,%rdi
    0.00 :	  4205ce:       callq  422496 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::__normal_iterator(double* const&)>
    0.00 :	  4205d3:       mov    -0x10(%rbp),%rax
    0.00 :	  4205d7:       leaveq
    0.00 :	  4205d8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004235ba <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const>:
         :	_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc():
         :	        _M_emplace_back_aux(_Args&&... __args);
         :	#endif
         :
         :	      // Called by the latter.
         :	      size_type
         :	      _M_check_len(size_type __n, const char* __s) const
  100.00 :	  4235ba:       push   %rbp
    0.00 :	  4235bb:       mov    %rsp,%rbp
    0.00 :	  4235be:       push   %rbx
    0.00 :	  4235bf:       sub    $0x38,%rsp
    0.00 :	  4235c3:       mov    %rdi,-0x28(%rbp)
    0.00 :	  4235c7:       mov    %rsi,-0x30(%rbp)
    0.00 :	  4235cb:       mov    %rdx,-0x38(%rbp)
         :	      {
         :	        if (max_size() - size() < __n)
    0.00 :	  4235cf:       mov    -0x28(%rbp),%rax
    0.00 :	  4235d3:       mov    %rax,%rdi
    0.00 :	  4235d6:       callq  425c70 <std::vector<int, std::allocator<int> >::max_size() const>
    0.00 :	  4235db:       mov    %rax,%rbx
    0.00 :	  4235de:       mov    -0x28(%rbp),%rax
    0.00 :	  4235e2:       mov    %rax,%rdi
    0.00 :	  4235e5:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  4235ea:       sub    %rax,%rbx
    0.00 :	  4235ed:       mov    %rbx,%rdx
    0.00 :	  4235f0:       mov    -0x30(%rbp),%rax
    0.00 :	  4235f4:       cmp    %rax,%rdx
    0.00 :	  4235f7:       setb   %al
    0.00 :	  4235fa:       test   %al,%al
    0.00 :	  4235fc:       je     42360a <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0x50>
         :	          __throw_length_error(__N(__s));
    0.00 :	  4235fe:       mov    -0x38(%rbp),%rax
    0.00 :	  423602:       mov    %rax,%rdi
    0.00 :	  423605:       callq  41dac0 <std::__throw_length_error(char const*)@plt>
         :
         :	        const size_type __len = size() + std::max(size(), __n);
    0.00 :	  42360a:       mov    -0x28(%rbp),%rax
    0.00 :	  42360e:       mov    %rax,%rdi
    0.00 :	  423611:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  423616:       mov    %rax,%rbx
    0.00 :	  423619:       mov    -0x28(%rbp),%rax
    0.00 :	  42361d:       mov    %rax,%rdi
    0.00 :	  423620:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  423625:       mov    %rax,-0x20(%rbp)
    0.00 :	  423629:       lea    -0x30(%rbp),%rdx
    0.00 :	  42362d:       lea    -0x20(%rbp),%rax
    0.00 :	  423631:       mov    %rdx,%rsi
    0.00 :	  423634:       mov    %rax,%rdi
    0.00 :	  423637:       callq  425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :	  42363c:       mov    (%rax),%rax
    0.00 :	  42363f:       add    %rbx,%rax
    0.00 :	  423642:       mov    %rax,-0x18(%rbp)
         :	        return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :	  423646:       mov    -0x28(%rbp),%rax
    0.00 :	  42364a:       mov    %rax,%rdi
    0.00 :	  42364d:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  423652:       cmp    -0x18(%rbp),%rax
    0.00 :	  423656:       ja     42366a <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0xb0>
    0.00 :	  423658:       mov    -0x28(%rbp),%rax
    0.00 :	  42365c:       mov    %rax,%rdi
    0.00 :	  42365f:       callq  425c70 <std::vector<int, std::allocator<int> >::max_size() const>
    0.00 :	  423664:       cmp    -0x18(%rbp),%rax
    0.00 :	  423668:       jae    423678 <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0xbe>
    0.00 :	  42366a:       mov    -0x28(%rbp),%rax
    0.00 :	  42366e:       mov    %rax,%rdi
    0.00 :	  423671:       callq  425c70 <std::vector<int, std::allocator<int> >::max_size() const>
    0.00 :	  423676:       jmp    42367c <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0xc2>
    0.00 :	  423678:       mov    -0x18(%rbp),%rax
         :	      }
    0.00 :	  42367c:       add    $0x38,%rsp
    0.00 :	  423680:       pop    %rbx
    0.00 :	  423681:       pop    %rbp
    0.00 :	  423682:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042293c <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)>:
         :	_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    0.00 :	  42293c:       push   %rbp
    0.00 :	  42293d:       mov    %rsp,%rbp
    0.00 :	  422940:       push   %rbx
    0.00 :	  422941:       sub    $0x38,%rsp
    0.00 :	  422945:       mov    %rdi,-0x38(%rbp)
    0.00 :	  422949:       mov    %rsi,-0x40(%rbp)
         :	      _M_emplace_back_aux(_Args&&... __args)
         :	      {
         :	        const size_type __len =
         :	          _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
    0.00 :	  42294d:       mov    -0x38(%rbp),%rax
    0.00 :	  422951:       mov    $0x433a5f,%edx
    0.00 :	  422956:       mov    $0x1,%esi
    0.00 :	  42295b:       mov    %rax,%rdi
    0.00 :	  42295e:       callq  4235ba <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const>
    0.00 :	  422963:       mov    %rax,-0x20(%rbp)
         :	        pointer __new_start(this->_M_allocate(__len));
    0.00 :	  422967:       mov    -0x38(%rbp),%rax
    0.00 :	  42296b:       mov    -0x20(%rbp),%rdx
    0.00 :	  42296f:       mov    %rdx,%rsi
    0.00 :	  422972:       mov    %rax,%rdi
    0.00 :	  422975:       callq  423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    0.00 :	  42297a:       mov    %rax,-0x28(%rbp)
         :	        pointer __new_finish(__new_start);
    0.00 :	  42297e:       mov    -0x28(%rbp),%rax
    0.00 :	  422982:       mov    %rax,-0x18(%rbp)
         :	        __try
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  422986:       mov    -0x40(%rbp),%rax
    0.00 :	  42298a:       mov    %rax,%rdi
    0.00 :	  42298d:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  422992:       mov    %rax,%rbx
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  422995:       mov    -0x38(%rbp),%rax
    0.00 :	  422999:       mov    %rax,%rdi
    0.00 :	  42299c:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  4229a1:       lea    0x0(,%rax,4),%rdx
    0.00 :	  4229a9:       mov    -0x28(%rbp),%rax
    0.00 :	  4229ad:       lea    (%rdx,%rax,1),%rcx
    0.00 :	  4229b1:       mov    -0x38(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  4229b5:       mov    %rbx,%rdx
    0.00 :	  4229b8:       mov    %rcx,%rsi
    0.00 :	  4229bb:       mov    %rax,%rdi
    0.00 :	  4229be:       callq  422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
         :	            __new_finish = 0;
    0.00 :	  4229c3:       movq   $0x0,-0x18(%rbp)
         :
         :	            __new_finish
         :	              = std::__uninitialized_move_if_noexcept_a
         :	              (this->_M_impl._M_start, this->_M_impl._M_finish,
         :	               __new_start, _M_get_Tp_allocator());
    0.00 :	  4229cb:       mov    -0x38(%rbp),%rax
    0.00 :	  4229cf:       mov    %rax,%rdi
    0.00 :	  4229d2:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  4229d7:       mov    %rax,%rcx
    0.00 :	  4229da:       mov    -0x38(%rbp),%rax
    0.00 :	  4229de:       mov    0x8(%rax),%rsi
    0.00 :	  4229e2:       mov    -0x38(%rbp),%rax
    0.00 :	  4229e6:       mov    (%rax),%rax
         :	            __new_finish
    0.00 :	  4229e9:       mov    -0x28(%rbp),%rdx
    0.00 :	  4229ed:       mov    %rax,%rdi
    0.00 :	  4229f0:       callq  4236bc <int* std::__uninitialized_move_if_noexcept_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&)>
    0.00 :	  4229f5:       mov    %rax,-0x18(%rbp)
         :
         :	            ++__new_finish;
    0.00 :	  4229f9:       addq   $0x4,-0x18(%rbp)
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
         :	            _M_deallocate(__new_start, __len);
         :	            __throw_exception_again;
         :	          }
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator());
  100.00 :	  4229fe:       mov    -0x38(%rbp),%rax
    0.00 :	  422a02:       mov    %rax,%rdi
    0.00 :	  422a05:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  422a0a:       mov    %rax,%rdx
    0.00 :	  422a0d:       mov    -0x38(%rbp),%rax
    0.00 :	  422a11:       mov    0x8(%rax),%rcx
    0.00 :	  422a15:       mov    -0x38(%rbp),%rax
    0.00 :	  422a19:       mov    (%rax),%rax
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  422a1c:       mov    %rcx,%rsi
    0.00 :	  422a1f:       mov    %rax,%rdi
    0.00 :	  422a22:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	        _M_deallocate(this->_M_impl._M_start,
         :	                      this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start);
    0.00 :	  422a27:       mov    -0x38(%rbp),%rax
    0.00 :	  422a2b:       mov    0x10(%rax),%rax
    0.00 :	  422a2f:       mov    %rax,%rdx
    0.00 :	  422a32:       mov    -0x38(%rbp),%rax
    0.00 :	  422a36:       mov    (%rax),%rax
    0.00 :	  422a39:       sub    %rax,%rdx
    0.00 :	  422a3c:       mov    %rdx,%rax
    0.00 :	  422a3f:       sar    $0x2,%rax
    0.00 :	  422a43:       mov    %rax,%rdx
    0.00 :	  422a46:       mov    -0x38(%rbp),%rax
    0.00 :	  422a4a:       mov    (%rax),%rcx
    0.00 :	  422a4d:       mov    -0x38(%rbp),%rax
         :	        _M_deallocate(this->_M_impl._M_start,
    0.00 :	  422a51:       mov    %rcx,%rsi
    0.00 :	  422a54:       mov    %rax,%rdi
    0.00 :	  422a57:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	        this->_M_impl._M_start = __new_start;
    0.00 :	  422a5c:       mov    -0x38(%rbp),%rax
    0.00 :	  422a60:       mov    -0x28(%rbp),%rdx
    0.00 :	  422a64:       mov    %rdx,(%rax)
         :	        this->_M_impl._M_finish = __new_finish;
    0.00 :	  422a67:       mov    -0x38(%rbp),%rax
    0.00 :	  422a6b:       mov    -0x18(%rbp),%rdx
    0.00 :	  422a6f:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :	  422a73:       mov    -0x20(%rbp),%rax
    0.00 :	  422a77:       lea    0x0(,%rax,4),%rdx
    0.00 :	  422a7f:       mov    -0x28(%rbp),%rax
    0.00 :	  422a83:       add    %rax,%rdx
    0.00 :	  422a86:       mov    -0x38(%rbp),%rax
    0.00 :	  422a8a:       mov    %rdx,0x10(%rax)
    0.00 :	  422a8e:       jmpq   422b1f <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1e3>
    0.00 :	  422a93:       mov    %rax,%rbx
         :	        __catch(...)
    0.00 :	  422a96:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  422a9b:       mov    %rbx,%rax
    0.00 :	  422a9e:       mov    %rax,%rdi
    0.00 :	  422aa1:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  422aa6:       mov    %rax,%rdi
    0.00 :	  422aa9:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            if (!__new_finish)
    0.00 :	  422aae:       cmpq   $0x0,-0x18(%rbp)
    0.00 :	  422ab3:       jne    422ae1 <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1a5>
         :	              _Alloc_traits::destroy(this->_M_impl, __new_start + size());
    0.00 :	  422ab5:       mov    -0x38(%rbp),%rax
    0.00 :	  422ab9:       mov    %rax,%rdi
    0.00 :	  422abc:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  422ac1:       lea    0x0(,%rax,4),%rdx
    0.00 :	  422ac9:       mov    -0x28(%rbp),%rax
    0.00 :	  422acd:       add    %rax,%rdx
    0.00 :	  422ad0:       mov    -0x38(%rbp),%rax
    0.00 :	  422ad4:       mov    %rdx,%rsi
    0.00 :	  422ad7:       mov    %rax,%rdi
    0.00 :	  422ada:       callq  425026 <void std::allocator_traits<std::allocator<int> >::destroy<int>(std::allocator<int>&, int*)>
    0.00 :	  422adf:       jmp    422b03 <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1c7>
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
    0.00 :	  422ae1:       mov    -0x38(%rbp),%rax
    0.00 :	  422ae5:       mov    %rax,%rdi
    0.00 :	  422ae8:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  422aed:       mov    %rax,%rdx
    0.00 :	  422af0:       mov    -0x18(%rbp),%rcx
    0.00 :	  422af4:       mov    -0x28(%rbp),%rax
    0.00 :	  422af8:       mov    %rcx,%rsi
    0.00 :	  422afb:       mov    %rax,%rdi
    0.00 :	  422afe:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	            _M_deallocate(__new_start, __len);
    0.00 :	  422b03:       mov    -0x38(%rbp),%rax
    0.00 :	  422b07:       mov    -0x20(%rbp),%rdx
    0.00 :	  422b0b:       mov    -0x28(%rbp),%rcx
    0.00 :	  422b0f:       mov    %rcx,%rsi
    0.00 :	  422b12:       mov    %rax,%rdi
    0.00 :	  422b15:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	            __throw_exception_again;
    0.00 :	  422b1a:       callq  41db40 <__cxa_rethrow@plt>
         :	      }
    0.00 :	  422b1f:       add    $0x38,%rsp
    0.00 :	  422b23:       pop    %rbx
    0.00 :	  422b24:       pop    %rbp
    0.00 :	  422b25:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b5e <std::vector<int, std::allocator<int> >::begin() const>:
         :	_ZNKSt6vectorIiSaIiEE5beginEv():
         :	       *  Returns a read-only (constant) iterator that points to the
         :	       *  first element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      const_iterator
         :	      begin() const _GLIBCXX_NOEXCEPT
    0.00 :	  422b5e:       push   %rbp
    0.00 :	  422b5f:       mov    %rsp,%rbp
    0.00 :	  422b62:       sub    $0x20,%rsp
    0.00 :	  422b66:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_start); }
    0.00 :	  422b6a:       mov    -0x18(%rbp),%rax
    0.00 :	  422b6e:       mov    (%rax),%rax
  100.00 :	  422b71:       mov    %rax,-0x8(%rbp)
    0.00 :	  422b75:       lea    -0x8(%rbp),%rdx
    0.00 :	  422b79:       lea    -0x10(%rbp),%rax
    0.00 :	  422b7d:       mov    %rdx,%rsi
    0.00 :	  422b80:       mov    %rax,%rdi
    0.00 :	  422b83:       callq  42509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>
    0.00 :	  422b88:       mov    -0x10(%rbp),%rax
    0.00 :	  422b8c:       leaveq
    0.00 :	  422b8d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fa8a <std::vector<int, std::allocator<int> >::~vector()>:
         :	_ZNSt6vectorIiSaIiEED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    0.00 :	  41fa8a:       push   %rbp
    0.00 :	  41fa8b:       mov    %rsp,%rbp
    0.00 :	  41fa8e:       sub    $0x10,%rsp
    0.00 :	  41fa92:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  41fa96:       mov    -0x8(%rbp),%rax
    0.00 :	  41fa9a:       mov    %rax,%rdi
    0.00 :	  41fa9d:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  41faa2:       mov    %rax,%rdx
    0.00 :	  41faa5:       mov    -0x8(%rbp),%rax
    0.00 :	  41faa9:       mov    0x8(%rax),%rcx
    0.00 :	  41faad:       mov    -0x8(%rbp),%rax
    0.00 :	  41fab1:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  41fab4:       mov    %rcx,%rsi
    0.00 :	  41fab7:       mov    %rax,%rdi
    0.00 :	  41faba:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  41fabf:       mov    -0x8(%rbp),%rax
    0.00 :	  41fac3:       mov    %rax,%rdi
    0.00 :	  41fac6:       callq  420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
  100.00 :	  41facb:       leaveq
    0.00 :	  41facc:       retq
