 Percent |	Source code & Disassembly of main for cycles:u (1347891 samples)
--------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d67 <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_>:
         :	_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_():
         :	   * object's constructor with an initializer.
         :	   */
         :	#if __cplusplus >= 201103L
         :	  template<typename _T1, typename... _Args>
         :	    inline void
         :	    _Construct(_T1* __p, _Args&&... __args)
    7.43 :	  427d67:       push   %rbp
    0.01 :	  427d68:       mov    %rsp,%rbp
    0.56 :	  427d6b:       push   %rbx
    7.40 :	  427d6c:       sub    $0x18,%rsp
    0.57 :	  427d70:       mov    %rdi,-0x18(%rbp)
    0.02 :	  427d74:       mov    %rsi,-0x20(%rbp)
         :	    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
    7.44 :	  427d78:       mov    -0x20(%rbp),%rax
    0.36 :	  427d7c:       mov    %rax,%rdi
    0.47 :	  427d7f:       callq  427d59 <LLord const& std::forward<LLord const&>(std::remove_reference<LLord const&>::type&)>
    0.01 :	  427d84:       mov    %rax,%rbx
    6.60 :	  427d87:       mov    -0x18(%rbp),%rax
    1.50 :	  427d8b:       mov    %rax,%rsi
    0.38 :	  427d8e:       mov    $0x10,%edi
    0.00 :	  427d93:       callq  41eb2a <operator new(unsigned long, void*)>
    0.51 :	  427d98:       mov    %rax,%rcx
    0.01 :	  427d9b:       test   %rcx,%rcx
    0.00 :	  427d9e:       je     427dae <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_+0x47>
    2.52 :	  427da0:       mov    (%rbx),%rax
    7.02 :	  427da3:       mov    0x8(%rbx),%rdx
    2.17 :	  427da7:       mov    %rax,(%rcx)
   40.66 :	  427daa:       mov    %rdx,0x8(%rcx)
    6.23 :	  427dae:       add    $0x18,%rsp
    0.39 :	  427db2:       pop    %rbx
    4.26 :	  427db3:       pop    %rbp
    3.48 :	  427db4:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1107502 samples)
--------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427cde <bool __gnu_cxx::operator!=<LLord const*, std::vector<LLord, std::allocator<LLord> > >(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&)>:
         :	_ZN9__gnu_cxxneIPK5LLordSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    4.51 :	  427cde:       push   %rbp
    0.82 :	  427cdf:       mov    %rsp,%rbp
    8.65 :	  427ce2:       push   %rbx
    0.68 :	  427ce3:       sub    $0x18,%rsp
    5.62 :	  427ce7:       mov    %rdi,-0x18(%rbp)
    3.88 :	  427ceb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
    0.49 :	  427cef:       mov    -0x18(%rbp),%rax
    0.86 :	  427cf3:       mov    %rax,%rdi
    4.84 :	  427cf6:       callq  4287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>
    3.48 :	  427cfb:       mov    (%rax),%rbx
   10.62 :	  427cfe:       mov    -0x20(%rbp),%rax
    0.58 :	  427d02:       mov    %rax,%rdi
    3.15 :	  427d05:       callq  4287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>
    2.71 :	  427d0a:       mov    (%rax),%rax
   24.62 :	  427d0d:       cmp    %rax,%rbx
    6.58 :	  427d10:       setne  %al
    8.21 :	  427d13:       add    $0x18,%rsp
    1.45 :	  427d17:       pop    %rbx
    0.05 :	  427d18:       pop    %rbp
    8.20 :	  427d19:       retq
 Percent |	Source code & Disassembly of main for cycles:u (586023 samples)
-------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e7c <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>:
         :	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_():
         :	  template<bool _TrivialValueTypes>
         :	    struct __uninitialized_copy
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  426e7c:       push   %rbp
    0.00 :	  426e7d:       mov    %rsp,%rbp
    0.00 :	  426e80:       push   %rbx
    0.00 :	  426e81:       sub    $0x38,%rsp
    0.00 :	  426e85:       mov    %rdi,-0x30(%rbp)
    0.00 :	  426e89:       mov    %rsi,-0x40(%rbp)
    0.00 :	  426e8d:       mov    %rdx,-0x38(%rbp)
         :	                      _ForwardIterator __result)
         :	        {
         :	          _ForwardIterator __cur = __result;
    0.00 :	  426e91:       mov    -0x38(%rbp),%rax
    0.00 :	  426e95:       mov    %rax,-0x18(%rbp)
         :	          __try
         :	            {
         :	              for (; __first != __last; ++__first, ++__cur)
    0.00 :	  426e99:       jmp    426ed2 <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0x56>
         :	                std::_Construct(std::__addressof(*__cur), *__first);
   18.35 :	  426e9b:       lea    -0x30(%rbp),%rax
    0.00 :	  426e9f:       mov    %rax,%rdi
    0.00 :	  426ea2:       callq  427d48 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator*() const>
   18.02 :	  426ea7:       mov    %rax,%rbx
    0.00 :	  426eaa:       mov    -0x18(%rbp),%rax
    0.35 :	  426eae:       mov    %rax,%rdi
    0.08 :	  426eb1:       callq  427d3a <LLord* std::__addressof<LLord>(LLord&)>
   17.31 :	  426eb6:       mov    %rbx,%rsi
    0.00 :	  426eb9:       mov    %rax,%rdi
    1.32 :	  426ebc:       callq  427d67 <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_>
         :	              for (; __first != __last; ++__first, ++__cur)
    0.91 :	  426ec1:       lea    -0x30(%rbp),%rax
    0.01 :	  426ec5:       mov    %rax,%rdi
    9.57 :	  426ec8:       callq  427d1a <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator++()>
    0.88 :	  426ecd:       addq   $0x10,-0x18(%rbp)
   12.89 :	  426ed2:       lea    -0x40(%rbp),%rdx
    6.88 :	  426ed6:       lea    -0x30(%rbp),%rax
    0.80 :	  426eda:       mov    %rdx,%rsi
    1.22 :	  426edd:       mov    %rax,%rdi
    9.57 :	  426ee0:       callq  427cde <bool __gnu_cxx::operator!=<LLord const*, std::vector<LLord, std::allocator<LLord> > >(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&)>
    1.78 :	  426ee5:       test   %al,%al
    0.00 :	  426ee7:       jne    426e9b <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0x1f>
         :	              return __cur;
    0.01 :	  426ee9:       mov    -0x18(%rbp),%rax
    0.01 :	  426eed:       jmp    426f22 <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0xa6>
    0.00 :	  426eef:       mov    %rax,%rbx
         :	            }
         :	          __catch(...)
    0.00 :	  426ef2:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  426ef7:       mov    %rbx,%rax
    0.00 :	  426efa:       mov    %rax,%rdi
    0.00 :	  426efd:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  426f02:       mov    %rax,%rdi
    0.00 :	  426f05:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            {
         :	              std::_Destroy(__result, __cur);
    0.00 :	  426f0a:       mov    -0x18(%rbp),%rdx
    0.00 :	  426f0e:       mov    -0x38(%rbp),%rax
    0.00 :	  426f12:       mov    %rdx,%rsi
    0.00 :	  426f15:       mov    %rax,%rdi
    0.00 :	  426f18:       callq  42470a <void std::_Destroy<LLord*>(LLord*, LLord*)>
         :	              __throw_exception_again;
    0.00 :	  426f1d:       callq  41db40 <__cxa_rethrow@plt>
         :	            }
         :	        }
    0.02 :	  426f22:       add    $0x38,%rsp
    0.01 :	  426f26:       pop    %rbx
    0.00 :	  426f27:       pop    %rbp
    0.00 :	  426f28:       retq
 Percent |	Source code & Disassembly of main for cycles:u (499170 samples)
-------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   23.38 :	  4287c2:       push   %rbp
    2.60 :	  4287c3:       mov    %rsp,%rbp
   32.55 :	  4287c6:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
    9.05 :	  4287ca:       mov    -0x8(%rbp),%rax
   16.03 :	  4287ce:       pop    %rbp
   16.38 :	  4287cf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (393127 samples)
-------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d1a <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
   13.08 :	  427d1a:       push   %rbp
    0.04 :	  427d1b:       mov    %rsp,%rbp
   25.83 :	  427d1e:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    1.36 :	  427d22:       mov    -0x8(%rbp),%rax
    0.58 :	  427d26:       mov    (%rax),%rax
   15.67 :	  427d29:       lea    0x10(%rax),%rdx
   11.95 :	  427d2d:       mov    -0x8(%rbp),%rax
    1.32 :	  427d31:       mov    %rdx,(%rax)
         :	        return *this;
    3.07 :	  427d34:       mov    -0x8(%rbp),%rax
         :	      }
   16.25 :	  427d38:       pop    %rbp
   10.84 :	  427d39:       retq
 Percent |	Source code & Disassembly of main for cycles:u (359009 samples)
-------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041eb2a <operator new(unsigned long, void*)>:
         :	_ZnwmPv():
         :	void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
         :	  __attribute__((__externally_visible__));
         :
         :	// Default placement versions of operator new.
         :	inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :	{ return __p; }
   28.68 :	  41eb2a:       push   %rbp
    1.41 :	  41eb2b:       mov    %rsp,%rbp
   24.16 :	  41eb2e:       mov    %rdi,-0x8(%rbp)
    4.42 :	  41eb32:       mov    %rsi,-0x10(%rbp)
    1.49 :	  41eb36:       mov    -0x10(%rbp),%rax
   21.21 :	  41eb3a:       pop    %rbp
   18.62 :	  41eb3b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (247593 samples)
-------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d59 <LLord const& std::forward<LLord const&>(std::remove_reference<LLord const&>::type&)>:
         :	_ZSt7forwardIRK5LLordEOT_RNSt16remove_referenceIS3_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   39.83 :	  427d59:       push   %rbp
    1.08 :	  427d5a:       mov    %rsp,%rbp
    2.50 :	  427d5d:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
   39.68 :	  427d61:       mov    -0x8(%rbp),%rax
   15.83 :	  427d65:       pop    %rbp
    1.09 :	  427d66:       retq
 Percent |	Source code & Disassembly of main for cycles:u (224837 samples)
-------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d3a <LLord* std::__addressof<LLord>(LLord&)>:
         :	_ZSt11__addressofI5LLordEPT_RS1_():
         :	   *  @brief Same as C++11 std::addressof
         :	   *  @ingroup utilities
         :	   */
         :	  template<typename _Tp>
         :	    inline _Tp*
         :	    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   46.64 :	  427d3a:       push   %rbp
    0.77 :	  427d3b:       mov    %rsp,%rbp
   47.22 :	  427d3e:       mov    %rdi,-0x8(%rbp)
         :	    {
         :	      return reinterpret_cast<_Tp*>
         :	        (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    0.08 :	  427d42:       mov    -0x8(%rbp),%rax
         :	    }
    5.28 :	  427d46:       pop    %rbp
    0.01 :	  427d47:       retq
 Percent |	Source code & Disassembly of main for cycles:u (219342 samples)
-------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d48 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
   48.97 :	  427d48:       push   %rbp
    0.01 :	  427d49:       mov    %rsp,%rbp
    0.00 :	  427d4c:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
   49.16 :	  427d50:       mov    -0x8(%rbp),%rax
    0.26 :	  427d54:       mov    (%rax),%rax
    1.51 :	  427d57:       pop    %rbp
    0.09 :	  427d58:       retq
 Percent |	Source code & Disassembly of main for cycles:u (9089 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429a79 <approxChol(LLMatOrd)>:
         :	_Z10approxChol8LLMatOrd():
         :
         :	    colspace = c;
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
         :	}
         :
         :	LDLinv approxChol(LLMatOrd a) {
    0.00 :	  429a79:       push   %rbp
    0.00 :	  429a7a:       mov    %rsp,%rbp
    0.00 :	  429a7d:       push   %rbx
    0.00 :	  429a7e:       sub    $0x1f8,%rsp
    0.00 :	  429a85:       mov    %rdi,-0x1e8(%rbp)
    0.00 :	  429a8c:       mov    %rsi,-0x1f0(%rbp)
         :	    auto n = a.n;
    0.00 :	  429a93:       mov    -0x1f0(%rbp),%rax
    0.00 :	  429a9a:       mov    (%rax),%rax
    0.00 :	  429a9d:       mov    %rax,-0x50(%rbp)
         :
         :	    // need to make custom one without col info later
         :	    LDLinv ldli(a);
    0.00 :	  429aa1:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429aa8:       lea    -0x110(%rbp),%rax
    0.00 :	  429aaf:       mov    %rdx,%rsi
    0.00 :	  429ab2:       mov    %rax,%rdi
    0.00 :	  429ab5:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.00 :	  429aba:       lea    -0x110(%rbp),%rdx
    0.00 :	  429ac1:       mov    -0x1e8(%rbp),%rax
    0.00 :	  429ac8:       mov    %rdx,%rsi
    0.00 :	  429acb:       mov    %rax,%rdi
    0.00 :	  429ace:       callq  42cdda <LDLinv::LDLinv(LLMatOrd)>
    0.00 :	  429ad3:       lea    -0x110(%rbp),%rax
    0.00 :	  429ada:       mov    %rax,%rdi
    0.00 :	  429add:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	    Tind ldli_row_ptr = 0;
    0.00 :	  429ae2:       movl   $0x0,-0x14(%rbp)
         :
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  429ae9:       lea    -0xd1(%rbp),%rax
    0.00 :	  429af0:       mov    %rax,%rdi
    0.00 :	  429af3:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  429af8:       mov    $0x0,%eax
    0.00 :	  429afd:       mov    %rax,-0xd0(%rbp)
    0.00 :	  429b04:       mov    -0x50(%rbp),%rsi
    0.00 :	  429b08:       lea    -0xd1(%rbp),%rcx
    0.00 :	  429b0f:       lea    -0xd0(%rbp),%rdx
    0.00 :	  429b16:       lea    -0x130(%rbp),%rax
    0.00 :	  429b1d:       mov    %rax,%rdi
    0.00 :	  429b20:       callq  41fd00 <std::vector<double, std::allocator<double> >::vector(unsigned long, double const&, std::allocator<double> const&)>
    0.00 :	  429b25:       lea    -0xd1(%rbp),%rax
    0.00 :	  429b2c:       mov    %rax,%rdi
    0.00 :	  429b2f:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  429b34:       lea    -0xc2(%rbp),%rax
    0.00 :	  429b3b:       mov    %rax,%rdi
    0.00 :	  429b3e:       callq  42d618 <std::allocator<LLcol>::allocator()>
    0.00 :	  429b43:       mov    -0x50(%rbp),%rcx
    0.00 :	  429b47:       lea    -0xc2(%rbp),%rdx
    0.00 :	  429b4e:       lea    -0x150(%rbp),%rax
    0.00 :	  429b55:       mov    %rcx,%rsi
    0.00 :	  429b58:       mov    %rax,%rdi
    0.00 :	  429b5b:       callq  42d64c <std::vector<LLcol, std::allocator<LLcol> >::vector(unsigned long, std::allocator<LLcol> const&)>
    0.00 :	  429b60:       lea    -0xc2(%rbp),%rax
    0.00 :	  429b67:       mov    %rax,%rdi
    0.00 :	  429b6a:       callq  42d632 <std::allocator<LLcol>::~allocator()>
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  429b6f:       lea    -0xc1(%rbp),%rax
    0.00 :	  429b76:       mov    %rax,%rdi
    0.00 :	  429b79:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  429b7e:       mov    -0x50(%rbp),%rcx
    0.00 :	  429b82:       lea    -0xc1(%rbp),%rdx
    0.00 :	  429b89:       lea    -0x170(%rbp),%rax
    0.00 :	  429b90:       mov    %rcx,%rsi
    0.00 :	  429b93:       mov    %rax,%rdi
    0.00 :	  429b96:       callq  42d6ae <std::vector<double, std::allocator<double> >::vector(unsigned long, std::allocator<double> const&)>
    0.00 :	  429b9b:       lea    -0xc1(%rbp),%rax
    0.00 :	  429ba2:       mov    %rax,%rdi
    0.00 :	  429ba5:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    // random engine and distribution
         :	    std::default_random_engine engine;
    0.00 :	  429baa:       lea    -0x180(%rbp),%rax
    0.00 :	  429bb1:       mov    $0x1,%esi
    0.00 :	  429bb6:       mov    %rax,%rdi
    0.00 :	  429bb9:       callq  42d710 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
         :	    std::uniform_real_distribution<Tval> u(0.0, 1.0);
    0.00 :	  429bbe:       lea    -0x190(%rbp),%rax
    0.00 :	  429bc5:       vmovsd 0xa0ab(%rip),%xmm1        # 433c78 <std::ignore+0x196>
    0.00 :	  429bcd:       vxorpd %xmm0,%xmm0,%xmm0
    0.00 :	  429bd1:       mov    %rax,%rdi
    0.00 :	  429bd4:       callq  42d736 <std::uniform_real_distribution<double>::uniform_real_distribution(double, double)>
         :
         :
         :	    for (long i = 0; i <= n-2; i++) {
    0.00 :	  429bd9:       movq   $0x0,-0x20(%rbp)
    0.00 :	  429be1:       jmpq   42a18c <approxChol(LLMatOrd)+0x713>
         :
         :	        ldli.col[i] = i;
    0.07 :	  429be6:       mov    -0x20(%rbp),%rdx
    0.03 :	  429bea:       mov    -0x1e8(%rbp),%rax
    0.00 :	  429bf1:       mov    %rdx,%rsi
    0.07 :	  429bf4:       mov    %rax,%rdi
    0.00 :	  429bf7:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.01 :	  429bfc:       mov    -0x20(%rbp),%rdx
    0.07 :	  429c00:       mov    %edx,(%rax)
         :	        ldli.colptr[i] = ldli_row_ptr;
    0.78 :	  429c02:       mov    -0x20(%rbp),%rax
    0.01 :	  429c06:       mov    -0x1e8(%rbp),%rdx
    0.01 :	  429c0d:       add    $0x18,%rdx
    0.00 :	  429c11:       mov    %rax,%rsi
    0.07 :	  429c14:       mov    %rdx,%rdi
    0.00 :	  429c17:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429c1c:       mov    -0x14(%rbp),%edx
    0.04 :	  429c1f:       mov    %edx,(%rax)
         :
         :	        int len = get_ll_col(a, i, colspace);
    0.54 :	  429c21:       mov    -0x20(%rbp),%rax
    0.00 :	  429c25:       mov    %eax,%ebx
    0.00 :	  429c27:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429c2e:       lea    -0xc0(%rbp),%rax
    0.04 :	  429c35:       mov    %rdx,%rsi
    0.00 :	  429c38:       mov    %rax,%rdi
    0.00 :	  429c3b:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.83 :	  429c40:       lea    -0x150(%rbp),%rdx
    0.46 :	  429c47:       lea    -0xc0(%rbp),%rax
    0.00 :	  429c4e:       mov    %ebx,%esi
    0.00 :	  429c50:       mov    %rax,%rdi
    0.01 :	  429c53:       callq  429632 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)>
    0.07 :	  429c58:       mov    %eax,-0x54(%rbp)
    0.22 :	  429c5b:       lea    -0xc0(%rbp),%rax
    0.01 :	  429c62:       mov    %rax,%rdi
    0.00 :	  429c65:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	        len = compressCol(colspace, len);
    0.02 :	  429c6a:       mov    -0x54(%rbp),%edx
    0.02 :	  429c6d:       lea    -0x150(%rbp),%rax
    0.09 :	  429c74:       mov    %edx,%esi
    0.00 :	  429c76:       mov    %rax,%rdi
    0.00 :	  429c79:       callq  429790 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)>
    0.29 :	  429c7e:       mov    %eax,-0x54(%rbp)
         :	        // flop count: sort LLcol len*log(len)?
         :
         :	        Tval csum = 0;
    0.23 :	  429c81:       mov    $0x0,%eax
    0.01 :	  429c86:       mov    %rax,-0x28(%rbp)
         :	        for (int ii = 0; ii < len; ii++) {
    0.07 :	  429c8a:       movl   $0x0,-0x2c(%rbp)
    0.04 :	  429c91:       jmp    429ce4 <approxChol(LLMatOrd)+0x26b>
         :	            csum += colspace[ii].cval;
    0.25 :	  429c93:       mov    -0x2c(%rbp),%eax
    0.15 :	  429c96:       movslq %eax,%rdx
    0.26 :	  429c99:       lea    -0x150(%rbp),%rax
    0.07 :	  429ca0:       mov    %rdx,%rsi
    0.14 :	  429ca3:       mov    %rax,%rdi
    0.17 :	  429ca6:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.07 :	  429cab:       vmovsd 0x8(%rax),%xmm0
    2.02 :	  429cb0:       vmovsd -0x28(%rbp),%xmm1
    0.03 :	  429cb5:       vaddsd %xmm0,%xmm1,%xmm0
    1.58 :	  429cb9:       vmovsd %xmm0,-0x28(%rbp)
         :	            // flop count: 1 add
         :	            cumspace[ii] = csum;
    0.43 :	  429cbe:       mov    -0x2c(%rbp),%eax
    0.04 :	  429cc1:       movslq %eax,%rdx
    0.01 :	  429cc4:       lea    -0x170(%rbp),%rax
    0.09 :	  429ccb:       mov    %rdx,%rsi
    0.36 :	  429cce:       mov    %rax,%rdi
    0.09 :	  429cd1:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.13 :	  429cd6:       mov    %rax,%rdx
    0.40 :	  429cd9:       mov    -0x28(%rbp),%rax
    0.09 :	  429cdd:       mov    %rax,(%rdx)
         :	        for (int ii = 0; ii < len; ii++) {
    0.48 :	  429ce0:       addl   $0x1,-0x2c(%rbp)
    0.46 :	  429ce4:       mov    -0x2c(%rbp),%eax
    0.20 :	  429ce7:       cmp    -0x54(%rbp),%eax
    0.00 :	  429cea:       jl     429c93 <approxChol(LLMatOrd)+0x21a>
         :	        }
         :	        Tval wdeg = csum;
    0.30 :	  429cec:       mov    -0x28(%rbp),%rax
    0.42 :	  429cf0:       mov    %rax,-0x38(%rbp)
         :
         :	        Tval colScale = 1;
    0.08 :	  429cf4:       movabs $0x3ff0000000000000,%rax
    0.03 :	  429cfe:       mov    %rax,-0x40(%rbp)
         :
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    0.33 :	  429d02:       movl   $0x0,-0x44(%rbp)
    0.02 :	  429d09:       jmpq   42a0bb <approxChol(LLMatOrd)+0x642>
         :
         :	            LLcol llcol = colspace[joffset];
    3.11 :	  429d0e:       mov    -0x44(%rbp),%eax
    0.13 :	  429d11:       movslq %eax,%rdx
    0.06 :	  429d14:       lea    -0x150(%rbp),%rax
    0.01 :	  429d1b:       mov    %rdx,%rsi
    0.50 :	  429d1e:       mov    %rax,%rdi
    0.00 :	  429d21:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429d26:       mov    0x8(%rax),%rdx
    3.03 :	  429d2a:       mov    (%rax),%rax
    0.30 :	  429d2d:       mov    %rax,-0x1c0(%rbp)
    0.57 :	  429d34:       mov    %rdx,-0x1b8(%rbp)
         :	            Tval w = llcol.cval * colScale;
    0.20 :	  429d3b:       vmovsd -0x1b8(%rbp),%xmm0
    1.97 :	  429d43:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    2.01 :	  429d48:       vmovsd %xmm0,-0x60(%rbp)
         :	            Tind j = llcol.row;
    0.53 :	  429d4d:       mov    -0x1c0(%rbp),%eax
    0.01 :	  429d53:       mov    %eax,-0x1c4(%rbp)
         :
         :	            Tval f = w/wdeg;
    0.01 :	  429d59:       vmovsd -0x60(%rbp),%xmm0
    2.34 :	  429d5e:       vdivsd -0x38(%rbp),%xmm0,%xmm0
    7.78 :	  429d63:       vmovsd %xmm0,-0x1d0(%rbp)
         :	            // flop count: 1 mul
         :
         :	            Tval r = u(engine);
    0.46 :	  429d6b:       lea    -0x180(%rbp),%rdx
    0.00 :	  429d72:       lea    -0x190(%rbp),%rax
    0.00 :	  429d79:       mov    %rdx,%rsi
    0.00 :	  429d7c:       mov    %rax,%rdi
    0.47 :	  429d7f:       callq  42d774 <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    0.61 :	  429d84:       vmovsd %xmm0,-0x1f8(%rbp)
    0.51 :	  429d8c:       mov    -0x1f8(%rbp),%rax
    2.04 :	  429d93:       mov    %rax,-0x1d8(%rbp)
         :	            r = r * (csum - cumspace[joffset]) + cumspace[joffset];
    0.48 :	  429d9a:       mov    -0x44(%rbp),%eax
    0.00 :	  429d9d:       movslq %eax,%rdx
    0.00 :	  429da0:       lea    -0x170(%rbp),%rax
    0.00 :	  429da7:       mov    %rdx,%rsi
    0.72 :	  429daa:       mov    %rax,%rdi
    0.00 :	  429dad:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  429db2:       vmovsd (%rax),%xmm1
    0.44 :	  429db6:       vmovsd -0x28(%rbp),%xmm0
    0.00 :	  429dbb:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  429dbf:       vmovsd -0x1d8(%rbp),%xmm1
    0.00 :	  429dc7:       vmulsd %xmm1,%xmm0,%xmm2
    1.42 :	  429dcb:       vmovsd %xmm2,-0x1f8(%rbp)
    0.59 :	  429dd3:       mov    -0x44(%rbp),%eax
    0.00 :	  429dd6:       movslq %eax,%rdx
    0.00 :	  429dd9:       lea    -0x170(%rbp),%rax
    0.01 :	  429de0:       mov    %rdx,%rsi
    0.55 :	  429de3:       mov    %rax,%rdi
    0.00 :	  429de6:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.01 :	  429deb:       vmovsd (%rax),%xmm0
    0.51 :	  429def:       vaddsd -0x1f8(%rbp),%xmm0,%xmm0
    1.68 :	  429df7:       vmovsd %xmm0,-0x1d8(%rbp)
         :	            // flop count: 1 mul 2 add
         :
         :	            auto cumspace_last = cumspace.begin();
    0.55 :	  429dff:       lea    -0x170(%rbp),%rax
    0.14 :	  429e06:       mov    %rax,%rdi
    0.00 :	  429e09:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.00 :	  429e0e:       mov    %rax,-0x1e0(%rbp)
         :	            std::advance(cumspace_last, len);
    0.52 :	  429e15:       mov    -0x54(%rbp),%edx
    0.00 :	  429e18:       lea    -0x1e0(%rbp),%rax
    0.00 :	  429e1f:       mov    %edx,%esi
    0.01 :	  429e21:       mov    %rax,%rdi
    0.50 :	  429e24:       callq  42d7af <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)>
         :	            int koff = std::distance(cumspace.begin(), std::lower_bound(cumspace.begin(), cumspace_last, r));
    0.01 :	  429e29:       lea    -0x170(%rbp),%rax
    0.00 :	  429e30:       mov    %rax,%rdi
    0.00 :	  429e33:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.47 :	  429e38:       lea    -0x1d8(%rbp),%rdx
    0.00 :	  429e3f:       mov    -0x1e0(%rbp),%rcx
    0.08 :	  429e46:       mov    %rcx,%rsi
    0.00 :	  429e49:       mov    %rax,%rdi
    0.56 :	  429e4c:       callq  42d7fb <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)>
    0.30 :	  429e51:       mov    %rax,%rbx
    0.00 :	  429e54:       lea    -0x170(%rbp),%rax
    0.33 :	  429e5b:       mov    %rax,%rdi
    0.07 :	  429e5e:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.52 :	  429e63:       mov    %rbx,%rsi
    0.00 :	  429e66:       mov    %rax,%rdi
    0.01 :	  429e69:       callq  42d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>
    0.01 :	  429e6e:       mov    %eax,-0x64(%rbp)
         :	            // flop count: len?
         :
         :	            Tind k = colspace[koff].row;
    0.01 :	  429e71:       mov    -0x64(%rbp),%eax
    0.72 :	  429e74:       movslq %eax,%rdx
    0.64 :	  429e77:       lea    -0x150(%rbp),%rax
    0.00 :	  429e7e:       mov    %rdx,%rsi
    0.00 :	  429e81:       mov    %rax,%rdi
    0.00 :	  429e84:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429e89:       mov    (%rax),%eax
    3.39 :	  429e8b:       mov    %eax,-0x68(%rbp)
         :
         :	            Tval newEdgeVal = w*(1-f);
    0.57 :	  429e8e:       vmovsd -0x1d0(%rbp),%xmm1
    0.00 :	  429e96:       vmovsd 0x9dda(%rip),%xmm0        # 433c78 <std::ignore+0x196>
    1.34 :	  429e9e:       vsubsd %xmm1,%xmm0,%xmm0
    0.25 :	  429ea2:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.66 :	  429ea7:       vmovsd %xmm0,-0x70(%rbp)
         :	            // flop count: 1 mul 1 add
         :
         :
         :	            // create edge (j,k) with newEdgeVal
         :	            // do it by reassigning ll
         :	            if (j < k) {    // put it in col j
    0.04 :	  429eac:       mov    -0x1c4(%rbp),%eax
    0.00 :	  429eb2:       cmp    -0x68(%rbp),%eax
    0.00 :	  429eb5:       jge    429f79 <approxChol(LLMatOrd)+0x500>
         :	                Tind jhead = a.cols[j];
    2.05 :	  429ebb:       mov    -0x1c4(%rbp),%eax
    1.09 :	  429ec1:       cltq
    0.13 :	  429ec3:       mov    -0x1f0(%rbp),%rdx
    0.01 :	  429eca:       add    $0x8,%rdx
    0.26 :	  429ece:       mov    %rax,%rsi
    0.00 :	  429ed1:       mov    %rdx,%rdi
    0.04 :	  429ed4:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.14 :	  429ed9:       mov    (%rax),%eax
    7.78 :	  429edb:       mov    %eax,-0x74(%rbp)
         :	                a.lles[llcol.ptr].row = k;
    0.23 :	  429ede:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429ee4:       cltq
    0.08 :	  429ee6:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429eed:       add    $0x20,%rdx
    0.22 :	  429ef1:       mov    %rax,%rsi
    0.00 :	  429ef4:       mov    %rdx,%rdi
    0.09 :	  429ef7:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.20 :	  429efc:       mov    -0x68(%rbp),%edx
    0.00 :	  429eff:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = jhead;
    0.80 :	  429f01:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f07:       cltq
    0.11 :	  429f09:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f10:       add    $0x20,%rdx
    0.12 :	  429f14:       mov    %rax,%rsi
    0.00 :	  429f17:       mov    %rdx,%rdi
    0.19 :	  429f1a:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.09 :	  429f1f:       mov    -0x74(%rbp),%edx
    0.01 :	  429f22:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    0.44 :	  429f25:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f2b:       cltq
    0.09 :	  429f2d:       mov    -0x1f0(%rbp),%rdx
    0.02 :	  429f34:       add    $0x20,%rdx
    0.19 :	  429f38:       mov    %rax,%rsi
    0.00 :	  429f3b:       mov    %rdx,%rdi
    0.06 :	  429f3e:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.20 :	  429f43:       mov    %rax,%rdx
    0.00 :	  429f46:       mov    -0x70(%rbp),%rax
    0.11 :	  429f4a:       mov    %rax,0x8(%rdx)
         :	                a.cols[j] = llcol.ptr;
    0.90 :	  429f4e:       mov    -0x1c4(%rbp),%eax
    0.11 :	  429f54:       cltq
    0.00 :	  429f56:       mov    -0x1f0(%rbp),%rdx
    0.02 :	  429f5d:       add    $0x8,%rdx
    0.15 :	  429f61:       mov    %rax,%rsi
    0.09 :	  429f64:       mov    %rdx,%rdi
    0.00 :	  429f67:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.11 :	  429f6c:       mov    -0x1bc(%rbp),%edx
    0.18 :	  429f72:       mov    %edx,(%rax)
    0.40 :	  429f74:       jmpq   42a02f <approxChol(LLMatOrd)+0x5b6>
         :	            } else {        // put it in col k
         :	                Tind khead = a.cols[k];
    2.54 :	  429f79:       mov    -0x68(%rbp),%eax
    1.11 :	  429f7c:       cltq
    0.47 :	  429f7e:       mov    -0x1f0(%rbp),%rdx
    0.17 :	  429f85:       add    $0x8,%rdx
    0.24 :	  429f89:       mov    %rax,%rsi
    0.01 :	  429f8c:       mov    %rdx,%rdi
    0.00 :	  429f8f:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429f94:       mov    (%rax),%eax
    5.28 :	  429f96:       mov    %eax,-0x78(%rbp)
         :	                a.lles[llcol.ptr].row = j;
    0.12 :	  429f99:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f9f:       cltq
    0.00 :	  429fa1:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429fa8:       add    $0x20,%rdx
    0.15 :	  429fac:       mov    %rax,%rsi
    0.00 :	  429faf:       mov    %rdx,%rdi
    0.00 :	  429fb2:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.22 :	  429fb7:       mov    -0x1c4(%rbp),%edx
    0.00 :	  429fbd:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = khead;
    0.69 :	  429fbf:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429fc5:       cltq
    0.13 :	  429fc7:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429fce:       add    $0x20,%rdx
    0.09 :	  429fd2:       mov    %rax,%rsi
    0.00 :	  429fd5:       mov    %rdx,%rdi
    0.15 :	  429fd8:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.07 :	  429fdd:       mov    -0x78(%rbp),%edx
    0.01 :	  429fe0:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    0.36 :	  429fe3:       mov    -0x1bc(%rbp),%eax
    0.01 :	  429fe9:       cltq
    0.00 :	  429feb:       mov    -0x1f0(%rbp),%rdx
    0.01 :	  429ff2:       add    $0x20,%rdx
    0.14 :	  429ff6:       mov    %rax,%rsi
    0.00 :	  429ff9:       mov    %rdx,%rdi
    0.00 :	  429ffc:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.22 :	  42a001:       mov    %rax,%rdx
    0.00 :	  42a004:       mov    -0x70(%rbp),%rax
    0.00 :	  42a008:       mov    %rax,0x8(%rdx)
         :	                a.cols[k] = llcol.ptr;
    0.14 :	  42a00c:       mov    -0x68(%rbp),%eax
    0.26 :	  42a00f:       cltq
    0.00 :	  42a011:       mov    -0x1f0(%rbp),%rdx
    0.01 :	  42a018:       add    $0x8,%rdx
    0.03 :	  42a01c:       mov    %rax,%rsi
    0.18 :	  42a01f:       mov    %rdx,%rdi
    0.00 :	  42a022:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.01 :	  42a027:       mov    -0x1bc(%rbp),%edx
    0.23 :	  42a02d:       mov    %edx,(%rax)
         :	            }
         :
         :	            colScale *= 1 - f;
    0.44 :	  42a02f:       vmovsd -0x1d0(%rbp),%xmm1
    0.04 :	  42a037:       vmovsd 0x9c39(%rip),%xmm0        # 433c78 <std::ignore+0x196>
    0.17 :	  42a03f:       vsubsd %xmm1,%xmm0,%xmm0
    0.29 :	  42a043:       vmovsd -0x40(%rbp),%xmm1
    0.10 :	  42a048:       vmulsd %xmm0,%xmm1,%xmm0
    0.19 :	  42a04c:       vmovsd %xmm0,-0x40(%rbp)
         :	            wdeg = wdeg - 2*w + w*f;
    0.25 :	  42a051:       vmovsd -0x60(%rbp),%xmm0
    0.19 :	  42a056:       vaddsd %xmm0,%xmm0,%xmm0
    0.13 :	  42a05a:       vmovsd -0x38(%rbp),%xmm1
    0.02 :	  42a05f:       vsubsd %xmm0,%xmm1,%xmm1
    0.19 :	  42a063:       vmovsd -0x1d0(%rbp),%xmm0
    0.15 :	  42a06b:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.10 :	  42a070:       vaddsd %xmm0,%xmm1,%xmm0
    0.06 :	  42a074:       vmovsd %xmm0,-0x38(%rbp)
         :	            // flop count: 3 mul 3 add
         :
         :	            ldli.rowval.push_back(j);
    0.23 :	  42a079:       mov    -0x1e8(%rbp),%rax
    0.19 :	  42a080:       lea    0x30(%rax),%rdx
    0.12 :	  42a084:       lea    -0x1c4(%rbp),%rax
    0.00 :	  42a08b:       mov    %rax,%rsi
    0.23 :	  42a08e:       mov    %rdx,%rdi
    0.11 :	  42a091:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	            ldli.fval.push_back(f);
    0.52 :	  42a096:       mov    -0x1e8(%rbp),%rax
    0.31 :	  42a09d:       lea    0x48(%rax),%rdx
    0.11 :	  42a0a1:       lea    -0x1d0(%rbp),%rax
    0.20 :	  42a0a8:       mov    %rax,%rsi
    0.13 :	  42a0ab:       mov    %rdx,%rdi
    0.01 :	  42a0ae:       callq  42d904 <std::vector<double, std::allocator<double> >::push_back(double const&)>
         :	            ldli_row_ptr += 1;
    0.06 :	  42a0b3:       addl   $0x1,-0x14(%rbp)
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    1.45 :	  42a0b7:       addl   $0x1,-0x44(%rbp)
    1.39 :	  42a0bb:       mov    -0x54(%rbp),%eax
    0.55 :	  42a0be:       sub    $0x2,%eax
    0.21 :	  42a0c1:       cmp    -0x44(%rbp),%eax
    0.00 :	  42a0c4:       jge    429d0e <approxChol(LLMatOrd)+0x295>
         :	        }
         :
         :	        LLcol llcol = colspace[len-1];
    1.12 :	  42a0ca:       mov    -0x54(%rbp),%eax
    0.42 :	  42a0cd:       sub    $0x1,%eax
    0.04 :	  42a0d0:       movslq %eax,%rdx
    0.09 :	  42a0d3:       lea    -0x150(%rbp),%rax
    0.02 :	  42a0da:       mov    %rdx,%rsi
    0.00 :	  42a0dd:       mov    %rax,%rdi
    0.00 :	  42a0e0:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a0e5:       mov    0x8(%rax),%rdx
    0.23 :	  42a0e9:       mov    (%rax),%rax
    0.00 :	  42a0ec:       mov    %rax,-0x1a0(%rbp)
    0.02 :	  42a0f3:       mov    %rdx,-0x198(%rbp)
         :	        Tval w = llcol.cval * colScale;
    0.14 :	  42a0fa:       vmovsd -0x198(%rbp),%xmm0
    0.26 :	  42a102:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    0.32 :	  42a107:       vmovsd %xmm0,-0x80(%rbp)
         :	        // flop count: 1 mul
         :	        Tind j = llcol.row;
    0.06 :	  42a10c:       mov    -0x1a0(%rbp),%eax
    0.00 :	  42a112:       mov    %eax,-0x1a4(%rbp)
         :
         :	        ldli.rowval.push_back(j);
    0.00 :	  42a118:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a11f:       lea    0x30(%rax),%rdx
    0.03 :	  42a123:       lea    -0x1a4(%rbp),%rax
    0.00 :	  42a12a:       mov    %rax,%rsi
    0.00 :	  42a12d:       mov    %rdx,%rdi
    0.00 :	  42a130:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	        ldli.fval.push_back(1);
    0.14 :	  42a135:       movabs $0x3ff0000000000000,%rax
    0.00 :	  42a13f:       mov    %rax,-0x88(%rbp)
    0.13 :	  42a146:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a14d:       lea    0x48(%rax),%rdx
    0.00 :	  42a151:       lea    -0x88(%rbp),%rax
    0.00 :	  42a158:       mov    %rax,%rsi
    0.02 :	  42a15b:       mov    %rdx,%rdi
    0.00 :	  42a15e:       callq  42d97e <std::vector<double, std::allocator<double> >::push_back(double&&)>
         :	        ldli_row_ptr += 1;
    0.06 :	  42a163:       addl   $0x1,-0x14(%rbp)
         :
         :	        d[i] = w;
    0.33 :	  42a167:       mov    -0x20(%rbp),%rdx
    0.01 :	  42a16b:       lea    -0x130(%rbp),%rax
    0.00 :	  42a172:       mov    %rdx,%rsi
    0.00 :	  42a175:       mov    %rax,%rdi
    0.07 :	  42a178:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  42a17d:       mov    %rax,%rdx
    0.00 :	  42a180:       mov    -0x80(%rbp),%rax
    0.09 :	  42a184:       mov    %rax,(%rdx)
         :	    for (long i = 0; i <= n-2; i++) {
    0.86 :	  42a187:       addq   $0x1,-0x20(%rbp)
    0.00 :	  42a18c:       mov    -0x50(%rbp),%rax
    0.01 :	  42a190:       sub    $0x2,%rax
    0.06 :	  42a194:       cmp    -0x20(%rbp),%rax
    0.00 :	  42a198:       jge    429be6 <approxChol(LLMatOrd)+0x16d>
         :	    }
         :
         :	    ldli.colptr[n-1] = ldli_row_ptr;
    0.00 :	  42a19e:       mov    -0x50(%rbp),%rax
    0.00 :	  42a1a2:       sub    $0x1,%rax
    0.00 :	  42a1a6:       mov    -0x1e8(%rbp),%rdx
    0.00 :	  42a1ad:       add    $0x18,%rdx
    0.00 :	  42a1b1:       mov    %rax,%rsi
    0.00 :	  42a1b4:       mov    %rdx,%rdi
    0.00 :	  42a1b7:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42a1bc:       mov    -0x14(%rbp),%edx
    0.00 :	  42a1bf:       mov    %edx,(%rax)
         :	    ldli.d = d;
    0.00 :	  42a1c1:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a1c8:       lea    0x60(%rax),%rdx
    0.00 :	  42a1cc:       lea    -0x130(%rbp),%rax
    0.00 :	  42a1d3:       mov    %rax,%rsi
    0.00 :	  42a1d6:       mov    %rdx,%rdi
    0.00 :	  42a1d9:       callq  42d9ba <std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> > const&)>
         :
         :	    return ldli;
    0.00 :	  42a1de:       nop
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42a1df:       lea    -0x170(%rbp),%rax
    0.00 :	  42a1e6:       mov    %rax,%rdi
    0.00 :	  42a1e9:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42a1ee:       lea    -0x150(%rbp),%rax
    0.00 :	  42a1f5:       mov    %rax,%rdi
    0.00 :	  42a1f8:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42a1fd:       lea    -0x130(%rbp),%rax
    0.00 :	  42a204:       mov    %rax,%rdi
    0.00 :	  42a207:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  42a20c:       jmpq   42a2d3 <approxChol(LLMatOrd)+0x85a>
    0.00 :	  42a211:       mov    %rax,%rbx
    0.00 :	  42a214:       lea    -0x110(%rbp),%rax
    0.00 :	  42a21b:       mov    %rax,%rdi
    0.00 :	  42a21e:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42a223:       mov    %rbx,%rax
    0.00 :	  42a226:       jmpq   42a2cb <approxChol(LLMatOrd)+0x852>
    0.00 :	  42a22b:       mov    %rax,%rbx
    0.00 :	  42a22e:       lea    -0xd1(%rbp),%rax
    0.00 :	  42a235:       mov    %rax,%rdi
    0.00 :	  42a238:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42a23d:       jmp    42a2b7 <approxChol(LLMatOrd)+0x83e>
    0.00 :	  42a23f:       mov    %rax,%rbx
    0.00 :	  42a242:       lea    -0xc2(%rbp),%rax
    0.00 :	  42a249:       mov    %rax,%rdi
    0.00 :	  42a24c:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42a251:       jmp    42a2a8 <approxChol(LLMatOrd)+0x82f>
    0.00 :	  42a253:       mov    %rax,%rbx
    0.00 :	  42a256:       lea    -0xc1(%rbp),%rax
    0.00 :	  42a25d:       mov    %rax,%rdi
    0.00 :	  42a260:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42a265:       jmp    42a299 <approxChol(LLMatOrd)+0x820>
    0.00 :	  42a267:       mov    %rax,%rbx
         :	        int len = get_ll_col(a, i, colspace);
    0.00 :	  42a26a:       lea    -0xc0(%rbp),%rax
    0.00 :	  42a271:       mov    %rax,%rdi
    0.00 :	  42a274:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42a279:       mov    %rbx,%rax
    0.00 :	  42a27c:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a27e:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a280:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a282:       mov    %rax,%rbx
    0.00 :	  42a285:       jmp    42a28a <approxChol(LLMatOrd)+0x811>
    0.00 :	  42a287:       mov    %rax,%rbx
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42a28a:       lea    -0x170(%rbp),%rax
    0.00 :	  42a291:       mov    %rax,%rdi
    0.00 :	  42a294:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42a299:       lea    -0x150(%rbp),%rax
    0.00 :	  42a2a0:       mov    %rax,%rdi
    0.00 :	  42a2a3:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42a2a8:       lea    -0x130(%rbp),%rax
    0.00 :	  42a2af:       mov    %rax,%rdi
    0.00 :	  42a2b2:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  42a2b7:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a2be:       mov    %rax,%rdi
    0.00 :	  42a2c1:       callq  41f9b8 <LDLinv::~LDLinv()>
    0.00 :	  42a2c6:       mov    %rbx,%rax
    0.00 :	  42a2c9:       jmp    42a2cb <approxChol(LLMatOrd)+0x852>
    0.00 :	  42a2cb:       mov    %rax,%rdi
    0.00 :	  42a2ce:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  42a2d3:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a2da:       add    $0x1f8,%rsp
    0.00 :	  42a2e1:       pop    %rbx
    0.00 :	  42a2e2:       pop    %rbp
    0.00 :	  42a2e3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (7777 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430682 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
         :	_ZSt18generate_canonicalIdLm53ESt26linear_congruential_engineImLm16807ELm0ELm2147483647EEET_RT1_():
         :	    }
         :
         :	  template<typename _RealType, size_t __bits,
         :	           typename _UniformRandomNumberGenerator>
         :	    _RealType
         :	    generate_canonical(_UniformRandomNumberGenerator& __urng)
    0.63 :	  430682:       push   %rbp
    0.05 :	  430683:       mov    %rsp,%rbp
    0.05 :	  430686:       push   %rbx
    0.51 :	  430687:       sub    $0xa8,%rsp
    0.04 :	  43068e:       mov    %rdi,-0x78(%rbp)
         :	    {
         :	      const size_t __b
         :	        = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
         :	                   __bits);
    0.00 :	  430692:       movq   $0x35,-0x68(%rbp)
    0.58 :	  43069a:       movq   $0x35,-0x60(%rbp)
    0.00 :	  4306a2:       lea    -0x68(%rbp),%rdx
    0.01 :	  4306a6:       lea    -0x60(%rbp),%rax
    0.00 :	  4306aa:       mov    %rdx,%rsi
    0.57 :	  4306ad:       mov    %rax,%rdi
    0.01 :	  4306b0:       callq  427ae8 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    0.75 :	  4306b5:       mov    (%rax),%rax
    0.00 :	  4306b8:       mov    %rax,-0x30(%rbp)
         :	      const long double __r = static_cast<long double>(__urng.max())
         :	                            - static_cast<long double>(__urng.min()) + 1.0L;
    0.04 :	  4306bc:       callq  430677 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::max()>
    0.08 :	  4306c1:       mov    %rax,-0x88(%rbp)
    0.51 :	  4306c8:       fildll -0x88(%rbp)
    1.22 :	  4306ce:       fstpt  -0xa0(%rbp)
    0.99 :	  4306d4:       test   %rax,%rax
    0.00 :	  4306d7:       jns    4306ed <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x6b>
    0.00 :	  4306d9:       fldt   0x35c1(%rip)        # 433ca0 <std::ignore+0x1be>
    0.00 :	  4306df:       fldt   -0xa0(%rbp)
    0.00 :	  4306e5:       faddp  %st,%st(1)
    0.00 :	  4306e7:       fstpt  -0xa0(%rbp)
    0.15 :	  4306ed:       callq  43066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>
    0.00 :	  4306f2:       mov    %rax,-0x88(%rbp)
    0.42 :	  4306f9:       fildll -0x88(%rbp)
    0.78 :	  4306ff:       test   %rax,%rax
    0.00 :	  430702:       jns    43070c <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x8a>
    0.00 :	  430704:       fldt   0x3596(%rip)        # 433ca0 <std::ignore+0x1be>
    0.00 :	  43070a:       faddp  %st,%st(1)
    0.24 :	  43070c:       fldt   -0xa0(%rbp)
    0.93 :	  430712:       fsubp  %st,%st(1)
    0.53 :	  430714:       fld1
    0.57 :	  430716:       faddp  %st,%st(1)
    0.44 :	  430718:       fstpt  -0x40(%rbp)
         :	      const size_t __log2r = std::log(__r) / std::log(2.0L);
    1.44 :	  43071b:       mov    -0x40(%rbp),%rax
    0.59 :	  43071f:       mov    -0x38(%rbp),%edx
   11.21 :	  430722:       mov    %rax,(%rsp)
    0.00 :	  430726:       mov    %edx,0x8(%rsp)
    0.58 :	  43072a:       callq  41eb4a <std::log(long double)>
    0.05 :	  43072f:       fstpt  -0xa0(%rbp)
    1.48 :	  430735:       movabs $0x8000000000000000,%rax
    0.00 :	  43073f:       mov    $0x4000,%edx
    0.00 :	  430744:       mov    %rax,(%rsp)
    0.63 :	  430748:       mov    %edx,0x8(%rsp)
    0.00 :	  43074c:       callq  41eb4a <std::log(long double)>
    0.00 :	  430751:       fldt   -0xa0(%rbp)
    0.69 :	  430757:       fdivp  %st,%st(1)
    8.50 :	  430759:       fldt   0x3551(%rip)        # 433cb0 <std::ignore+0x1ce>
    1.26 :	  43075f:       fxch   %st(1)
    0.00 :	  430761:       fucomi %st(1),%st
    1.95 :	  430763:       fstp   %st(1)
    0.00 :	  430765:       jae    43076c <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0xea>
    0.68 :	  430767:       fisttpll -0x48(%rbp)
    0.04 :	  43076a:       jmp    430785 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x103>
    0.00 :	  43076c:       fldt   0x353e(%rip)        # 433cb0 <std::ignore+0x1ce>
    0.00 :	  430772:       fsubrp %st,%st(1)
    0.00 :	  430774:       fisttpll -0x48(%rbp)
    0.00 :	  430777:       movabs $0x8000000000000000,%rax
    0.00 :	  430781:       xor    %rax,-0x48(%rbp)
    0.58 :	  430785:       mov    -0x48(%rbp),%rax
    1.53 :	  430789:       mov    %rax,-0x48(%rbp)
         :	      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
    0.48 :	  43078d:       mov    -0x48(%rbp),%rax
    2.12 :	  430791:       mov    -0x30(%rbp),%rdx
    0.09 :	  430795:       add    %rdx,%rax
    0.62 :	  430798:       sub    $0x1,%rax
    0.82 :	  43079c:       mov    $0x0,%edx
    0.00 :	  4307a1:       divq   -0x48(%rbp)
   20.65 :	  4307a5:       mov    %rax,-0x58(%rbp)
    0.42 :	  4307a9:       movq   $0x1,-0x50(%rbp)
    0.00 :	  4307b1:       lea    -0x58(%rbp),%rdx
    0.00 :	  4307b5:       lea    -0x50(%rbp),%rax
    0.00 :	  4307b9:       mov    %rdx,%rsi
    0.60 :	  4307bc:       mov    %rax,%rdi
    0.00 :	  4307bf:       callq  425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    0.49 :	  4307c4:       mov    (%rax),%rax
    0.00 :	  4307c7:       mov    %rax,-0x18(%rbp)
         :	      _RealType __sum = _RealType(0);
    0.00 :	  4307cb:       mov    $0x0,%eax
    0.00 :	  4307d0:       mov    %rax,-0x20(%rbp)
         :	      _RealType __tmp = _RealType(1);
    0.49 :	  4307d4:       movabs $0x3ff0000000000000,%rax
    0.00 :	  4307de:       mov    %rax,-0x28(%rbp)
         :	      for (; __k != 0; --__k)
    0.00 :	  4307e2:       jmp    430842 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x1c0>
         :	        {
         :	          __sum += _RealType(__urng() - __urng.min()) * __tmp;
    1.17 :	  4307e4:       mov    -0x78(%rbp),%rax
    0.03 :	  4307e8:       mov    %rax,%rdi
    0.00 :	  4307eb:       callq  430f58 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>
    0.63 :	  4307f0:       mov    %rax,%rbx
    0.00 :	  4307f3:       callq  43066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>
    0.01 :	  4307f8:       sub    %rax,%rbx
    0.62 :	  4307fb:       mov    %rbx,%rax
    0.51 :	  4307fe:       test   %rax,%rax
    0.00 :	  430801:       js     43080a <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x188>
    0.01 :	  430803:       vcvtsi2sd %rax,%xmm0,%xmm0
    1.11 :	  430808:       jmp    43081f <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x19d>
    0.00 :	  43080a:       mov    %rax,%rdx
    0.00 :	  43080d:       shr    %rdx
    0.00 :	  430810:       and    $0x1,%eax
    0.00 :	  430813:       or     %rax,%rdx
    0.00 :	  430816:       vcvtsi2sd %rdx,%xmm0,%xmm0
    0.00 :	  43081b:       vaddsd %xmm0,%xmm0,%xmm0
    0.03 :	  43081f:       vmulsd -0x28(%rbp),%xmm0,%xmm0
    1.77 :	  430824:       vmovsd -0x20(%rbp),%xmm1
    0.00 :	  430829:       vaddsd %xmm0,%xmm1,%xmm0
    2.83 :	  43082d:       vmovsd %xmm0,-0x20(%rbp)
         :	          __tmp *= __r;
    0.72 :	  430832:       fldl   -0x28(%rbp)
    0.00 :	  430835:       fldt   -0x40(%rbp)
    1.32 :	  430838:       fmulp  %st,%st(1)
    0.03 :	  43083a:       fstpl  -0x28(%rbp)
         :	      for (; __k != 0; --__k)
    0.66 :	  43083d:       subq   $0x1,-0x18(%rbp)
    0.68 :	  430842:       cmpq   $0x0,-0x18(%rbp)
    2.52 :	  430847:       jne    4307e4 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x162>
         :	        }
         :	      return __sum / __tmp;
    0.03 :	  430849:       vmovsd -0x20(%rbp),%xmm0
    0.96 :	  43084e:       vdivsd -0x28(%rbp),%xmm0,%xmm0
    8.74 :	  430853:       vmovsd %xmm0,-0xa0(%rbp)
    0.85 :	  43085b:       mov    -0xa0(%rbp),%rax
         :	    }
    2.52 :	  430862:       mov    %rax,-0xa0(%rbp)
    0.67 :	  430869:       vmovsd -0xa0(%rbp),%xmm0
    2.70 :	  430871:       add    $0xa8,%rsp
    0.00 :	  430878:       pop    %rbx
    0.00 :	  430879:       pop    %rbp
    0.77 :	  43087a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (7333 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d7fb <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)>:
         :	_ZSt11lower_boundIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET_S7_S7_RKT0_():
         :	   *                  @a val.
         :	   *  @ingroup binary_search_algorithms
         :	  */
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    _ForwardIterator
         :	    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    0.03 :	  42d7fb:       push   %rbp
    0.03 :	  42d7fc:       mov    %rsp,%rbp
    0.59 :	  42d7ff:       sub    $0x40,%rsp
    0.00 :	  42d803:       mov    %rdi,-0x30(%rbp)
    0.10 :	  42d807:       mov    %rsi,-0x40(%rbp)
    0.56 :	  42d80b:       mov    %rdx,-0x38(%rbp)
         :	      // concept requirements
         :	      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
         :	      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)
         :	      __glibcxx_requires_partitioned_lower(__first, __last, __val);
         :
         :	      _DistanceType __len = std::distance(__first, __last);
    0.01 :	  42d80f:       mov    -0x40(%rbp),%rdx
    0.23 :	  42d813:       mov    -0x30(%rbp),%rax
    0.07 :	  42d817:       mov    %rdx,%rsi
    0.52 :	  42d81a:       mov    %rax,%rdi
    0.03 :	  42d81d:       callq  42d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>
    0.01 :	  42d822:       mov    %rax,-0x8(%rbp)
         :
         :	      while (__len > 0)
    0.23 :	  42d826:       jmp    42d8a5 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xaa>
         :	        {
         :	          _DistanceType __half = __len >> 1;
    4.02 :	  42d828:       mov    -0x8(%rbp),%rax
    1.31 :	  42d82c:       sar    %rax
    0.64 :	  42d82f:       mov    %rax,-0x10(%rbp)
         :	          _ForwardIterator __middle = __first;
    0.86 :	  42d833:       mov    -0x30(%rbp),%rax
    2.21 :	  42d837:       mov    %rax,-0x20(%rbp)
         :	          std::advance(__middle, __half);
    0.16 :	  42d83b:       mov    -0x10(%rbp),%rdx
    8.70 :	  42d83f:       lea    -0x20(%rbp),%rax
    0.00 :	  42d843:       mov    %rdx,%rsi
    0.57 :	  42d846:       mov    %rax,%rdi
    0.01 :	  42d849:       callq  42e9c4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long)>
         :	          if (*__middle < __val)
    3.14 :	  42d84e:       lea    -0x20(%rbp),%rax
    0.00 :	  42d852:       mov    %rax,%rdi
    0.01 :	  42d855:       callq  420636 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator*() const>
    0.55 :	  42d85a:       vmovsd (%rax),%xmm1
   16.95 :	  42d85e:       mov    -0x38(%rbp),%rax
    0.00 :	  42d862:       vmovsd (%rax),%xmm0
    2.55 :	  42d866:       vucomisd %xmm1,%xmm0
   11.54 :	  42d86a:       seta   %al
    5.67 :	  42d86d:       test   %al,%al
    0.00 :	  42d86f:       je     42d89d <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xa2>
         :	            {
         :	              __first = __middle;
    4.42 :	  42d871:       mov    -0x20(%rbp),%rax
    2.52 :	  42d875:       mov    %rax,-0x30(%rbp)
         :	              ++__first;
    0.42 :	  42d879:       lea    -0x30(%rbp),%rax
    0.00 :	  42d87d:       mov    %rax,%rdi
    1.45 :	  42d880:       callq  420616 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator++()>
         :	              __len = __len - __half - 1;
    0.25 :	  42d885:       mov    -0x10(%rbp),%rax
    0.30 :	  42d889:       mov    -0x8(%rbp),%rdx
    1.45 :	  42d88d:       sub    %rax,%rdx
    0.08 :	  42d890:       mov    %rdx,%rax
    0.00 :	  42d893:       sub    $0x1,%rax
    0.22 :	  42d897:       mov    %rax,-0x8(%rbp)
    1.36 :	  42d89b:       jmp    42d8a5 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xaa>
         :	            }
         :	          else
         :	            __len = __half;
    7.65 :	  42d89d:       mov    -0x10(%rbp),%rax
    5.33 :	  42d8a1:       mov    %rax,-0x8(%rbp)
         :	      while (__len > 0)
    2.54 :	  42d8a5:       cmpq   $0x0,-0x8(%rbp)
    5.44 :	  42d8aa:       jg     42d828 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0x2d>
         :	        }
         :	      return __first;
    1.77 :	  42d8b0:       mov    -0x30(%rbp),%rax
    2.03 :	  42d8b4:       jmp    42d8be <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xc3>
    0.00 :	  42d8b6:       mov    %rax,%rdi
    0.00 :	  42d8b9:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.01 :	  42d8be:       leaveq
    1.46 :	  42d8bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5618 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
   22.73 :	  430210:       push   %rbp
    7.53 :	  430211:       mov    %rsp,%rbp
    9.26 :	  430214:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
   12.83 :	  430218:       mov    -0x8(%rbp),%rax
   11.94 :	  43021c:       mov    (%rax),%rax
   30.90 :	  43021f:       pop    %rbp
    4.81 :	  430220:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5045 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __unguarded_linear_insert(_RandomAccessIterator __last,
    0.28 :	  430390:       push   %rbp
    0.20 :	  430391:       mov    %rsp,%rbp
    1.11 :	  430394:       push   %rbx
    0.24 :	  430395:       sub    $0x38,%rsp
    1.59 :	  430399:       mov    %rdi,-0x40(%rbp)
    0.18 :	  43039d:       mov    %rsi,-0x38(%rbp)
         :	                              _Compare __comp)
         :	    {
         :	      typename iterator_traits<_RandomAccessIterator>::value_type
         :	        __val = _GLIBCXX_MOVE(*__last);
    0.02 :	  4303a1:       lea    -0x40(%rbp),%rax
    0.00 :	  4303a5:       mov    %rax,%rdi
    1.59 :	  4303a8:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4303ad:       mov    %rax,%rdi
    0.00 :	  4303b0:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    1.53 :	  4303b5:       mov    0x8(%rax),%rdx
    3.23 :	  4303b9:       mov    (%rax),%rax
    0.56 :	  4303bc:       mov    %rax,-0x20(%rbp)
    0.97 :	  4303c0:       mov    %rdx,-0x18(%rbp)
         :	      _RandomAccessIterator __next = __last;
    1.37 :	  4303c4:       mov    -0x40(%rbp),%rax
    0.06 :	  4303c8:       mov    %rax,-0x30(%rbp)
         :	      --__next;
    0.16 :	  4303cc:       lea    -0x30(%rbp),%rax
    0.28 :	  4303d0:       mov    %rax,%rdi
    1.07 :	  4303d3:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	      while (__comp(__val, *__next))
    0.06 :	  4303d8:       jmp    43041f <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x8f>
         :	        {
         :	          *__last = _GLIBCXX_MOVE(*__next);
    6.38 :	  4303da:       lea    -0x40(%rbp),%rax
    1.72 :	  4303de:       mov    %rax,%rdi
    0.00 :	  4303e1:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    4.28 :	  4303e6:       mov    %rax,%rbx
    0.00 :	  4303e9:       lea    -0x30(%rbp),%rax
    0.30 :	  4303ed:       mov    %rax,%rdi
    0.00 :	  4303f0:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.02 :	  4303f5:       mov    %rax,%rdi
    0.06 :	  4303f8:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  4303fd:       mov    0x8(%rax),%rdx
   12.45 :	  430401:       mov    (%rax),%rax
    1.80 :	  430404:       mov    %rax,(%rbx)
    2.20 :	  430407:       mov    %rdx,0x8(%rbx)
         :	          __last = __next;
    1.25 :	  43040b:       mov    -0x30(%rbp),%rax
    1.05 :	  43040f:       mov    %rax,-0x40(%rbp)
         :	          --__next;
    0.00 :	  430413:       lea    -0x30(%rbp),%rax
    1.41 :	  430417:       mov    %rax,%rdi
    1.23 :	  43041a:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	      while (__comp(__val, *__next))
    1.88 :	  43041f:       lea    -0x30(%rbp),%rax
    1.76 :	  430423:       mov    %rax,%rdi
    1.09 :	  430426:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.34 :	  43042b:       mov    %rax,%rcx
    1.05 :	  43042e:       lea    -0x20(%rbp),%rdx
    3.31 :	  430432:       mov    -0x38(%rbp),%rax
    0.99 :	  430436:       mov    %rcx,%rsi
    0.57 :	  430439:       mov    %rdx,%rdi
    0.95 :	  43043c:       callq  *%rax
    0.00 :	  43043e:       test   %al,%al
    4.42 :	  430440:       jne    4303da <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x4a>
         :	        }
         :	      *__last = _GLIBCXX_MOVE(__val);
   13.72 :	  430442:       lea    -0x40(%rbp),%rax
    9.14 :	  430446:       mov    %rax,%rdi
    0.00 :	  430449:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.44 :	  43044e:       mov    %rax,%rbx
    0.00 :	  430451:       lea    -0x20(%rbp),%rax
    0.95 :	  430455:       mov    %rax,%rdi
    0.00 :	  430458:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.22 :	  43045d:       mov    0x8(%rax),%rdx
    4.14 :	  430461:       mov    (%rax),%rax
    0.28 :	  430464:       mov    %rax,(%rbx)
    2.78 :	  430467:       mov    %rdx,0x8(%rbx)
    1.65 :	  43046b:       jmp    430475 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xe5>
    0.00 :	  43046d:       mov    %rax,%rdi
    0.00 :	  430470:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.02 :	  430475:       add    $0x38,%rsp
    0.40 :	  430479:       pop    %rbx
    1.29 :	  43047a:       pop    %rbp
    0.00 :	  43047b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3530 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429769 <cmp_val(LLcol const&, LLcol const&)>:
         :	_Z7cmp_valRK5LLcolS1_():
         :
         :	bool cmp_row(const LLcol &a, const LLcol &b) {
         :	    return a.row < b.row;
         :	}
         :
         :	bool cmp_val(const LLcol &a, const LLcol &b) {
    5.16 :	  429769:       push   %rbp
    4.48 :	  42976a:       mov    %rsp,%rbp
    3.17 :	  42976d:       mov    %rdi,-0x8(%rbp)
    1.53 :	  429771:       mov    %rsi,-0x10(%rbp)
         :	    return a.cval < b.cval;
    2.61 :	  429775:       mov    -0x8(%rbp),%rax
    3.34 :	  429779:       vmovsd 0x8(%rax),%xmm1
   20.51 :	  42977e:       mov    -0x10(%rbp),%rax
    2.75 :	  429782:       vmovsd 0x8(%rax),%xmm0
   19.09 :	  429787:       vucomisd %xmm1,%xmm0
   25.01 :	  42978b:       seta   %al
         :	}
   12.27 :	  42978e:       pop    %rbp
    0.08 :	  42978f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3302 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429632 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)>:
         :	_Z10get_ll_col8LLMatOrdiRSt6vectorI5LLcolSaIS1_EE():
         :
         :	        ptr = ll.next;
         :	    }
         :	}
         :
         :	int get_ll_col(LLMatOrd llmat, int i, std::vector<LLcol> &colspace) {
    2.39 :	  429632:       push   %rbp
    0.79 :	  429633:       mov    %rsp,%rbp
    0.03 :	  429636:       push   %rbx
    0.36 :	  429637:       sub    $0x48,%rsp
    0.03 :	  42963b:       mov    %rdi,-0x38(%rbp)
    0.42 :	  42963f:       mov    %esi,-0x3c(%rbp)
    0.12 :	  429642:       mov    %rdx,-0x48(%rbp)
         :
         :	    Tind ptr = llmat.cols[i];
    0.42 :	  429646:       mov    -0x3c(%rbp),%eax
    0.03 :	  429649:       cltq
    0.03 :	  42964b:       mov    -0x38(%rbp),%rdx
    0.06 :	  42964f:       add    $0x8,%rdx
    0.00 :	  429653:       mov    %rax,%rsi
    0.03 :	  429656:       mov    %rdx,%rdi
    0.09 :	  429659:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42965e:       mov    (%rax),%eax
    9.57 :	  429660:       mov    %eax,-0x14(%rbp)
         :	    int len = 0;
    0.09 :	  429663:       movl   $0x0,-0x18(%rbp)
         :
         :	    while (ptr != -1) {
    0.00 :	  42966a:       jmpq   42972c <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xfa>
         :	        LLcol item = {llmat.lles[ptr].row, ptr, llmat.lles[ptr].val};
    0.27 :	  42966f:       mov    -0x14(%rbp),%eax
    0.39 :	  429672:       cltq
    0.97 :	  429674:       mov    -0x38(%rbp),%rdx
    0.00 :	  429678:       add    $0x20,%rdx
    0.51 :	  42967c:       mov    %rax,%rsi
    0.21 :	  42967f:       mov    %rdx,%rdi
    0.82 :	  429682:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429687:       mov    (%rax),%eax
   45.49 :	  429689:       mov    %eax,-0x30(%rbp)
    1.91 :	  42968c:       mov    -0x14(%rbp),%eax
    0.00 :	  42968f:       mov    %eax,-0x2c(%rbp)
    0.03 :	  429692:       mov    -0x14(%rbp),%eax
    0.33 :	  429695:       cltq
    1.73 :	  429697:       mov    -0x38(%rbp),%rdx
    0.00 :	  42969b:       add    $0x20,%rdx
    0.03 :	  42969f:       mov    %rax,%rsi
    0.12 :	  4296a2:       mov    %rdx,%rdi
    1.42 :	  4296a5:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  4296aa:       mov    0x8(%rax),%rax
    0.15 :	  4296ae:       mov    %rax,-0x28(%rbp)
         :
         :	        if (len >= colspace.size()) {
    1.76 :	  4296b2:       mov    -0x18(%rbp),%eax
    0.00 :	  4296b5:       movslq %eax,%rbx
    0.00 :	  4296b8:       mov    -0x48(%rbp),%rax
    0.06 :	  4296bc:       mov    %rax,%rdi
    1.51 :	  4296bf:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    1.33 :	  4296c4:       cmp    %rax,%rbx
    0.06 :	  4296c7:       setae  %al
    0.06 :	  4296ca:       test   %al,%al
    0.00 :	  4296cc:       je     4296e3 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xb1>
         :	            colspace.push_back(item);
    0.00 :	  4296ce:       lea    -0x30(%rbp),%rdx
    0.00 :	  4296d2:       mov    -0x48(%rbp),%rax
    0.00 :	  4296d6:       mov    %rdx,%rsi
    0.00 :	  4296d9:       mov    %rax,%rdi
    0.00 :	  4296dc:       callq  42d04a <std::vector<LLcol, std::allocator<LLcol> >::push_back(LLcol const&)>
    0.00 :	  4296e1:       jmp    42970a <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xd8>
         :	        } else {
         :	            colspace[len] = item;
    1.91 :	  4296e3:       mov    -0x18(%rbp),%eax
    0.00 :	  4296e6:       movslq %eax,%rdx
    0.00 :	  4296e9:       mov    -0x48(%rbp),%rax
    0.00 :	  4296ed:       mov    %rdx,%rsi
    1.70 :	  4296f0:       mov    %rax,%rdi
    0.00 :	  4296f3:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4296f8:       mov    %rax,%rcx
    1.61 :	  4296fb:       mov    -0x30(%rbp),%rax
    5.39 :	  4296ff:       mov    -0x28(%rbp),%rdx
    0.00 :	  429703:       mov    %rax,(%rcx)
    1.70 :	  429706:       mov    %rdx,0x8(%rcx)
         :	        }
         :
         :	        len += 1;
    1.27 :	  42970a:       addl   $0x1,-0x18(%rbp)
         :	        ptr = llmat.lles[ptr].next;
    0.06 :	  42970e:       mov    -0x14(%rbp),%eax
    0.61 :	  429711:       cltq
    1.06 :	  429713:       mov    -0x38(%rbp),%rdx
    0.09 :	  429717:       add    $0x20,%rdx
    0.00 :	  42971b:       mov    %rax,%rsi
    0.45 :	  42971e:       mov    %rdx,%rdi
    1.57 :	  429721:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.03 :	  429726:       mov    0x4(%rax),%eax
    0.73 :	  429729:       mov    %eax,-0x14(%rbp)
         :	    while (ptr != -1) {
    1.51 :	  42972c:       cmpl   $0xffffffff,-0x14(%rbp)
    2.00 :	  429730:       jne    42966f <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0x3d>
         :	    }
         :
         :	    return len;
    1.15 :	  429736:       mov    -0x18(%rbp),%eax
    1.27 :	  429739:       jmp    429743 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0x111>
    0.00 :	  42973b:       mov    %rax,%rdi
    0.00 :	  42973e:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    1.00 :	  429743:       add    $0x48,%rsp
    0.51 :	  429747:       pop    %rbx
    0.73 :	  429748:       pop    %rbp
    0.00 :	  429749:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3142 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042974a <cmp_row(LLcol const&, LLcol const&)>:
         :	_Z7cmp_rowRK5LLcolS1_():
         :	    }
         :
         :	    return len;
         :	}
         :
         :	bool cmp_row(const LLcol &a, const LLcol &b) {
    5.95 :	  42974a:       push   %rbp
    4.61 :	  42974b:       mov    %rsp,%rbp
    5.19 :	  42974e:       mov    %rdi,-0x8(%rbp)
    1.59 :	  429752:       mov    %rsi,-0x10(%rbp)
         :	    return a.row < b.row;
    2.39 :	  429756:       mov    -0x8(%rbp),%rax
    7.10 :	  42975a:       mov    (%rax),%edx
   26.38 :	  42975c:       mov    -0x10(%rbp),%rax
    5.00 :	  429760:       mov    (%rax),%eax
   24.51 :	  429762:       cmp    %eax,%edx
    8.37 :	  429764:       setl   %al
         :	}
    8.88 :	  429767:       pop    %rbp
    0.03 :	  429768:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2817 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
   10.01 :	  42d0b6:       push   %rbp
    9.37 :	  42d0b7:       mov    %rsp,%rbp
    7.74 :	  42d0ba:       mov    %rdi,-0x8(%rbp)
    4.90 :	  42d0be:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
   11.50 :	  42d0c2:       mov    -0x8(%rbp),%rax
    5.04 :	  42d0c6:       mov    (%rax),%rax
   13.10 :	  42d0c9:       mov    -0x10(%rbp),%rdx
   14.06 :	  42d0cd:       shl    $0x4,%rdx
   12.96 :	  42d0d1:       add    %rdx,%rax
    7.74 :	  42d0d4:       pop    %rbp
    3.59 :	  42d0d5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2286 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e9c4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long)>:
         :	_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElEvRT_T0_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator, typename _Distance>
         :	    inline void
         :	    advance(_InputIterator& __i, _Distance __n)
    6.43 :	  42e9c4:       push   %rbp
    1.79 :	  42e9c5:       mov    %rsp,%rbp
    7.04 :	  42e9c8:       push   %rbx
    1.14 :	  42e9c9:       sub    $0x38,%rsp
    1.84 :	  42e9cd:       mov    %rdi,-0x28(%rbp)
    7.09 :	  42e9d1:       mov    %rsi,-0x30(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __advance
         :	      typename iterator_traits<_InputIterator>::difference_type __d = __n;
    0.00 :	  42e9d5:       mov    -0x30(%rbp),%rax
   21.96 :	  42e9d9:       mov    %rax,-0x18(%rbp)
         :	      std::__advance(__i, __d, std::__iterator_category(__i));
    8.49 :	  42e9dd:       mov    -0x28(%rbp),%rax
    0.44 :	  42e9e1:       mov    %rax,%rdi
    0.04 :	  42e9e4:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.22 :	  42e9e9:       mov    -0x18(%rbp),%rdx
   21.35 :	  42e9ed:       mov    -0x28(%rbp),%rax
    0.13 :	  42e9f1:       mov    %bl,(%rsp)
    0.22 :	  42e9f4:       mov    %rdx,%rsi
    9.10 :	  42e9f7:       mov    %rax,%rdi
    0.09 :	  42e9fa:       callq  42e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>
         :	    }
    4.24 :	  42e9ff:       add    $0x38,%rsp
    5.95 :	  42ea03:       pop    %rbx
    1.79 :	  42ea04:       pop    %rbp
    0.66 :	  42ea05:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2229 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429790 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)>:
         :	_Z11compressColRSt6vectorI5LLcolSaIS0_EEi():
         :
         :	bool cmp_val(const LLcol &a, const LLcol &b) {
         :	    return a.cval < b.cval;
         :	}
         :
         :	Tind compressCol(std::vector<LLcol> &colspace, int len) {
    0.31 :	  429790:       push   %rbp
    0.18 :	  429791:       mov    %rsp,%rbp
    0.00 :	  429794:       push   %rbx
    0.13 :	  429795:       sub    $0x78,%rsp
    0.04 :	  429799:       mov    %rdi,-0x78(%rbp)
    0.04 :	  42979d:       mov    %esi,-0x7c(%rbp)
         :
         :	    // sort colspace ? DY: just checked, yes!
         :	    std::sort(colspace.begin(), colspace.begin() + len, cmp_row);
    0.04 :	  4297a0:       mov    -0x7c(%rbp),%eax
    0.27 :	  4297a3:       cltq
    0.13 :	  4297a5:       mov    %rax,-0x58(%rbp)
    0.09 :	  4297a9:       mov    -0x78(%rbp),%rax
    0.18 :	  4297ad:       mov    %rax,%rdi
    0.00 :	  4297b0:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.18 :	  4297b5:       mov    %rax,-0x50(%rbp)
    0.04 :	  4297b9:       lea    -0x58(%rbp),%rdx
    0.18 :	  4297bd:       lea    -0x50(%rbp),%rax
    0.00 :	  4297c1:       mov    %rdx,%rsi
    0.00 :	  4297c4:       mov    %rax,%rdi
    0.09 :	  4297c7:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.40 :	  4297cc:       mov    %rax,%rbx
    0.00 :	  4297cf:       mov    -0x78(%rbp),%rax
    0.13 :	  4297d3:       mov    %rax,%rdi
    0.00 :	  4297d6:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.45 :	  4297db:       mov    $0x42974a,%edx
    0.00 :	  4297e0:       mov    %rbx,%rsi
    0.00 :	  4297e3:       mov    %rax,%rdi
    0.00 :	  4297e6:       callq  42d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :
         :	    std::vector<LLcol> c = colspace;
    0.40 :	  4297eb:       mov    -0x78(%rbp),%rdx
    0.67 :	  4297ef:       lea    -0x70(%rbp),%rax
    0.00 :	  4297f3:       mov    %rdx,%rsi
    0.00 :	  4297f6:       mov    %rax,%rdi
    0.00 :	  4297f9:       callq  42d1bc <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :
         :	    Tind ptr = -1;
    0.18 :	  4297fe:       movl   $0xffffffff,-0x14(%rbp)
         :	    Tind currow = c[0].row;     // julia index start from 1?
    0.90 :	  429805:       lea    -0x70(%rbp),%rax
    0.00 :	  429809:       mov    $0x0,%esi
    0.00 :	  42980e:       mov    %rax,%rdi
    0.00 :	  429811:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429816:       mov    (%rax),%eax
    1.17 :	  429818:       mov    %eax,-0x18(%rbp)
         :	    Tval curval = c[0].cval;
    0.22 :	  42981b:       lea    -0x70(%rbp),%rax
    0.00 :	  42981f:       mov    $0x0,%esi
    0.00 :	  429824:       mov    %rax,%rdi
    0.00 :	  429827:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42982c:       mov    0x8(%rax),%rax
    0.31 :	  429830:       mov    %rax,-0x20(%rbp)
         :	    Tind curptr = c[0].ptr;
    0.22 :	  429834:       lea    -0x70(%rbp),%rax
    0.09 :	  429838:       mov    $0x0,%esi
    0.00 :	  42983d:       mov    %rax,%rdi
    0.00 :	  429840:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.04 :	  429845:       mov    0x4(%rax),%eax
    0.45 :	  429848:       mov    %eax,-0x24(%rbp)
         :
         :	    // not consider inbounds
         :	    for (int i = 1; i < len; i++) {
    0.18 :	  42984b:       movl   $0x1,-0x28(%rbp)
    0.00 :	  429852:       jmpq   429955 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x1c5>
         :
         :	        if (c[i].row != currow) {
    1.57 :	  429857:       mov    -0x28(%rbp),%eax
    0.45 :	  42985a:       movslq %eax,%rdx
    0.18 :	  42985d:       lea    -0x70(%rbp),%rax
    0.63 :	  429861:       mov    %rdx,%rsi
    0.72 :	  429864:       mov    %rax,%rdi
    0.00 :	  429867:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.58 :	  42986c:       mov    (%rax),%eax
    7.81 :	  42986e:       cmp    -0x18(%rbp),%eax
    2.29 :	  429871:       setne  %al
    2.06 :	  429874:       test   %al,%al
    0.00 :	  429876:       je     429929 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x199>
         :
         :	            ptr += 1;
    2.47 :	  42987c:       addl   $0x1,-0x14(%rbp)
         :	            c[ptr].row = currow;
    0.90 :	  429880:       mov    -0x14(%rbp),%eax
    0.27 :	  429883:       movslq %eax,%rdx
    2.02 :	  429886:       lea    -0x70(%rbp),%rax
    0.04 :	  42988a:       mov    %rdx,%rsi
    0.04 :	  42988d:       mov    %rax,%rdi
    0.04 :	  429890:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.04 :	  429895:       mov    -0x18(%rbp),%edx
    0.00 :	  429898:       mov    %edx,(%rax)
         :	            c[ptr].cval = curval;
    4.53 :	  42989a:       mov    -0x14(%rbp),%eax
    1.17 :	  42989d:       movslq %eax,%rdx
    0.13 :	  4298a0:       lea    -0x70(%rbp),%rax
    0.00 :	  4298a4:       mov    %rdx,%rsi
    1.26 :	  4298a7:       mov    %rax,%rdi
    0.90 :	  4298aa:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4298af:       mov    %rax,%rdx
    1.30 :	  4298b2:       mov    -0x20(%rbp),%rax
    0.99 :	  4298b6:       mov    %rax,0x8(%rdx)
         :	            c[ptr].ptr = curptr;
    2.06 :	  4298ba:       mov    -0x14(%rbp),%eax
    0.00 :	  4298bd:       movslq %eax,%rdx
    1.08 :	  4298c0:       lea    -0x70(%rbp),%rax
    0.63 :	  4298c4:       mov    %rdx,%rsi
    0.49 :	  4298c7:       mov    %rax,%rdi
    0.00 :	  4298ca:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.76 :	  4298cf:       mov    -0x24(%rbp),%edx
    0.31 :	  4298d2:       mov    %edx,0x4(%rax)
         :
         :	            currow = c[i].row;
    1.75 :	  4298d5:       mov    -0x28(%rbp),%eax
    1.17 :	  4298d8:       movslq %eax,%rdx
    0.81 :	  4298db:       lea    -0x70(%rbp),%rax
    0.31 :	  4298df:       mov    %rdx,%rsi
    0.27 :	  4298e2:       mov    %rax,%rdi
    0.90 :	  4298e5:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.22 :	  4298ea:       mov    (%rax),%eax
    6.68 :	  4298ec:       mov    %eax,-0x18(%rbp)
         :	            curval = c[i].cval;
    1.75 :	  4298ef:       mov    -0x28(%rbp),%eax
    0.09 :	  4298f2:       movslq %eax,%rdx
    0.09 :	  4298f5:       lea    -0x70(%rbp),%rax
    0.09 :	  4298f9:       mov    %rdx,%rsi
    1.53 :	  4298fc:       mov    %rax,%rdi
    0.04 :	  4298ff:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.27 :	  429904:       mov    0x8(%rax),%rax
    3.23 :	  429908:       mov    %rax,-0x20(%rbp)
         :	            curptr = c[i].ptr;
    1.21 :	  42990c:       mov    -0x28(%rbp),%eax
    0.13 :	  42990f:       movslq %eax,%rdx
    0.00 :	  429912:       lea    -0x70(%rbp),%rax
    1.12 :	  429916:       mov    %rdx,%rsi
    0.76 :	  429919:       mov    %rax,%rdi
    0.04 :	  42991c:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    1.17 :	  429921:       mov    0x4(%rax),%eax
    2.02 :	  429924:       mov    %eax,-0x24(%rbp)
    0.54 :	  429927:       jmp    429951 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x1c1>
         :
         :	        } else {
         :
         :	            curval += c[i].cval;
    2.83 :	  429929:       mov    -0x28(%rbp),%eax
    1.48 :	  42992c:       movslq %eax,%rdx
    0.27 :	  42992f:       lea    -0x70(%rbp),%rax
    0.00 :	  429933:       mov    %rdx,%rsi
    0.04 :	  429936:       mov    %rax,%rdi
    0.00 :	  429939:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42993e:       vmovsd 0x8(%rax),%xmm0
    1.21 :	  429943:       vmovsd -0x20(%rbp),%xmm1
    0.04 :	  429948:       vaddsd %xmm0,%xmm1,%xmm0
    0.99 :	  42994c:       vmovsd %xmm0,-0x20(%rbp)
         :	    for (int i = 1; i < len; i++) {
    1.03 :	  429951:       addl   $0x1,-0x28(%rbp)
    0.45 :	  429955:       mov    -0x28(%rbp),%eax
    1.03 :	  429958:       cmp    -0x7c(%rbp),%eax
    0.04 :	  42995b:       jl     429857 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0xc7>
         :
         :	        }
         :	    }
         :
         :	    // emit the last row
         :	    ptr += 1;
    1.57 :	  429961:       addl   $0x1,-0x14(%rbp)
         :	    c[ptr].row = currow;
    2.65 :	  429965:       mov    -0x14(%rbp),%eax
    1.03 :	  429968:       movslq %eax,%rdx
    0.27 :	  42996b:       lea    -0x70(%rbp),%rax
    0.00 :	  42996f:       mov    %rdx,%rsi
    0.00 :	  429972:       mov    %rax,%rdi
    0.00 :	  429975:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42997a:       mov    -0x18(%rbp),%edx
    0.00 :	  42997d:       mov    %edx,(%rax)
         :	    c[ptr].cval = curval;
    2.42 :	  42997f:       mov    -0x14(%rbp),%eax
    1.57 :	  429982:       movslq %eax,%rdx
    0.22 :	  429985:       lea    -0x70(%rbp),%rax
    0.00 :	  429989:       mov    %rdx,%rsi
    0.00 :	  42998c:       mov    %rax,%rdi
    0.00 :	  42998f:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429994:       mov    %rax,%rdx
    0.00 :	  429997:       mov    -0x20(%rbp),%rax
    0.27 :	  42999b:       mov    %rax,0x8(%rdx)
         :	    c[ptr].ptr = curptr;
    1.39 :	  42999f:       mov    -0x14(%rbp),%eax
    0.09 :	  4299a2:       movslq %eax,%rdx
    0.00 :	  4299a5:       lea    -0x70(%rbp),%rax
    0.00 :	  4299a9:       mov    %rdx,%rsi
    0.09 :	  4299ac:       mov    %rax,%rdi
    0.00 :	  4299af:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4299b4:       mov    -0x24(%rbp),%edx
    0.31 :	  4299b7:       mov    %edx,0x4(%rax)
         :
         :	    std::sort(c.begin(), c.begin() + ptr + 1, cmp_val);
    0.54 :	  4299ba:       movq   $0x1,-0x48(%rbp)
    0.09 :	  4299c2:       mov    -0x14(%rbp),%eax
    0.09 :	  4299c5:       cltq
    0.09 :	  4299c7:       mov    %rax,-0x38(%rbp)
    0.22 :	  4299cb:       lea    -0x70(%rbp),%rax
    0.00 :	  4299cf:       mov    %rax,%rdi
    0.00 :	  4299d2:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.09 :	  4299d7:       mov    %rax,-0x30(%rbp)
    0.36 :	  4299db:       lea    -0x38(%rbp),%rdx
    0.00 :	  4299df:       lea    -0x30(%rbp),%rax
    0.00 :	  4299e3:       mov    %rdx,%rsi
    0.27 :	  4299e6:       mov    %rax,%rdi
    0.04 :	  4299e9:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.27 :	  4299ee:       mov    %rax,-0x40(%rbp)
    0.18 :	  4299f2:       lea    -0x48(%rbp),%rdx
    0.00 :	  4299f6:       lea    -0x40(%rbp),%rax
    0.00 :	  4299fa:       mov    %rdx,%rsi
    0.22 :	  4299fd:       mov    %rax,%rdi
    0.09 :	  429a00:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.13 :	  429a05:       mov    %rax,%rbx
    0.00 :	  429a08:       lea    -0x70(%rbp),%rax
    0.00 :	  429a0c:       mov    %rax,%rdi
    0.00 :	  429a0f:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.22 :	  429a14:       mov    $0x429769,%edx
    0.00 :	  429a19:       mov    %rbx,%rsi
    0.00 :	  429a1c:       mov    %rax,%rdi
    0.00 :	  429a1f:       callq  42d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :
         :	    colspace = c;
    0.40 :	  429a24:       lea    -0x70(%rbp),%rdx
    0.00 :	  429a28:       mov    -0x78(%rbp),%rax
    0.49 :	  429a2c:       mov    %rdx,%rsi
    0.00 :	  429a2f:       mov    %rax,%rdi
    0.04 :	  429a32:       callq  42d302 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
    0.00 :	  429a37:       mov    -0x14(%rbp),%eax
    0.76 :	  429a3a:       lea    0x1(%rax),%ebx
    0.13 :	  429a3d:       lea    -0x70(%rbp),%rax
    0.22 :	  429a41:       mov    %rax,%rdi
    0.00 :	  429a44:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    0.40 :	  429a49:       mov    %ebx,%eax
    0.04 :	  429a4b:       jmp    429a72 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2e2>
    0.00 :	  429a4d:       jmp    429a6a <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2da>
    0.00 :	  429a4f:       jmp    429a51 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2c1>
    0.00 :	  429a51:       mov    %rax,%rbx
    0.00 :	  429a54:       jmp    429a59 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2c9>
    0.00 :	  429a56:       mov    %rax,%rbx
    0.00 :	  429a59:       lea    -0x70(%rbp),%rax
    0.00 :	  429a5d:       mov    %rax,%rdi
    0.00 :	  429a60:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    0.00 :	  429a65:       mov    %rbx,%rax
    0.00 :	  429a68:       jmp    429a6a <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2da>
    0.00 :	  429a6a:       mov    %rax,%rdi
    0.00 :	  429a6d:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.18 :	  429a72:       add    $0x78,%rsp
    0.00 :	  429a76:       pop    %rbx
    0.04 :	  429a77:       pop    %rbp
    1.35 :	  429a78:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2140 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEmmEv():
         :	      operator++(int)
         :	      { return __normal_iterator(_M_current++); }
         :
         :	      // Bidirectional iterator requirements
         :	      __normal_iterator&
         :	      operator--()
   11.96 :	  430d40:       push   %rbp
    8.46 :	  430d41:       mov    %rsp,%rbp
    7.43 :	  430d44:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        --_M_current;
    5.28 :	  430d48:       mov    -0x8(%rbp),%rax
   15.56 :	  430d4c:       mov    (%rax),%rax
   17.29 :	  430d4f:       lea    -0x10(%rax),%rdx
    6.78 :	  430d53:       mov    -0x8(%rbp),%rax
    2.34 :	  430d57:       mov    %rdx,(%rax)
         :	        return *this;
   12.20 :	  430d5a:       mov    -0x8(%rbp),%rax
         :	      }
   10.37 :	  430d5e:       pop    %rbp
    2.34 :	  430d5f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2017 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430221 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES2_PFbRKS2_S9_EET_SC_SC_RKT0_T1_():
         :	    }
         :
         :	  /// This is a helper function...
         :	  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
         :	    _RandomAccessIterator
         :	    __unguarded_partition(_RandomAccessIterator __first,
    0.00 :	  430221:       push   %rbp
    0.05 :	  430222:       mov    %rsp,%rbp
    0.10 :	  430225:       sub    $0x20,%rsp
    0.00 :	  430229:       mov    %rdi,-0x10(%rbp)
    0.00 :	  43022d:       mov    %rsi,-0x20(%rbp)
    0.10 :	  430231:       mov    %rdx,-0x18(%rbp)
    0.00 :	  430235:       mov    %rcx,-0x8(%rbp)
         :	                          _RandomAccessIterator __last,
         :	                          const _Tp& __pivot, _Compare __comp)
         :	    {
         :	      while (true)
         :	        {
         :	          while (__comp(*__first, __pivot))
    0.00 :	  430239:       jmp    430247 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x26>
         :	            ++__first;
    8.13 :	  43023b:       lea    -0x10(%rbp),%rax
    4.81 :	  43023f:       mov    %rax,%rdi
    0.05 :	  430242:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
         :	          while (__comp(*__first, __pivot))
    1.44 :	  430247:       lea    -0x10(%rbp),%rax
    0.59 :	  43024b:       mov    %rax,%rdi
    0.05 :	  43024e:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.74 :	  430253:       mov    %rax,%rdx
    0.05 :	  430256:       mov    -0x18(%rbp),%rcx
    4.76 :	  43025a:       mov    -0x8(%rbp),%rax
    0.20 :	  43025e:       mov    %rcx,%rsi
    1.34 :	  430261:       mov    %rdx,%rdi
    0.05 :	  430264:       callq  *%rax
    0.40 :	  430266:       test   %al,%al
    0.00 :	  430268:       jne    43023b <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x1a>
         :	          --__last;
   13.14 :	  43026a:       lea    -0x20(%rbp),%rax
    6.25 :	  43026e:       mov    %rax,%rdi
    0.05 :	  430271:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	          while (__comp(__pivot, *__last))
    0.99 :	  430276:       jmp    430284 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x63>
         :	            --__last;
   10.11 :	  430278:       lea    -0x20(%rbp),%rax
    4.81 :	  43027c:       mov    %rax,%rdi
    0.00 :	  43027f:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	          while (__comp(__pivot, *__last))
    3.67 :	  430284:       lea    -0x20(%rbp),%rax
    0.59 :	  430288:       mov    %rax,%rdi
    0.00 :	  43028b:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    1.49 :	  430290:       mov    %rax,%rcx
    0.00 :	  430293:       mov    -0x18(%rbp),%rdx
    2.23 :	  430297:       mov    -0x8(%rbp),%rax
    0.00 :	  43029b:       mov    %rcx,%rsi
    1.93 :	  43029e:       mov    %rdx,%rdi
    0.20 :	  4302a1:       callq  *%rax
    0.05 :	  4302a3:       test   %al,%al
    0.00 :	  4302a5:       jne    430278 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x57>
         :	          if (!(__first < __last))
   14.82 :	  4302a7:       lea    -0x20(%rbp),%rdx
    5.11 :	  4302ab:       lea    -0x10(%rbp),%rax
    0.05 :	  4302af:       mov    %rdx,%rsi
    0.00 :	  4302b2:       mov    %rax,%rdi
    0.89 :	  4302b5:       callq  430c3c <bool __gnu_cxx::operator< <LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  4302ba:       xor    $0x1,%eax
    0.00 :	  4302bd:       test   %al,%al
    0.00 :	  4302bf:       je     4302c7 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0xa6>
         :	            return __first;
    2.53 :	  4302c1:       mov    -0x10(%rbp),%rax
    2.33 :	  4302c5:       jmp    4302ec <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0xcb>
         :	          std::iter_swap(__first, __last);
    1.64 :	  4302c7:       mov    -0x20(%rbp),%rdx
    0.10 :	  4302cb:       mov    -0x10(%rbp),%rax
    0.00 :	  4302cf:       mov    %rdx,%rsi
    0.00 :	  4302d2:       mov    %rax,%rdi
    1.34 :	  4302d5:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	          ++__first;
    0.15 :	  4302da:       lea    -0x10(%rbp),%rax
    0.05 :	  4302de:       mov    %rax,%rdi
    0.84 :	  4302e1:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
         :	    __unguarded_partition(_RandomAccessIterator __first,
    0.20 :	  4302e6:       nop
         :	          while (__comp(*__first, __pivot))
    1.09 :	  4302e7:       jmpq   430247 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))+0x26>
         :	        }
         :	    }
    0.00 :	  4302ec:       leaveq
    0.50 :	  4302ed:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1732 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f896 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator+=(long const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEpLERKl():
         :	      reference
         :	      operator[](const difference_type& __n) const
         :	      { return _M_current[__n]; }
         :
         :	      __normal_iterator&
         :	      operator+=(const difference_type& __n)
    1.33 :	  42f896:       push   %rbp
   13.45 :	  42f897:       mov    %rsp,%rbp
    0.17 :	  42f89a:       mov    %rdi,-0x8(%rbp)
    1.79 :	  42f89e:       mov    %rsi,-0x10(%rbp)
         :	      { _M_current += __n; return *this; }
   14.43 :	  42f8a2:       mov    -0x8(%rbp),%rax
    5.60 :	  42f8a6:       mov    (%rax),%rdx
   21.25 :	  42f8a9:       mov    -0x10(%rbp),%rax
    0.00 :	  42f8ad:       mov    (%rax),%rax
   11.61 :	  42f8b0:       shl    $0x3,%rax
    3.18 :	  42f8b4:       add    %rax,%rdx
    9.64 :	  42f8b7:       mov    -0x8(%rbp),%rax
    0.06 :	  42f8bb:       mov    %rdx,(%rax)
   17.03 :	  42f8be:       mov    -0x8(%rbp),%rax
    0.06 :	  42f8c2:       pop    %rbp
    0.40 :	  42f8c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1651 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426d7a <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)>:
         :	_ZN9__gnu_cxx13new_allocatorIiE9constructIiIRKiEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    1.21 :	  426d7a:       push   %rbp
    0.79 :	  426d7b:       mov    %rsp,%rbp
    1.33 :	  426d7e:       push   %rbx
    1.03 :	  426d7f:       sub    $0x28,%rsp
    2.24 :	  426d83:       mov    %rdi,-0x18(%rbp)
    1.15 :	  426d87:       mov    %rsi,-0x20(%rbp)
    2.12 :	  426d8b:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   49.97 :	  426d8f:       mov    -0x28(%rbp),%rax
    7.75 :	  426d93:       mov    %rax,%rdi
    0.00 :	  426d96:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.42 :	  426d9b:       mov    (%rax),%ebx
   14.17 :	  426d9d:       mov    -0x20(%rbp),%rax
    0.06 :	  426da1:       mov    %rax,%rsi
    0.00 :	  426da4:       mov    $0x4,%edi
    0.12 :	  426da9:       callq  41eb2a <operator new(unsigned long, void*)>
    0.06 :	  426dae:       test   %rax,%rax
    0.00 :	  426db1:       je     426db5 <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)+0x3b>
    1.15 :	  426db3:       mov    %ebx,(%rax)
   13.26 :	  426db5:       add    $0x28,%rsp
    0.61 :	  426db9:       pop    %rbx
    0.00 :	  426dba:       pop    %rbp
    2.54 :	  426dbb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1566 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __insertion_sort(_RandomAccessIterator __first,
    3.96 :	  42f304:       push   %rbp
    2.75 :	  42f305:       mov    %rsp,%rbp
    0.13 :	  42f308:       push   %rbx
    2.04 :	  42f309:       sub    $0x58,%rsp
    0.32 :	  42f30d:       mov    %rdi,-0x50(%rbp)
    0.26 :	  42f311:       mov    %rsi,-0x60(%rbp)
    0.00 :	  42f315:       mov    %rdx,-0x58(%rbp)
         :	                     _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      if (__first == __last) return;
    0.38 :	  42f319:       lea    -0x60(%rbp),%rdx
    0.00 :	  42f31d:       lea    -0x50(%rbp),%rax
    0.45 :	  42f321:       mov    %rdx,%rsi
    0.00 :	  42f324:       mov    %rax,%rdi
    0.26 :	  42f327:       callq  4302ee <bool __gnu_cxx::operator==<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.06 :	  42f32c:       test   %al,%al
    0.00 :	  42f32e:       je     42f335 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x31>
    0.00 :	  42f330:       jmpq   42f44c <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x148>
         :
         :	      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    1.02 :	  42f335:       movq   $0x1,-0x20(%rbp)
    0.13 :	  42f33d:       lea    -0x20(%rbp),%rdx
    0.00 :	  42f341:       lea    -0x50(%rbp),%rax
    0.00 :	  42f345:       mov    %rdx,%rsi
    0.70 :	  42f348:       mov    %rax,%rdi
    0.06 :	  42f34b:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.57 :	  42f350:       mov    %rax,-0x30(%rbp)
    1.34 :	  42f354:       jmpq   42f425 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x121>
         :	        {
         :	          if (__comp(*__i, *__first))
    4.47 :	  42f359:       lea    -0x50(%rbp),%rax
    0.57 :	  42f35d:       mov    %rax,%rdi
    0.00 :	  42f360:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    2.68 :	  42f365:       mov    %rax,%rbx
    0.06 :	  42f368:       lea    -0x30(%rbp),%rax
    0.38 :	  42f36c:       mov    %rax,%rdi
    0.00 :	  42f36f:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f374:       mov    %rax,%rdx
    0.00 :	  42f377:       mov    -0x58(%rbp),%rax
    0.83 :	  42f37b:       mov    %rbx,%rsi
    3.26 :	  42f37e:       mov    %rdx,%rdi
    0.06 :	  42f381:       callq  *%rax
    0.06 :	  42f383:       test   %al,%al
    0.00 :	  42f385:       je     42f406 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x102>
         :	            {
         :	              typename iterator_traits<_RandomAccessIterator>::value_type
         :	                __val = _GLIBCXX_MOVE(*__i);
    8.62 :	  42f387:       lea    -0x30(%rbp),%rax
    4.73 :	  42f38b:       mov    %rax,%rdi
    0.00 :	  42f38e:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.32 :	  42f393:       mov    %rax,%rdi
    0.00 :	  42f396:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  42f39b:       mov    0x8(%rax),%rdx
    4.66 :	  42f39f:       mov    (%rax),%rax
    0.00 :	  42f3a2:       mov    %rax,-0x40(%rbp)
    1.53 :	  42f3a6:       mov    %rdx,-0x38(%rbp)
         :	              _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
    0.70 :	  42f3aa:       movq   $0x1,-0x18(%rbp)
    0.13 :	  42f3b2:       lea    -0x18(%rbp),%rdx
    0.00 :	  42f3b6:       lea    -0x30(%rbp),%rax
    0.38 :	  42f3ba:       mov    %rdx,%rsi
    0.57 :	  42f3bd:       mov    %rax,%rdi
    0.57 :	  42f3c0:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    1.40 :	  42f3c5:       mov    %rax,%rdx
    0.00 :	  42f3c8:       mov    -0x30(%rbp),%rcx
    0.89 :	  42f3cc:       mov    -0x50(%rbp),%rax
    0.00 :	  42f3d0:       mov    %rcx,%rsi
    1.09 :	  42f3d3:       mov    %rax,%rdi
    0.13 :	  42f3d6:       callq  43034a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::move_backward<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	              *__first = _GLIBCXX_MOVE(__val);
    0.19 :	  42f3db:       lea    -0x50(%rbp),%rax
    1.02 :	  42f3df:       mov    %rax,%rdi
    0.26 :	  42f3e2:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f3e7:       mov    %rax,%rbx
    0.45 :	  42f3ea:       lea    -0x40(%rbp),%rax
    1.21 :	  42f3ee:       mov    %rax,%rdi
    0.06 :	  42f3f1:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.13 :	  42f3f6:       mov    0x8(%rax),%rdx
    3.58 :	  42f3fa:       mov    (%rax),%rax
    0.06 :	  42f3fd:       mov    %rax,(%rbx)
    1.53 :	  42f400:       mov    %rdx,0x8(%rbx)
    1.66 :	  42f404:       jmp    42f419 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x115>
         :	            }
         :	          else
         :	            std::__unguarded_linear_insert(__i, __comp);
    5.04 :	  42f406:       mov    -0x58(%rbp),%rdx
    1.66 :	  42f40a:       mov    -0x30(%rbp),%rax
    0.00 :	  42f40e:       mov    %rdx,%rsi
    0.00 :	  42f411:       mov    %rax,%rdi
    2.75 :	  42f414:       callq  430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    0.70 :	  42f419:       lea    -0x30(%rbp),%rax
    0.38 :	  42f41d:       mov    %rax,%rdi
    1.47 :	  42f420:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
    0.45 :	  42f425:       lea    -0x60(%rbp),%rdx
    2.81 :	  42f429:       lea    -0x30(%rbp),%rax
    1.15 :	  42f42d:       mov    %rdx,%rsi
    0.57 :	  42f430:       mov    %rax,%rdi
    0.51 :	  42f433:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.13 :	  42f438:       test   %al,%al
    0.00 :	  42f43a:       jne    42f359 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x55>
   10.54 :	  42f440:       jmp    42f44c <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x148>
    0.00 :	  42f442:       jmp    42f444 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x140>
    0.00 :	  42f444:       mov    %rax,%rdi
    0.00 :	  42f447:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
         :	    }
    2.94 :	  42f44c:       add    $0x58,%rsp
    3.58 :	  42f450:       pop    %rbx
    2.62 :	  42f451:       pop    %rbp
    0.00 :	  42f452:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1496 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxneIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    5.88 :	  42e1be:       push   %rbp
    1.00 :	  42e1bf:       mov    %rsp,%rbp
    4.88 :	  42e1c2:       push   %rbx
    1.74 :	  42e1c3:       sub    $0x18,%rsp
    2.27 :	  42e1c7:       mov    %rdi,-0x18(%rbp)
    4.55 :	  42e1cb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
    2.14 :	  42e1cf:       mov    -0x18(%rbp),%rax
    7.55 :	  42e1d3:       mov    %rax,%rdi
    0.40 :	  42e1d6:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    1.20 :	  42e1db:       mov    (%rax),%rbx
   29.68 :	  42e1de:       mov    -0x20(%rbp),%rax
    0.27 :	  42e1e2:       mov    %rax,%rdi
    0.33 :	  42e1e5:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.53 :	  42e1ea:       mov    (%rax),%rax
   18.72 :	  42e1ed:       cmp    %rax,%rbx
    4.88 :	  42e1f0:       setne  %al
    4.95 :	  42e1f3:       add    $0x18,%rsp
    3.34 :	  42e1f7:       pop    %rbx
    0.07 :	  42e1f8:       pop    %rbp
    5.61 :	  42e1f9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1481 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   24.11 :	  42f1a6:       push   %rbp
    7.90 :	  42f1a7:       mov    %rsp,%rbp
    8.78 :	  42f1aa:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
   21.54 :	  42f1ae:       mov    -0x8(%rbp),%rax
   33.63 :	  42f1b2:       pop    %rbp
    4.05 :	  42f1b3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1440 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>:
         :	_ZSt4moveIR5LLcolEONSt16remove_referenceIT_E4typeEOS3_():
         :	   *  @param  __t  A thing of arbitrary type.
         :	   *  @return The parameter cast to an rvalue-reference to allow moving it.
         :	  */
         :	  template<typename _Tp>
         :	    constexpr typename std::remove_reference<_Tp>::type&&
         :	    move(_Tp&& __t) noexcept
   27.78 :	  42f2f6:       push   %rbp
    6.74 :	  42f2f7:       mov    %rsp,%rbp
   16.67 :	  42f2fa:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   17.99 :	  42f2fe:       mov    -0x8(%rbp),%rax
   30.76 :	  42f302:       pop    %rbp
    0.07 :	  42f303:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1280 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f8c4 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type __gnu_cxx::operator-<double*, std::vector<double, std::allocator<double> > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>:
         :	_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_():
         :	#endif
         :	    { return __lhs.base() - __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :	    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    2.97 :	  42f8c4:       push   %rbp
    1.88 :	  42f8c5:       mov    %rsp,%rbp
    5.00 :	  42f8c8:       push   %rbx
    0.16 :	  42f8c9:       sub    $0x18,%rsp
    3.67 :	  42f8cd:       mov    %rdi,-0x18(%rbp)
    2.34 :	  42f8d1:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() - __rhs.base(); }
    0.23 :	  42f8d5:       mov    -0x18(%rbp),%rax
    2.58 :	  42f8d9:       mov    %rax,%rdi
    1.56 :	  42f8dc:       callq  4224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>
    0.55 :	  42f8e1:       mov    (%rax),%rax
   22.27 :	  42f8e4:       mov    %rax,%rbx
    0.31 :	  42f8e7:       mov    -0x20(%rbp),%rax
    1.25 :	  42f8eb:       mov    %rax,%rdi
    0.31 :	  42f8ee:       callq  4224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>
    2.81 :	  42f8f3:       mov    (%rax),%rax
   31.41 :	  42f8f6:       sub    %rax,%rbx
    7.03 :	  42f8f9:       mov    %rbx,%rax
    0.00 :	  42f8fc:       sar    $0x3,%rax
    7.42 :	  42f900:       add    $0x18,%rsp
    0.00 :	  42f904:       pop    %rbx
    0.00 :	  42f905:       pop    %rbp
    6.25 :	  42f906:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1271 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
   11.96 :	  43032a:       push   %rbp
    3.07 :	  43032b:       mov    %rsp,%rbp
    7.63 :	  43032e:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    5.74 :	  430332:       mov    -0x8(%rbp),%rax
    6.06 :	  430336:       mov    (%rax),%rax
   23.45 :	  430339:       lea    0x10(%rax),%rdx
    8.26 :	  43033d:       mov    -0x8(%rbp),%rax
    4.48 :	  430341:       mov    %rdx,(%rax)
         :	        return *this;
   21.64 :	  430344:       mov    -0x8(%rbp),%rax
         :	      }
    5.27 :	  430348:       pop    %rbp
    2.44 :	  430349:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1194 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>:
         :	_ZSt9__advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElEvRT_T0_St26random_access_iterator_tag():
         :	          --__i;
         :	    }
         :
         :	  template<typename _RandomAccessIterator, typename _Distance>
         :	    inline void
         :	    __advance(_RandomAccessIterator& __i, _Distance __n,
    0.17 :	  42e99f:       push   %rbp
   22.70 :	  42e9a0:       mov    %rsp,%rbp
    0.42 :	  42e9a3:       sub    $0x10,%rsp
    0.50 :	  42e9a7:       mov    %rdi,-0x8(%rbp)
   20.18 :	  42e9ab:       mov    %rsi,-0x10(%rbp)
         :	              random_access_iterator_tag)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_RandomAccessIteratorConcept<
         :	                                  _RandomAccessIterator>)
         :	      __i += __n;
    0.59 :	  42e9af:       lea    -0x10(%rbp),%rdx
    0.17 :	  42e9b3:       mov    -0x8(%rbp),%rax
    5.61 :	  42e9b7:       mov    %rdx,%rsi
   19.43 :	  42e9ba:       mov    %rax,%rdi
    0.17 :	  42e9bd:       callq  42f896 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator+=(long const&)>
         :	    }
    3.60 :	  42e9c2:       leaveq
   26.47 :	  42e9c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1189 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e8fe <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)>:
         :	_ZNSt25uniform_real_distributionIdEclISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEEdRT_RKNS0_10param_typeE():
         :	        operator()(_UniformRandomNumberGenerator& __urng)
         :	        { return this->operator()(__urng, _M_param); }
         :
         :	      template<typename _UniformRandomNumberGenerator>
         :	        result_type
         :	        operator()(_UniformRandomNumberGenerator& __urng,
    0.08 :	  42e8fe:       push   %rbp
    4.71 :	  42e8ff:       mov    %rsp,%rbp
    0.08 :	  42e902:       sub    $0x40,%rsp
    0.00 :	  42e906:       mov    %rdi,-0x18(%rbp)
    4.46 :	  42e90a:       mov    %rsi,-0x20(%rbp)
    0.08 :	  42e90e:       mov    %rdx,-0x28(%rbp)
         :	                   const param_type& __p)
         :	        {
         :	          __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
         :	            __aurng(__urng);
    0.00 :	  42e912:       mov    -0x20(%rbp),%rdx
    0.00 :	  42e916:       lea    -0x10(%rbp),%rax
    4.12 :	  42e91a:       mov    %rdx,%rsi
    0.00 :	  42e91d:       mov    %rax,%rdi
    0.00 :	  42e920:       callq  42f816 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::_Adaptor(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
         :	          return (__aurng() * (__p.b() - __p.a())) + __p.a();
    0.08 :	  42e925:       lea    -0x10(%rbp),%rax
    0.00 :	  42e929:       mov    %rax,%rdi
    3.95 :	  42e92c:       callq  42f866 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::operator()()>
    3.28 :	  42e931:       vmovsd %xmm0,-0x30(%rbp)
    3.53 :	  42e936:       mov    -0x28(%rbp),%rax
    0.00 :	  42e93a:       mov    %rax,%rdi
    0.00 :	  42e93d:       callq  42f84a <std::uniform_real_distribution<double>::param_type::b() const>
    0.00 :	  42e942:       vmovsd %xmm0,-0x38(%rbp)
    0.00 :	  42e947:       mov    -0x28(%rbp),%rax
    3.03 :	  42e94b:       mov    %rax,%rdi
    0.00 :	  42e94e:       callq  42f830 <std::uniform_real_distribution<double>::param_type::a() const>
    0.00 :	  42e953:       vmovsd -0x38(%rbp),%xmm1
    0.00 :	  42e958:       vsubsd %xmm0,%xmm1,%xmm0
    0.08 :	  42e95c:       vmulsd -0x30(%rbp),%xmm0,%xmm2
    5.30 :	  42e961:       vmovsd %xmm2,-0x30(%rbp)
    3.45 :	  42e966:       mov    -0x28(%rbp),%rax
    0.00 :	  42e96a:       mov    %rax,%rdi
    0.00 :	  42e96d:       callq  42f830 <std::uniform_real_distribution<double>::param_type::a() const>
    2.27 :	  42e972:       vaddsd -0x30(%rbp),%xmm0,%xmm0
   20.86 :	  42e977:       vmovsd %xmm0,-0x30(%rbp)
    4.04 :	  42e97c:       mov    -0x30(%rbp),%rax
   16.15 :	  42e980:       jmp    42e98a <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)+0x8c>
    0.00 :	  42e982:       mov    %rax,%rdi
    0.00 :	  42e985:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
    0.00 :	  42e98a:       mov    %rax,-0x30(%rbp)
    4.63 :	  42e98e:       vmovsd -0x30(%rbp),%xmm0
   15.81 :	  42e993:       leaveq
    0.00 :	  42e994:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1131 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004318ac <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
         :	_ZNSt8__detail4_ModImLm2147483647ELm16807ELm0ELb1ELb1EE6__calcEm():
         :	    // - a * (m - 1) + c fits in _Tp, there is no overflow.
         :	    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
         :	      struct _Mod<_Tp, __m, __a, __c, true, __s>
         :	      {
         :	        static _Tp
         :	        __calc(_Tp __x)
    0.00 :	  4318ac:       push   %rbp
    8.66 :	  4318ad:       mov    %rsp,%rbp
    0.09 :	  4318b0:       mov    %rdi,-0x18(%rbp)
         :	        {
         :	          _Tp __res = __a * __x + __c;
    0.18 :	  4318b4:       mov    -0x18(%rbp),%rax
   16.27 :	  4318b8:       imul   $0x41a7,%rax,%rax
    1.15 :	  4318bf:       mov    %rax,-0x8(%rbp)
         :	          if (__m)
         :	            __res %= __m;
    0.27 :	  4318c3:       mov    -0x8(%rbp),%rcx
   13.79 :	  4318c7:       movabs $0x200000005,%rdx
    7.60 :	  4318d1:       mov    %rcx,%rax
    0.00 :	  4318d4:       mul    %rdx
    3.09 :	  4318d7:       mov    %rcx,%rax
    7.78 :	  4318da:       sub    %rdx,%rax
    0.27 :	  4318dd:       shr    %rax
    0.71 :	  4318e0:       add    %rdx,%rax
    0.62 :	  4318e3:       shr    $0x1e,%rax
    9.28 :	  4318e7:       mov    %rax,%rdx
    0.09 :	  4318ea:       mov    %rdx,%rax
    0.18 :	  4318ed:       shl    $0x1f,%rax
    0.62 :	  4318f1:       sub    %rdx,%rax
    8.66 :	  4318f4:       sub    %rax,%rcx
    0.88 :	  4318f7:       mov    %rcx,%rax
    0.97 :	  4318fa:       mov    %rax,-0x8(%rbp)
         :	          return __res;
    2.12 :	  4318fe:       mov    -0x8(%rbp),%rax
         :	        }
   16.71 :	  431902:       pop    %rbp
    0.00 :	  431903:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1121 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d904 <std::vector<double, std::allocator<double> >::push_back(double const&)>:
         :	_ZNSt6vectorIdSaIdEE9push_backERKd():
         :	       *  to it.  Due to the nature of a %vector this operation can be
         :	       *  done in constant time if the %vector has preallocated space
         :	       *  available.
         :	       */
         :	      void
         :	      push_back(const value_type& __x)
    1.78 :	  42d904:       push   %rbp
    1.96 :	  42d905:       mov    %rsp,%rbp
    0.71 :	  42d908:       sub    $0x10,%rsp
    1.61 :	  42d90c:       mov    %rdi,-0x8(%rbp)
    1.69 :	  42d910:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  42d914:       mov    -0x8(%rbp),%rax
   11.86 :	  42d918:       mov    0x8(%rax),%rdx
   20.25 :	  42d91c:       mov    -0x8(%rbp),%rax
    0.00 :	  42d920:       mov    0x10(%rax),%rax
    3.30 :	  42d924:       cmp    %rax,%rdx
    0.00 :	  42d927:       je     42d95a <std::vector<double, std::allocator<double> >::push_back(double const&)+0x56>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     __x);
    4.73 :	  42d929:       mov    -0x8(%rbp),%rax
    0.09 :	  42d92d:       mov    0x8(%rax),%rcx
    5.62 :	  42d931:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  42d935:       mov    -0x10(%rbp),%rdx
    1.34 :	  42d939:       mov    %rcx,%rsi
    0.00 :	  42d93c:       mov    %rax,%rdi
    2.94 :	  42d93f:       callq  42ea2b <decltype (_S_construct({parm#1}, {parm#2}, (forward<double const&>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double const&>(std::allocator<double>&, double*, double const&)>
         :	            ++this->_M_impl._M_finish;
    1.87 :	  42d944:       mov    -0x8(%rbp),%rax
    6.51 :	  42d948:       mov    0x8(%rax),%rax
   17.31 :	  42d94c:       lea    0x8(%rax),%rdx
    3.84 :	  42d950:       mov    -0x8(%rbp),%rax
    0.09 :	  42d954:       mov    %rdx,0x8(%rax)
    7.76 :	  42d958:       jmp    42d96d <std::vector<double, std::allocator<double> >::push_back(double const&)+0x69>
         :	          }
         :	        else
         :	#if __cplusplus >= 201103L
         :	          _M_emplace_back_aux(__x);
    0.00 :	  42d95a:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d95e:       mov    -0x8(%rbp),%rax
    0.00 :	  42d962:       mov    %rdx,%rsi
    0.00 :	  42d965:       mov    %rax,%rdi
    0.00 :	  42d968:       callq  42ea64 <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double const&>(double const&)>
         :	#else
         :	          _M_insert_aux(end(), __x);
         :	#endif
         :	      }
    0.00 :	  42d96d:       leaveq
    4.73 :	  42d96e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1116 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420636 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
   18.55 :	  420636:       push   %rbp
    0.63 :	  420637:       mov    %rsp,%rbp
    1.79 :	  42063a:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
   14.52 :	  42063e:       mov    -0x8(%rbp),%rax
   12.10 :	  420642:       mov    (%rax),%rax
   52.24 :	  420645:       pop    %rbp
    0.18 :	  420646:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1113 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>:
         :	_ZNSt6vectorI5LLordSaIS0_EEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
   10.06 :	  42cff6:       push   %rbp
    4.13 :	  42cff7:       mov    %rsp,%rbp
   14.56 :	  42cffa:       mov    %rdi,-0x8(%rbp)
    9.88 :	  42cffe:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
    3.68 :	  42d002:       mov    -0x8(%rbp),%rax
   17.79 :	  42d006:       mov    (%rax),%rax
    6.74 :	  42d009:       mov    -0x10(%rbp),%rdx
   10.42 :	  42d00d:       shl    $0x4,%rdx
    4.31 :	  42d011:       add    %rdx,%rax
   18.24 :	  42d014:       pop    %rbp
    0.18 :	  42d015:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1027 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEplERKl():
         :	      __normal_iterator&
         :	      operator+=(const difference_type& __n)
         :	      { _M_current += __n; return *this; }
         :
         :	      __normal_iterator
         :	      operator+(const difference_type& __n) const
    1.75 :	  42d0fc:       push   %rbp
    3.99 :	  42d0fd:       mov    %rsp,%rbp
    2.63 :	  42d100:       sub    $0x20,%rsp
    0.49 :	  42d104:       mov    %rdi,-0x18(%rbp)
    3.41 :	  42d108:       mov    %rsi,-0x20(%rbp)
         :	      { return __normal_iterator(_M_current + __n); }
    2.34 :	  42d10c:       mov    -0x18(%rbp),%rax
    1.27 :	  42d110:       mov    (%rax),%rdx
    6.91 :	  42d113:       mov    -0x20(%rbp),%rax
    2.34 :	  42d117:       mov    (%rax),%rax
    3.21 :	  42d11a:       shl    $0x4,%rax
    2.63 :	  42d11e:       add    %rdx,%rax
    4.19 :	  42d121:       mov    %rax,-0x8(%rbp)
    6.04 :	  42d125:       lea    -0x8(%rbp),%rdx
    0.00 :	  42d129:       lea    -0x10(%rbp),%rax
    0.10 :	  42d12d:       mov    %rdx,%rsi
    0.10 :	  42d130:       mov    %rax,%rdi
    4.28 :	  42d133:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.39 :	  42d138:       mov    -0x10(%rbp),%rax
   50.34 :	  42d13c:       leaveq
    3.60 :	  42d13d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1007 samples)
-----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>:
         :	_ZNSt6vectorIiSaIiEEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
   12.71 :	  41fdba:       push   %rbp
   11.62 :	  41fdbb:       mov    %rsp,%rbp
    0.79 :	  41fdbe:       mov    %rdi,-0x8(%rbp)
   11.52 :	  41fdc2:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
    7.75 :	  41fdc6:       mov    -0x8(%rbp),%rax
    6.75 :	  41fdca:       mov    (%rax),%rax
   34.96 :	  41fdcd:       mov    -0x10(%rbp),%rdx
    4.27 :	  41fdd1:       shl    $0x2,%rdx
    4.97 :	  41fdd5:       add    %rdx,%rax
    3.67 :	  41fdd8:       pop    %rbp
    0.99 :	  41fdd9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (917 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>:
         :	_ZNSt6vectorIiSaIiEE9push_backERKi():
         :	       *  to it.  Due to the nature of a %vector this operation can be
         :	       *  done in constant time if the %vector has preallocated space
         :	       *  available.
         :	       */
         :	      void
         :	      push_back(const value_type& __x)
    1.85 :	  420760:       push   %rbp
    1.74 :	  420761:       mov    %rsp,%rbp
    3.82 :	  420764:       sub    $0x10,%rsp
    0.00 :	  420768:       mov    %rdi,-0x8(%rbp)
    2.18 :	  42076c:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    1.64 :	  420770:       mov    -0x8(%rbp),%rax
    1.20 :	  420774:       mov    0x8(%rax),%rdx
    6.65 :	  420778:       mov    -0x8(%rbp),%rax
    2.62 :	  42077c:       mov    0x10(%rax),%rax
    3.49 :	  420780:       cmp    %rax,%rdx
    0.00 :	  420783:       je     4207b6 <std::vector<int, std::allocator<int> >::push_back(int const&)+0x56>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     __x);
    2.84 :	  420785:       mov    -0x8(%rbp),%rax
    0.00 :	  420789:       mov    0x8(%rax),%rcx
    1.96 :	  42078d:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    1.20 :	  420791:       mov    -0x10(%rbp),%rdx
    1.53 :	  420795:       mov    %rcx,%rsi
    0.11 :	  420798:       mov    %rax,%rdi
    2.62 :	  42079b:       callq  422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
         :	            ++this->_M_impl._M_finish;
    6.11 :	  4207a0:       mov    -0x8(%rbp),%rax
   11.67 :	  4207a4:       mov    0x8(%rax),%rax
   23.34 :	  4207a8:       lea    0x4(%rax),%rdx
    4.69 :	  4207ac:       mov    -0x8(%rbp),%rax
    0.11 :	  4207b0:       mov    %rdx,0x8(%rax)
   12.43 :	  4207b4:       jmp    4207c9 <std::vector<int, std::allocator<int> >::push_back(int const&)+0x69>
         :	          }
         :	        else
         :	#if __cplusplus >= 201103L
         :	          _M_emplace_back_aux(__x);
    0.00 :	  4207b6:       mov    -0x10(%rbp),%rdx
    0.00 :	  4207ba:       mov    -0x8(%rbp),%rax
    0.00 :	  4207be:       mov    %rdx,%rsi
    0.00 :	  4207c1:       mov    %rax,%rdi
    0.00 :	  4207c4:       callq  42293c <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)>
         :	#else
         :	          _M_insert_aux(end(), __x);
         :	#endif
         :	      }
    0.00 :	  4207c9:       leaveq
    6.22 :	  4207ca:       retq
 Percent |	Source code & Disassembly of main for cycles:u (896 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>:
         :	_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator>
         :	    inline typename iterator_traits<_InputIterator>::difference_type
         :	    distance(_InputIterator __first, _InputIterator __last)
   17.52 :	  42d8c0:       push   %rbp
   12.05 :	  42d8c1:       mov    %rsp,%rbp
    0.67 :	  42d8c4:       push   %rbx
    8.15 :	  42d8c5:       sub    $0x48,%rsp
    6.36 :	  42d8c9:       mov    %rdi,-0x30(%rbp)
    1.12 :	  42d8cd:       mov    %rsi,-0x40(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __distance
         :	      return std::__distance(__first, __last,
         :	                             std::__iterator_category(__first));
    4.46 :	  42d8d1:       lea    -0x30(%rbp),%rax
    5.13 :	  42d8d5:       mov    %rax,%rdi
    0.11 :	  42d8d8:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    1.23 :	  42d8dd:       mov    -0x40(%rbp),%rdx
    8.93 :	  42d8e1:       mov    -0x30(%rbp),%rax
    2.90 :	  42d8e5:       mov    %bl,(%rsp)
    4.13 :	  42d8e8:       mov    %rdx,%rsi
    2.68 :	  42d8eb:       mov    %rax,%rdi
    2.34 :	  42d8ee:       callq  42ea06 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::__distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, std::random_access_iterator_tag)>
    0.00 :	  42d8f3:       jmp    42d8fd <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)+0x3d>
    0.00 :	  42d8f5:       mov    %rax,%rdi
    0.00 :	  42d8f8:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
   10.60 :	  42d8fd:       add    $0x48,%rsp
    0.22 :	  42d901:       pop    %rbx
    0.33 :	  42d902:       pop    %rbp
   11.05 :	  42d903:       retq
 Percent |	Source code & Disassembly of main for cycles:u (816 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042058a <std::vector<double, std::allocator<double> >::begin()>:
         :	_ZNSt6vectorIdSaIdEE5beginEv():
         :	       *  Returns a read/write iterator that points to the first
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      begin() _GLIBCXX_NOEXCEPT
   12.99 :	  42058a:       push   %rbp
    4.78 :	  42058b:       mov    %rsp,%rbp
    8.58 :	  42058e:       sub    $0x20,%rsp
    5.88 :	  420592:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_start); }
    5.39 :	  420596:       mov    -0x18(%rbp),%rdx
   10.05 :	  42059a:       lea    -0x10(%rbp),%rax
    6.13 :	  42059e:       mov    %rdx,%rsi
    4.90 :	  4205a1:       mov    %rax,%rdi
    2.57 :	  4205a4:       callq  422496 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::__normal_iterator(double* const&)>
    0.37 :	  4205a9:       mov    -0x10(%rbp),%rax
   32.84 :	  4205ad:       leaveq
    5.51 :	  4205ae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (786 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEC2ERKS2_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    4.07 :	  42e1a2:       push   %rbp
    1.15 :	  42e1a3:       mov    %rsp,%rbp
   12.09 :	  42e1a6:       mov    %rdi,-0x8(%rbp)
    3.44 :	  42e1aa:       mov    %rsi,-0x10(%rbp)
    1.65 :	  42e1ae:       mov    -0x10(%rbp),%rax
   18.58 :	  42e1b2:       mov    (%rax),%rdx
   37.40 :	  42e1b5:       mov    -0x8(%rbp),%rax
    0.89 :	  42e1b9:       mov    %rdx,(%rax)
   16.79 :	  42e1bc:       pop    %rbp
    3.94 :	  42e1bd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (747 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430c3c <bool __gnu_cxx::operator< <LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxltIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	              const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() < __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
   17.14 :	  430c3c:       push   %rbp
    5.89 :	  430c3d:       mov    %rsp,%rbp
    2.95 :	  430c40:       push   %rbx
   15.26 :	  430c41:       sub    $0x18,%rsp
    2.14 :	  430c45:       mov    %rdi,-0x18(%rbp)
    0.54 :	  430c49:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() < __rhs.base(); }
    1.61 :	  430c4d:       mov    -0x18(%rbp),%rax
    0.13 :	  430c51:       mov    %rax,%rdi
    1.47 :	  430c54:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  430c59:       mov    (%rax),%rbx
   12.99 :	  430c5c:       mov    -0x20(%rbp),%rax
    0.13 :	  430c60:       mov    %rax,%rdi
    1.34 :	  430c63:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  430c68:       mov    (%rax),%rax
   23.56 :	  430c6b:       cmp    %rax,%rbx
    4.42 :	  430c6e:       setb   %al
    5.35 :	  430c71:       add    $0x18,%rsp
    0.00 :	  430c75:       pop    %rbx
    0.00 :	  430c76:       pop    %rbp
    5.09 :	  430c77:       retq
 Percent |	Source code & Disassembly of main for cycles:u (743 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>:
         :	_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_():
         :	   *  This function is not a part of the C++ standard but is syntactic
         :	   *  sugar for internal library use only.
         :	  */
         :	  template<typename _Iter>
         :	    inline typename iterator_traits<_Iter>::iterator_category
         :	    __iterator_category(const _Iter&)
   41.32 :	  42e995:       push   %rbp
    5.65 :	  42e996:       mov    %rsp,%rbp
   13.86 :	  42e999:       mov    %rdi,-0x8(%rbp)
         :	    { return typename iterator_traits<_Iter>::iterator_category(); }
   32.57 :	  42e99d:       pop    %rbp
    6.59 :	  42e99e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (725 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420616 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
    9.38 :	  420616:       push   %rbp
    4.28 :	  420617:       mov    %rsp,%rbp
   15.72 :	  42061a:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    6.34 :	  42061e:       mov    -0x8(%rbp),%rax
   12.14 :	  420622:       mov    (%rax),%rax
   27.59 :	  420625:       lea    0x8(%rax),%rdx
    3.86 :	  420629:       mov    -0x8(%rbp),%rax
    0.14 :	  42062d:       mov    %rdx,(%rax)
         :	        return *this;
    2.90 :	  420630:       mov    -0x8(%rbp),%rax
         :	      }
   16.28 :	  420634:       pop    %rbp
    1.38 :	  420635:       retq
 Percent |	Source code & Disassembly of main for cycles:u (711 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d774 <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
         :	_ZNSt25uniform_real_distributionIdEclISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEEdRT_():
         :	      /**
         :	       * @brief Generating functions.
         :	       */
         :	      template<typename _UniformRandomNumberGenerator>
         :	        result_type
         :	        operator()(_UniformRandomNumberGenerator& __urng)
    0.28 :	  42d774:       push   %rbp
    0.00 :	  42d775:       mov    %rsp,%rbp
    7.03 :	  42d778:       sub    $0x20,%rsp
    0.00 :	  42d77c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d780:       mov    %rsi,-0x10(%rbp)
         :	        { return this->operator()(__urng, _M_param); }
    7.45 :	  42d784:       mov    -0x8(%rbp),%rdx
    0.28 :	  42d788:       mov    -0x10(%rbp),%rcx
    0.14 :	  42d78c:       mov    -0x8(%rbp),%rax
    2.39 :	  42d790:       mov    %rcx,%rsi
    6.33 :	  42d793:       mov    %rax,%rdi
    0.00 :	  42d796:       callq  42e8fe <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)>
    6.75 :	  42d79b:       vmovsd %xmm0,-0x18(%rbp)
    6.75 :	  42d7a0:       mov    -0x18(%rbp),%rax
   27.85 :	  42d7a4:       mov    %rax,-0x18(%rbp)
    6.47 :	  42d7a8:       vmovsd -0x18(%rbp),%xmm0
   28.27 :	  42d7ad:       leaveq
    0.00 :	  42d7ae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (706 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422496 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::__normal_iterator(double* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC2ERKS1_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
   14.02 :	  422496:       push   %rbp
    7.51 :	  422497:       mov    %rsp,%rbp
    7.37 :	  42249a:       mov    %rdi,-0x8(%rbp)
   10.06 :	  42249e:       mov    %rsi,-0x10(%rbp)
    7.22 :	  4224a2:       mov    -0x10(%rbp),%rax
   11.19 :	  4224a6:       mov    (%rax),%rdx
   22.38 :	  4224a9:       mov    -0x8(%rbp),%rax
    5.67 :	  4224ad:       mov    %rdx,(%rax)
   13.60 :	  4224b0:       pop    %rbp
    0.99 :	  4224b1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (619 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxmiIP5LLcolSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_():
         :	#endif
         :	    { return __lhs.base() - __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :	    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    8.08 :	  42e1fa:       push   %rbp
    4.04 :	  42e1fb:       mov    %rsp,%rbp
    2.10 :	  42e1fe:       push   %rbx
    5.33 :	  42e1ff:       sub    $0x18,%rsp
    1.78 :	  42e203:       mov    %rdi,-0x18(%rbp)
    3.23 :	  42e207:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() - __rhs.base(); }
    2.91 :	  42e20b:       mov    -0x18(%rbp),%rax
    1.94 :	  42e20f:       mov    %rax,%rdi
    0.32 :	  42e212:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    2.42 :	  42e217:       mov    (%rax),%rax
   15.51 :	  42e21a:       mov    %rax,%rbx
    0.32 :	  42e21d:       mov    -0x20(%rbp),%rax
    0.32 :	  42e221:       mov    %rax,%rdi
    0.32 :	  42e224:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    2.42 :	  42e229:       mov    (%rax),%rax
   25.04 :	  42e22c:       sub    %rax,%rbx
    4.04 :	  42e22f:       mov    %rbx,%rax
    0.48 :	  42e232:       sar    $0x4,%rax
    8.56 :	  42e236:       add    $0x18,%rsp
    1.29 :	  42e23a:       pop    %rbx
    0.32 :	  42e23b:       pop    %rbp
    9.21 :	  42e23c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (607 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004317ee <LLcol* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<LLcol>(LLcol const*, LLcol const*, LLcol*)>:
         :	_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI5LLcolEEPT_PKS4_S7_S5_():
         :	  template<bool _IsMove>
         :	    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
         :	    {
         :	      template<typename _Tp>
         :	        static _Tp*
         :	        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
   27.35 :	  4317ee:       push   %rbp
    5.44 :	  4317ef:       mov    %rsp,%rbp
    1.65 :	  4317f2:       sub    $0x30,%rsp
    0.33 :	  4317f6:       mov    %rdi,-0x18(%rbp)
    5.93 :	  4317fa:       mov    %rsi,-0x20(%rbp)
    1.48 :	  4317fe:       mov    %rdx,-0x28(%rbp)
         :	        {
         :	          const ptrdiff_t _Num = __last - __first;
    1.15 :	  431802:       mov    -0x20(%rbp),%rdx
    4.12 :	  431806:       mov    -0x18(%rbp),%rax
    3.29 :	  43180a:       sub    %rax,%rdx
    2.31 :	  43180d:       mov    %rdx,%rax
    0.00 :	  431810:       sar    $0x4,%rax
    1.81 :	  431814:       mov    %rax,-0x8(%rbp)
         :	          if (_Num)
    2.64 :	  431818:       cmpq   $0x0,-0x8(%rbp)
   19.11 :	  43181d:       je     43184e <LLcol* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<LLcol>(LLcol const*, LLcol const*, LLcol*)+0x60>
         :	            __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    3.46 :	  43181f:       mov    -0x8(%rbp),%rax
    0.16 :	  431823:       shl    $0x4,%rax
    0.49 :	  431827:       mov    %rax,%rdx
    0.00 :	  43182a:       mov    -0x8(%rbp),%rax
    2.31 :	  43182e:       shl    $0x4,%rax
    0.00 :	  431832:       neg    %rax
    0.82 :	  431835:       mov    %rax,%rcx
    0.00 :	  431838:       mov    -0x28(%rbp),%rax
    1.15 :	  43183c:       add    %rax,%rcx
    0.49 :	  43183f:       mov    -0x18(%rbp),%rax
    2.14 :	  431843:       mov    %rax,%rsi
    0.00 :	  431846:       mov    %rcx,%rdi
    1.98 :	  431849:       callq  41dc60 <memmove@plt>
         :	          return __result - _Num;
    0.66 :	  43184e:       mov    -0x8(%rbp),%rax
    1.15 :	  431852:       shl    $0x4,%rax
    1.65 :	  431856:       neg    %rax
    1.81 :	  431859:       mov    %rax,%rdx
    0.49 :	  43185c:       mov    -0x28(%rbp),%rax
    0.33 :	  431860:       add    %rdx,%rax
         :	        }
    0.49 :	  431863:       leaveq
    3.79 :	  431864:       retq
 Percent |	Source code & Disassembly of main for cycles:u (606 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f866 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::operator()()>:
         :	_ZNSt8__detail8_AdaptorISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEdEclEv():
         :	         * Converts a value generated by the adapted random number generator
         :	         * into a value in the input domain for the dependent random number
         :	         * distribution.
         :	         */
         :	        _DInputType
         :	        operator()()
    0.17 :	  42f866:       push   %rbp
    0.83 :	  42f867:       mov    %rsp,%rbp
    6.44 :	  42f86a:       sub    $0x10,%rsp
    0.00 :	  42f86e:       mov    %rdi,-0x8(%rbp)
         :	        {
         :	          return std::generate_canonical<_DInputType,
         :	                                    std::numeric_limits<_DInputType>::digits,
         :	                                    _Engine>(_M_g);
    0.99 :	  42f872:       mov    -0x8(%rbp),%rax
    9.24 :	  42f876:       mov    (%rax),%rax
    2.97 :	  42f879:       mov    %rax,%rdi
    0.17 :	  42f87c:       callq  430682 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    0.00 :	  42f881:       vmovsd %xmm0,-0x10(%rbp)
    7.92 :	  42f886:       mov    -0x10(%rbp),%rax
         :	        }
   27.56 :	  42f88a:       mov    %rax,-0x10(%rbp)
   11.72 :	  42f88e:       vmovsd -0x10(%rbp),%xmm0
   32.01 :	  42f893:       leaveq
    0.00 :	  42f894:       retq
 Percent |	Source code & Disassembly of main for cycles:u (597 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    1.51 :	  430517:       push   %rbp
    8.38 :	  430518:       mov    %rsp,%rbp
    1.51 :	  43051b:       sub    $0x10,%rsp
    0.00 :	  43051f:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    8.54 :	  430523:       mov    -0x10(%rbp),%rax
   42.21 :	  430527:       mov    %rax,%rdi
    2.51 :	  43052a:       callq  430e8e <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
   14.41 :	  43052f:       leaveq
   20.94 :	  430530:       retq
 Percent |	Source code & Disassembly of main for cycles:u (586 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043087c <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)>:
         :	_ZN9__gnu_cxx13new_allocatorIdE9constructIdIRKdEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    7.34 :	  43087c:       push   %rbp
    0.00 :	  43087d:       mov    %rsp,%rbp
    3.58 :	  430880:       push   %rbx
    2.56 :	  430881:       sub    $0x28,%rsp
    0.68 :	  430885:       mov    %rdi,-0x18(%rbp)
    3.24 :	  430889:       mov    %rsi,-0x20(%rbp)
    4.10 :	  43088d:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  430891:       mov    -0x28(%rbp),%rax
    6.48 :	  430895:       mov    %rax,%rdi
    1.19 :	  430898:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
    1.71 :	  43089d:       mov    (%rax),%rbx
   36.35 :	  4308a0:       mov    -0x20(%rbp),%rax
    0.00 :	  4308a4:       mov    %rax,%rsi
    0.00 :	  4308a7:       mov    $0x8,%edi
    0.00 :	  4308ac:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  4308b1:       test   %rax,%rax
    0.00 :	  4308b4:       je     4308b9 <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)+0x3d>
    0.68 :	  4308b6:       mov    %rbx,(%rax)
   25.94 :	  4308b9:       add    $0x28,%rsp
    2.22 :	  4308bd:       pop    %rbx
    0.00 :	  4308be:       pop    %rbp
    3.92 :	  4308bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (580 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   18.45 :	  4224b2:       push   %rbp
    6.21 :	  4224b3:       mov    %rsp,%rbp
   25.17 :	  4224b6:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
    3.28 :	  4224ba:       mov    -0x8(%rbp),%rax
   42.93 :	  4224be:       pop    %rbp
    3.97 :	  4224bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (573 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430f58 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>:
         :	_ZNSt26linear_congruential_engineImLm16807ELm0ELm2147483647EEclEv():
         :
         :	      /**
         :	       * @brief Gets the next random number in the sequence.
         :	       */
         :	      result_type
         :	      operator()()
   17.45 :	  430f58:       push   %rbp
    0.52 :	  430f59:       mov    %rsp,%rbp
    0.00 :	  430f5c:       sub    $0x10,%rsp
   13.26 :	  430f60:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
    0.17 :	  430f64:       mov    -0x8(%rbp),%rax
    0.17 :	  430f68:       mov    (%rax),%rax
    0.52 :	  430f6b:       mov    %rax,%rdi
   14.66 :	  430f6e:       callq  431555 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>
    0.00 :	  430f73:       mov    -0x8(%rbp),%rdx
    0.00 :	  430f77:       mov    %rax,(%rdx)
         :	        return _M_x;
   18.15 :	  430f7a:       mov    -0x8(%rbp),%rax
    0.17 :	  430f7e:       mov    (%rax),%rax
         :	      }
   24.08 :	  430f81:       leaveq
   10.82 :	  430f82:       retq
 Percent |	Source code & Disassembly of main for cycles:u (567 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>:
         :	_ZNSt6vectorIdSaIdEEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    2.65 :	  41fdfa:       push   %rbp
   22.57 :	  41fdfb:       mov    %rsp,%rbp
    5.11 :	  41fdfe:       mov    %rdi,-0x8(%rbp)
    4.59 :	  41fe02:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
   22.75 :	  41fe06:       mov    -0x8(%rbp),%rax
    2.82 :	  41fe0a:       mov    (%rax),%rax
    6.88 :	  41fe0d:       mov    -0x10(%rbp),%rdx
    6.17 :	  41fe11:       shl    $0x3,%rdx
   23.63 :	  41fe15:       add    %rdx,%rax
    2.29 :	  41fe18:       pop    %rbp
    0.53 :	  41fe19:       retq
 Percent |	Source code & Disassembly of main for cycles:u (532 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431411 <void std::swap<LLcol>(LLcol&, LLcol&)>:
         :	_ZSt4swapI5LLcolEvRT_S2_():
         :	   *  @param  __b  Another thing of arbitrary type.
         :	   *  @return   Nothing.
         :	  */
         :	  template<typename _Tp>
         :	    inline void
         :	    swap(_Tp& __a, _Tp& __b)
    0.00 :	  431411:       push   %rbp
    3.76 :	  431412:       mov    %rsp,%rbp
    1.32 :	  431415:       sub    $0x20,%rsp
    0.00 :	  431419:       mov    %rdi,-0x18(%rbp)
    5.08 :	  43141d:       mov    %rsi,-0x20(%rbp)
         :	#endif
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         :
         :	      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1.88 :	  431421:       mov    -0x18(%rbp),%rax
    7.33 :	  431425:       mov    %rax,%rdi
    0.00 :	  431428:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    2.63 :	  43142d:       mov    0x8(%rax),%rdx
   22.74 :	  431431:       mov    (%rax),%rax
    0.75 :	  431434:       mov    %rax,-0x10(%rbp)
    5.64 :	  431438:       mov    %rdx,-0x8(%rbp)
         :	      __a = _GLIBCXX_MOVE(__b);
    3.57 :	  43143c:       mov    -0x20(%rbp),%rax
    0.00 :	  431440:       mov    %rax,%rdi
    0.75 :	  431443:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    4.89 :	  431448:       mov    -0x18(%rbp),%rcx
    3.76 :	  43144c:       mov    0x8(%rax),%rdx
    1.32 :	  431450:       mov    (%rax),%rax
    0.00 :	  431453:       mov    %rax,(%rcx)
   11.65 :	  431456:       mov    %rdx,0x8(%rcx)
         :	      __b = _GLIBCXX_MOVE(__tmp);
    2.82 :	  43145a:       lea    -0x10(%rbp),%rax
    0.00 :	  43145e:       mov    %rax,%rdi
    0.00 :	  431461:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    5.08 :	  431466:       mov    -0x20(%rbp),%rcx
    2.07 :	  43146a:       mov    0x8(%rax),%rdx
    0.00 :	  43146e:       mov    (%rax),%rax
    0.00 :	  431471:       mov    %rax,(%rcx)
    7.52 :	  431474:       mov    %rdx,0x8(%rcx)
         :	    }
    2.26 :	  431478:       leaveq
    3.20 :	  431479:       retq
 Percent |	Source code & Disassembly of main for cycles:u (519 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>:
         :	_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   20.62 :	  420751:       push   %rbp
   12.91 :	  420752:       mov    %rsp,%rbp
    9.83 :	  420755:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
   16.38 :	  420759:       mov    -0x8(%rbp),%rax
   35.45 :	  42075d:       pop    %rbp
    4.82 :	  42075e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (518 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430db8 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_backward_a2<true, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_():
         :	                                                                 __result);
         :	    }
         :
         :	  template<bool _IsMove, typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    1.35 :	  430db8:       push   %rbp
    1.16 :	  430db9:       mov    %rsp,%rbp
    0.19 :	  430dbc:       push   %r12
    1.54 :	  430dbe:       push   %rbx
    1.93 :	  430dbf:       sub    $0x40,%rsp
    0.19 :	  430dc3:       mov    %rdi,-0x30(%rbp)
    2.12 :	  430dc7:       mov    %rsi,-0x40(%rbp)
    1.74 :	  430dcb:       mov    %rdx,-0x50(%rbp)
         :	    {
         :	      return _BI2(std::__copy_move_backward_a<_IsMove>
         :	                  (std::__niter_base(__first), std::__niter_base(__last),
         :	                   std::__niter_base(__result)));
    1.16 :	  430dcf:       mov    -0x50(%rbp),%rax
    7.72 :	  430dd3:       mov    %rax,%rdi
    0.00 :	  430dd6:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    6.18 :	  430ddb:       mov    %rax,%r12
    0.00 :	  430dde:       mov    -0x40(%rbp),%rax
   11.20 :	  430de2:       mov    %rax,%rdi
    0.00 :	  430de5:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    8.30 :	  430dea:       mov    %rax,%rbx
    0.00 :	  430ded:       mov    -0x30(%rbp),%rax
    9.65 :	  430df1:       mov    %rax,%rdi
    0.00 :	  430df4:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    6.56 :	  430df9:       mov    %r12,%rdx
    0.00 :	  430dfc:       mov    %rbx,%rsi
    0.00 :	  430dff:       mov    %rax,%rdi
    0.00 :	  430e02:       callq  431488 <LLcol* std::__copy_move_backward_a<true, LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>
    4.05 :	  430e07:       mov    %rax,-0x18(%rbp)
   12.55 :	  430e0b:       lea    -0x18(%rbp),%rdx
    0.19 :	  430e0f:       lea    -0x20(%rbp),%rax
    0.00 :	  430e13:       mov    %rdx,%rsi
    0.00 :	  430e16:       mov    %rax,%rdi
    1.74 :	  430e19:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.58 :	  430e1e:       mov    -0x20(%rbp),%rax
         :	    }
   16.41 :	  430e22:       add    $0x40,%rsp
    0.19 :	  430e26:       pop    %rbx
    0.39 :	  430e27:       pop    %r12
    2.51 :	  430e29:       pop    %rbp
    0.39 :	  430e2a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (479 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041eb4a <std::log(long double)>:
         :	_ZSt3loge():
         :	  log(float __x)
         :	  { return __builtin_logf(__x); }
         :
         :	  inline _GLIBCXX_CONSTEXPR long double
         :	  log(long double __x)
         :	  { return __builtin_logl(__x); }
   12.94 :	  41eb4a:       push   %rbp
    0.63 :	  41eb4b:       mov    %rsp,%rbp
   11.90 :	  41eb4e:       sub    $0x10,%rsp
   11.27 :	  41eb52:       mov    0x10(%rbp),%rax
    0.63 :	  41eb56:       mov    0x18(%rbp),%edx
   24.43 :	  41eb59:       mov    %rax,(%rsp)
    0.42 :	  41eb5d:       mov    %edx,0x8(%rsp)
   17.95 :	  41eb61:       callq  41dcc0 <logl@plt>
    1.67 :	  41eb66:       leaveq
   18.16 :	  41eb67:       retq
 Percent |	Source code & Disassembly of main for cycles:u (474 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.42 :	  42d016:       push   %rbp
    2.53 :	  42d017:       mov    %rsp,%rbp
   13.50 :	  42d01a:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    3.16 :	  42d01e:       mov    -0x8(%rbp),%rax
   12.24 :	  42d022:       mov    0x8(%rax),%rax
   41.35 :	  42d026:       mov    %rax,%rdx
    0.00 :	  42d029:       mov    -0x8(%rbp),%rax
    1.27 :	  42d02d:       mov    (%rax),%rax
    4.43 :	  42d030:       sub    %rax,%rdx
   12.45 :	  42d033:       mov    %rdx,%rax
    3.16 :	  42d036:       sar    $0x4,%rax
    5.06 :	  42d03a:       pop    %rbp
    0.42 :	  42d03b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (450 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>:
         :	_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   14.22 :	  422e23:       push   %rbp
    9.56 :	  422e24:       mov    %rsp,%rbp
   24.44 :	  422e27:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
    3.78 :	  422e2b:       mov    -0x8(%rbp),%rax
   37.33 :	  422e2f:       pop    %rbp
   10.67 :	  422e30:       retq
 Percent |	Source code & Disassembly of main for cycles:u (437 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004208b8 <std::vector<LLord, std::allocator<LLord> >::vector(std::vector<LLord, std::allocator<LLord> > const&)>:
         :	_ZNSt6vectorI5LLordSaIS0_EEC2ERKS2_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    1.37 :	  4208b8:       push   %rbp
    0.00 :	  4208b9:       mov    %rsp,%rbp
    0.00 :	  4208bc:       push   %r13
    0.46 :	  4208be:       push   %r12
    0.00 :	  4208c0:       push   %rbx
    0.00 :	  4208c1:       sub    $0x28,%rsp
    0.69 :	  4208c5:       mov    %rdi,-0x38(%rbp)
    0.00 :	  4208c9:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  4208cd:       mov    -0x40(%rbp),%rax
    0.92 :	  4208d1:       mov    %rax,%rdi
    1.37 :	  4208d4:       callq  422c40 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator() const>
    0.00 :	  4208d9:       mov    %rax,%rdx
    0.00 :	  4208dc:       lea    -0x21(%rbp),%rax
    0.69 :	  4208e0:       mov    %rdx,%rsi
    0.69 :	  4208e3:       mov    %rax,%rdi
    0.00 :	  4208e6:       callq  422c16 <__gnu_cxx::__alloc_traits<std::allocator<LLord> >::_S_select_on_copy(std::allocator<LLord> const&)>
    1.37 :	  4208eb:       mov    -0x40(%rbp),%rax
    3.66 :	  4208ef:       mov    %rax,%rdi
    0.00 :	  4208f2:       callq  422bf0 <std::vector<LLord, std::allocator<LLord> >::size() const>
    0.00 :	  4208f7:       mov    %rax,%rcx
    1.60 :	  4208fa:       mov    -0x38(%rbp),%rax
    0.00 :	  4208fe:       lea    -0x21(%rbp),%rdx
    0.00 :	  420902:       mov    %rcx,%rsi
    0.00 :	  420905:       mov    %rax,%rdi
    1.83 :	  420908:       callq  422c68 <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_base(unsigned long, std::allocator<LLord> const&)>
    0.23 :	  42090d:       lea    -0x21(%rbp),%rax
    0.00 :	  420911:       mov    %rax,%rdi
    0.00 :	  420914:       callq  422c4e <std::allocator<LLord>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    1.60 :	  420919:       mov    -0x38(%rbp),%rax
    3.89 :	  42091d:       mov    %rax,%rdi
    0.00 :	  420920:       callq  422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>
    0.00 :	  420925:       mov    %rax,%r13
    0.46 :	  420928:       mov    -0x38(%rbp),%rax
    1.37 :	  42092c:       mov    (%rax),%r12
    4.12 :	  42092f:       mov    -0x40(%rbp),%rax
    0.00 :	  420933:       mov    %rax,%rdi
    0.23 :	  420936:       callq  422cf6 <std::vector<LLord, std::allocator<LLord> >::end() const>
    1.14 :	  42093b:       mov    %rax,%rbx
    0.00 :	  42093e:       mov    -0x40(%rbp),%rax
    0.23 :	  420942:       mov    %rax,%rdi
    0.00 :	  420945:       callq  422cc6 <std::vector<LLord, std::allocator<LLord> >::begin() const>
    1.60 :	  42094a:       mov    %r13,%rcx
    0.00 :	  42094d:       mov    %r12,%rdx
    0.00 :	  420950:       mov    %rbx,%rsi
    0.00 :	  420953:       mov    %rax,%rdi
    0.92 :	  420956:       callq  422d27 <LLord* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, LLord>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, std::allocator<LLord>&)>
         :	      { this->_M_impl._M_finish =
    8.92 :	  42095b:       mov    -0x38(%rbp),%rdx
    7.78 :	  42095f:       mov    %rax,0x8(%rdx)
   17.85 :	  420963:       jmp    420999 <std::vector<LLord, std::allocator<LLord> >::vector(std::vector<LLord, std::allocator<LLord> > const&)+0xe1>
    0.00 :	  420965:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  420968:       lea    -0x21(%rbp),%rax
    0.00 :	  42096c:       mov    %rax,%rdi
    0.00 :	  42096f:       callq  422c4e <std::allocator<LLord>::~allocator()>
    0.00 :	  420974:       mov    %rbx,%rax
    0.00 :	  420977:       mov    %rax,%rdi
    0.00 :	  42097a:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42097f:       mov    %rax,%rbx
    0.00 :	  420982:       mov    -0x38(%rbp),%rax
    0.00 :	  420986:       mov    %rax,%rdi
    0.00 :	  420989:       callq  422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>
    0.00 :	  42098e:       mov    %rbx,%rax
    0.00 :	  420991:       mov    %rax,%rdi
    0.00 :	  420994:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    4.35 :	  420999:       add    $0x28,%rsp
    2.52 :	  42099d:       pop    %rbx
    2.97 :	  42099e:       pop    %r12
   23.57 :	  4209a0:       pop    %r13
    1.37 :	  4209a2:       pop    %rbp
    0.23 :	  4209a3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (379 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422d27 <LLord* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, LLord>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*, std::allocator<LLord>&)>:
         :	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E():
         :	        }
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         :	    inline _ForwardIterator
         :	    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    0.00 :	  422d27:       push   %rbp
    0.53 :	  422d28:       mov    %rsp,%rbp
    1.58 :	  422d2b:       sub    $0x20,%rsp
    0.00 :	  422d2f:       mov    %rdi,-0x10(%rbp)
    0.00 :	  422d33:       mov    %rsi,-0x20(%rbp)
    1.32 :	  422d37:       mov    %rdx,-0x18(%rbp)
    0.00 :	  422d3b:       mov    %rcx,-0x8(%rbp)
         :	                           _ForwardIterator __result, allocator<_Tp>&)
         :	    { return std::uninitialized_copy(__first, __last, __result); }
    0.00 :	  422d3f:       mov    -0x18(%rbp),%rdx
    0.53 :	  422d43:       mov    -0x20(%rbp),%rcx
    1.58 :	  422d47:       mov    -0x10(%rbp),%rax
    3.17 :	  422d4b:       mov    %rcx,%rsi
    0.00 :	  422d4e:       mov    %rax,%rdi
    0.53 :	  422d51:       callq  4251f6 <LLord* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>
   22.69 :	  422d56:       leaveq
   68.07 :	  422d57:       retq
 Percent |	Source code & Disassembly of main for cycles:u (368 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d302 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEaSERKS2_():
         :	      return __first;
         :	    }
         :
         :	  template<typename _Tp, typename _Alloc>
         :	    vector<_Tp, _Alloc>&
         :	    vector<_Tp, _Alloc>::
   10.05 :	  42d302:       push   %rbp
    7.07 :	  42d303:       mov    %rsp,%rbp
    0.27 :	  42d306:       push   %r14
    4.35 :	  42d308:       push   %r13
    1.09 :	  42d30a:       push   %r12
    0.82 :	  42d30c:       push   %rbx
    0.27 :	  42d30d:       sub    $0x20,%rsp
    0.00 :	  42d311:       mov    %rdi,-0x38(%rbp)
    1.09 :	  42d315:       mov    %rsi,-0x40(%rbp)
         :	    operator=(const vector<_Tp, _Alloc>& __x)
         :	    {
         :	      if (&__x != this)
    0.54 :	  42d319:       mov    -0x40(%rbp),%rax
    0.54 :	  42d31d:       cmp    -0x38(%rbp),%rax
    0.00 :	  42d321:       je     42d607 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x305>
         :	        {
         :	#if __cplusplus >= 201103L
         :	          if (_Alloc_traits::_S_propagate_on_copy_assign())
    2.17 :	  42d327:       callq  42d2eb <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_propagate_on_copy_assign()>
    1.09 :	  42d32c:       test   %al,%al
    0.00 :	  42d32e:       je     42d404 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x102>
         :	            {
         :	              if (!_Alloc_traits::_S_always_equal()
    0.00 :	  42d334:       callq  42d2f6 <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_always_equal()>
    0.00 :	  42d339:       xor    $0x1,%eax
    0.00 :	  42d33c:       test   %al,%al
    0.00 :	  42d33e:       je     42d371 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x6f>
         :	                  && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
    0.00 :	  42d340:       mov    -0x40(%rbp),%rax
    0.00 :	  42d344:       mov    %rax,%rdi
    0.00 :	  42d347:       callq  42e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>
    0.00 :	  42d34c:       mov    %rax,%rbx
    0.00 :	  42d34f:       mov    -0x38(%rbp),%rax
    0.00 :	  42d353:       mov    %rax,%rdi
    0.00 :	  42d356:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d35b:       mov    %rbx,%rsi
    0.00 :	  42d35e:       mov    %rax,%rdi
    0.00 :	  42d361:       callq  42e56a <bool std::operator!=<LLcol>(std::allocator<LLcol> const&, std::allocator<LLcol> const&)>
         :	              if (!_Alloc_traits::_S_always_equal()
    0.00 :	  42d366:       test   %al,%al
    0.00 :	  42d368:       je     42d371 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x6f>
    0.00 :	  42d36a:       mov    $0x1,%eax
    0.00 :	  42d36f:       jmp    42d376 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x74>
    0.00 :	  42d371:       mov    $0x0,%eax
    0.00 :	  42d376:       test   %al,%al
    0.00 :	  42d378:       je     42d3de <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0xdc>
         :	                {
         :	                  // replacement allocator cannot free existing storage
         :	                  this->clear();
    0.00 :	  42d37a:       mov    -0x38(%rbp),%rax
    0.00 :	  42d37e:       mov    %rax,%rdi
    0.00 :	  42d381:       callq  42e57e <std::vector<LLcol, std::allocator<LLcol> >::clear()>
         :	                  _M_deallocate(this->_M_impl._M_start,
         :	                                this->_M_impl._M_end_of_storage
         :	                                - this->_M_impl._M_start);
    0.00 :	  42d386:       mov    -0x38(%rbp),%rax
    0.00 :	  42d38a:       mov    0x10(%rax),%rax
    0.00 :	  42d38e:       mov    %rax,%rdx
    0.00 :	  42d391:       mov    -0x38(%rbp),%rax
    0.00 :	  42d395:       mov    (%rax),%rax
    0.00 :	  42d398:       sub    %rax,%rdx
    0.00 :	  42d39b:       mov    %rdx,%rax
    0.00 :	  42d39e:       sar    $0x4,%rax
    0.00 :	  42d3a2:       mov    %rax,%rdx
    0.00 :	  42d3a5:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3a9:       mov    (%rax),%rcx
    0.00 :	  42d3ac:       mov    -0x38(%rbp),%rax
         :	                  _M_deallocate(this->_M_impl._M_start,
    0.00 :	  42d3b0:       mov    %rcx,%rsi
    0.00 :	  42d3b3:       mov    %rax,%rdi
    0.00 :	  42d3b6:       callq  42e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>
         :	                  this->_M_impl._M_start = nullptr;
    0.00 :	  42d3bb:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3bf:       movq   $0x0,(%rax)
         :	                  this->_M_impl._M_finish = nullptr;
    0.00 :	  42d3c6:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3ca:       movq   $0x0,0x8(%rax)
         :	                  this->_M_impl._M_end_of_storage = nullptr;
    0.00 :	  42d3d2:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3d6:       movq   $0x0,0x10(%rax)
         :	                }
         :	              std::__alloc_on_copy(_M_get_Tp_allocator(),
         :	                                   __x._M_get_Tp_allocator());
    0.00 :	  42d3de:       mov    -0x40(%rbp),%rax
    0.00 :	  42d3e2:       mov    %rax,%rdi
    0.00 :	  42d3e5:       callq  42e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>
    0.00 :	  42d3ea:       mov    %rax,%rbx
         :	              std::__alloc_on_copy(_M_get_Tp_allocator(),
    0.00 :	  42d3ed:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3f1:       mov    %rax,%rdi
    0.00 :	  42d3f4:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d3f9:       mov    %rbx,%rsi
    0.00 :	  42d3fc:       mov    %rax,%rdi
    0.00 :	  42d3ff:       callq  42e5d6 <void std::__alloc_on_copy<std::allocator<LLcol> >(std::allocator<LLcol>&, std::allocator<LLcol> const&)>
         :	            }
         :	#endif
         :	          const size_type __xlen = __x.size();
    4.89 :	  42d404:       mov    -0x40(%rbp),%rax
    4.89 :	  42d408:       mov    %rax,%rdi
    0.00 :	  42d40b:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42d410:       mov    %rax,-0x28(%rbp)
         :	          if (__xlen > capacity())
    2.45 :	  42d414:       mov    -0x38(%rbp),%rax
    0.00 :	  42d418:       mov    %rax,%rdi
    0.00 :	  42d41b:       callq  42e5fe <std::vector<LLcol, std::allocator<LLcol> >::capacity() const>
    0.00 :	  42d420:       cmp    -0x28(%rbp),%rax
    1.09 :	  42d424:       setb   %al
    1.63 :	  42d427:       test   %al,%al
    0.00 :	  42d429:       je     42d4ec <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x1ea>
         :	            {
         :	              pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         :	                                                   __x.end());
    0.00 :	  42d42f:       mov    -0x40(%rbp),%rax
    0.00 :	  42d433:       mov    %rax,%rdi
    0.00 :	  42d436:       callq  42e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>
    0.00 :	  42d43b:       mov    %rax,%rbx
    0.00 :	  42d43e:       mov    -0x40(%rbp),%rax
    0.00 :	  42d442:       mov    %rax,%rdi
    0.00 :	  42d445:       callq  42e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>
    0.00 :	  42d44a:       mov    %rax,%rdx
    0.00 :	  42d44d:       mov    -0x28(%rbp),%rsi
    0.00 :	  42d451:       mov    -0x38(%rbp),%rax
    0.00 :	  42d455:       mov    %rbx,%rcx
    0.00 :	  42d458:       mov    %rax,%rdi
    0.00 :	  42d45b:       callq  42e624 <LLcol* std::vector<LLcol, std::allocator<LLcol> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(unsigned long, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42d460:       mov    %rax,-0x30(%rbp)
         :	              std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                            _M_get_Tp_allocator());
    0.00 :	  42d464:       mov    -0x38(%rbp),%rax
    0.00 :	  42d468:       mov    %rax,%rdi
    0.00 :	  42d46b:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d470:       mov    %rax,%rdx
    0.00 :	  42d473:       mov    -0x38(%rbp),%rax
    0.00 :	  42d477:       mov    0x8(%rax),%rcx
    0.00 :	  42d47b:       mov    -0x38(%rbp),%rax
    0.00 :	  42d47f:       mov    (%rax),%rax
         :	              std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  42d482:       mov    %rcx,%rsi
    0.00 :	  42d485:       mov    %rax,%rdi
    0.00 :	  42d488:       callq  42e541 <void std::_Destroy<LLcol*, LLcol>(LLcol*, LLcol*, std::allocator<LLcol>&)>
         :	              _M_deallocate(this->_M_impl._M_start,
         :	                            this->_M_impl._M_end_of_storage
         :	                            - this->_M_impl._M_start);
    0.00 :	  42d48d:       mov    -0x38(%rbp),%rax
    0.00 :	  42d491:       mov    0x10(%rax),%rax
    0.00 :	  42d495:       mov    %rax,%rdx
    0.00 :	  42d498:       mov    -0x38(%rbp),%rax
    0.00 :	  42d49c:       mov    (%rax),%rax
    0.00 :	  42d49f:       sub    %rax,%rdx
    0.00 :	  42d4a2:       mov    %rdx,%rax
    0.00 :	  42d4a5:       sar    $0x4,%rax
    0.00 :	  42d4a9:       mov    %rax,%rdx
    0.00 :	  42d4ac:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4b0:       mov    (%rax),%rcx
    0.00 :	  42d4b3:       mov    -0x38(%rbp),%rax
         :	              _M_deallocate(this->_M_impl._M_start,
    0.00 :	  42d4b7:       mov    %rcx,%rsi
    0.00 :	  42d4ba:       mov    %rax,%rdi
    0.00 :	  42d4bd:       callq  42e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>
         :	              this->_M_impl._M_start = __tmp;
    0.00 :	  42d4c2:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4c6:       mov    -0x30(%rbp),%rdx
    0.00 :	  42d4ca:       mov    %rdx,(%rax)
         :	              this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
    0.00 :	  42d4cd:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4d1:       mov    (%rax),%rax
    0.00 :	  42d4d4:       mov    -0x28(%rbp),%rdx
    0.00 :	  42d4d8:       shl    $0x4,%rdx
    0.00 :	  42d4dc:       add    %rax,%rdx
    0.00 :	  42d4df:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4e3:       mov    %rdx,0x10(%rax)
    0.00 :	  42d4e7:       jmpq   42d5ed <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x2eb>
         :	            }
         :	          else if (size() >= __xlen)
    1.36 :	  42d4ec:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4f0:       mov    %rax,%rdi
    0.00 :	  42d4f3:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42d4f8:       cmp    -0x28(%rbp),%rax
    0.00 :	  42d4fc:       setae  %al
    0.82 :	  42d4ff:       test   %al,%al
    0.00 :	  42d501:       je     42d56c <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x26a>
         :	            {
         :	              std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
         :	                            end(), _M_get_Tp_allocator());
    6.79 :	  42d503:       mov    -0x38(%rbp),%rax
    0.00 :	  42d507:       mov    %rax,%rdi
    0.00 :	  42d50a:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    1.63 :	  42d50f:       mov    %rax,%r12
    0.00 :	  42d512:       mov    -0x38(%rbp),%rax
    0.27 :	  42d516:       mov    %rax,%rdi
    0.00 :	  42d519:       callq  42e702 <std::vector<LLcol, std::allocator<LLcol> >::end()>
    2.99 :	  42d51e:       mov    %rax,%rbx
    0.00 :	  42d521:       mov    -0x38(%rbp),%rax
    1.63 :	  42d525:       mov    %rax,%rdi
    0.27 :	  42d528:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    1.90 :	  42d52d:       mov    %rax,%r14
    0.00 :	  42d530:       mov    -0x40(%rbp),%rax
    0.00 :	  42d534:       mov    %rax,%rdi
    0.00 :	  42d537:       callq  42e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>
    1.09 :	  42d53c:       mov    %rax,%r13
    0.00 :	  42d53f:       mov    -0x40(%rbp),%rax
    0.54 :	  42d543:       mov    %rax,%rdi
    0.00 :	  42d546:       callq  42e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>
    1.36 :	  42d54b:       mov    %r14,%rdx
    0.00 :	  42d54e:       mov    %r13,%rsi
    0.00 :	  42d551:       mov    %rax,%rdi
    0.00 :	  42d554:       callq  42e6bb <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	              std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
    1.63 :	  42d559:       mov    %r12,%rdx
    0.54 :	  42d55c:       mov    %rbx,%rsi
    0.00 :	  42d55f:       mov    %rax,%rdi
    0.00 :	  42d562:       callq  42e72b <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, std::allocator<LLcol>&)>
    0.54 :	  42d567:       jmpq   42d5ed <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x2eb>
         :	            }
         :	          else
         :	            {
         :	              std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
         :	                        this->_M_impl._M_start);
    0.00 :	  42d56c:       mov    -0x38(%rbp),%rax
    0.00 :	  42d570:       mov    (%rax),%rbx
    0.00 :	  42d573:       mov    -0x40(%rbp),%rax
    0.00 :	  42d577:       mov    (%rax),%r12
         :	              std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
    0.00 :	  42d57a:       mov    -0x38(%rbp),%rax
    0.00 :	  42d57e:       mov    %rax,%rdi
    0.00 :	  42d581:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
         :	                        this->_M_impl._M_start);
    0.00 :	  42d586:       shl    $0x4,%rax
    0.00 :	  42d58a:       lea    (%r12,%rax,1),%rcx
    0.00 :	  42d58e:       mov    -0x40(%rbp),%rax
    0.00 :	  42d592:       mov    (%rax),%rax
         :	              std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
    0.00 :	  42d595:       mov    %rbx,%rdx
    0.00 :	  42d598:       mov    %rcx,%rsi
    0.00 :	  42d59b:       mov    %rax,%rdi
    0.00 :	  42d59e:       callq  42e754 <LLcol* std::copy<LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>
         :	              std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
         :	                                          __x._M_impl._M_finish,
         :	                                          this->_M_impl._M_finish,
         :	                                          _M_get_Tp_allocator());
    0.00 :	  42d5a3:       mov    -0x38(%rbp),%rax
    0.00 :	  42d5a7:       mov    %rax,%rdi
    0.00 :	  42d5aa:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d5af:       mov    %rax,%r13
    0.00 :	  42d5b2:       mov    -0x38(%rbp),%rax
    0.00 :	  42d5b6:       mov    0x8(%rax),%r12
    0.00 :	  42d5ba:       mov    -0x40(%rbp),%rax
    0.00 :	  42d5be:       mov    0x8(%rax),%rbx
    0.00 :	  42d5c2:       mov    -0x40(%rbp),%rax
    0.00 :	  42d5c6:       mov    (%rax),%r14
         :	              std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
    0.00 :	  42d5c9:       mov    -0x38(%rbp),%rax
    0.00 :	  42d5cd:       mov    %rax,%rdi
    0.00 :	  42d5d0:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
         :	                                          _M_get_Tp_allocator());
    0.00 :	  42d5d5:       shl    $0x4,%rax
    0.00 :	  42d5d9:       add    %r14,%rax
         :	              std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
    0.00 :	  42d5dc:       mov    %r13,%rcx
    0.00 :	  42d5df:       mov    %r12,%rdx
    0.00 :	  42d5e2:       mov    %rbx,%rsi
    0.00 :	  42d5e5:       mov    %rax,%rdi
    0.00 :	  42d5e8:       callq  42e79a <LLcol* std::__uninitialized_copy_a<LLcol*, LLcol*, LLcol>(LLcol*, LLcol*, LLcol*, std::allocator<LLcol>&)>
         :	            }
         :	          this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    1.36 :	  42d5ed:       mov    -0x38(%rbp),%rax
    0.27 :	  42d5f1:       mov    (%rax),%rax
   24.46 :	  42d5f4:       mov    -0x28(%rbp),%rdx
    0.00 :	  42d5f8:       shl    $0x4,%rdx
    0.00 :	  42d5fc:       add    %rax,%rdx
    0.54 :	  42d5ff:       mov    -0x38(%rbp),%rax
    0.00 :	  42d603:       mov    %rdx,0x8(%rax)
         :	        }
         :	      return *this;
    2.17 :	  42d607:       mov    -0x38(%rbp),%rax
         :	    }
    0.00 :	  42d60b:       add    $0x20,%rsp
    0.27 :	  42d60f:       pop    %rbx
    1.09 :	  42d610:       pop    %r12
    0.27 :	  42d612:       pop    %r13
    0.00 :	  42d614:       pop    %r14
    0.00 :	  42d616:       pop    %rbp
    1.90 :	  42d617:       retq
 Percent |	Source code & Disassembly of main for cycles:u (360 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ea06 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::__distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, std::random_access_iterator_tag)>:
         :	_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag():
         :	      return __n;
         :	    }
         :
         :	  template<typename _RandomAccessIterator>
         :	    inline typename iterator_traits<_RandomAccessIterator>::difference_type
         :	    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   13.06 :	  42ea06:       push   %rbp
    6.67 :	  42ea07:       mov    %rsp,%rbp
   15.83 :	  42ea0a:       sub    $0x20,%rsp
    0.83 :	  42ea0e:       mov    %rdi,-0x10(%rbp)
   10.28 :	  42ea12:       mov    %rsi,-0x20(%rbp)
         :	               random_access_iterator_tag)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_RandomAccessIteratorConcept<
         :	                                  _RandomAccessIterator>)
         :	      return __last - __first;
    5.56 :	  42ea16:       lea    -0x10(%rbp),%rdx
    7.78 :	  42ea1a:       lea    -0x20(%rbp),%rax
    0.28 :	  42ea1e:       mov    %rdx,%rsi
    7.50 :	  42ea21:       mov    %rax,%rdi
    5.56 :	  42ea24:       callq  42f8c4 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type __gnu_cxx::operator-<double*, std::vector<double, std::allocator<double> > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
         :	    }
    0.00 :	  42ea29:       leaveq
   26.67 :	  42ea2a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (355 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d7af <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)>:
         :	_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEiEvRT_T0_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator, typename _Distance>
         :	    inline void
         :	    advance(_InputIterator& __i, _Distance __n)
    0.00 :	  42d7af:       push   %rbp
    0.00 :	  42d7b0:       mov    %rsp,%rbp
   12.39 :	  42d7b3:       push   %rbx
    0.00 :	  42d7b4:       sub    $0x38,%rsp
   11.27 :	  42d7b8:       mov    %rdi,-0x28(%rbp)
    0.00 :	  42d7bc:       mov    %esi,-0x2c(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __advance
         :	      typename iterator_traits<_InputIterator>::difference_type __d = __n;
    0.00 :	  42d7bf:       mov    -0x2c(%rbp),%eax
    2.25 :	  42d7c2:       cltq
   12.68 :	  42d7c4:       mov    %rax,-0x18(%rbp)
         :	      std::__advance(__i, __d, std::__iterator_category(__i));
    0.00 :	  42d7c8:       mov    -0x28(%rbp),%rax
    0.00 :	  42d7cc:       mov    %rax,%rdi
    0.00 :	  42d7cf:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.28 :	  42d7d4:       mov    -0x18(%rbp),%rdx
   16.90 :	  42d7d8:       mov    -0x28(%rbp),%rax
    0.00 :	  42d7dc:       mov    %bl,(%rsp)
    0.00 :	  42d7df:       mov    %rdx,%rsi
   12.68 :	  42d7e2:       mov    %rax,%rdi
    0.00 :	  42d7e5:       callq  42e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>
         :	    }
    0.56 :	  42d7ea:       jmp    42d7f4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)+0x45>
    0.00 :	  42d7ec:       mov    %rax,%rdi
    0.00 :	  42d7ef:       callq  41dda0 <_Unwind_Resume@plt>
   15.77 :	  42d7f4:       add    $0x38,%rsp
    0.00 :	  42d7f8:       pop    %rbx
    0.28 :	  42d7f9:       pop    %rbp
   14.93 :	  42d7fa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (343 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004251f6 <LLord* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>:
         :	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_():
         :	   *
         :	   *  Like copy(), but does not require an initialized output range.
         :	  */
         :	  template<typename _InputIterator, typename _ForwardIterator>
         :	    inline _ForwardIterator
         :	    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    1.46 :	  4251f6:       push   %rbp
    0.29 :	  4251f7:       mov    %rsp,%rbp
    1.75 :	  4251fa:       sub    $0x20,%rsp
    0.87 :	  4251fe:       mov    %rdi,-0x10(%rbp)
    0.58 :	  425202:       mov    %rsi,-0x20(%rbp)
    0.29 :	  425206:       mov    %rdx,-0x18(%rbp)
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType2;
         :
         :	      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
         :	                                        && __is_trivial(_ValueType2))>::
         :	        __uninit_copy(__first, __last, __result);
    0.29 :	  42520a:       mov    -0x18(%rbp),%rdx
    1.46 :	  42520e:       mov    -0x20(%rbp),%rcx
    0.29 :	  425212:       mov    -0x10(%rbp),%rax
    2.04 :	  425216:       mov    %rcx,%rsi
    0.00 :	  425219:       mov    %rax,%rdi
    0.29 :	  42521c:       callq  426e7c <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>
         :	    }
    7.29 :	  425221:       leaveq
   83.09 :	  425222:       retq
 Percent |	Source code & Disassembly of main for cycles:u (333 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>:
         :	_ZNSt16allocator_traitsISaIiEE9constructIiIRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_():
         :	       *  if that expression is well-formed, otherwise uses placement-new
         :	       *  to construct an object of type @a _Tp at location @a __p from the
         :	       *  arguments @a __args...
         :	      */
         :	      template<typename _Tp, typename... _Args>
         :	        static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   10.81 :	  422904:       push   %rbp
    0.60 :	  422905:       mov    %rsp,%rbp
    7.81 :	  422908:       sub    $0x20,%rsp
    6.61 :	  42290c:       mov    %rdi,-0x8(%rbp)
    0.30 :	  422910:       mov    %rsi,-0x10(%rbp)
    3.90 :	  422914:       mov    %rdx,-0x18(%rbp)
         :	        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
         :	        { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    6.61 :	  422918:       mov    -0x18(%rbp),%rax
    5.11 :	  42291c:       mov    %rax,%rdi
    0.30 :	  42291f:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    6.91 :	  422924:       mov    %rax,%rdx
    6.31 :	  422927:       mov    -0x10(%rbp),%rcx
    6.61 :	  42292b:       mov    -0x8(%rbp),%rax
    0.00 :	  42292f:       mov    %rcx,%rsi
    6.01 :	  422932:       mov    %rax,%rdi
    5.41 :	  422935:       callq  424fee <std::enable_if<std::allocator_traits<std::allocator<int> >::__construct_helper<int<int const&> >::value, void>::type std::allocator_traits<std::allocator<int> >::_S_construct<int, int const&>(std::allocator<int>&, int*, int const&)>
    3.90 :	  42293a:       leaveq
   22.82 :	  42293b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (328 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042667a <__gnu_cxx::new_allocator<LLord>::deallocate(LLord*, unsigned long)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordE10deallocateEPS1_m():
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
         :	      }
         :
         :	      // __p is not permitted to be a null pointer.
         :	      void
         :	      deallocate(pointer __p, size_type)
   67.38 :	  42667a:       push   %rbp
   14.33 :	  42667b:       mov    %rsp,%rbp
    0.00 :	  42667e:       sub    $0x20,%rsp
    0.00 :	  426682:       mov    %rdi,-0x8(%rbp)
   11.59 :	  426686:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42668a:       mov    %rdx,-0x18(%rbp)
         :	      { ::operator delete(__p); }
    1.83 :	  42668e:       mov    -0x10(%rbp),%rax
    0.00 :	  426692:       mov    %rax,%rdi
    0.00 :	  426695:       callq  41db20 <operator delete(void*)@plt>
    1.22 :	  42669a:       leaveq
    3.66 :	  42669b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (321 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041f8f4 <LLMatOrd::~LLMatOrd()>:
         :	_ZN8LLMatOrdD2Ev():
         :	    LLord(Tind row, Tind next, Tval val):row(row), next(next), val(val){}
         :	};
         :
         :	std::vector<Tind> invperm(std::vector<Tind> &perm);
         :
         :	struct LLMatOrd{
   57.63 :	  41f8f4:       push   %rbp
   17.45 :	  41f8f5:       mov    %rsp,%rbp
    0.00 :	  41f8f8:       sub    $0x10,%rsp
    0.00 :	  41f8fc:       mov    %rdi,-0x8(%rbp)
    4.67 :	  41f900:       mov    -0x8(%rbp),%rax
    5.92 :	  41f904:       add    $0x20,%rax
    3.12 :	  41f908:       mov    %rax,%rdi
    0.00 :	  41f90b:       callq  4203ee <std::vector<LLord, std::allocator<LLord> >::~vector()>
    3.12 :	  41f910:       mov    -0x8(%rbp),%rax
    3.74 :	  41f914:       add    $0x8,%rax
    1.25 :	  41f918:       mov    %rax,%rdi
    0.00 :	  41f91b:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.62 :	  41f920:       leaveq
    2.49 :	  41f921:       retq
 Percent |	Source code & Disassembly of main for cycles:u (318 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424fee <std::enable_if<std::allocator_traits<std::allocator<int> >::__construct_helper<int<int const&> >::value, void>::type std::allocator_traits<std::allocator<int> >::_S_construct<int, int const&>(std::allocator<int>&, int*, int const&)>:
         :	_ZNSt16allocator_traitsISaIiEE12_S_constructIiIRKiEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_():
         :	        };
         :
         :	      template<typename _Tp, typename... _Args>
         :	        static typename
         :	        enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
         :	        _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    6.60 :	  424fee:       push   %rbp
    5.97 :	  424fef:       mov    %rsp,%rbp
   11.95 :	  424ff2:       sub    $0x20,%rsp
    0.31 :	  424ff6:       mov    %rdi,-0x8(%rbp)
    5.35 :	  424ffa:       mov    %rsi,-0x10(%rbp)
    5.03 :	  424ffe:       mov    %rdx,-0x18(%rbp)
         :	        { __a.construct(__p, std::forward<_Args>(__args)...); }
    7.55 :	  425002:       mov    -0x18(%rbp),%rax
    1.57 :	  425006:       mov    %rax,%rdi
    5.66 :	  425009:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    3.77 :	  42500e:       mov    %rax,%rdx
    4.72 :	  425011:       mov    -0x10(%rbp),%rcx
    2.52 :	  425015:       mov    -0x8(%rbp),%rax
    6.60 :	  425019:       mov    %rcx,%rsi
    5.66 :	  42501c:       mov    %rax,%rdi
    5.03 :	  42501f:       callq  426d7a <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)>
    4.09 :	  425024:       leaveq
   17.61 :	  425025:       retq
 Percent |	Source code & Disassembly of main for cycles:u (304 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431555 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
         :	_ZNSt8__detail5__modImLm2147483647ELm16807ELm0EEET_S1_():
         :	        }
         :	      };
         :
         :	    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
         :	      inline _Tp
         :	      __mod(_Tp __x)
    0.33 :	  431555:       push   %rbp
    0.00 :	  431556:       mov    %rsp,%rbp
   32.57 :	  431559:       sub    $0x10,%rsp
    0.00 :	  43155d:       mov    %rdi,-0x8(%rbp)
         :	      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }
    0.33 :	  431561:       mov    -0x8(%rbp),%rax
   29.93 :	  431565:       mov    %rax,%rdi
    1.97 :	  431568:       callq  4318ac <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
    0.99 :	  43156d:       leaveq
   33.88 :	  43156e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (293 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
   42.66 :	  422002:       push   %rbp
   15.70 :	  422003:       mov    %rsp,%rbp
    0.00 :	  422006:       sub    $0x10,%rsp
    0.00 :	  42200a:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    5.46 :	  42200e:       mov    -0x8(%rbp),%rax
    9.56 :	  422012:       mov    0x10(%rax),%rax
    8.53 :	  422016:       mov    %rax,%rdx
    0.00 :	  422019:       mov    -0x8(%rbp),%rax
    0.00 :	  42201d:       mov    (%rax),%rax
    1.02 :	  422020:       sub    %rax,%rdx
    2.39 :	  422023:       mov    %rdx,%rax
    0.34 :	  422026:       sar    $0x4,%rax
    1.37 :	  42202a:       mov    %rax,%rdx
    1.02 :	  42202d:       mov    -0x8(%rbp),%rax
    0.00 :	  422031:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  422034:       mov    -0x8(%rbp),%rax
    0.00 :	  422038:       mov    %rcx,%rsi
    1.02 :	  42203b:       mov    %rax,%rdi
    0.00 :	  42203e:       callq  4246d6 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_deallocate(LLord*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    3.41 :	  422043:       mov    -0x8(%rbp),%rax
    0.68 :	  422047:       mov    %rax,%rdi
    0.00 :	  42204a:       callq  421fce <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::~_Vector_impl()>
    2.05 :	  42204f:       leaveq
    4.78 :	  422050:       retq
 Percent |	Source code & Disassembly of main for cycles:u (291 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e8e <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES7_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    1.37 :	  430e8e:       push   %rbp
   19.59 :	  430e8f:       mov    %rsp,%rbp
    4.47 :	  430e92:       sub    $0x10,%rsp
    0.34 :	  430e96:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
   16.84 :	  430e9a:       lea    -0x10(%rbp),%rax
    1.72 :	  430e9e:       mov    %rax,%rdi
    0.69 :	  430ea1:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.34 :	  430ea6:       mov    (%rax),%rax
   50.17 :	  430ea9:       leaveq
    4.47 :	  430eaa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (291 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>:
         :	_ZNSt26linear_congruential_engineImLm16807ELm0ELm2147483647EE3minEv():
         :	       *
         :	       * The minimum depends on the @p __c parameter: if it is zero, the
         :	       * minimum generated must be > 0, otherwise 0 is allowed.
         :	       */
         :	      static constexpr result_type
         :	      min()
   56.36 :	  43066c:       push   %rbp
    0.00 :	  43066d:       mov    %rsp,%rbp
         :	      { return __c == 0u ? 1u : 0u; }
   29.21 :	  430670:       mov    $0x1,%eax
   14.43 :	  430675:       pop    %rbp
    0.00 :	  430676:       retq
 Percent |	Source code & Disassembly of main for cycles:u (288 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e23d <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEElPFbRKS2_S9_EEvT_SC_T0_T1_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
         :	    void
         :	    __introsort_loop(_RandomAccessIterator __first,
    4.17 :	  42e23d:       push   %rbp
    1.04 :	  42e23e:       mov    %rsp,%rbp
    0.00 :	  42e241:       sub    $0x30,%rsp
    2.78 :	  42e245:       mov    %rdi,-0x20(%rbp)
    2.78 :	  42e249:       mov    %rsi,-0x30(%rbp)
    0.00 :	  42e24d:       mov    %rdx,-0x28(%rbp)
    0.69 :	  42e251:       mov    %rcx,-0x18(%rbp)
         :	                     _RandomAccessIterator __last,
         :	                     _Size __depth_limit, _Compare __comp)
         :	    {
         :	      while (__last - __first > int(_S_threshold))
    5.21 :	  42e255:       jmp    42e2b8 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))+0x7b>
         :	        {
         :	          if (__depth_limit == 0)
   10.42 :	  42e257:       cmpq   $0x0,-0x28(%rbp)
   10.42 :	  42e25c:       jne    42e278 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))+0x3b>
         :	            {
         :	              _GLIBCXX_STD_A::partial_sort(__first, __last, __last, __comp);
    0.00 :	  42e25e:       mov    -0x18(%rbp),%rcx
    0.00 :	  42e262:       mov    -0x30(%rbp),%rdx
    0.00 :	  42e266:       mov    -0x30(%rbp),%rsi
    0.00 :	  42e26a:       mov    -0x20(%rbp),%rax
    0.00 :	  42e26e:       mov    %rax,%rdi
    0.00 :	  42e271:       callq  42f1b4 <void std::partial_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	              return;
    0.00 :	  42e276:       jmp    42e2e0 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))+0xa3>
         :	            }
         :	          --__depth_limit;
    1.74 :	  42e278:       subq   $0x1,-0x28(%rbp)
         :	          _RandomAccessIterator __cut =
         :	            std::__unguarded_partition_pivot(__first, __last, __comp);
    3.82 :	  42e27d:       mov    -0x18(%rbp),%rdx
    1.39 :	  42e281:       mov    -0x30(%rbp),%rcx
    0.69 :	  42e285:       mov    -0x20(%rbp),%rax
    0.00 :	  42e289:       mov    %rcx,%rsi
    0.00 :	  42e28c:       mov    %rax,%rdi
    1.04 :	  42e28f:       callq  42f1fd <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
    3.12 :	  42e294:       mov    %rax,-0x10(%rbp)
         :	          std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   11.81 :	  42e298:       mov    -0x18(%rbp),%rcx
    0.00 :	  42e29c:       mov    -0x28(%rbp),%rdx
    0.00 :	  42e2a0:       mov    -0x30(%rbp),%rsi
    0.00 :	  42e2a4:       mov    -0x10(%rbp),%rax
    2.43 :	  42e2a8:       mov    %rax,%rdi
    0.00 :	  42e2ab:       callq  42e23d <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))>
         :	          __last = __cut;
    0.69 :	  42e2b0:       mov    -0x10(%rbp),%rax
    0.00 :	  42e2b4:       mov    %rax,-0x30(%rbp)
         :	      while (__last - __first > int(_S_threshold))
    2.78 :	  42e2b8:       lea    -0x20(%rbp),%rdx
    1.74 :	  42e2bc:       lea    -0x30(%rbp),%rax
    1.74 :	  42e2c0:       mov    %rdx,%rsi
    3.12 :	  42e2c3:       mov    %rax,%rdi
    2.08 :	  42e2c6:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    1.74 :	  42e2cb:       cmp    $0x10,%rax
    0.00 :	  42e2cf:       setg   %al
    5.56 :	  42e2d2:       test   %al,%al
    0.00 :	  42e2d4:       jne    42e257 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))+0x1a>
         :	              return;
    5.90 :	  42e2d6:       jmp    42e2e0 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))+0xa3>
    0.00 :	  42e2d8:       mov    %rax,%rdi
    0.00 :	  42e2db:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
         :	    }
    4.17 :	  42e2e0:       leaveq
    6.94 :	  42e2e1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (284 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ea2b <decltype (_S_construct({parm#1}, {parm#2}, (forward<double const&>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double const&>(std::allocator<double>&, double*, double const&)>:
         :	_ZNSt16allocator_traitsISaIdEE9constructIdIRKdEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_():
         :	       *  if that expression is well-formed, otherwise uses placement-new
         :	       *  to construct an object of type @a _Tp at location @a __p from the
         :	       *  arguments @a __args...
         :	      */
         :	      template<typename _Tp, typename... _Args>
         :	        static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    3.87 :	  42ea2b:       push   %rbp
    0.00 :	  42ea2c:       mov    %rsp,%rbp
   10.56 :	  42ea2f:       sub    $0x20,%rsp
    5.28 :	  42ea33:       mov    %rdi,-0x8(%rbp)
    0.35 :	  42ea37:       mov    %rsi,-0x10(%rbp)
   14.44 :	  42ea3b:       mov    %rdx,-0x18(%rbp)
         :	        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
         :	        { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    0.00 :	  42ea3f:       mov    -0x18(%rbp),%rax
    2.11 :	  42ea43:       mov    %rax,%rdi
    0.35 :	  42ea46:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
   13.73 :	  42ea4b:       mov    %rax,%rdx
    0.70 :	  42ea4e:       mov    -0x10(%rbp),%rcx
    7.39 :	  42ea52:       mov    -0x8(%rbp),%rax
    0.00 :	  42ea56:       mov    %rcx,%rsi
   10.92 :	  42ea59:       mov    %rax,%rdi
    0.00 :	  42ea5c:       callq  42f907 <std::enable_if<std::allocator_traits<std::allocator<double> >::__construct_helper<double<double const&> >::value, void>::type std::allocator_traits<std::allocator<double> >::_S_construct<double, double const&>(std::allocator<double>&, double*, double const&)>
    4.23 :	  42ea61:       leaveq
   26.06 :	  42ea62:       retq
 Percent |	Source code & Disassembly of main for cycles:u (280 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430eab <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)>:
         :	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5LLcolEEPT_PKS4_S7_S5_():
         :	  template<bool _IsMove>
         :	    struct __copy_move<_IsMove, true, random_access_iterator_tag>
         :	    {
         :	      template<typename _Tp>
         :	        static _Tp*
         :	        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    2.14 :	  430eab:       push   %rbp
    1.79 :	  430eac:       mov    %rsp,%rbp
    1.43 :	  430eaf:       sub    $0x30,%rsp
    0.00 :	  430eb3:       mov    %rdi,-0x18(%rbp)
    4.29 :	  430eb7:       mov    %rsi,-0x20(%rbp)
    1.79 :	  430ebb:       mov    %rdx,-0x28(%rbp)
         :	        {
         :	          const ptrdiff_t _Num = __last - __first;
    1.79 :	  430ebf:       mov    -0x20(%rbp),%rdx
    7.14 :	  430ec3:       mov    -0x18(%rbp),%rax
    2.50 :	  430ec7:       sub    %rax,%rdx
    4.29 :	  430eca:       mov    %rdx,%rax
    0.00 :	  430ecd:       sar    $0x4,%rax
    2.14 :	  430ed1:       mov    %rax,-0x8(%rbp)
         :	          if (_Num)
    2.86 :	  430ed5:       cmpq   $0x0,-0x8(%rbp)
   22.14 :	  430eda:       je     430efa <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)+0x4f>
         :	            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    2.50 :	  430edc:       mov    -0x8(%rbp),%rax
    0.00 :	  430ee0:       shl    $0x4,%rax
    1.07 :	  430ee4:       mov    %rax,%rdx
    0.00 :	  430ee7:       mov    -0x18(%rbp),%rcx
    2.86 :	  430eeb:       mov    -0x28(%rbp),%rax
    0.00 :	  430eef:       mov    %rcx,%rsi
    0.71 :	  430ef2:       mov    %rax,%rdi
    0.00 :	  430ef5:       callq  41dc60 <memmove@plt>
         :	          return __result + _Num;
   21.79 :	  430efa:       mov    -0x8(%rbp),%rax
    5.71 :	  430efe:       shl    $0x4,%rax
    1.07 :	  430f02:       mov    %rax,%rdx
    1.43 :	  430f05:       mov    -0x28(%rbp),%rax
    4.29 :	  430f09:       add    %rdx,%rax
         :	        }
    0.00 :	  430f0c:       leaveq
    4.29 :	  430f0d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (279 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f830 <std::uniform_real_distribution<double>::param_type::a() const>:
         :	_ZNKSt25uniform_real_distributionIdE10param_type1aEv():
         :	        {
         :	          _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);
         :	        }
         :
         :	        result_type
         :	        a() const
   12.19 :	  42f830:       push   %rbp
   17.20 :	  42f831:       mov    %rsp,%rbp
    0.00 :	  42f834:       mov    %rdi,-0x8(%rbp)
         :	        { return _M_a; }
   15.05 :	  42f838:       mov    -0x8(%rbp),%rax
   12.90 :	  42f83c:       mov    (%rax),%rax
    0.00 :	  42f83f:       mov    %rax,-0x10(%rbp)
    0.00 :	  42f843:       vmovsd -0x10(%rbp),%xmm0
   22.22 :	  42f848:       pop    %rbp
   20.43 :	  42f849:       retq
 Percent |	Source code & Disassembly of main for cycles:u (277 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>:
         :	_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim():
         :	      pointer
         :	      _M_allocate(size_t __n)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
         :
         :	      void
         :	      _M_deallocate(pointer __p, size_t __n)
   57.40 :	  42307c:       push   %rbp
   19.86 :	  42307d:       mov    %rsp,%rbp
    0.00 :	  423080:       sub    $0x20,%rsp
    0.00 :	  423084:       mov    %rdi,-0x8(%rbp)
   11.91 :	  423088:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42308c:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__p)
    0.36 :	  423090:       cmpq   $0x0,-0x10(%rbp)
    1.08 :	  423095:       je     4230ae <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)+0x32>
         :	          _M_impl.deallocate(__p, __n);
    1.44 :	  423097:       mov    -0x8(%rbp),%rax
    0.36 :	  42309b:       mov    -0x18(%rbp),%rdx
    1.08 :	  42309f:       mov    -0x10(%rbp),%rcx
    0.00 :	  4230a3:       mov    %rcx,%rsi
    1.44 :	  4230a6:       mov    %rax,%rdi
    0.00 :	  4230a9:       callq  4255bc <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long)>
         :	      }
    0.72 :	  4230ae:       leaveq
    4.33 :	  4230af:       retq
 Percent |	Source code & Disassembly of main for cycles:u (277 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f907 <std::enable_if<std::allocator_traits<std::allocator<double> >::__construct_helper<double<double const&> >::value, void>::type std::allocator_traits<std::allocator<double> >::_S_construct<double, double const&>(std::allocator<double>&, double*, double const&)>:
         :	_ZNSt16allocator_traitsISaIdEE12_S_constructIdIRKdEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_():
         :	        };
         :
         :	      template<typename _Tp, typename... _Args>
         :	        static typename
         :	        enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
         :	        _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    2.89 :	  42f907:       push   %rbp
   15.52 :	  42f908:       mov    %rsp,%rbp
    1.81 :	  42f90b:       sub    $0x20,%rsp
    0.00 :	  42f90f:       mov    %rdi,-0x8(%rbp)
   14.44 :	  42f913:       mov    %rsi,-0x10(%rbp)
    0.36 :	  42f917:       mov    %rdx,-0x18(%rbp)
         :	        { __a.construct(__p, std::forward<_Args>(__args)...); }
    3.61 :	  42f91b:       mov    -0x18(%rbp),%rax
    0.72 :	  42f91f:       mov    %rax,%rdi
   13.72 :	  42f922:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
    0.00 :	  42f927:       mov    %rax,%rdx
    1.08 :	  42f92a:       mov    -0x10(%rbp),%rcx
   10.83 :	  42f92e:       mov    -0x8(%rbp),%rax
    8.30 :	  42f932:       mov    %rcx,%rsi
    0.00 :	  42f935:       mov    %rax,%rdi
    2.89 :	  42f938:       callq  43087c <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)>
    3.97 :	  42f93d:       leaveq
   19.86 :	  42f93e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (263 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004302ee <bool __gnu_cxx::operator==<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxeqIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() == __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   22.43 :	  4302ee:       push   %rbp
    8.75 :	  4302ef:       mov    %rsp,%rbp
    1.14 :	  4302f2:       push   %rbx
    9.89 :	  4302f3:       sub    $0x18,%rsp
    1.52 :	  4302f7:       mov    %rdi,-0x18(%rbp)
    1.90 :	  4302fb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() == __rhs.base(); }
    7.60 :	  4302ff:       mov    -0x18(%rbp),%rax
    3.42 :	  430303:       mov    %rax,%rdi
    0.38 :	  430306:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  43030b:       mov    (%rax),%rbx
   10.27 :	  43030e:       mov    -0x20(%rbp),%rax
    0.00 :	  430312:       mov    %rax,%rdi
    1.14 :	  430315:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  43031a:       mov    (%rax),%rax
   18.25 :	  43031d:       cmp    %rax,%rbx
    4.56 :	  430320:       sete   %al
    3.04 :	  430323:       add    $0x18,%rsp
    0.00 :	  430327:       pop    %rbx
    0.00 :	  430328:       pop    %rbp
    5.70 :	  430329:       retq
 Percent |	Source code & Disassembly of main for cycles:u (255 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e510 <LLcol* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, LLcol>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, std::allocator<LLcol>&)>:
         :	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E():
         :	        }
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         :	    inline _ForwardIterator
         :	    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    0.00 :	  42e510:       push   %rbp
    0.00 :	  42e511:       mov    %rsp,%rbp
    3.92 :	  42e514:       sub    $0x20,%rsp
    1.96 :	  42e518:       mov    %rdi,-0x10(%rbp)
    3.14 :	  42e51c:       mov    %rsi,-0x20(%rbp)
    4.71 :	  42e520:       mov    %rdx,-0x18(%rbp)
    0.78 :	  42e524:       mov    %rcx,-0x8(%rbp)
         :	                           _ForwardIterator __result, allocator<_Tp>&)
         :	    { return std::uninitialized_copy(__first, __last, __result); }
    0.00 :	  42e528:       mov    -0x18(%rbp),%rdx
    0.00 :	  42e52c:       mov    -0x20(%rbp),%rcx
    0.78 :	  42e530:       mov    -0x10(%rbp),%rax
    1.96 :	  42e534:       mov    %rcx,%rsi
    0.00 :	  42e537:       mov    %rax,%rdi
    0.78 :	  42e53a:       callq  42f5bc <LLcol* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>
    5.10 :	  42e53f:       leaveq
   76.86 :	  42e540:       retq
 Percent |	Source code & Disassembly of main for cycles:u (253 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042212e <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)>:
         :	_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_():
         :
         :	      _Vector_base(size_t __n)
         :	      : _M_impl()
         :	      { _M_create_storage(__n); }
         :
         :	      _Vector_base(size_t __n, const allocator_type& __a)
    0.00 :	  42212e:       push   %rbp
    0.00 :	  42212f:       mov    %rsp,%rbp
    4.35 :	  422132:       push   %rbx
    4.35 :	  422133:       sub    $0x28,%rsp
   66.01 :	  422137:       mov    %rdi,-0x18(%rbp)
    6.32 :	  42213b:       mov    %rsi,-0x20(%rbp)
    7.51 :	  42213f:       mov    %rdx,-0x28(%rbp)
         :	      : _M_impl(__a)
    0.00 :	  422143:       mov    -0x18(%rbp),%rax
    1.19 :	  422147:       mov    -0x28(%rbp),%rdx
    1.19 :	  42214b:       mov    %rdx,%rsi
    0.00 :	  42214e:       mov    %rax,%rdi
    0.40 :	  422151:       callq  424950 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)>
         :	      { _M_create_storage(__n); }
    0.00 :	  422156:       mov    -0x20(%rbp),%rdx
    3.16 :	  42215a:       mov    -0x18(%rbp),%rax
    0.00 :	  42215e:       mov    %rdx,%rsi
    0.00 :	  422161:       mov    %rax,%rdi
    0.00 :	  422164:       callq  424998 <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>
    1.19 :	  422169:       jmp    422185 <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)+0x57>
    0.00 :	  42216b:       mov    %rax,%rbx
         :	      : _M_impl(__a)
    0.00 :	  42216e:       mov    -0x18(%rbp),%rax
    0.00 :	  422172:       mov    %rax,%rdi
    0.00 :	  422175:       callq  420dca <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42217a:       mov    %rbx,%rax
    0.00 :	  42217d:       mov    %rax,%rdi
    0.00 :	  422180:       callq  41dda0 <_Unwind_Resume@plt>
         :	      { _M_create_storage(__n); }
    2.77 :	  422185:       add    $0x28,%rsp
    0.00 :	  422189:       pop    %rbx
    0.40 :	  42218a:       pop    %rbp
    1.19 :	  42218b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (252 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042470a <void std::_Destroy<LLord*>(LLord*, LLord*)>:
         :	_ZSt8_DestroyIP5LLordEvT_S2_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   57.14 :	  42470a:       push   %rbp
   20.63 :	  42470b:       mov    %rsp,%rbp
    0.00 :	  42470e:       sub    $0x10,%rsp
    0.00 :	  424712:       mov    %rdi,-0x8(%rbp)
   12.70 :	  424716:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    0.00 :	  42471a:       mov    -0x10(%rbp),%rdx
    2.38 :	  42471e:       mov    -0x8(%rbp),%rax
    0.00 :	  424722:       mov    %rdx,%rsi
    0.00 :	  424725:       mov    %rax,%rdi
    0.79 :	  424728:       callq  42669c <void std::_Destroy_aux<true>::__destroy<LLord*>(LLord*, LLord*)>
         :	        __destroy(__first, __last);
         :	    }
    1.19 :	  42472d:       leaveq
    5.16 :	  42472e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (252 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES7_EvT_T0_():
         :	   *  This function swaps the values pointed to by two iterators, not the
         :	   *  iterators themselves.
         :	  */
         :	  template<typename _ForwardIterator1, typename _ForwardIterator2>
         :	    inline void
         :	    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    5.16 :	  430d60:       push   %rbp
    3.17 :	  430d61:       mov    %rsp,%rbp
   10.71 :	  430d64:       push   %rbx
    8.33 :	  430d65:       sub    $0x28,%rsp
   12.70 :	  430d69:       mov    %rdi,-0x20(%rbp)
    1.19 :	  430d6d:       mov    %rsi,-0x30(%rbp)
         :	      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
         :	        && __are_same<_ValueType1&, _ReferenceType1>::__value
         :	        && __are_same<_ValueType2&, _ReferenceType2>::__value>::
         :	        iter_swap(__a, __b);
         :	#else
         :	      swap(*__a, *__b);
    0.40 :	  430d71:       lea    -0x30(%rbp),%rax
    0.00 :	  430d75:       mov    %rax,%rdi
   12.30 :	  430d78:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  430d7d:       mov    %rax,%rbx
    1.59 :	  430d80:       lea    -0x20(%rbp),%rax
   12.70 :	  430d84:       mov    %rax,%rdi
    0.00 :	  430d87:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  430d8c:       mov    %rbx,%rsi
   13.49 :	  430d8f:       mov    %rax,%rdi
    2.38 :	  430d92:       callq  431411 <void std::swap<LLcol>(LLcol&, LLcol&)>
         :	#endif
         :	    }
    3.17 :	  430d97:       add    $0x28,%rsp
    0.40 :	  430d9b:       pop    %rbx
    8.73 :	  430d9c:       pop    %rbp
    3.57 :	  430d9d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (247 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseIiSaIiEED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
   24.29 :	  420dfe:       push   %rbp
   17.41 :	  420dff:       mov    %rsp,%rbp
    4.05 :	  420e02:       sub    $0x10,%rsp
    1.62 :	  420e06:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
   11.74 :	  420e0a:       mov    -0x8(%rbp),%rax
   11.74 :	  420e0e:       mov    0x10(%rax),%rax
   12.15 :	  420e12:       mov    %rax,%rdx
    0.00 :	  420e15:       mov    -0x8(%rbp),%rax
    0.00 :	  420e19:       mov    (%rax),%rax
    0.81 :	  420e1c:       sub    %rax,%rdx
    1.62 :	  420e1f:       mov    %rdx,%rax
    0.00 :	  420e22:       sar    $0x2,%rax
    2.83 :	  420e26:       mov    %rax,%rdx
    0.00 :	  420e29:       mov    -0x8(%rbp),%rax
    0.40 :	  420e2d:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  420e30:       mov    -0x8(%rbp),%rax
    0.81 :	  420e34:       mov    %rcx,%rsi
    2.02 :	  420e37:       mov    %rax,%rdi
    0.00 :	  420e3a:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    1.21 :	  420e3f:       mov    -0x8(%rbp),%rax
    2.02 :	  420e43:       mov    %rax,%rdi
    1.62 :	  420e46:       callq  420dca <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>
    2.02 :	  420e4b:       leaveq
    1.62 :	  420e4c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (247 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431488 <LLcol* std::__copy_move_backward_a<true, LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>:
         :	_ZSt22__copy_move_backward_aILb1EP5LLcolS1_ET1_T0_S3_S2_():
         :	        }
         :	    };
         :
         :	  template<bool _IsMove, typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
   14.17 :	  431488:       push   %rbp
   11.34 :	  431489:       mov    %rsp,%rbp
    4.86 :	  43148c:       sub    $0x30,%rsp
    0.00 :	  431490:       mov    %rdi,-0x18(%rbp)
   24.70 :	  431494:       mov    %rsi,-0x20(%rbp)
    3.24 :	  431498:       mov    %rdx,-0x28(%rbp)
         :	      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
         :	      typedef typename iterator_traits<_BI1>::iterator_category _Category;
         :	      const bool __simple = (__is_trivial(_ValueType1)
         :	                             && __is_pointer<_BI1>::__value
         :	                             && __is_pointer<_BI2>::__value
         :	                             && __are_same<_ValueType1, _ValueType2>::__value);
    3.24 :	  43149c:       movb   $0x1,-0x1(%rbp)
         :
         :	      return std::__copy_move_backward<_IsMove, __simple,
         :	                                       _Category>::__copy_move_b(__first,
         :	                                                                 __last,
         :	                                                                 __result);
    3.64 :	  4314a0:       mov    -0x28(%rbp),%rdx
    4.05 :	  4314a4:       mov    -0x20(%rbp),%rcx
    0.00 :	  4314a8:       mov    -0x18(%rbp),%rax
    2.43 :	  4314ac:       mov    %rcx,%rsi
    0.81 :	  4314af:       mov    %rax,%rdi
    3.24 :	  4314b2:       callq  4317ee <LLcol* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<LLcol>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    4.05 :	  4314b7:       leaveq
   20.24 :	  4314b8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (240 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004246d6 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_deallocate(LLord*, unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE13_M_deallocateEPS0_m():
         :	      pointer
         :	      _M_allocate(size_t __n)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
         :
         :	      void
         :	      _M_deallocate(pointer __p, size_t __n)
   52.92 :	  4246d6:       push   %rbp
   19.58 :	  4246d7:       mov    %rsp,%rbp
    0.00 :	  4246da:       sub    $0x20,%rsp
    0.00 :	  4246de:       mov    %rdi,-0x8(%rbp)
    7.50 :	  4246e2:       mov    %rsi,-0x10(%rbp)
    5.00 :	  4246e6:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__p)
    0.00 :	  4246ea:       cmpq   $0x0,-0x10(%rbp)
    2.50 :	  4246ef:       je     424708 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_deallocate(LLord*, unsigned long)+0x32>
         :	          _M_impl.deallocate(__p, __n);
    0.42 :	  4246f1:       mov    -0x8(%rbp),%rax
    0.83 :	  4246f5:       mov    -0x18(%rbp),%rdx
    1.25 :	  4246f9:       mov    -0x10(%rbp),%rcx
    0.00 :	  4246fd:       mov    %rcx,%rsi
    0.83 :	  424700:       mov    %rax,%rdi
    1.25 :	  424703:       callq  42667a <__gnu_cxx::new_allocator<LLord>::deallocate(LLord*, unsigned long)>
         :	      }
    3.33 :	  424708:       leaveq
    4.58 :	  424709:       retq
 Percent |	Source code & Disassembly of main for cycles:u (237 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>:
         :	_ZNSt6vectorI5LLcolSaIS0_EE5beginEv():
         :	       *  Returns a read/write iterator that points to the first
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      begin() _GLIBCXX_NOEXCEPT
    2.95 :	  42d0d6:       push   %rbp
    2.53 :	  42d0d7:       mov    %rsp,%rbp
    6.33 :	  42d0da:       sub    $0x20,%rsp
    1.69 :	  42d0de:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_start); }
   11.81 :	  42d0e2:       mov    -0x18(%rbp),%rdx
   11.39 :	  42d0e6:       lea    -0x10(%rbp),%rax
    2.53 :	  42d0ea:       mov    %rdx,%rsi
    2.11 :	  42d0ed:       mov    %rax,%rdi
    1.27 :	  42d0f0:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.42 :	  42d0f5:       mov    -0x10(%rbp),%rax
   55.70 :	  42d0f9:       leaveq
    1.27 :	  42d0fa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (230 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430d9e <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Miter_base<_Iterator>::iterator_type
         :	    __miter_base(_Iterator __it)
    2.61 :	  430d9e:       push   %rbp
   11.74 :	  430d9f:       mov    %rsp,%rbp
    2.17 :	  430da2:       sub    $0x10,%rsp
    3.04 :	  430da6:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Miter_base<_Iterator>::_S_base(__it); }
   13.91 :	  430daa:       mov    -0x10(%rbp),%rax
   45.65 :	  430dae:       mov    %rax,%rdi
    3.48 :	  430db1:       callq  43147a <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.43 :	  430db6:       leaveq
   16.96 :	  430db7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (229 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422060 <void std::_Destroy<LLord*, LLord>(LLord*, LLord*, std::allocator<LLord>&)>:
         :	_ZSt8_DestroyIP5LLordS0_EvT_S2_RSaIT0_E():
         :	        __traits::destroy(__alloc, std::__addressof(*__first));
         :	    }
         :
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    0.00 :	  422060:       push   %rbp
   15.72 :	  422061:       mov    %rsp,%rbp
    0.00 :	  422064:       sub    $0x20,%rsp
    0.00 :	  422068:       mov    %rdi,-0x8(%rbp)
   12.23 :	  42206c:       mov    %rsi,-0x10(%rbp)
    4.80 :	  422070:       mov    %rdx,-0x18(%rbp)
         :	             allocator<_Tp>&)
         :	    {
         :	      _Destroy(__first, __last);
    0.87 :	  422074:       mov    -0x10(%rbp),%rdx
    1.75 :	  422078:       mov    -0x8(%rbp),%rax
    0.00 :	  42207c:       mov    %rdx,%rsi
   47.16 :	  42207f:       mov    %rax,%rdi
    3.06 :	  422082:       callq  42470a <void std::_Destroy<LLord*>(LLord*, LLord*)>
         :	    }
    3.93 :	  422087:       leaveq
   10.48 :	  422088:       retq
 Percent |	Source code & Disassembly of main for cycles:u (229 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f816 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::_Adaptor(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
         :	_ZNSt8__detail8_AdaptorISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEdEC2ERS2_():
         :	    template<typename _Engine, typename _DInputType>
         :	      struct _Adaptor
         :	      {
         :
         :	      public:
         :	        _Adaptor(_Engine& __g)
   23.14 :	  42f816:       push   %rbp
    0.87 :	  42f817:       mov    %rsp,%rbp
    0.00 :	  42f81a:       mov    %rdi,-0x8(%rbp)
   19.21 :	  42f81e:       mov    %rsi,-0x10(%rbp)
         :	        : _M_g(__g) { }
    0.44 :	  42f822:       mov    -0x8(%rbp),%rax
    0.00 :	  42f826:       mov    -0x10(%rbp),%rdx
   31.88 :	  42f82a:       mov    %rdx,(%rax)
   21.83 :	  42f82d:       pop    %rbp
    2.62 :	  42f82e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (228 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeESA_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  4304fd:       push   %rbp
   15.35 :	  4304fe:       mov    %rsp,%rbp
    0.88 :	  430501:       sub    $0x10,%rsp
    0.44 :	  430505:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
   10.96 :	  430509:       mov    -0x10(%rbp),%rax
   34.21 :	  43050d:       mov    %rax,%rdi
    2.63 :	  430510:       callq  430e71 <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
   10.53 :	  430515:       leaveq
   25.00 :	  430516:       retq
 Percent |	Source code & Disassembly of main for cycles:u (228 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004207cc <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)>:
         :	_ZNSt6vectorIiSaIiEEC2ERKS1_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    1.75 :	  4207cc:       push   %rbp
    0.00 :	  4207cd:       mov    %rsp,%rbp
    0.00 :	  4207d0:       push   %r13
    1.32 :	  4207d2:       push   %r12
    0.00 :	  4207d4:       push   %rbx
    0.00 :	  4207d5:       sub    $0x28,%rsp
    3.95 :	  4207d9:       mov    %rdi,-0x38(%rbp)
    0.00 :	  4207dd:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.44 :	  4207e1:       mov    -0x40(%rbp),%rax
    2.19 :	  4207e5:       mov    %rax,%rdi
    2.19 :	  4207e8:       callq  422b50 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>
    0.00 :	  4207ed:       mov    %rax,%rdx
    0.00 :	  4207f0:       lea    -0x21(%rbp),%rax
    0.88 :	  4207f4:       mov    %rdx,%rsi
    1.32 :	  4207f7:       mov    %rax,%rdi
    0.00 :	  4207fa:       callq  422b26 <__gnu_cxx::__alloc_traits<std::allocator<int> >::_S_select_on_copy(std::allocator<int> const&)>
    3.95 :	  4207ff:       mov    -0x40(%rbp),%rax
    6.14 :	  420803:       mov    %rax,%rdi
    2.19 :	  420806:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  42080b:       mov    %rax,%rcx
    1.75 :	  42080e:       mov    -0x38(%rbp),%rax
    0.44 :	  420812:       lea    -0x21(%rbp),%rdx
    0.00 :	  420816:       mov    %rcx,%rsi
    0.00 :	  420819:       mov    %rax,%rdi
    2.63 :	  42081c:       callq  42212e <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)>
    0.00 :	  420821:       lea    -0x21(%rbp),%rax
    0.00 :	  420825:       mov    %rax,%rdi
    0.00 :	  420828:       callq  42048a <std::allocator<int>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    3.51 :	  42082d:       mov    -0x38(%rbp),%rax
    3.51 :	  420831:       mov    %rax,%rdi
    0.00 :	  420834:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  420839:       mov    %rax,%r13
    0.00 :	  42083c:       mov    -0x38(%rbp),%rax
    2.63 :	  420840:       mov    (%rax),%r12
    5.26 :	  420843:       mov    -0x40(%rbp),%rax
    0.00 :	  420847:       mov    %rax,%rdi
    0.00 :	  42084a:       callq  422b8e <std::vector<int, std::allocator<int> >::end() const>
    3.51 :	  42084f:       mov    %rax,%rbx
    0.00 :	  420852:       mov    -0x40(%rbp),%rax
    0.88 :	  420856:       mov    %rax,%rdi
    0.00 :	  420859:       callq  422b5e <std::vector<int, std::allocator<int> >::begin() const>
    0.88 :	  42085e:       mov    %r13,%rcx
    0.00 :	  420861:       mov    %r12,%rdx
    0.00 :	  420864:       mov    %rbx,%rsi
    0.00 :	  420867:       mov    %rax,%rdi
    1.32 :	  42086a:       callq  422bbf <int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&)>
         :	      { this->_M_impl._M_finish =
    8.33 :	  42086f:       mov    -0x38(%rbp),%rdx
    8.77 :	  420873:       mov    %rax,0x8(%rdx)
   28.07 :	  420877:       jmp    4208ad <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)+0xe1>
    0.00 :	  420879:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42087c:       lea    -0x21(%rbp),%rax
    0.00 :	  420880:       mov    %rax,%rdi
    0.00 :	  420883:       callq  42048a <std::allocator<int>::~allocator()>
    0.00 :	  420888:       mov    %rbx,%rax
    0.00 :	  42088b:       mov    %rax,%rdi
    0.00 :	  42088e:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  420893:       mov    %rax,%rbx
    0.00 :	  420896:       mov    -0x38(%rbp),%rax
    0.00 :	  42089a:       mov    %rax,%rdi
    0.00 :	  42089d:       callq  420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
    0.00 :	  4208a2:       mov    %rbx,%rax
    0.00 :	  4208a5:       mov    %rax,%rdi
    0.00 :	  4208a8:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  4208ad:       add    $0x28,%rsp
    0.00 :	  4208b1:       pop    %rbx
    0.88 :	  4208b2:       pop    %r12
    0.00 :	  4208b4:       pop    %r13
    1.32 :	  4208b6:       pop    %rbp
    0.00 :	  4208b7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (225 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d1bc <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEC2ERKS2_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    2.67 :	  42d1bc:       push   %rbp
    0.00 :	  42d1bd:       mov    %rsp,%rbp
    3.56 :	  42d1c0:       push   %r13
    0.89 :	  42d1c2:       push   %r12
    0.44 :	  42d1c4:       push   %rbx
    0.89 :	  42d1c5:       sub    $0x28,%rsp
    2.67 :	  42d1c9:       mov    %rdi,-0x38(%rbp)
    0.89 :	  42d1cd:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    1.78 :	  42d1d1:       mov    -0x40(%rbp),%rax
    5.33 :	  42d1d5:       mov    %rax,%rdi
    0.00 :	  42d1d8:       callq  42e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>
    0.00 :	  42d1dd:       mov    %rax,%rdx
    0.00 :	  42d1e0:       lea    -0x21(%rbp),%rax
    3.11 :	  42d1e4:       mov    %rdx,%rsi
    0.00 :	  42d1e7:       mov    %rax,%rdi
    0.00 :	  42d1ea:       callq  42e3a0 <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_select_on_copy(std::allocator<LLcol> const&)>
    7.56 :	  42d1ef:       mov    -0x40(%rbp),%rax
    5.33 :	  42d1f3:       mov    %rax,%rdi
    0.00 :	  42d1f6:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42d1fb:       mov    %rax,%rcx
    0.00 :	  42d1fe:       mov    -0x38(%rbp),%rax
    3.56 :	  42d202:       lea    -0x21(%rbp),%rdx
    0.00 :	  42d206:       mov    %rcx,%rsi
    0.00 :	  42d209:       mov    %rax,%rdi
    0.00 :	  42d20c:       callq  42e3f2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_base(unsigned long, std::allocator<LLcol> const&)>
    0.00 :	  42d211:       lea    -0x21(%rbp),%rax
    0.00 :	  42d215:       mov    %rax,%rdi
    0.00 :	  42d218:       callq  42d632 <std::allocator<LLcol>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    2.22 :	  42d21d:       mov    -0x38(%rbp),%rax
    3.56 :	  42d221:       mov    %rax,%rdi
    0.00 :	  42d224:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d229:       mov    %rax,%r13
    0.89 :	  42d22c:       mov    -0x38(%rbp),%rax
    2.67 :	  42d230:       mov    (%rax),%r12
    5.78 :	  42d233:       mov    -0x40(%rbp),%rax
    0.00 :	  42d237:       mov    %rax,%rdi
    0.89 :	  42d23a:       callq  42e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>
    3.11 :	  42d23f:       mov    %rax,%rbx
    0.00 :	  42d242:       mov    -0x40(%rbp),%rax
    0.44 :	  42d246:       mov    %rax,%rdi
    0.00 :	  42d249:       callq  42e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>
    0.89 :	  42d24e:       mov    %r13,%rcx
    0.89 :	  42d251:       mov    %r12,%rdx
    0.00 :	  42d254:       mov    %rbx,%rsi
    0.00 :	  42d257:       mov    %rax,%rdi
    0.89 :	  42d25a:       callq  42e510 <LLcol* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, LLcol>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, std::allocator<LLcol>&)>
         :	      { this->_M_impl._M_finish =
    6.22 :	  42d25f:       mov    -0x38(%rbp),%rdx
   12.00 :	  42d263:       mov    %rax,0x8(%rdx)
   14.67 :	  42d267:       jmp    42d29d <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)+0xe1>
    0.00 :	  42d269:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42d26c:       lea    -0x21(%rbp),%rax
    0.00 :	  42d270:       mov    %rax,%rdi
    0.00 :	  42d273:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42d278:       mov    %rbx,%rax
    0.00 :	  42d27b:       mov    %rax,%rdi
    0.00 :	  42d27e:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42d283:       mov    %rax,%rbx
    0.00 :	  42d286:       mov    -0x38(%rbp),%rax
    0.00 :	  42d28a:       mov    %rax,%rdi
    0.00 :	  42d28d:       callq  42e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>
    0.00 :	  42d292:       mov    %rbx,%rax
    0.00 :	  42d295:       mov    %rax,%rdi
    0.00 :	  42d298:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  42d29d:       add    $0x28,%rsp
    0.00 :	  42d2a1:       pop    %rbx
    3.11 :	  42d2a2:       pop    %r12
    2.22 :	  42d2a4:       pop    %r13
    0.00 :	  42d2a6:       pop    %rbp
    0.89 :	  42d2a7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (223 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043147a <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEELb0EE7_S_baseES7_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    2.69 :	  43147a:       push   %rbp
   12.56 :	  43147b:       mov    %rsp,%rbp
    3.14 :	  43147e:       mov    %rdi,-0x10(%rbp)
         :	      { return __it; }
    5.38 :	  431482:       mov    -0x10(%rbp),%rax
   76.23 :	  431486:       pop    %rbp
    0.00 :	  431487:       retq
 Percent |	Source code & Disassembly of main for cycles:u (221 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>:
         :	_ZN8LLMatOrdC2ERKS_():
         :	    LLord(Tind row, Tind next, Tval val):row(row), next(next), val(val){}
         :	};
         :
         :	std::vector<Tind> invperm(std::vector<Tind> &perm);
         :
         :	struct LLMatOrd{
    1.81 :	  41f922:       push   %rbp
    0.45 :	  41f923:       mov    %rsp,%rbp
    0.00 :	  41f926:       push   %rbx
    1.81 :	  41f927:       sub    $0x18,%rsp
    0.00 :	  41f92b:       mov    %rdi,-0x18(%rbp)
    0.00 :	  41f92f:       mov    %rsi,-0x20(%rbp)
    1.81 :	  41f933:       mov    -0x20(%rbp),%rax
    0.00 :	  41f937:       mov    (%rax),%rdx
    1.36 :	  41f93a:       mov    -0x18(%rbp),%rax
    0.00 :	  41f93e:       mov    %rdx,(%rax)
    4.07 :	  41f941:       mov    -0x20(%rbp),%rax
    0.90 :	  41f945:       lea    0x8(%rax),%rdx
    0.45 :	  41f949:       mov    -0x18(%rbp),%rax
    0.00 :	  41f94d:       add    $0x8,%rax
    2.71 :	  41f951:       mov    %rdx,%rsi
    0.00 :	  41f954:       mov    %rax,%rdi
    0.00 :	  41f957:       callq  4207cc <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)>
    2.71 :	  41f95c:       mov    -0x20(%rbp),%rax
    1.36 :	  41f960:       lea    0x20(%rax),%rdx
    0.45 :	  41f964:       mov    -0x18(%rbp),%rax
    0.00 :	  41f968:       add    $0x20,%rax
    1.36 :	  41f96c:       mov    %rdx,%rsi
    0.00 :	  41f96f:       mov    %rax,%rdi
    0.45 :	  41f972:       callq  4208b8 <std::vector<LLord, std::allocator<LLord> >::vector(std::vector<LLord, std::allocator<LLord> > const&)>
   19.46 :	  41f977:       jmp    41f997 <LLMatOrd::LLMatOrd(LLMatOrd const&)+0x75>
    0.00 :	  41f979:       mov    %rax,%rbx
    0.00 :	  41f97c:       mov    -0x18(%rbp),%rax
    0.00 :	  41f980:       add    $0x8,%rax
    0.00 :	  41f984:       mov    %rax,%rdi
    0.00 :	  41f987:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41f98c:       mov    %rbx,%rax
    0.00 :	  41f98f:       mov    %rax,%rdi
    0.00 :	  41f992:       callq  41dda0 <_Unwind_Resume@plt>
   38.91 :	  41f997:       add    $0x18,%rsp
   10.41 :	  41f99b:       pop    %rbx
    4.98 :	  41f99c:       pop    %rbp
    4.52 :	  41f99d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (208 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ec5c <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)>:
         :	_ZNSt6vectorIdSaIdEE12emplace_backIIdEEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    2.88 :	  42ec5c:       push   %rbp
   13.94 :	  42ec5d:       mov    %rsp,%rbp
    0.96 :	  42ec60:       sub    $0x10,%rsp
    0.00 :	  42ec64:       mov    %rdi,-0x8(%rbp)
   12.02 :	  42ec68:       mov    %rsi,-0x10(%rbp)
         :	      emplace_back(_Args&&... __args)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    1.44 :	  42ec6c:       mov    -0x8(%rbp),%rax
    0.96 :	  42ec70:       mov    0x8(%rax),%rdx
   11.54 :	  42ec74:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec78:       mov    0x10(%rax),%rax
    0.96 :	  42ec7c:       cmp    %rax,%rdx
    1.44 :	  42ec7f:       je     42ecbd <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)+0x61>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     std::forward<_Args>(__args)...);
    1.44 :	  42ec81:       mov    -0x10(%rbp),%rax
    0.00 :	  42ec85:       mov    %rax,%rdi
    0.00 :	  42ec88:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42ec8d:       mov    %rax,%rdx
    1.92 :	  42ec90:       mov    -0x8(%rbp),%rax
    3.85 :	  42ec94:       mov    0x8(%rax),%rcx
    6.73 :	  42ec98:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  42ec9c:       mov    %rcx,%rsi
    0.48 :	  42ec9f:       mov    %rax,%rdi
    0.00 :	  42eca2:       callq  42f964 <decltype (_S_construct({parm#1}, {parm#2}, (forward<double>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double>(std::allocator<double>&, double*, double&&)>
         :	            ++this->_M_impl._M_finish;
    4.81 :	  42eca7:       mov    -0x8(%rbp),%rax
    8.17 :	  42ecab:       mov    0x8(%rax),%rax
   11.06 :	  42ecaf:       lea    0x8(%rax),%rdx
    5.29 :	  42ecb3:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecb7:       mov    %rdx,0x8(%rax)
    8.65 :	  42ecbb:       jmp    42ecdb <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)+0x7f>
         :	          }
         :	        else
         :	          _M_emplace_back_aux(std::forward<_Args>(__args)...);
    0.00 :	  42ecbd:       mov    -0x10(%rbp),%rax
    0.00 :	  42ecc1:       mov    %rax,%rdi
    0.00 :	  42ecc4:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42ecc9:       mov    %rax,%rdx
    0.00 :	  42eccc:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecd0:       mov    %rdx,%rsi
    0.00 :	  42ecd3:       mov    %rax,%rdi
    0.00 :	  42ecd6:       callq  42f99c <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&)>
         :	      }
    0.00 :	  42ecdb:       leaveq
    1.44 :	  42ecdc:       retq
 Percent |	Source code & Disassembly of main for cycles:u (201 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425074 <std::allocator<int>::allocator(std::allocator<int> const&)>:
         :	_ZNSaIiEC2ERKS_():
         :	      typedef true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      allocator() throw() { }
         :
         :	      allocator(const allocator& __a) throw()
    3.98 :	  425074:       push   %rbp
    1.99 :	  425075:       mov    %rsp,%rbp
    1.00 :	  425078:       sub    $0x10,%rsp
    2.49 :	  42507c:       mov    %rdi,-0x8(%rbp)
   53.73 :	  425080:       mov    %rsi,-0x10(%rbp)
         :	      : __allocator_base<_Tp>(__a) { }
    5.47 :	  425084:       mov    -0x10(%rbp),%rdx
   12.44 :	  425088:       mov    -0x8(%rbp),%rax
    3.48 :	  42508c:       mov    %rdx,%rsi
    0.00 :	  42508f:       mov    %rax,%rdi
    2.99 :	  425092:       callq  426e0a <__gnu_cxx::new_allocator<int>::new_allocator(__gnu_cxx::new_allocator<int> const&)>
    1.99 :	  425097:       leaveq
   10.45 :	  425098:       retq
 Percent |	Source code & Disassembly of main for cycles:u (196 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e2b <LLcol* std::copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_():
         :	   *  Note that the end of the output range is permitted to be contained
         :	   *  within [first,last).
         :	  */
         :	  template<typename _II, typename _OI>
         :	    inline _OI
         :	    copy(_II __first, _II __last, _OI __result)
    0.00 :	  430e2b:       push   %rbp
    0.00 :	  430e2c:       mov    %rsp,%rbp
    1.02 :	  430e2f:       push   %rbx
    1.02 :	  430e30:       sub    $0x28,%rsp
    1.53 :	  430e34:       mov    %rdi,-0x20(%rbp)
    0.00 :	  430e38:       mov    %rsi,-0x30(%rbp)
    2.04 :	  430e3c:       mov    %rdx,-0x28(%rbp)
         :	            typename iterator_traits<_II>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
         :	              (std::__miter_base(__first), std::__miter_base(__last),
         :	               __result));
    0.51 :	  430e40:       mov    -0x30(%rbp),%rax
    4.08 :	  430e44:       mov    %rax,%rdi
    0.00 :	  430e47:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    3.57 :	  430e4c:       mov    %rax,%rbx
    0.00 :	  430e4f:       mov    -0x20(%rbp),%rax
    5.61 :	  430e53:       mov    %rax,%rdi
    1.02 :	  430e56:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    2.04 :	  430e5b:       mov    -0x28(%rbp),%rdx
    1.53 :	  430e5f:       mov    %rbx,%rsi
    1.53 :	  430e62:       mov    %rax,%rdi
    0.00 :	  430e65:       callq  4314b9 <LLcol* std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>
         :	    }
    4.59 :	  430e6a:       add    $0x28,%rsp
    0.51 :	  430e6e:       pop    %rbx
   64.29 :	  430e6f:       pop    %rbp
    5.10 :	  430e70:       retq
 Percent |	Source code & Disassembly of main for cycles:u (194 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043007d <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_SC_SC_T0_():
         :	    }
         :
         :	  /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
         :	  template<typename _Iterator, typename _Compare>
         :	    void
         :	    __move_median_to_first(_Iterator __result, _Iterator __a,
    1.03 :	  43007d:       push   %rbp
    1.03 :	  43007e:       mov    %rsp,%rbp
    0.00 :	  430081:       push   %rbx
    0.52 :	  430082:       sub    $0x48,%rsp
    0.00 :	  430086:       mov    %rdi,-0x20(%rbp)
    3.61 :	  43008a:       mov    %rsi,-0x30(%rbp)
    0.00 :	  43008e:       mov    %rdx,-0x40(%rbp)
    0.00 :	  430092:       mov    %rcx,-0x50(%rbp)
    0.00 :	  430096:       mov    %r8,-0x48(%rbp)
         :	      // concept requirements
         :	      __glibcxx_function_requires(_BinaryFunctionConcept<_Compare, bool,
         :	            typename iterator_traits<_Iterator>::value_type,
         :	            typename iterator_traits<_Iterator>::value_type>)
         :
         :	      if (__comp(*__a, *__b))
    1.55 :	  43009a:       lea    -0x40(%rbp),%rax
    0.00 :	  43009e:       mov    %rax,%rdi
    0.00 :	  4300a1:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.52 :	  4300a6:       mov    %rax,%rbx
    0.00 :	  4300a9:       lea    -0x30(%rbp),%rax
    1.03 :	  4300ad:       mov    %rax,%rdi
    0.00 :	  4300b0:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4300b5:       mov    %rax,%rdx
    0.52 :	  4300b8:       mov    -0x48(%rbp),%rax
    2.58 :	  4300bc:       mov    %rbx,%rsi
    0.00 :	  4300bf:       mov    %rdx,%rdi
    0.00 :	  4300c2:       callq  *%rax
    0.00 :	  4300c4:       test   %al,%al
    0.00 :	  4300c6:       je     430170 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xf3>
         :	        {
         :	          if (__comp(*__b, *__c))
    9.28 :	  4300cc:       lea    -0x50(%rbp),%rax
    1.55 :	  4300d0:       mov    %rax,%rdi
    0.00 :	  4300d3:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.52 :	  4300d8:       mov    %rax,%rbx
    0.00 :	  4300db:       lea    -0x40(%rbp),%rax
    1.55 :	  4300df:       mov    %rax,%rdi
    0.00 :	  4300e2:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4300e7:       mov    %rax,%rdx
    0.00 :	  4300ea:       mov    -0x48(%rbp),%rax
    1.03 :	  4300ee:       mov    %rbx,%rsi
    1.03 :	  4300f1:       mov    %rdx,%rdi
    0.00 :	  4300f4:       callq  *%rax
    0.00 :	  4300f6:       test   %al,%al
    0.00 :	  4300f8:       je     430112 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x95>
         :	            std::iter_swap(__result, __b);
    5.15 :	  4300fa:       mov    -0x40(%rbp),%rdx
    4.12 :	  4300fe:       mov    -0x20(%rbp),%rax
    0.00 :	  430102:       mov    %rdx,%rsi
    0.00 :	  430105:       mov    %rax,%rdi
    0.52 :	  430108:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  43010d:       jmpq   430209 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x18c>
         :	          else if (__comp(*__a, *__c))
    3.09 :	  430112:       lea    -0x50(%rbp),%rax
    0.52 :	  430116:       mov    %rax,%rdi
    0.00 :	  430119:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.52 :	  43011e:       mov    %rax,%rbx
    0.00 :	  430121:       lea    -0x30(%rbp),%rax
    0.00 :	  430125:       mov    %rax,%rdi
    0.00 :	  430128:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  43012d:       mov    %rax,%rdx
    0.00 :	  430130:       mov    -0x48(%rbp),%rax
    0.00 :	  430134:       mov    %rbx,%rsi
    0.52 :	  430137:       mov    %rdx,%rdi
    0.00 :	  43013a:       callq  *%rax
    0.00 :	  43013c:       test   %al,%al
    0.00 :	  43013e:       je     430158 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xdb>
         :	            std::iter_swap(__result, __c);
    3.61 :	  430140:       mov    -0x50(%rbp),%rdx
    2.58 :	  430144:       mov    -0x20(%rbp),%rax
    0.00 :	  430148:       mov    %rdx,%rsi
    0.00 :	  43014b:       mov    %rax,%rdi
    0.00 :	  43014e:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430153:       jmpq   430209 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x18c>
         :	          else
         :	            std::iter_swap(__result, __a);
    2.58 :	  430158:       mov    -0x30(%rbp),%rdx
    2.06 :	  43015c:       mov    -0x20(%rbp),%rax
    0.00 :	  430160:       mov    %rdx,%rsi
    0.00 :	  430163:       mov    %rax,%rdi
    0.00 :	  430166:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  43016b:       jmpq   430209 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x18c>
         :	        }
         :	      else if (__comp(*__a, *__c))
    9.79 :	  430170:       lea    -0x50(%rbp),%rax
    3.61 :	  430174:       mov    %rax,%rdi
    0.00 :	  430177:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.52 :	  43017c:       mov    %rax,%rbx
    0.52 :	  43017f:       lea    -0x30(%rbp),%rax
    2.06 :	  430183:       mov    %rax,%rdi
    0.00 :	  430186:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  43018b:       mov    %rax,%rdx
    0.00 :	  43018e:       mov    -0x48(%rbp),%rax
    0.52 :	  430192:       mov    %rbx,%rsi
    0.52 :	  430195:       mov    %rdx,%rdi
    0.00 :	  430198:       callq  *%rax
    0.00 :	  43019a:       test   %al,%al
    0.00 :	  43019c:       je     4301b3 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x136>
         :	        std::iter_swap(__result, __a);
    4.64 :	  43019e:       mov    -0x30(%rbp),%rdx
    3.09 :	  4301a2:       mov    -0x20(%rbp),%rax
    2.06 :	  4301a6:       mov    %rdx,%rsi
    0.00 :	  4301a9:       mov    %rax,%rdi
    0.00 :	  4301ac:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.52 :	  4301b1:       jmp    430209 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x18c>
         :	      else if (__comp(*__b, *__c))
    1.03 :	  4301b3:       lea    -0x50(%rbp),%rax
    1.55 :	  4301b7:       mov    %rax,%rdi
    0.00 :	  4301ba:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4301bf:       mov    %rax,%rbx
    0.00 :	  4301c2:       lea    -0x40(%rbp),%rax
    0.52 :	  4301c6:       mov    %rax,%rdi
    0.00 :	  4301c9:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4301ce:       mov    %rax,%rdx
    0.00 :	  4301d1:       mov    -0x48(%rbp),%rax
    1.03 :	  4301d5:       mov    %rbx,%rsi
    0.00 :	  4301d8:       mov    %rdx,%rdi
    0.00 :	  4301db:       callq  *%rax
    0.00 :	  4301dd:       test   %al,%al
    0.00 :	  4301df:       je     4301f6 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x179>
         :	        std::iter_swap(__result, __c);
    4.64 :	  4301e1:       mov    -0x50(%rbp),%rdx
    1.03 :	  4301e5:       mov    -0x20(%rbp),%rax
    0.00 :	  4301e9:       mov    %rdx,%rsi
    0.00 :	  4301ec:       mov    %rax,%rdi
    0.00 :	  4301ef:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  4301f4:       jmp    430209 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x18c>
         :	      else
         :	        std::iter_swap(__result, __b);
    3.09 :	  4301f6:       mov    -0x40(%rbp),%rdx
    1.55 :	  4301fa:       mov    -0x20(%rbp),%rax
    0.00 :	  4301fe:       mov    %rdx,%rsi
    0.00 :	  430201:       mov    %rax,%rdi
    0.52 :	  430204:       callq  430d60 <void std::iter_swap<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    2.06 :	  430209:       add    $0x48,%rsp
    1.03 :	  43020d:       pop    %rbx
    0.00 :	  43020e:       pop    %rbp
    1.55 :	  43020f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (194 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f1fd <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EET_SC_SC_T0_():
         :
         :
         :	  /// This is a helper function...
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    inline _RandomAccessIterator
         :	    __unguarded_partition_pivot(_RandomAccessIterator __first,
    2.06 :	  42f1fd:       push   %rbp
    5.67 :	  42f1fe:       mov    %rsp,%rbp
    2.06 :	  42f201:       push   %rbx
    3.09 :	  42f202:       sub    $0x58,%rsp
    0.00 :	  42f206:       mov    %rdi,-0x50(%rbp)
    3.61 :	  42f20a:       mov    %rsi,-0x60(%rbp)
    3.09 :	  42f20e:       mov    %rdx,-0x58(%rbp)
         :	                                _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
    1.03 :	  42f212:       lea    -0x50(%rbp),%rdx
    0.00 :	  42f216:       lea    -0x60(%rbp),%rax
    0.52 :	  42f21a:       mov    %rdx,%rsi
    0.52 :	  42f21d:       mov    %rax,%rdi
    1.55 :	  42f220:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42f225:       mov    %rax,%rdx
    0.00 :	  42f228:       shr    $0x3f,%rdx
    0.00 :	  42f22c:       add    %rdx,%rax
    1.55 :	  42f22f:       sar    %rax
    2.58 :	  42f232:       mov    %rax,-0x30(%rbp)
    2.06 :	  42f236:       lea    -0x30(%rbp),%rdx
    0.00 :	  42f23a:       lea    -0x50(%rbp),%rax
    0.00 :	  42f23e:       mov    %rdx,%rsi
    0.00 :	  42f241:       mov    %rax,%rdi
    2.58 :	  42f244:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    3.09 :	  42f249:       mov    %rax,-0x40(%rbp)
         :	      std::__move_median_to_first(__first, __first + 1, __mid, (__last - 2),
         :	                                  __comp);
    3.09 :	  42f24d:       movq   $0x2,-0x28(%rbp)
    1.55 :	  42f255:       lea    -0x28(%rbp),%rdx
    0.00 :	  42f259:       lea    -0x60(%rbp),%rax
    2.58 :	  42f25d:       mov    %rdx,%rsi
    0.52 :	  42f260:       mov    %rax,%rdi
    1.03 :	  42f263:       callq  430038 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator-(long const&) const>
    2.58 :	  42f268:       mov    %rax,%rbx
    0.00 :	  42f26b:       movq   $0x1,-0x20(%rbp)
    4.64 :	  42f273:       lea    -0x20(%rbp),%rdx
    0.00 :	  42f277:       lea    -0x50(%rbp),%rax
    0.52 :	  42f27b:       mov    %rdx,%rsi
    0.00 :	  42f27e:       mov    %rax,%rdi
    0.00 :	  42f281:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    4.12 :	  42f286:       mov    %rax,%rsi
         :	      std::__move_median_to_first(__first, __first + 1, __mid, (__last - 2),
    0.00 :	  42f289:       mov    -0x58(%rbp),%rcx
    0.52 :	  42f28d:       mov    -0x40(%rbp),%rdx
    0.00 :	  42f291:       mov    -0x50(%rbp),%rax
    1.03 :	  42f295:       mov    %rcx,%r8
    0.00 :	  42f298:       mov    %rbx,%rcx
    0.00 :	  42f29b:       mov    %rax,%rdi
    0.52 :	  42f29e:       callq  43007d <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    0.00 :	  42f2a3:       lea    -0x50(%rbp),%rax
    0.52 :	  42f2a7:       mov    %rax,%rdi
    0.00 :	  42f2aa:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f2af:       mov    %rax,%rbx
    0.00 :	  42f2b2:       movq   $0x1,-0x18(%rbp)
   15.46 :	  42f2ba:       lea    -0x18(%rbp),%rdx
    0.00 :	  42f2be:       lea    -0x50(%rbp),%rax
    0.00 :	  42f2c2:       mov    %rdx,%rsi
    0.00 :	  42f2c5:       mov    %rax,%rdi
    1.03 :	  42f2c8:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    1.55 :	  42f2cd:       mov    -0x58(%rbp),%rdx
    0.52 :	  42f2d1:       mov    -0x60(%rbp),%rsi
    0.52 :	  42f2d5:       mov    %rdx,%rcx
    0.00 :	  42f2d8:       mov    %rbx,%rdx
    2.58 :	  42f2db:       mov    %rax,%rdi
    0.52 :	  42f2de:       callq  430221 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol const&, bool (*)(LLcol const&, LLcol const&))>
    3.61 :	  42f2e3:       jmp    42f2ef <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xf2>
    0.00 :	  42f2e5:       jmp    42f2e7 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xea>
    0.00 :	  42f2e7:       mov    %rax,%rdi
    0.00 :	  42f2ea:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    3.09 :	  42f2ef:       add    $0x58,%rsp
    3.61 :	  42f2f3:       pop    %rbx
    9.28 :	  42f2f4:       pop    %rbp
    0.00 :	  42f2f5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (193 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430531 <LLcol* std::__copy_move_a<false, LLcol const*, LLcol*>(LLcol const*, LLcol const*, LLcol*)>:
         :	_ZSt13__copy_move_aILb0EPK5LLcolPS0_ET1_T0_S5_S4_():
         :	        }
         :	    };
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a(_II __first, _II __last, _OI __result)
    7.77 :	  430531:       push   %rbp
    1.55 :	  430532:       mov    %rsp,%rbp
    4.15 :	  430535:       sub    $0x30,%rsp
    0.00 :	  430539:       mov    %rdi,-0x18(%rbp)
   12.95 :	  43053d:       mov    %rsi,-0x20(%rbp)
    4.66 :	  430541:       mov    %rdx,-0x28(%rbp)
         :	      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
         :	      typedef typename iterator_traits<_II>::iterator_category _Category;
         :	      const bool __simple = (__is_trivial(_ValueTypeI)
         :	                             && __is_pointer<_II>::__value
         :	                             && __is_pointer<_OI>::__value
         :	                             && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    2.07 :	  430545:       movb   $0x1,-0x1(%rbp)
         :
         :	      return std::__copy_move<_IsMove, __simple,
         :	                              _Category>::__copy_m(__first, __last, __result);
    3.11 :	  430549:       mov    -0x28(%rbp),%rdx
    5.70 :	  43054d:       mov    -0x20(%rbp),%rcx
    0.00 :	  430551:       mov    -0x18(%rbp),%rax
    2.59 :	  430555:       mov    %rcx,%rsi
    4.15 :	  430558:       mov    %rax,%rdi
    0.52 :	  43055b:       callq  430eab <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    0.52 :	  430560:       leaveq
   50.26 :	  430561:       retq
 Percent |	Source code & Disassembly of main for cycles:u (190 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e2e2 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __final_insertion_sort(_RandomAccessIterator __first,
    2.63 :	  42e2e2:       push   %rbp
    1.58 :	  42e2e3:       mov    %rsp,%rbp
    1.58 :	  42e2e6:       sub    $0x30,%rsp
    2.63 :	  42e2ea:       mov    %rdi,-0x20(%rbp)
    3.16 :	  42e2ee:       mov    %rsi,-0x30(%rbp)
    0.53 :	  42e2f2:       mov    %rdx,-0x28(%rbp)
         :	                           _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      if (__last - __first > int(_S_threshold))
    0.00 :	  42e2f6:       lea    -0x20(%rbp),%rdx
    3.68 :	  42e2fa:       lea    -0x30(%rbp),%rax
    4.74 :	  42e2fe:       mov    %rdx,%rsi
    0.53 :	  42e301:       mov    %rax,%rdi
    0.00 :	  42e304:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42e309:       cmp    $0x10,%rax
    0.00 :	  42e30d:       setg   %al
    7.37 :	  42e310:       test   %al,%al
    0.00 :	  42e312:       je     42e375 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x93>
         :	        {
         :	          std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
    2.63 :	  42e314:       movq   $0x10,-0x10(%rbp)
    0.53 :	  42e31c:       lea    -0x10(%rbp),%rdx
    0.00 :	  42e320:       lea    -0x20(%rbp),%rax
    0.00 :	  42e324:       mov    %rdx,%rsi
    0.53 :	  42e327:       mov    %rax,%rdi
    0.00 :	  42e32a:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    2.11 :	  42e32f:       mov    %rax,%rcx
    0.00 :	  42e332:       mov    -0x28(%rbp),%rdx
    1.58 :	  42e336:       mov    -0x20(%rbp),%rax
    0.00 :	  42e33a:       mov    %rcx,%rsi
    0.00 :	  42e33d:       mov    %rax,%rdi
    0.00 :	  42e340:       callq  42f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	          std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
         :	                                          __comp);
    1.05 :	  42e345:       movq   $0x10,-0x8(%rbp)
    5.26 :	  42e34d:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e351:       lea    -0x20(%rbp),%rax
    0.00 :	  42e355:       mov    %rdx,%rsi
    0.00 :	  42e358:       mov    %rax,%rdi
    0.00 :	  42e35b:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
         :	          std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
    0.53 :	  42e360:       mov    -0x28(%rbp),%rdx
    0.53 :	  42e364:       mov    -0x30(%rbp),%rcx
    0.00 :	  42e368:       mov    %rcx,%rsi
    0.53 :	  42e36b:       mov    %rax,%rdi
    1.58 :	  42e36e:       callq  42f453 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
    1.05 :	  42e373:       jmp    42e39e <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xbc>
         :	        }
         :	      else
         :	        std::__insertion_sort(__first, __last, __comp);
    8.42 :	  42e375:       mov    -0x28(%rbp),%rdx
    3.16 :	  42e379:       mov    -0x30(%rbp),%rcx
    1.58 :	  42e37d:       mov    -0x20(%rbp),%rax
    8.42 :	  42e381:       mov    %rcx,%rsi
    3.16 :	  42e384:       mov    %rax,%rdi
    0.00 :	  42e387:       callq  42f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	    }
    6.84 :	  42e38c:       jmp    42e39e <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xbc>
    0.00 :	  42e38e:       mov    %rax,%rdi
    0.00 :	  42e391:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42e396:       mov    %rax,%rdi
    0.00 :	  42e399:       callq  41dda0 <_Unwind_Resume@plt>
    2.63 :	  42e39e:       leaveq
   19.47 :	  42e39f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (187 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043034a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::move_backward<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_():
         :	   *  Result may not be in the range (first,last].  Use move instead.  Note
         :	   *  that the start of the output range may overlap [first,last).
         :	  */
         :	  template<typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    1.07 :	  43034a:       push   %rbp
   13.90 :	  43034b:       mov    %rsp,%rbp
    1.07 :	  43034e:       push   %rbx
    3.74 :	  43034f:       sub    $0x38,%rsp
    8.56 :	  430353:       mov    %rdi,-0x20(%rbp)
    0.00 :	  430357:       mov    %rsi,-0x30(%rbp)
    1.07 :	  43035b:       mov    %rdx,-0x40(%rbp)
         :	            typename iterator_traits<_BI2>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
         :	                                                std::__miter_base(__last),
         :	                                                __result);
    6.95 :	  43035f:       mov    -0x30(%rbp),%rax
   15.51 :	  430363:       mov    %rax,%rdi
    0.00 :	  430366:       callq  430d9e <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    4.81 :	  43036b:       mov    %rax,%rbx
    0.00 :	  43036e:       mov    -0x20(%rbp),%rax
   16.58 :	  430372:       mov    %rax,%rdi
    0.00 :	  430375:       callq  430d9e <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    1.07 :	  43037a:       mov    -0x40(%rbp),%rdx
   12.83 :	  43037e:       mov    %rbx,%rsi
    3.74 :	  430381:       mov    %rax,%rdi
    0.00 :	  430384:       callq  430db8 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_backward_a2<true, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    0.53 :	  430389:       add    $0x38,%rsp
    7.49 :	  43038d:       pop    %rbx
    1.07 :	  43038e:       pop    %rbp
    0.00 :	  43038f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (185 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304b4 <LLcol* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_():
         :	  template<>
         :	    struct __uninitialized_copy<true>
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    2.16 :	  4304b4:       push   %rbp
    0.54 :	  4304b5:       mov    %rsp,%rbp
    1.62 :	  4304b8:       sub    $0x20,%rsp
    1.08 :	  4304bc:       mov    %rdi,-0x10(%rbp)
    1.62 :	  4304c0:       mov    %rsi,-0x20(%rbp)
    2.16 :	  4304c4:       mov    %rdx,-0x18(%rbp)
         :	                      _ForwardIterator __result)
         :	        { return std::copy(__first, __last, __result); }
    0.00 :	  4304c8:       mov    -0x18(%rbp),%rdx
    1.08 :	  4304cc:       mov    -0x20(%rbp),%rcx
    1.62 :	  4304d0:       mov    -0x10(%rbp),%rax
    3.24 :	  4304d4:       mov    %rcx,%rsi
    0.00 :	  4304d7:       mov    %rax,%rdi
    2.70 :	  4304da:       callq  430e2b <LLcol* std::copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>
    4.86 :	  4304df:       leaveq
   77.30 :	  4304e0:       retq
 Percent |	Source code & Disassembly of main for cycles:u (182 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f0fa <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE11_M_allocateEm():
         :
         :	    public:
         :	      _Vector_impl _M_impl;
         :
         :	      pointer
         :	      _M_allocate(size_t __n)
   34.07 :	  42f0fa:       push   %rbp
   19.23 :	  42f0fb:       mov    %rsp,%rbp
    1.10 :	  42f0fe:       sub    $0x10,%rsp
    2.20 :	  42f102:       mov    %rdi,-0x8(%rbp)
   13.74 :	  42f106:       mov    %rsi,-0x10(%rbp)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    0.55 :	  42f10a:       cmpq   $0x0,-0x10(%rbp)
    6.04 :	  42f10f:       je     42f12b <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)+0x31>
    4.40 :	  42f111:       mov    -0x8(%rbp),%rax
    3.85 :	  42f115:       mov    -0x10(%rbp),%rcx
    0.00 :	  42f119:       mov    $0x0,%edx
    0.00 :	  42f11e:       mov    %rcx,%rsi
    7.14 :	  42f121:       mov    %rax,%rdi
    0.00 :	  42f124:       callq  42fe6c <__gnu_cxx::new_allocator<LLcol>::allocate(unsigned long, void const*)>
    2.20 :	  42f129:       jmp    42f130 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)+0x36>
    0.00 :	  42f12b:       mov    $0x0,%eax
    2.20 :	  42f130:       leaveq
    3.30 :	  42f131:       retq
 Percent |	Source code & Disassembly of main for cycles:u (181 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004212e6 <std::vector<int, std::allocator<int> >::size() const>:
         :	_ZNKSt6vectorIiSaIiEE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
   49.17 :	  4212e6:       push   %rbp
    8.29 :	  4212e7:       mov    %rsp,%rbp
    0.00 :	  4212ea:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    3.87 :	  4212ee:       mov    -0x8(%rbp),%rax
   14.36 :	  4212f2:       mov    0x8(%rax),%rax
   14.36 :	  4212f6:       mov    %rax,%rdx
    0.00 :	  4212f9:       mov    -0x8(%rbp),%rax
    0.00 :	  4212fd:       mov    (%rax),%rax
    0.55 :	  421300:       sub    %rax,%rdx
    3.31 :	  421303:       mov    %rdx,%rax
    3.87 :	  421306:       sar    $0x2,%rax
    2.21 :	  42130a:       pop    %rbp
    0.00 :	  42130b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (178 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>:
         :	_ZSt3maxImERKT_S2_S2_():
         :	   *  temporary expressions, since they are only evaluated once, unlike a
         :	   *  preprocessor macro.
         :	  */
         :	  template<typename _Tp>
         :	    inline const _Tp&
         :	    max(const _Tp& __a, const _Tp& __b)
    0.56 :	  425b86:       push   %rbp
   23.03 :	  425b87:       mov    %rsp,%rbp
    0.00 :	  425b8a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425b8e:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :	      //return  __a < __b ? __b : __a;
         :	      if (__a < __b)
   29.78 :	  425b92:       mov    -0x8(%rbp),%rax
    0.00 :	  425b96:       mov    (%rax),%rdx
    0.00 :	  425b99:       mov    -0x10(%rbp),%rax
    0.00 :	  425b9d:       mov    (%rax),%rax
   24.16 :	  425ba0:       cmp    %rax,%rdx
    0.00 :	  425ba3:       jae    425bab <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
         :	        return __b;
   22.47 :	  425ba5:       mov    -0x10(%rbp),%rax
    0.00 :	  425ba9:       jmp    425baf <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
         :	      return __a;
    0.00 :	  425bab:       mov    -0x8(%rbp),%rax
         :	    }
    0.00 :	  425baf:       pop    %rbp
    0.00 :	  425bb0:       retq
 Percent |	Source code & Disassembly of main for cycles:u (177 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f69c <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET1_T0_SC_SB_():
         :	    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
         :	                   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a2(_II __first, _II __last, _OI __result)
    1.13 :	  42f69c:       push   %rbp
    4.52 :	  42f69d:       mov    %rsp,%rbp
    0.00 :	  42f6a0:       push   %r12
    0.00 :	  42f6a2:       push   %rbx
    0.00 :	  42f6a3:       sub    $0x40,%rsp
    0.00 :	  42f6a7:       mov    %rdi,-0x30(%rbp)
    1.13 :	  42f6ab:       mov    %rsi,-0x40(%rbp)
    2.82 :	  42f6af:       mov    %rdx,-0x50(%rbp)
         :	    {
         :	      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
         :	                                             std::__niter_base(__last),
         :	                                             std::__niter_base(__result)));
    1.13 :	  42f6b3:       mov    -0x50(%rbp),%rax
   10.17 :	  42f6b7:       mov    %rax,%rdi
    0.00 :	  42f6ba:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    7.91 :	  42f6bf:       mov    %rax,%r12
    0.00 :	  42f6c2:       mov    -0x40(%rbp),%rax
    6.78 :	  42f6c6:       mov    %rax,%rdi
    0.00 :	  42f6c9:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    5.65 :	  42f6ce:       mov    %rax,%rbx
    0.00 :	  42f6d1:       mov    -0x30(%rbp),%rax
    7.34 :	  42f6d5:       mov    %rax,%rdi
    0.00 :	  42f6d8:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    6.21 :	  42f6dd:       mov    %r12,%rdx
    0.00 :	  42f6e0:       mov    %rbx,%rsi
    0.00 :	  42f6e3:       mov    %rax,%rdi
    0.00 :	  42f6e6:       callq  430531 <LLcol* std::__copy_move_a<false, LLcol const*, LLcol*>(LLcol const*, LLcol const*, LLcol*)>
    5.65 :	  42f6eb:       mov    %rax,-0x18(%rbp)
   12.43 :	  42f6ef:       lea    -0x18(%rbp),%rdx
    1.13 :	  42f6f3:       lea    -0x20(%rbp),%rax
    0.00 :	  42f6f7:       mov    %rdx,%rsi
    0.00 :	  42f6fa:       mov    %rax,%rdi
    2.26 :	  42f6fd:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.56 :	  42f702:       mov    -0x20(%rbp),%rax
         :	    }
   16.95 :	  42f706:       add    $0x40,%rsp
    0.00 :	  42f70a:       pop    %rbx
    2.82 :	  42f70b:       pop    %r12
    2.82 :	  42f70d:       pop    %rbp
    0.56 :	  42f70e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (169 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427ae8 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
         :	_ZSt3minImERKT_S2_S2_():
         :	   *  temporary expressions, since they are only evaluated once, unlike a
         :	   *  preprocessor macro.
         :	  */
         :	  template<typename _Tp>
         :	    inline const _Tp&
         :	    min(const _Tp& __a, const _Tp& __b)
    2.96 :	  427ae8:       push   %rbp
   34.91 :	  427ae9:       mov    %rsp,%rbp
    0.00 :	  427aec:       mov    %rdi,-0x8(%rbp)
    1.18 :	  427af0:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         :	      //return __b < __a ? __b : __a;
         :	      if (__b < __a)
   23.67 :	  427af4:       mov    -0x10(%rbp),%rax
    2.96 :	  427af8:       mov    (%rax),%rdx
    4.73 :	  427afb:       mov    -0x8(%rbp),%rax
    0.00 :	  427aff:       mov    (%rax),%rax
   27.81 :	  427b02:       cmp    %rax,%rdx
    0.00 :	  427b05:       jae    427b0d <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
         :	        return __b;
    0.00 :	  427b07:       mov    -0x10(%rbp),%rax
    0.00 :	  427b0b:       jmp    427b11 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
         :	      return __a;
    1.78 :	  427b0d:       mov    -0x8(%rbp),%rax
         :	    }
    0.00 :	  427b11:       pop    %rbp
    0.00 :	  427b12:       retq
 Percent |	Source code & Disassembly of main for cycles:u (169 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fa8a <std::vector<int, std::allocator<int> >::~vector()>:
         :	_ZNSt6vectorIiSaIiEED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    1.78 :	  41fa8a:       push   %rbp
    3.55 :	  41fa8b:       mov    %rsp,%rbp
    0.00 :	  41fa8e:       sub    $0x10,%rsp
    0.00 :	  41fa92:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
    0.59 :	  41fa96:       mov    -0x8(%rbp),%rax
   14.20 :	  41fa9a:       mov    %rax,%rdi
    0.00 :	  41fa9d:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  41faa2:       mov    %rax,%rdx
    0.00 :	  41faa5:       mov    -0x8(%rbp),%rax
    2.96 :	  41faa9:       mov    0x8(%rax),%rcx
    2.37 :	  41faad:       mov    -0x8(%rbp),%rax
    0.00 :	  41fab1:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    4.73 :	  41fab4:       mov    %rcx,%rsi
    0.59 :	  41fab7:       mov    %rax,%rdi
    1.78 :	  41faba:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	                      _M_get_Tp_allocator()); }
   37.28 :	  41fabf:       mov    -0x8(%rbp),%rax
   20.71 :	  41fac3:       mov    %rax,%rdi
    0.00 :	  41fac6:       callq  420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
    1.78 :	  41facb:       leaveq
    7.69 :	  41facc:       retq
 Percent |	Source code & Disassembly of main for cycles:u (162 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE3endEv():
         :	       *  Returns a read-only (constant) iterator that points one past
         :	       *  the last element in the %vector.  Iteration is done in
         :	       *  ordinary element order.
         :	       */
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
    4.94 :	  42e4d0:       push   %rbp
    1.85 :	  42e4d1:       mov    %rsp,%rbp
    6.17 :	  42e4d4:       sub    $0x20,%rsp
    3.70 :	  42e4d8:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_finish); }
    0.00 :	  42e4dc:       mov    -0x18(%rbp),%rax
    6.79 :	  42e4e0:       mov    0x8(%rax),%rax
   30.25 :	  42e4e4:       mov    %rax,-0x8(%rbp)
    4.32 :	  42e4e8:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e4ec:       lea    -0x10(%rbp),%rax
    1.85 :	  42e4f0:       mov    %rdx,%rsi
    0.00 :	  42e4f3:       mov    %rax,%rdi
    2.47 :	  42e4f6:       callq  42f5a0 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol const* const&)>
    0.00 :	  42e4fb:       mov    -0x10(%rbp),%rax
   37.04 :	  42e4ff:       leaveq
    0.62 :	  42e500:       retq
 Percent |	Source code & Disassembly of main for cycles:u (160 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424950 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)>:
         :	_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC2ERKS0_():
         :
         :	        _Vector_impl()
         :	        : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
         :	        { }
         :
         :	        _Vector_impl(_Tp_alloc_type const& __a)
    5.00 :	  424950:       push   %rbp
    1.25 :	  424951:       mov    %rsp,%rbp
    2.50 :	  424954:       sub    $0x10,%rsp
    0.00 :	  424958:       mov    %rdi,-0x8(%rbp)
    9.38 :	  42495c:       mov    %rsi,-0x10(%rbp)
         :	        : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    7.50 :	  424960:       mov    -0x10(%rbp),%rdx
    5.62 :	  424964:       mov    -0x8(%rbp),%rax
    0.62 :	  424968:       mov    %rdx,%rsi
    0.00 :	  42496b:       mov    %rax,%rdi
    0.00 :	  42496e:       callq  425074 <std::allocator<int>::allocator(std::allocator<int> const&)>
    5.00 :	  424973:       mov    -0x8(%rbp),%rax
   11.25 :	  424977:       movq   $0x0,(%rax)
   22.50 :	  42497e:       mov    -0x8(%rbp),%rax
    1.88 :	  424982:       movq   $0x0,0x8(%rax)
   22.50 :	  42498a:       mov    -0x8(%rbp),%rax
    0.00 :	  42498e:       movq   $0x0,0x10(%rax)
         :	        { }
    1.88 :	  424996:       leaveq
    3.12 :	  424997:       retq
 Percent |	Source code & Disassembly of main for cycles:u (159 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE19_M_get_Tp_allocatorEv():
         :
         :	    public:
         :	      typedef _Alloc allocator_type;
         :
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   48.43 :	  422052:       push   %rbp
   19.50 :	  422053:       mov    %rsp,%rbp
    0.00 :	  422056:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
   10.06 :	  42205a:       mov    -0x8(%rbp),%rax
   22.01 :	  42205e:       pop    %rbp
    0.00 :	  42205f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (159 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f453 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    inline void
         :	    __unguarded_insertion_sort(_RandomAccessIterator __first,
    0.63 :	  42f453:       push   %rbp
    0.00 :	  42f454:       mov    %rsp,%rbp
    0.00 :	  42f457:       sub    $0x30,%rsp
    0.00 :	  42f45b:       mov    %rdi,-0x20(%rbp)
    0.00 :	  42f45f:       mov    %rsi,-0x30(%rbp)
    0.00 :	  42f463:       mov    %rdx,-0x28(%rbp)
         :	                               _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      typedef typename iterator_traits<_RandomAccessIterator>::value_type
         :	        _ValueType;
         :
         :	      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
    1.26 :	  42f467:       mov    -0x20(%rbp),%rax
    0.00 :	  42f46b:       mov    %rax,-0x10(%rbp)
    0.00 :	  42f46f:       jmp    42f490 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x3d>
         :	        std::__unguarded_linear_insert(__i, __comp);
   19.50 :	  42f471:       mov    -0x28(%rbp),%rdx
    0.00 :	  42f475:       mov    -0x10(%rbp),%rax
    0.00 :	  42f479:       mov    %rdx,%rsi
    0.00 :	  42f47c:       mov    %rax,%rdi
   17.61 :	  42f47f:       callq  430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
    1.26 :	  42f484:       lea    -0x10(%rbp),%rax
    5.03 :	  42f488:       mov    %rax,%rdi
   12.58 :	  42f48b:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
    0.00 :	  42f490:       lea    -0x30(%rbp),%rdx
   11.32 :	  42f494:       lea    -0x10(%rbp),%rax
    3.14 :	  42f498:       mov    %rdx,%rsi
    0.63 :	  42f49b:       mov    %rax,%rdi
    1.26 :	  42f49e:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42f4a3:       test   %al,%al
    0.00 :	  42f4a5:       jne    42f471 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x1e>
   14.47 :	  42f4a7:       jmp    42f4b1 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x5e>
    0.00 :	  42f4a9:       mov    %rax,%rdi
    0.00 :	  42f4ac:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    5.66 :	  42f4b1:       leaveq
    5.66 :	  42f4b2:       retq
 Percent |	Source code & Disassembly of main for cycles:u (158 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422bf0 <std::vector<LLord, std::allocator<LLord> >::size() const>:
         :	_ZNKSt6vectorI5LLordSaIS0_EE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.00 :	  422bf0:       push   %rbp
    3.16 :	  422bf1:       mov    %rsp,%rbp
    0.00 :	  422bf4:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :	  422bf8:       mov    -0x8(%rbp),%rax
   23.42 :	  422bfc:       mov    0x8(%rax),%rax
   58.23 :	  422c00:       mov    %rax,%rdx
    0.00 :	  422c03:       mov    -0x8(%rbp),%rax
    0.00 :	  422c07:       mov    (%rax),%rax
    6.96 :	  422c0a:       sub    %rax,%rdx
    2.53 :	  422c0d:       mov    %rdx,%rax
    3.16 :	  422c10:       sar    $0x4,%rax
    2.53 :	  422c14:       pop    %rbp
    0.00 :	  422c15:       retq
 Percent |	Source code & Disassembly of main for cycles:u (154 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	   *  The relative ordering of equivalent elements is not preserved, use
         :	   *  @p stable_sort() if this is needed.
         :	  */
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    inline void
         :	    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    3.90 :	  42d13e:       push   %rbp
    0.65 :	  42d13f:       mov    %rsp,%rbp
    7.79 :	  42d142:       sub    $0x20,%rsp
    0.00 :	  42d146:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42d14a:       mov    %rsi,-0x20(%rbp)
    1.95 :	  42d14e:       mov    %rdx,-0x18(%rbp)
         :	            _RandomAccessIterator>)
         :	      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _ValueType,
         :	                                  _ValueType>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      if (__first != __last)
    5.19 :	  42d152:       lea    -0x20(%rbp),%rdx
    0.00 :	  42d156:       lea    -0x10(%rbp),%rax
    0.00 :	  42d15a:       mov    %rdx,%rsi
    0.00 :	  42d15d:       mov    %rax,%rdi
    7.14 :	  42d160:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42d165:       test   %al,%al
    0.00 :	  42d167:       je     42d1b9 <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x7b>
         :	        {
         :	          std::__introsort_loop(__first, __last,
         :	                                std::__lg(__last - __first) * 2, __comp);
    0.00 :	  42d169:       lea    -0x10(%rbp),%rdx
    0.00 :	  42d16d:       lea    -0x20(%rbp),%rax
    6.49 :	  42d171:       mov    %rdx,%rsi
    0.00 :	  42d174:       mov    %rax,%rdi
    0.00 :	  42d177:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42d17c:       mov    %rax,%rdi
    0.00 :	  42d17f:       callq  41eb06 <std::__lg(long)>
    0.00 :	  42d184:       lea    (%rax,%rax,1),%rdi
         :	          std::__introsort_loop(__first, __last,
    9.09 :	  42d188:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d18c:       mov    -0x20(%rbp),%rsi
    0.00 :	  42d190:       mov    -0x10(%rbp),%rax
    0.00 :	  42d194:       mov    %rdx,%rcx
    6.49 :	  42d197:       mov    %rdi,%rdx
    0.00 :	  42d19a:       mov    %rax,%rdi
    0.65 :	  42d19d:       callq  42e23d <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))>
         :	          std::__final_insertion_sort(__first, __last, __comp);
    5.19 :	  42d1a2:       mov    -0x18(%rbp),%rdx
    1.30 :	  42d1a6:       mov    -0x20(%rbp),%rcx
    0.00 :	  42d1aa:       mov    -0x10(%rbp),%rax
    3.25 :	  42d1ae:       mov    %rcx,%rsi
    1.30 :	  42d1b1:       mov    %rax,%rdi
    0.00 :	  42d1b4:       callq  42e2e2 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	        }
         :	    }
   13.64 :	  42d1b9:       leaveq
   25.97 :	  42d1ba:       retq
 Percent |	Source code & Disassembly of main for cycles:u (149 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004250b6 <int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
         :	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_():
         :	   *
         :	   *  Like copy(), but does not require an initialized output range.
         :	  */
         :	  template<typename _InputIterator, typename _ForwardIterator>
         :	    inline _ForwardIterator
         :	    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    0.67 :	  4250b6:       push   %rbp
    0.00 :	  4250b7:       mov    %rsp,%rbp
    0.00 :	  4250ba:       sub    $0x20,%rsp
    2.01 :	  4250be:       mov    %rdi,-0x10(%rbp)
    0.00 :	  4250c2:       mov    %rsi,-0x20(%rbp)
    0.67 :	  4250c6:       mov    %rdx,-0x18(%rbp)
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType2;
         :
         :	      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
         :	                                        && __is_trivial(_ValueType2))>::
         :	        __uninit_copy(__first, __last, __result);
    1.34 :	  4250ca:       mov    -0x18(%rbp),%rdx
    2.68 :	  4250ce:       mov    -0x20(%rbp),%rcx
    0.00 :	  4250d2:       mov    -0x10(%rbp),%rax
    5.37 :	  4250d6:       mov    %rcx,%rsi
    0.00 :	  4250d9:       mov    %rax,%rdi
    0.67 :	  4250dc:       callq  426e18 <int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
         :	    }
   16.11 :	  4250e1:       leaveq
   70.47 :	  4250e2:       retq
 Percent |	Source code & Disassembly of main for cycles:u (148 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042876a <int* std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
         :	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET1_T0_SA_S9_():
         :	    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
         :	                   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a2(_II __first, _II __last, _OI __result)
    0.00 :	  42876a:       push   %rbp
    2.70 :	  42876b:       mov    %rsp,%rbp
    0.00 :	  42876e:       push   %r12
    0.68 :	  428770:       push   %rbx
    2.70 :	  428771:       sub    $0x20,%rsp
    0.00 :	  428775:       mov    %rdi,-0x20(%rbp)
    0.00 :	  428779:       mov    %rsi,-0x30(%rbp)
    2.70 :	  42877d:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
         :	                                             std::__niter_base(__last),
         :	                                             std::__niter_base(__result)));
    4.05 :	  428781:       mov    -0x28(%rbp),%rax
    9.46 :	  428785:       mov    %rax,%rdi
    0.00 :	  428788:       callq  428ab2 <std::_Niter_base<int*>::iterator_type std::__niter_base<int*>(int*)>
    4.73 :	  42878d:       mov    %rax,%r12
    0.00 :	  428790:       mov    -0x30(%rbp),%rax
   10.81 :	  428794:       mov    %rax,%rdi
    0.00 :	  428797:       callq  428e0f <std::_Niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    8.78 :	  42879c:       mov    %rax,%rbx
    0.00 :	  42879f:       mov    -0x20(%rbp),%rax
   14.19 :	  4287a3:       mov    %rax,%rdi
    0.00 :	  4287a6:       callq  428e0f <std::_Niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    7.43 :	  4287ab:       mov    %r12,%rdx
    0.00 :	  4287ae:       mov    %rbx,%rsi
    0.00 :	  4287b1:       mov    %rax,%rdi
    0.00 :	  4287b4:       callq  428e29 <int* std::__copy_move_a<false, int const*, int*>(int const*, int const*, int*)>
         :	    }
    7.43 :	  4287b9:       add    $0x20,%rsp
    0.00 :	  4287bd:       pop    %rbx
   16.22 :	  4287be:       pop    %r12
    6.76 :	  4287c0:       pop    %rbp
    1.35 :	  4287c1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (146 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004203ee <std::vector<LLord, std::allocator<LLord> >::~vector()>:
         :	_ZNSt6vectorI5LLordSaIS0_EED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    4.11 :	  4203ee:       push   %rbp
    3.42 :	  4203ef:       mov    %rsp,%rbp
    0.00 :	  4203f2:       sub    $0x10,%rsp
    0.00 :	  4203f6:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
   13.70 :	  4203fa:       mov    -0x8(%rbp),%rax
   17.12 :	  4203fe:       mov    %rax,%rdi
    0.68 :	  420401:       callq  422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>
    0.00 :	  420406:       mov    %rax,%rdx
    0.00 :	  420409:       mov    -0x8(%rbp),%rax
    2.74 :	  42040d:       mov    0x8(%rax),%rcx
    9.59 :	  420411:       mov    -0x8(%rbp),%rax
    0.00 :	  420415:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    4.79 :	  420418:       mov    %rcx,%rsi
    0.00 :	  42041b:       mov    %rax,%rdi
    2.74 :	  42041e:       callq  422060 <void std::_Destroy<LLord*, LLord>(LLord*, LLord*, std::allocator<LLord>&)>
         :	                      _M_get_Tp_allocator()); }
    5.48 :	  420423:       mov    -0x8(%rbp),%rax
    9.59 :	  420427:       mov    %rax,%rdi
    0.00 :	  42042a:       callq  422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>
    5.48 :	  42042f:       leaveq
   20.55 :	  420430:       retq
 Percent |	Source code & Disassembly of main for cycles:u (143 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f84a <std::uniform_real_distribution<double>::param_type::b() const>:
         :	_ZNKSt25uniform_real_distributionIdE10param_type1bEv():
         :	        result_type
         :	        a() const
         :	        { return _M_a; }
         :
         :	        result_type
         :	        b() const
   32.87 :	  42f84a:       push   %rbp
    0.00 :	  42f84b:       mov    %rsp,%rbp
    0.70 :	  42f84e:       mov    %rdi,-0x8(%rbp)
         :	        { return _M_b; }
   34.27 :	  42f852:       mov    -0x8(%rbp),%rax
    0.70 :	  42f856:       mov    0x8(%rax),%rax
    0.70 :	  42f85a:       mov    %rax,-0x10(%rbp)
    0.00 :	  42f85e:       vmovsd -0x10(%rbp),%xmm0
   30.77 :	  42f863:       pop    %rbp
    0.00 :	  42f864:       retq
 Percent |	Source code & Disassembly of main for cycles:u (141 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422c4e <std::allocator<LLord>::~allocator()>:
         :	_ZNSaI5LLordED2Ev():
         :	      : __allocator_base<_Tp>(__a) { }
         :
         :	      template<typename _Tp1>
         :	        allocator(const allocator<_Tp1>&) throw() { }
         :
         :	      ~allocator() throw() { }
   12.77 :	  422c4e:       push   %rbp
    9.93 :	  422c4f:       mov    %rsp,%rbp
    5.67 :	  422c52:       sub    $0x10,%rsp
    1.42 :	  422c56:       mov    %rdi,-0x8(%rbp)
    8.51 :	  422c5a:       mov    -0x8(%rbp),%rax
   41.13 :	  422c5e:       mov    %rax,%rdi
    4.96 :	  422c61:       callq  425132 <__gnu_cxx::new_allocator<LLord>::~new_allocator()>
    4.96 :	  422c66:       leaveq
   10.64 :	  422c67:       retq
 Percent |	Source code & Disassembly of main for cycles:u (138 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e18 <int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
         :	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiEET0_T_SC_SB_():
         :	  template<>
         :	    struct __uninitialized_copy<true>
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    3.62 :	  426e18:       push   %rbp
    0.00 :	  426e19:       mov    %rsp,%rbp
    1.45 :	  426e1c:       sub    $0x20,%rsp
    2.90 :	  426e20:       mov    %rdi,-0x10(%rbp)
    0.00 :	  426e24:       mov    %rsi,-0x20(%rbp)
    0.72 :	  426e28:       mov    %rdx,-0x18(%rbp)
         :	                      _ForwardIterator __result)
         :	        { return std::copy(__first, __last, __result); }
    0.72 :	  426e2c:       mov    -0x18(%rbp),%rdx
    3.62 :	  426e30:       mov    -0x20(%rbp),%rcx
    0.00 :	  426e34:       mov    -0x10(%rbp),%rax
    5.80 :	  426e38:       mov    %rcx,%rsi
    0.00 :	  426e3b:       mov    %rax,%rdi
    2.90 :	  426e3e:       callq  427c98 <int* std::copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
    4.35 :	  426e43:       leaveq
   73.91 :	  426e44:       retq
 Percent |	Source code & Disassembly of main for cycles:u (136 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeESA_():
         :	    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Miter_base<_Iterator>::iterator_type
         :	    __miter_base(_Iterator __it)
    4.41 :	  42f682:       push   %rbp
    6.62 :	  42f683:       mov    %rsp,%rbp
    7.35 :	  42f686:       sub    $0x10,%rsp
    0.00 :	  42f68a:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Miter_base<_Iterator>::_S_base(__it); }
   11.03 :	  42f68e:       mov    -0x10(%rbp),%rax
   49.26 :	  42f692:       mov    %rax,%rdi
    4.41 :	  42f695:       callq  4304ef <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42f69a:       leaveq
   16.91 :	  42f69b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (135 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427a16 <__gnu_cxx::new_allocator<LLord>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
   12.59 :	  427a16:       push   %rbp
   12.59 :	  427a17:       mov    %rsp,%rbp
    0.00 :	  427a1a:       sub    $0x20,%rsp
    2.22 :	  427a1e:       mov    %rdi,-0x8(%rbp)
   21.48 :	  427a22:       mov    %rsi,-0x10(%rbp)
    3.70 :	  427a26:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.74 :	  427a2a:       mov    -0x8(%rbp),%rax
    3.70 :	  427a2e:       mov    %rax,%rdi
    0.00 :	  427a31:       callq  4285b2 <__gnu_cxx::new_allocator<LLord>::max_size() const>
    0.74 :	  427a36:       cmp    -0x10(%rbp),%rax
   14.81 :	  427a3a:       setb   %al
    5.93 :	  427a3d:       test   %al,%al
    2.22 :	  427a3f:       je     427a46 <__gnu_cxx::new_allocator<LLord>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  427a41:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8.15 :	  427a46:       mov    -0x10(%rbp),%rax
    1.48 :	  427a4a:       shl    $0x4,%rax
    3.70 :	  427a4e:       mov    %rax,%rdi
    0.00 :	  427a51:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.74 :	  427a56:       leaveq
    5.19 :	  427a57:       retq
 Percent |	Source code & Disassembly of main for cycles:u (135 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE5beginEv():
         :	       *  Returns a read-only (constant) iterator that points to the
         :	       *  first element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      const_iterator
         :	      begin() const _GLIBCXX_NOEXCEPT
    4.44 :	  42e4a0:       push   %rbp
    2.96 :	  42e4a1:       mov    %rsp,%rbp
   10.37 :	  42e4a4:       sub    $0x20,%rsp
    1.48 :	  42e4a8:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_start); }
    2.96 :	  42e4ac:       mov    -0x18(%rbp),%rax
    8.15 :	  42e4b0:       mov    (%rax),%rax
   27.41 :	  42e4b3:       mov    %rax,-0x8(%rbp)
    5.19 :	  42e4b7:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e4bb:       lea    -0x10(%rbp),%rax
    0.00 :	  42e4bf:       mov    %rdx,%rsi
    3.70 :	  42e4c2:       mov    %rax,%rdi
    2.96 :	  42e4c5:       callq  42f5a0 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol const* const&)>
    0.00 :	  42e4ca:       mov    -0x10(%rbp),%rax
   28.15 :	  42e4ce:       leaveq
    2.22 :	  42e4cf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (134 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004255bc <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long)>:
         :	_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim():
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
         :	      }
         :
         :	      // __p is not permitted to be a null pointer.
         :	      void
         :	      deallocate(pointer __p, size_type)
   55.97 :	  4255bc:       push   %rbp
   22.39 :	  4255bd:       mov    %rsp,%rbp
    0.00 :	  4255c0:       sub    $0x20,%rsp
    0.00 :	  4255c4:       mov    %rdi,-0x8(%rbp)
   10.45 :	  4255c8:       mov    %rsi,-0x10(%rbp)
    1.49 :	  4255cc:       mov    %rdx,-0x18(%rbp)
         :	      { ::operator delete(__p); }
    2.24 :	  4255d0:       mov    -0x10(%rbp),%rax
    0.00 :	  4255d4:       mov    %rax,%rdi
    2.99 :	  4255d7:       callq  41db20 <operator delete(void*)@plt>
    0.75 :	  4255dc:       leaveq
    3.73 :	  4255dd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (130 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e5fe <std::vector<LLcol, std::allocator<LLcol> >::capacity() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE8capacityEv():
         :	      /**
         :	       *  Returns the total number of elements that the %vector can
         :	       *  hold before needing to allocate more memory.
         :	       */
         :	      size_type
         :	      capacity() const _GLIBCXX_NOEXCEPT
    4.62 :	  42e5fe:       push   %rbp
    3.85 :	  42e5ff:       mov    %rsp,%rbp
    0.00 :	  42e602:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_end_of_storage
         :	                         - this->_M_impl._M_start); }
    6.92 :	  42e606:       mov    -0x8(%rbp),%rax
    3.85 :	  42e60a:       mov    0x10(%rax),%rax
   66.92 :	  42e60e:       mov    %rax,%rdx
    0.00 :	  42e611:       mov    -0x8(%rbp),%rax
    0.00 :	  42e615:       mov    (%rax),%rax
    7.69 :	  42e618:       sub    %rax,%rdx
    0.77 :	  42e61b:       mov    %rdx,%rax
    0.00 :	  42e61e:       sar    $0x4,%rax
    5.38 :	  42e622:       pop    %rbp
    0.00 :	  42e623:       retq
 Percent |	Source code & Disassembly of main for cycles:u (129 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f5bc <LLcol* std::uninitialized_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_():
         :	   *
         :	   *  Like copy(), but does not require an initialized output range.
         :	  */
         :	  template<typename _InputIterator, typename _ForwardIterator>
         :	    inline _ForwardIterator
         :	    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    2.33 :	  42f5bc:       push   %rbp
    0.00 :	  42f5bd:       mov    %rsp,%rbp
    9.30 :	  42f5c0:       sub    $0x20,%rsp
    6.20 :	  42f5c4:       mov    %rdi,-0x10(%rbp)
   21.71 :	  42f5c8:       mov    %rsi,-0x20(%rbp)
    5.43 :	  42f5cc:       mov    %rdx,-0x18(%rbp)
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType2;
         :
         :	      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
         :	                                        && __is_trivial(_ValueType2))>::
         :	        __uninit_copy(__first, __last, __result);
    2.33 :	  42f5d0:       mov    -0x18(%rbp),%rdx
    4.65 :	  42f5d4:       mov    -0x20(%rbp),%rcx
    0.78 :	  42f5d8:       mov    -0x10(%rbp),%rax
    5.43 :	  42f5dc:       mov    %rcx,%rsi
    0.78 :	  42f5df:       mov    %rax,%rdi
    0.78 :	  42f5e2:       callq  4304b4 <LLcol* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>
         :	    }
    8.53 :	  42f5e7:       leaveq
   31.78 :	  42f5e8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (128 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422bbf <int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&)>:
         :	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiiET0_T_SA_S9_RSaIT1_E():
         :	        }
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         :	    inline _ForwardIterator
         :	    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    0.00 :	  422bbf:       push   %rbp
    0.00 :	  422bc0:       mov    %rsp,%rbp
    4.69 :	  422bc3:       sub    $0x20,%rsp
    0.00 :	  422bc7:       mov    %rdi,-0x10(%rbp)
    0.00 :	  422bcb:       mov    %rsi,-0x20(%rbp)
    5.47 :	  422bcf:       mov    %rdx,-0x18(%rbp)
    0.78 :	  422bd3:       mov    %rcx,-0x8(%rbp)
         :	                           _ForwardIterator __result, allocator<_Tp>&)
         :	    { return std::uninitialized_copy(__first, __last, __result); }
    0.00 :	  422bd7:       mov    -0x18(%rbp),%rdx
    0.78 :	  422bdb:       mov    -0x20(%rbp),%rcx
    1.56 :	  422bdf:       mov    -0x10(%rbp),%rax
    3.91 :	  422be3:       mov    %rcx,%rsi
    0.00 :	  422be6:       mov    %rax,%rdi
    0.78 :	  422be9:       callq  4250b6 <int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
    8.59 :	  422bee:       leaveq
   73.44 :	  422bef:       retq
 Percent |	Source code & Disassembly of main for cycles:u (125 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042918b <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)>:
         :	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_():
         :	  template<bool _IsMove>
         :	    struct __copy_move<_IsMove, true, random_access_iterator_tag>
         :	    {
         :	      template<typename _Tp>
         :	        static _Tp*
         :	        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    2.40 :	  42918b:       push   %rbp
    3.20 :	  42918c:       mov    %rsp,%rbp
    0.00 :	  42918f:       sub    $0x30,%rsp
    0.00 :	  429193:       mov    %rdi,-0x18(%rbp)
   12.00 :	  429197:       mov    %rsi,-0x20(%rbp)
    4.80 :	  42919b:       mov    %rdx,-0x28(%rbp)
         :	        {
         :	          const ptrdiff_t _Num = __last - __first;
    0.80 :	  42919f:       mov    -0x20(%rbp),%rdx
    8.00 :	  4291a3:       mov    -0x18(%rbp),%rax
    4.80 :	  4291a7:       sub    %rax,%rdx
    4.80 :	  4291aa:       mov    %rdx,%rax
    0.00 :	  4291ad:       sar    $0x2,%rax
    2.40 :	  4291b1:       mov    %rax,-0x8(%rbp)
         :	          if (_Num)
    1.60 :	  4291b5:       cmpq   $0x0,-0x8(%rbp)
   28.80 :	  4291ba:       je     4291db <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)+0x50>
         :	            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    0.80 :	  4291bc:       mov    -0x8(%rbp),%rax
    0.80 :	  4291c0:       lea    0x0(,%rax,4),%rdx
    1.60 :	  4291c8:       mov    -0x18(%rbp),%rcx
    1.60 :	  4291cc:       mov    -0x28(%rbp),%rax
    4.00 :	  4291d0:       mov    %rcx,%rsi
    0.00 :	  4291d3:       mov    %rax,%rdi
    0.00 :	  4291d6:       callq  41dc60 <memmove@plt>
         :	          return __result + _Num;
    6.40 :	  4291db:       mov    -0x8(%rbp),%rax
    2.40 :	  4291df:       lea    0x0(,%rax,4),%rdx
    0.00 :	  4291e7:       mov    -0x28(%rbp),%rax
    4.80 :	  4291eb:       add    %rdx,%rax
         :	        }
    0.80 :	  4291ee:       leaveq
    3.20 :	  4291ef:       retq
 Percent |	Source code & Disassembly of main for cycles:u (125 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430677 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::max()>:
         :	_ZNSt26linear_congruential_engineImLm16807ELm0ELm2147483647EE3maxEv():
         :
         :	      /**
         :	       * @brief Gets the largest possible value in the output range.
         :	       */
         :	      static constexpr result_type
         :	      max()
   44.00 :	  430677:       push   %rbp
    9.60 :	  430678:       mov    %rsp,%rbp
         :	      { return __m - 1u; }
    0.80 :	  43067b:       mov    $0x7ffffffe,%eax
   25.60 :	  430680:       pop    %rbp
   20.00 :	  430681:       retq
 Percent |	Source code & Disassembly of main for cycles:u (120 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042669c <void std::_Destroy_aux<true>::__destroy<LLord*>(LLord*, LLord*)>:
         :	_ZNSt12_Destroy_auxILb1EE9__destroyIP5LLordEEvT_S4_():
         :	  template<>
         :	    struct _Destroy_aux<true>
         :	    {
         :	      template<typename _ForwardIterator>
         :	        static void
         :	        __destroy(_ForwardIterator, _ForwardIterator) { }
   50.00 :	  42669c:       push   %rbp
   27.50 :	  42669d:       mov    %rsp,%rbp
    2.50 :	  4266a0:       mov    %rdi,-0x8(%rbp)
   10.83 :	  4266a4:       mov    %rsi,-0x10(%rbp)
    5.83 :	  4266a8:       pop    %rbp
    3.33 :	  4266a9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (117 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428e0f <std::_Niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEENSt11_Niter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  428e0f:       push   %rbp
    5.98 :	  428e10:       mov    %rsp,%rbp
    0.00 :	  428e13:       sub    $0x10,%rsp
    0.00 :	  428e17:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    6.84 :	  428e1b:       mov    -0x10(%rbp),%rax
   44.44 :	  428e1f:       mov    %rax,%rdi
    2.56 :	  428e22:       callq  42916e <std::_Iter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, true>::_S_base(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
   13.68 :	  428e27:       leaveq
   26.50 :	  428e28:       retq
 Percent |	Source code & Disassembly of main for cycles:u (113 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004314b9 <LLcol* std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_():
         :	    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
         :	                   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a2(_II __first, _II __last, _OI __result)
    4.42 :	  4314b9:       push   %rbp
    2.65 :	  4314ba:       mov    %rsp,%rbp
    0.00 :	  4314bd:       push   %r12
    1.77 :	  4314bf:       push   %rbx
    0.88 :	  4314c0:       sub    $0x20,%rsp
    0.88 :	  4314c4:       mov    %rdi,-0x20(%rbp)
    3.54 :	  4314c8:       mov    %rsi,-0x30(%rbp)
    5.31 :	  4314cc:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
         :	                                             std::__niter_base(__last),
         :	                                             std::__niter_base(__result)));
    2.65 :	  4314d0:       mov    -0x28(%rbp),%rax
    7.96 :	  4314d4:       mov    %rax,%rdi
    0.00 :	  4314d7:       callq  43057e <std::_Niter_base<LLcol*>::iterator_type std::__niter_base<LLcol*>(LLcol*)>
    0.88 :	  4314dc:       mov    %rax,%r12
    0.00 :	  4314df:       mov    -0x30(%rbp),%rax
    8.85 :	  4314e3:       mov    %rax,%rdi
    0.00 :	  4314e6:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    4.42 :	  4314eb:       mov    %rax,%rbx
    0.00 :	  4314ee:       mov    -0x20(%rbp),%rax
   14.16 :	  4314f2:       mov    %rax,%rdi
    0.00 :	  4314f5:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    7.96 :	  4314fa:       mov    %r12,%rdx
    0.00 :	  4314fd:       mov    %rbx,%rsi
    0.00 :	  431500:       mov    %rax,%rdi
    0.00 :	  431503:       callq  430531 <LLcol* std::__copy_move_a<false, LLcol const*, LLcol*>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    5.31 :	  431508:       add    $0x20,%rsp
    0.88 :	  43150c:       pop    %rbx
   20.35 :	  43150d:       pop    %r12
    6.19 :	  43150f:       pop    %rbp
    0.88 :	  431510:       retq
 Percent |	Source code & Disassembly of main for cycles:u (111 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	000000000041db20 <operator delete(void*)@plt>:
  100.00 :	  41db20:       jmpq   *0x222522(%rip)        # 640048 <operator delete(void*)@GLIBCXX_3.4>
    0.00 :	  41db26:       pushq  $0x6
    0.00 :	  41db2b:       jmpq   41dab0 <.plt>
 Percent |	Source code & Disassembly of main for cycles:u (110 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304ef <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEELb0EE7_S_baseES8_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    1.82 :	  4304ef:       push   %rbp
   11.82 :	  4304f0:       mov    %rsp,%rbp
    2.73 :	  4304f3:       mov    %rdi,-0x10(%rbp)
         :	      { return __it; }
    2.73 :	  4304f7:       mov    -0x10(%rbp),%rax
   79.09 :	  4304fb:       pop    %rbp
    1.82 :	  4304fc:       retq
 Percent |	Source code & Disassembly of main for cycles:u (109 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f54a <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_create_storage(unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE17_M_create_storageEm():
         :	          _M_impl.deallocate(__p, __n);
         :	      }
         :
         :	    private:
         :	      void
         :	      _M_create_storage(size_t __n)
    2.75 :	  42f54a:       push   %rbp
    0.00 :	  42f54b:       mov    %rsp,%rbp
    5.50 :	  42f54e:       sub    $0x10,%rsp
    1.83 :	  42f552:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f556:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        this->_M_impl._M_start = this->_M_allocate(__n);
    1.83 :	  42f55a:       mov    -0x10(%rbp),%rdx
    8.26 :	  42f55e:       mov    -0x8(%rbp),%rax
    0.92 :	  42f562:       mov    %rdx,%rsi
    0.00 :	  42f565:       mov    %rax,%rdi
    1.83 :	  42f568:       callq  42f0fa <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_allocate(unsigned long)>
    5.50 :	  42f56d:       mov    -0x8(%rbp),%rdx
    3.67 :	  42f571:       mov    %rax,(%rdx)
         :	        this->_M_impl._M_finish = this->_M_impl._M_start;
   18.35 :	  42f574:       mov    -0x8(%rbp),%rax
    0.00 :	  42f578:       mov    (%rax),%rdx
   23.85 :	  42f57b:       mov    -0x8(%rbp),%rax
    0.92 :	  42f57f:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8.26 :	  42f583:       mov    -0x8(%rbp),%rax
    0.00 :	  42f587:       mov    (%rax),%rax
    7.34 :	  42f58a:       mov    -0x10(%rbp),%rdx
    0.00 :	  42f58e:       shl    $0x4,%rdx
    2.75 :	  42f592:       add    %rax,%rdx
    0.00 :	  42f595:       mov    -0x8(%rbp),%rax
    0.92 :	  42f599:       mov    %rdx,0x10(%rax)
         :	      }
    0.92 :	  42f59d:       leaveq
    4.59 :	  42f59e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (107 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f5a0 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol const* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS1_SaIS1_EEEC2ERKS3_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    0.93 :	  42f5a0:       push   %rbp
    3.74 :	  42f5a1:       mov    %rsp,%rbp
   16.82 :	  42f5a4:       mov    %rdi,-0x8(%rbp)
    1.87 :	  42f5a8:       mov    %rsi,-0x10(%rbp)
    6.54 :	  42f5ac:       mov    -0x10(%rbp),%rax
   21.50 :	  42f5b0:       mov    (%rax),%rdx
   30.84 :	  42f5b3:       mov    -0x8(%rbp),%rax
    0.93 :	  42f5b7:       mov    %rdx,(%rax)
   13.08 :	  42f5ba:       pop    %rbp
    3.74 :	  42f5bb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (107 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428a25 <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)>:
         :	_ZSt10__fill_n_aIPdmdEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_():
         :	    }
         :
         :	  template<typename _OutputIterator, typename _Size, typename _Tp>
         :	    inline typename
         :	    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :	    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    0.00 :	  428a25:       push   %rbp
    0.00 :	  428a26:       mov    %rsp,%rbp
    0.00 :	  428a29:       mov    %rdi,-0x18(%rbp)
    0.00 :	  428a2d:       mov    %rsi,-0x20(%rbp)
    0.00 :	  428a31:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      const _Tp __tmp = __value;
    0.00 :	  428a35:       mov    -0x28(%rbp),%rax
    0.00 :	  428a39:       mov    (%rax),%rax
    0.00 :	  428a3c:       mov    %rax,-0x10(%rbp)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428a40:       mov    -0x20(%rbp),%rax
    0.00 :	  428a44:       mov    %rax,-0x8(%rbp)
    0.00 :	  428a48:       jmp    428a5f <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)+0x3a>
         :	           __niter > 0; --__niter, ++__first)
         :	        *__first = __tmp;
    5.61 :	  428a4a:       mov    -0x18(%rbp),%rdx
    0.93 :	  428a4e:       mov    -0x10(%rbp),%rax
    3.74 :	  428a52:       mov    %rax,(%rdx)
         :	      for (__decltype(__n + 0) __niter = __n;
   14.95 :	  428a55:       subq   $0x1,-0x8(%rbp)
   10.28 :	  428a5a:       addq   $0x8,-0x18(%rbp)
    1.87 :	  428a5f:       cmpq   $0x0,-0x8(%rbp)
   62.62 :	  428a64:       jne    428a4a <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)+0x25>
         :	      return __first;
    0.00 :	  428a66:       mov    -0x18(%rbp),%rax
         :	    }
    0.00 :	  428a6a:       pop    %rbp
    0.00 :	  428a6b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (105 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428750 <std::_Miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
         :	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEENSt11_Miter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Miter_base<_Iterator>::iterator_type
         :	    __miter_base(_Iterator __it)
    4.76 :	  428750:       push   %rbp
   25.71 :	  428751:       mov    %rsp,%rbp
    0.00 :	  428754:       sub    $0x10,%rsp
    0.00 :	  428758:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Miter_base<_Iterator>::_S_base(__it); }
    8.57 :	  42875c:       mov    -0x10(%rbp),%rax
   40.95 :	  428760:       mov    %rax,%rdi
    7.62 :	  428763:       callq  428e01 <std::_Iter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, false>::_S_base(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    0.00 :	  428768:       leaveq
   12.38 :	  428769:       retq
 Percent |	Source code & Disassembly of main for cycles:u (103 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b8e <std::vector<int, std::allocator<int> >::end() const>:
         :	_ZNKSt6vectorIiSaIiEE3endEv():
         :	       *  Returns a read-only (constant) iterator that points one past
         :	       *  the last element in the %vector.  Iteration is done in
         :	       *  ordinary element order.
         :	       */
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
    6.80 :	  422b8e:       push   %rbp
    0.00 :	  422b8f:       mov    %rsp,%rbp
    0.00 :	  422b92:       sub    $0x20,%rsp
    5.83 :	  422b96:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_finish); }
    0.97 :	  422b9a:       mov    -0x18(%rbp),%rax
    5.83 :	  422b9e:       mov    0x8(%rax),%rax
   27.18 :	  422ba2:       mov    %rax,-0x8(%rbp)
    1.94 :	  422ba6:       lea    -0x8(%rbp),%rdx
    0.00 :	  422baa:       lea    -0x10(%rbp),%rax
    0.00 :	  422bae:       mov    %rdx,%rsi
    0.00 :	  422bb1:       mov    %rax,%rdi
    9.71 :	  422bb4:       callq  42509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>
    0.00 :	  422bb9:       mov    -0x10(%rbp),%rax
   40.78 :	  422bbd:       leaveq
    0.97 :	  422bbe:       retq
 Percent |	Source code & Disassembly of main for cycles:u (99 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428e29 <int* std::__copy_move_a<false, int const*, int*>(int const*, int const*, int*)>:
         :	_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_():
         :	        }
         :	    };
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a(_II __first, _II __last, _OI __result)
   10.10 :	  428e29:       push   %rbp
    2.02 :	  428e2a:       mov    %rsp,%rbp
    2.02 :	  428e2d:       sub    $0x30,%rsp
    0.00 :	  428e31:       mov    %rdi,-0x18(%rbp)
    3.03 :	  428e35:       mov    %rsi,-0x20(%rbp)
   12.12 :	  428e39:       mov    %rdx,-0x28(%rbp)
         :	      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
         :	      typedef typename iterator_traits<_II>::iterator_category _Category;
         :	      const bool __simple = (__is_trivial(_ValueTypeI)
         :	                             && __is_pointer<_II>::__value
         :	                             && __is_pointer<_OI>::__value
         :	                             && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    9.09 :	  428e3d:       movb   $0x1,-0x1(%rbp)
         :
         :	      return std::__copy_move<_IsMove, __simple,
         :	                              _Category>::__copy_m(__first, __last, __result);
   12.12 :	  428e41:       mov    -0x28(%rbp),%rdx
    5.05 :	  428e45:       mov    -0x20(%rbp),%rcx
    0.00 :	  428e49:       mov    -0x18(%rbp),%rax
    1.01 :	  428e4d:       mov    %rcx,%rsi
    2.02 :	  428e50:       mov    %rax,%rdi
    1.01 :	  428e53:       callq  42918b <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)>
         :	    }
    0.00 :	  428e58:       leaveq
   40.40 :	  428e59:       retq
 Percent |	Source code & Disassembly of main for cycles:u (99 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e702 <std::vector<LLcol, std::allocator<LLcol> >::end()>:
         :	_ZNSt6vectorI5LLcolSaIS0_EE3endEv():
         :	       *  Returns a read/write iterator that points one past the last
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      end() _GLIBCXX_NOEXCEPT
    6.06 :	  42e702:       push   %rbp
    2.02 :	  42e703:       mov    %rsp,%rbp
    5.05 :	  42e706:       sub    $0x20,%rsp
    0.00 :	  42e70a:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_finish); }
    5.05 :	  42e70e:       mov    -0x18(%rbp),%rax
    3.03 :	  42e712:       lea    0x8(%rax),%rdx
    4.04 :	  42e716:       lea    -0x10(%rbp),%rax
    0.00 :	  42e71a:       mov    %rdx,%rsi
    1.01 :	  42e71d:       mov    %rax,%rdi
    0.00 :	  42e720:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    5.05 :	  42e725:       mov    -0x10(%rbp),%rax
   65.66 :	  42e729:       leaveq
    3.03 :	  42e72a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (98 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427c98 <int* std::copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
         :	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_():
         :	   *  Note that the end of the output range is permitted to be contained
         :	   *  within [first,last).
         :	  */
         :	  template<typename _II, typename _OI>
         :	    inline _OI
         :	    copy(_II __first, _II __last, _OI __result)
    5.10 :	  427c98:       push   %rbp
    0.00 :	  427c99:       mov    %rsp,%rbp
    3.06 :	  427c9c:       push   %rbx
    3.06 :	  427c9d:       sub    $0x28,%rsp
    5.10 :	  427ca1:       mov    %rdi,-0x20(%rbp)
    2.04 :	  427ca5:       mov    %rsi,-0x30(%rbp)
    4.08 :	  427ca9:       mov    %rdx,-0x28(%rbp)
         :	            typename iterator_traits<_II>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
         :	              (std::__miter_base(__first), std::__miter_base(__last),
         :	               __result));
    0.00 :	  427cad:       mov    -0x30(%rbp),%rax
    3.06 :	  427cb1:       mov    %rax,%rdi
    0.00 :	  427cb4:       callq  428750 <std::_Miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    8.16 :	  427cb9:       mov    %rax,%rbx
    0.00 :	  427cbc:       mov    -0x20(%rbp),%rax
   22.45 :	  427cc0:       mov    %rax,%rdi
    0.00 :	  427cc3:       callq  428750 <std::_Miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    0.00 :	  427cc8:       mov    -0x28(%rbp),%rdx
    4.08 :	  427ccc:       mov    %rbx,%rsi
    2.04 :	  427ccf:       mov    %rax,%rdi
    0.00 :	  427cd2:       callq  42876a <int* std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
         :	    }
    6.12 :	  427cd7:       add    $0x28,%rsp
    2.04 :	  427cdb:       pop    %rbx
   23.47 :	  427cdc:       pop    %rbp
    6.12 :	  427cdd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (97 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424998 <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>:
         :	_ZNSt12_Vector_baseIiSaIiEE17_M_create_storageEm():
         :	          _M_impl.deallocate(__p, __n);
         :	      }
         :
         :	    private:
         :	      void
         :	      _M_create_storage(size_t __n)
    5.15 :	  424998:       push   %rbp
    0.00 :	  424999:       mov    %rsp,%rbp
    2.06 :	  42499c:       sub    $0x10,%rsp
    1.03 :	  4249a0:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4249a4:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        this->_M_impl._M_start = this->_M_allocate(__n);
    3.09 :	  4249a8:       mov    -0x10(%rbp),%rdx
   12.37 :	  4249ac:       mov    -0x8(%rbp),%rax
    0.00 :	  4249b0:       mov    %rdx,%rsi
    0.00 :	  4249b3:       mov    %rax,%rdi
    1.03 :	  4249b6:       callq  423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    9.28 :	  4249bb:       mov    -0x8(%rbp),%rdx
    3.09 :	  4249bf:       mov    %rax,(%rdx)
         :	        this->_M_impl._M_finish = this->_M_impl._M_start;
   20.62 :	  4249c2:       mov    -0x8(%rbp),%rax
    0.00 :	  4249c6:       mov    (%rax),%rdx
    8.25 :	  4249c9:       mov    -0x8(%rbp),%rax
    0.00 :	  4249cd:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8.25 :	  4249d1:       mov    -0x8(%rbp),%rax
    2.06 :	  4249d5:       mov    (%rax),%rax
   15.46 :	  4249d8:       mov    -0x10(%rbp),%rdx
    0.00 :	  4249dc:       shl    $0x2,%rdx
    1.03 :	  4249e0:       add    %rax,%rdx
    3.09 :	  4249e3:       mov    -0x8(%rbp),%rax
    4.12 :	  4249e7:       mov    %rdx,0x10(%rax)
         :	      }
    0.00 :	  4249eb:       leaveq
    0.00 :	  4249ec:       retq
 Percent |	Source code & Disassembly of main for cycles:u (97 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041eb06 <std::__lg(long)>:
         :	_ZSt4__lgl():
         :	  __lg(unsigned __n)
         :	  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
         :
         :	  inline _GLIBCXX_CONSTEXPR long
         :	  __lg(long __n)
         :	  { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }
    5.15 :	  41eb06:       push   %rbp
    1.03 :	  41eb07:       mov    %rsp,%rbp
    0.00 :	  41eb0a:       mov    %rdi,-0x8(%rbp)
   12.37 :	  41eb0e:       mov    $0x40,%edx
    0.00 :	  41eb13:       mov    -0x8(%rbp),%rax
   22.68 :	  41eb17:       lzcnt  %rax,%rax
   28.87 :	  41eb1c:       cltq
   11.34 :	  41eb1e:       sub    %rax,%rdx
    9.28 :	  41eb21:       mov    %rdx,%rax
    0.00 :	  41eb24:       sub    $0x1,%rax
    9.28 :	  41eb28:       pop    %rbp
    0.00 :	  41eb29:       retq
 Percent |	Source code & Disassembly of main for cycles:u (92 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e71 <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES8_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    3.26 :	  430e71:       push   %rbp
   18.48 :	  430e72:       mov    %rsp,%rbp
    2.17 :	  430e75:       sub    $0x10,%rsp
    0.00 :	  430e79:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
   21.74 :	  430e7d:       lea    -0x10(%rbp),%rax
    3.26 :	  430e81:       mov    %rax,%rdi
    0.00 :	  430e84:       callq  431512 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    1.09 :	  430e89:       mov    (%rax),%rax
   47.83 :	  430e8c:       leaveq
    2.17 :	  430e8d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (92 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425184 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_create_storage(unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE17_M_create_storageEm():
         :	          _M_impl.deallocate(__p, __n);
         :	      }
         :
         :	    private:
         :	      void
         :	      _M_create_storage(size_t __n)
    8.70 :	  425184:       push   %rbp
    0.00 :	  425185:       mov    %rsp,%rbp
    2.17 :	  425188:       sub    $0x10,%rsp
    2.17 :	  42518c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425190:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        this->_M_impl._M_start = this->_M_allocate(__n);
    5.43 :	  425194:       mov    -0x10(%rbp),%rdx
    8.70 :	  425198:       mov    -0x8(%rbp),%rax
   10.87 :	  42519c:       mov    %rdx,%rsi
    0.00 :	  42519f:       mov    %rax,%rdi
    4.35 :	  4251a2:       callq  4267ac <std::_Vector_base<LLord, std::allocator<LLord> >::_M_allocate(unsigned long)>
    4.35 :	  4251a7:       mov    -0x8(%rbp),%rdx
    2.17 :	  4251ab:       mov    %rax,(%rdx)
         :	        this->_M_impl._M_finish = this->_M_impl._M_start;
   10.87 :	  4251ae:       mov    -0x8(%rbp),%rax
    0.00 :	  4251b2:       mov    (%rax),%rdx
   14.13 :	  4251b5:       mov    -0x8(%rbp),%rax
    0.00 :	  4251b9:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    6.52 :	  4251bd:       mov    -0x8(%rbp),%rax
    0.00 :	  4251c1:       mov    (%rax),%rax
    3.26 :	  4251c4:       mov    -0x10(%rbp),%rdx
    0.00 :	  4251c8:       shl    $0x4,%rdx
    4.35 :	  4251cc:       add    %rax,%rdx
    0.00 :	  4251cf:       mov    -0x8(%rbp),%rax
    1.09 :	  4251d3:       mov    %rdx,0x10(%rax)
         :	      }
    9.78 :	  4251d7:       leaveq
    1.09 :	  4251d8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (92 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d632 <std::allocator<LLcol>::~allocator()>:
         :	_ZNSaI5LLcolED2Ev():
         :	      : __allocator_base<_Tp>(__a) { }
         :
         :	      template<typename _Tp1>
         :	        allocator(const allocator<_Tp1>&) throw() { }
         :
         :	      ~allocator() throw() { }
    7.61 :	  42d632:       push   %rbp
    0.00 :	  42d633:       mov    %rsp,%rbp
    8.70 :	  42d636:       sub    $0x10,%rsp
    0.00 :	  42d63a:       mov    %rdi,-0x8(%rbp)
    1.09 :	  42d63e:       mov    -0x8(%rbp),%rax
   56.52 :	  42d642:       mov    %rax,%rdi
    6.52 :	  42d645:       callq  42e7d6 <__gnu_cxx::new_allocator<LLcol>::~new_allocator()>
    4.35 :	  42d64a:       leaveq
   15.22 :	  42d64b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (87 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425c92 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  425c92:       push   %rbp
    4.60 :	  425c93:       mov    %rsp,%rbp
    0.00 :	  425c96:       sub    $0x20,%rsp
    0.00 :	  425c9a:       mov    %rdi,-0x8(%rbp)
    3.45 :	  425c9e:       mov    %rsi,-0x10(%rbp)
    1.15 :	  425ca2:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.00 :	  425ca6:       mov    -0x8(%rbp),%rax
    1.15 :	  425caa:       mov    %rax,%rdi
    1.15 :	  425cad:       callq  4274b0 <__gnu_cxx::new_allocator<int>::max_size() const>
   11.49 :	  425cb2:       cmp    -0x10(%rbp),%rax
    5.75 :	  425cb6:       setb   %al
    5.75 :	  425cb9:       test   %al,%al
    0.00 :	  425cbb:       je     425cc2 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  425cbd:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8.05 :	  425cc2:       mov    -0x10(%rbp),%rax
   42.53 :	  425cc6:       shl    $0x2,%rax
    1.15 :	  425cca:       mov    %rax,%rdi
    2.30 :	  425ccd:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.00 :	  425cd2:       leaveq
   11.49 :	  425cd3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (83 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428acc <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)>:
         :	_ZSt10__fill_n_aIPimiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_():
         :	    }
         :
         :	  template<typename _OutputIterator, typename _Size, typename _Tp>
         :	    inline typename
         :	    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :	    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    0.00 :	  428acc:       push   %rbp
    0.00 :	  428acd:       mov    %rsp,%rbp
    0.00 :	  428ad0:       mov    %rdi,-0x18(%rbp)
    0.00 :	  428ad4:       mov    %rsi,-0x20(%rbp)
    0.00 :	  428ad8:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      const _Tp __tmp = __value;
    0.00 :	  428adc:       mov    -0x28(%rbp),%rax
    0.00 :	  428ae0:       mov    (%rax),%eax
    0.00 :	  428ae2:       mov    %eax,-0xc(%rbp)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428ae5:       mov    -0x20(%rbp),%rax
    0.00 :	  428ae9:       mov    %rax,-0x8(%rbp)
    0.00 :	  428aed:       jmp    428b02 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)+0x36>
         :	           __niter > 0; --__niter, ++__first)
         :	        *__first = __tmp;
    7.23 :	  428aef:       mov    -0x18(%rbp),%rax
    2.41 :	  428af3:       mov    -0xc(%rbp),%edx
    1.20 :	  428af6:       mov    %edx,(%rax)
         :	      for (__decltype(__n + 0) __niter = __n;
   20.48 :	  428af8:       subq   $0x1,-0x8(%rbp)
    9.64 :	  428afd:       addq   $0x4,-0x18(%rbp)
    3.61 :	  428b02:       cmpq   $0x0,-0x8(%rbp)
   55.42 :	  428b07:       jne    428aef <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)+0x23>
         :	      return __first;
    0.00 :	  428b09:       mov    -0x18(%rbp),%rax
         :	    }
    0.00 :	  428b0d:       pop    %rbp
    0.00 :	  428b0e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (82 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::_Vector_impl(std::allocator<LLcol> const&)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE12_Vector_implC2ERKS1_():
         :
         :	        _Vector_impl()
         :	        : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
         :	        { }
         :
         :	        _Vector_impl(_Tp_alloc_type const& __a)
    4.88 :	  42f502:       push   %rbp
    2.44 :	  42f503:       mov    %rsp,%rbp
    0.00 :	  42f506:       sub    $0x10,%rsp
    4.88 :	  42f50a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f50e:       mov    %rsi,-0x10(%rbp)
         :	        : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    3.66 :	  42f512:       mov    -0x10(%rbp),%rdx
    4.88 :	  42f516:       mov    -0x8(%rbp),%rax
    3.66 :	  42f51a:       mov    %rdx,%rsi
    0.00 :	  42f51d:       mov    %rax,%rdi
    0.00 :	  42f520:       callq  42f4dc <std::allocator<LLcol>::allocator(std::allocator<LLcol> const&)>
    3.66 :	  42f525:       mov    -0x8(%rbp),%rax
    8.54 :	  42f529:       movq   $0x0,(%rax)
   32.93 :	  42f530:       mov    -0x8(%rbp),%rax
    2.44 :	  42f534:       movq   $0x0,0x8(%rax)
   12.20 :	  42f53c:       mov    -0x8(%rbp),%rax
    0.00 :	  42f540:       movq   $0x0,0x10(%rax)
         :	        { }
   12.20 :	  42f548:       leaveq
    3.66 :	  42f549:       retq
 Percent |	Source code & Disassembly of main for cycles:u (81 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430f92 <void __gnu_cxx::new_allocator<double>::construct<double, double>(double*, double&&)>:
         :	_ZN9__gnu_cxx13new_allocatorIdE9constructIdIdEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    2.47 :	  430f92:       push   %rbp
    0.00 :	  430f93:       mov    %rsp,%rbp
   11.11 :	  430f96:       push   %rbx
    0.00 :	  430f97:       sub    $0x28,%rsp
    0.00 :	  430f9b:       mov    %rdi,-0x18(%rbp)
    4.94 :	  430f9f:       mov    %rsi,-0x20(%rbp)
    1.23 :	  430fa3:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  430fa7:       mov    -0x28(%rbp),%rax
    9.88 :	  430fab:       mov    %rax,%rdi
    0.00 :	  430fae:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  430fb3:       mov    (%rax),%rbx
   34.57 :	  430fb6:       mov    -0x20(%rbp),%rax
    0.00 :	  430fba:       mov    %rax,%rsi
    1.23 :	  430fbd:       mov    $0x8,%edi
    1.23 :	  430fc2:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  430fc7:       test   %rax,%rax
    0.00 :	  430fca:       je     430fcf <void __gnu_cxx::new_allocator<double>::construct<double, double>(double*, double&&)+0x3d>
    2.47 :	  430fcc:       mov    %rbx,(%rax)
   20.99 :	  430fcf:       add    $0x28,%rsp
    1.23 :	  430fd3:       pop    %rbx
    0.00 :	  430fd4:       pop    %rbp
    8.64 :	  430fd5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (81 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f4dc <std::allocator<LLcol>::allocator(std::allocator<LLcol> const&)>:
         :	_ZNSaI5LLcolEC2ERKS0_():
         :	      typedef true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      allocator() throw() { }
         :
         :	      allocator(const allocator& __a) throw()
    9.88 :	  42f4dc:       push   %rbp
    4.94 :	  42f4dd:       mov    %rsp,%rbp
    3.70 :	  42f4e0:       sub    $0x10,%rsp
    7.41 :	  42f4e4:       mov    %rdi,-0x8(%rbp)
    7.41 :	  42f4e8:       mov    %rsi,-0x10(%rbp)
         :	      : __allocator_base<_Tp>(__a) { }
    0.00 :	  42f4ec:       mov    -0x10(%rbp),%rdx
   29.63 :	  42f4f0:       mov    -0x8(%rbp),%rax
   14.81 :	  42f4f4:       mov    %rdx,%rsi
    0.00 :	  42f4f7:       mov    %rax,%rdi
    4.94 :	  42f4fa:       callq  4304a6 <__gnu_cxx::new_allocator<LLcol>::new_allocator(__gnu_cxx::new_allocator<LLcol> const&)>
    2.47 :	  42f4ff:       leaveq
   14.81 :	  42f500:       retq
 Percent |	Source code & Disassembly of main for cycles:u (81 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>:
         :	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   17.28 :	  42ec4e:       push   %rbp
    8.64 :	  42ec4f:       mov    %rsp,%rbp
    0.00 :	  42ec52:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
   11.11 :	  42ec56:       mov    -0x8(%rbp),%rax
   62.96 :	  42ec5a:       pop    %rbp
    0.00 :	  42ec5b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (79 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042048a <std::allocator<int>::~allocator()>:
         :	_ZNSaIiED2Ev():
         :	      : __allocator_base<_Tp>(__a) { }
         :
         :	      template<typename _Tp1>
         :	        allocator(const allocator<_Tp1>&) throw() { }
         :
         :	      ~allocator() throw() { }
   10.13 :	  42048a:       push   %rbp
    6.33 :	  42048b:       mov    %rsp,%rbp
    3.80 :	  42048e:       sub    $0x10,%rsp
    0.00 :	  420492:       mov    %rdi,-0x8(%rbp)
    8.86 :	  420496:       mov    -0x8(%rbp),%rax
   49.37 :	  42049a:       mov    %rax,%rdi
    0.00 :	  42049d:       callq  422124 <__gnu_cxx::new_allocator<int>::~new_allocator()>
    2.53 :	  4204a2:       leaveq
   18.99 :	  4204a3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (74 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042510c <std::allocator<LLord>::allocator(std::allocator<LLord> const&)>:
         :	_ZNSaI5LLordEC2ERKS0_():
         :	      typedef true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      allocator() throw() { }
         :
         :	      allocator(const allocator& __a) throw()
   17.57 :	  42510c:       push   %rbp
    0.00 :	  42510d:       mov    %rsp,%rbp
   13.51 :	  425110:       sub    $0x10,%rsp
    0.00 :	  425114:       mov    %rdi,-0x8(%rbp)
    2.70 :	  425118:       mov    %rsi,-0x10(%rbp)
         :	      : __allocator_base<_Tp>(__a) { }
    0.00 :	  42511c:       mov    -0x10(%rbp),%rdx
   45.95 :	  425120:       mov    -0x8(%rbp),%rax
    4.05 :	  425124:       mov    %rdx,%rsi
    0.00 :	  425127:       mov    %rax,%rdi
    0.00 :	  42512a:       callq  426e6e <__gnu_cxx::new_allocator<LLord>::new_allocator(__gnu_cxx::new_allocator<LLord> const&)>
   10.81 :	  42512f:       leaveq
    5.41 :	  425130:       retq
 Percent |	Source code & Disassembly of main for cycles:u (73 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042fe6c <__gnu_cxx::new_allocator<LLcol>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  42fe6c:       push   %rbp
   12.33 :	  42fe6d:       mov    %rsp,%rbp
    0.00 :	  42fe70:       sub    $0x20,%rsp
    0.00 :	  42fe74:       mov    %rdi,-0x8(%rbp)
   13.70 :	  42fe78:       mov    %rsi,-0x10(%rbp)
    2.74 :	  42fe7c:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    5.48 :	  42fe80:       mov    -0x8(%rbp),%rax
   10.96 :	  42fe84:       mov    %rax,%rdi
    0.00 :	  42fe87:       callq  430ade <__gnu_cxx::new_allocator<LLcol>::max_size() const>
    1.37 :	  42fe8c:       cmp    -0x10(%rbp),%rax
   31.51 :	  42fe90:       setb   %al
    1.37 :	  42fe93:       test   %al,%al
    0.00 :	  42fe95:       je     42fe9c <__gnu_cxx::new_allocator<LLcol>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  42fe97:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    5.48 :	  42fe9c:       mov    -0x10(%rbp),%rax
    0.00 :	  42fea0:       shl    $0x4,%rax
    1.37 :	  42fea4:       mov    %rax,%rdi
    0.00 :	  42fea7:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    2.74 :	  42feac:       leaveq
   10.96 :	  42fead:       retq
 Percent |	Source code & Disassembly of main for cycles:u (71 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f964 <decltype (_S_construct({parm#1}, {parm#2}, (forward<double>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double>(std::allocator<double>&, double*, double&&)>:
         :	_ZNSt16allocator_traitsISaIdEE9constructIdIdEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS3_():
         :	       *  if that expression is well-formed, otherwise uses placement-new
         :	       *  to construct an object of type @a _Tp at location @a __p from the
         :	       *  arguments @a __args...
         :	      */
         :	      template<typename _Tp, typename... _Args>
         :	        static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   15.49 :	  42f964:       push   %rbp
    9.86 :	  42f965:       mov    %rsp,%rbp
    4.23 :	  42f968:       sub    $0x20,%rsp
    0.00 :	  42f96c:       mov    %rdi,-0x8(%rbp)
    5.63 :	  42f970:       mov    %rsi,-0x10(%rbp)
    2.82 :	  42f974:       mov    %rdx,-0x18(%rbp)
         :	        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
         :	        { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
   11.27 :	  42f978:       mov    -0x18(%rbp),%rax
    0.00 :	  42f97c:       mov    %rax,%rdi
    2.82 :	  42f97f:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42f984:       mov    %rax,%rdx
    0.00 :	  42f987:       mov    -0x10(%rbp),%rcx
    5.63 :	  42f98b:       mov    -0x8(%rbp),%rax
    0.00 :	  42f98f:       mov    %rcx,%rsi
    2.82 :	  42f992:       mov    %rax,%rdi
    0.00 :	  42f995:       callq  4308e5 <std::enable_if<std::allocator_traits<std::allocator<double> >::__construct_helper<double<double> >::value, void>::type std::allocator_traits<std::allocator<double> >::_S_construct<double, double>(std::allocator<double>&, double*, double&&)>
    8.45 :	  42f99a:       leaveq
   30.99 :	  42f99b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (69 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043047c <std::enable_if<!std::allocator_traits<std::allocator<LLcol> >::__select_helper<std::allocator<LLcol> const>::value, std::allocator<LLcol> const>::type std::allocator_traits<std::allocator<LLcol> >::_S_select<std::allocator<LLcol> const>(std::allocator<LLcol> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLcolEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_():
         :	        { return __a.select_on_container_copy_construction(); }
         :
         :	      template<typename _Alloc2>
         :	        static typename
         :	        enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
         :	        _S_select(_Alloc2& __a)
    7.25 :	  43047c:       push   %rbp
    0.00 :	  43047d:       mov    %rsp,%rbp
    0.00 :	  430480:       sub    $0x10,%rsp
    8.70 :	  430484:       mov    %rdi,-0x8(%rbp)
    2.90 :	  430488:       mov    %rsi,-0x10(%rbp)
         :	        { return __a; }
    0.00 :	  43048c:       mov    -0x10(%rbp),%rdx
   27.54 :	  430490:       mov    -0x8(%rbp),%rax
    0.00 :	  430494:       mov    %rdx,%rsi
    0.00 :	  430497:       mov    %rax,%rdi
    0.00 :	  43049a:       callq  42f4dc <std::allocator<LLcol>::allocator(std::allocator<LLcol> const&)>
   11.59 :	  43049f:       mov    -0x8(%rbp),%rax
   30.43 :	  4304a3:       leaveq
   11.59 :	  4304a4:       retq
 Percent |	Source code & Disassembly of main for cycles:u (69 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422cc6 <std::vector<LLord, std::allocator<LLord> >::begin() const>:
         :	_ZNKSt6vectorI5LLordSaIS0_EE5beginEv():
         :	       *  Returns a read-only (constant) iterator that points to the
         :	       *  first element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      const_iterator
         :	      begin() const _GLIBCXX_NOEXCEPT
    8.70 :	  422cc6:       push   %rbp
    0.00 :	  422cc7:       mov    %rsp,%rbp
    2.90 :	  422cca:       sub    $0x20,%rsp
    1.45 :	  422cce:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_start); }
    0.00 :	  422cd2:       mov    -0x18(%rbp),%rax
    2.90 :	  422cd6:       mov    (%rax),%rax
   30.43 :	  422cd9:       mov    %rax,-0x8(%rbp)
    4.35 :	  422cdd:       lea    -0x8(%rbp),%rdx
    0.00 :	  422ce1:       lea    -0x10(%rbp),%rax
    0.00 :	  422ce5:       mov    %rdx,%rsi
    0.00 :	  422ce8:       mov    %rax,%rdi
    4.35 :	  422ceb:       callq  4251da <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::__normal_iterator(LLord const* const&)>
    0.00 :	  422cf0:       mov    -0x10(%rbp),%rax
   44.93 :	  422cf4:       leaveq
    0.00 :	  422cf5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (68 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428e01 <std::_Iter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, false>::_S_base(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEELb0EE7_S_baseES7_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    1.47 :	  428e01:       push   %rbp
   22.06 :	  428e02:       mov    %rsp,%rbp
    4.41 :	  428e05:       mov    %rdi,-0x10(%rbp)
         :	      { return __it; }
    4.41 :	  428e09:       mov    -0x10(%rbp),%rax
   67.65 :	  428e0d:       pop    %rbp
    0.00 :	  428e0e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (66 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b5e <std::vector<int, std::allocator<int> >::begin() const>:
         :	_ZNKSt6vectorIiSaIiEE5beginEv():
         :	       *  Returns a read-only (constant) iterator that points to the
         :	       *  first element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      const_iterator
         :	      begin() const _GLIBCXX_NOEXCEPT
    6.06 :	  422b5e:       push   %rbp
    1.52 :	  422b5f:       mov    %rsp,%rbp
    6.06 :	  422b62:       sub    $0x20,%rsp
    0.00 :	  422b66:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_start); }
    1.52 :	  422b6a:       mov    -0x18(%rbp),%rax
   16.67 :	  422b6e:       mov    (%rax),%rax
   22.73 :	  422b71:       mov    %rax,-0x8(%rbp)
    7.58 :	  422b75:       lea    -0x8(%rbp),%rdx
    0.00 :	  422b79:       lea    -0x10(%rbp),%rax
    0.00 :	  422b7d:       mov    %rdx,%rsi
    0.00 :	  422b80:       mov    %rax,%rdi
    4.55 :	  422b83:       callq  42509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>
    0.00 :	  422b88:       mov    -0x10(%rbp),%rax
   33.33 :	  422b8c:       leaveq
    0.00 :	  422b8d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (65 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004267ac <std::_Vector_base<LLord, std::allocator<LLord> >::_M_allocate(unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE11_M_allocateEm():
         :
         :	    public:
         :	      _Vector_impl _M_impl;
         :
         :	      pointer
         :	      _M_allocate(size_t __n)
    4.62 :	  4267ac:       push   %rbp
    6.15 :	  4267ad:       mov    %rsp,%rbp
    0.00 :	  4267b0:       sub    $0x10,%rsp
    3.08 :	  4267b4:       mov    %rdi,-0x8(%rbp)
   23.08 :	  4267b8:       mov    %rsi,-0x10(%rbp)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    4.62 :	  4267bc:       cmpq   $0x0,-0x10(%rbp)
   32.31 :	  4267c1:       je     4267dd <std::_Vector_base<LLord, std::allocator<LLord> >::_M_allocate(unsigned long)+0x31>
    1.54 :	  4267c3:       mov    -0x8(%rbp),%rax
    7.69 :	  4267c7:       mov    -0x10(%rbp),%rcx
    0.00 :	  4267cb:       mov    $0x0,%edx
    0.00 :	  4267d0:       mov    %rcx,%rsi
    3.08 :	  4267d3:       mov    %rax,%rdi
    1.54 :	  4267d6:       callq  427a16 <__gnu_cxx::new_allocator<LLord>::allocate(unsigned long, void const*)>
    1.54 :	  4267db:       jmp    4267e2 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_allocate(unsigned long)+0x36>
    0.00 :	  4267dd:       mov    $0x0,%eax
    6.15 :	  4267e2:       leaveq
    4.62 :	  4267e3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (64 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e3a0 <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_select_on_copy(std::allocator<LLcol> const&)>:
         :	_ZN9__gnu_cxx14__alloc_traitsISaI5LLcolEE17_S_select_on_copyERKS2_():
         :	    template<typename _Ptr>
         :	      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
         :	      destroy(_Alloc& __a, _Ptr __p)
         :	      { _Base_type::destroy(__a, std::addressof(*__p)); }
         :
         :	    static _Alloc _S_select_on_copy(const _Alloc& __a)
   10.94 :	  42e3a0:       push   %rbp
    0.00 :	  42e3a1:       mov    %rsp,%rbp
    0.00 :	  42e3a4:       sub    $0x10,%rsp
    1.56 :	  42e3a8:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42e3ac:       mov    %rsi,-0x10(%rbp)
         :	    { return _Base_type::select_on_container_copy_construction(__a); }
    3.12 :	  42e3b0:       mov    -0x8(%rbp),%rax
    6.25 :	  42e3b4:       mov    -0x10(%rbp),%rdx
   21.88 :	  42e3b8:       mov    %rdx,%rsi
    0.00 :	  42e3bb:       mov    %rax,%rdi
    0.00 :	  42e3be:       callq  42f4b3 <std::allocator_traits<std::allocator<LLcol> >::select_on_container_copy_construction(std::allocator<LLcol> const&)>
   15.62 :	  42e3c3:       mov    -0x8(%rbp),%rax
   29.69 :	  42e3c7:       leaveq
   10.94 :	  42e3c8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (64 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042916e <std::_Iter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, true>::_S_base(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEELb1EE7_S_baseES7_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    9.38 :	  42916e:       push   %rbp
   10.94 :	  42916f:       mov    %rsp,%rbp
    1.56 :	  429172:       sub    $0x10,%rsp
    3.12 :	  429176:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
   17.19 :	  42917a:       lea    -0x10(%rbp),%rax
    1.56 :	  42917e:       mov    %rax,%rdi
    3.12 :	  429181:       callq  429336 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>
    3.12 :	  429186:       mov    (%rax),%rax
   43.75 :	  429189:       leaveq
    6.25 :	  42918a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (63 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042513c <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::_Vector_impl(std::allocator<LLord> const&)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE12_Vector_implC2ERKS1_():
         :
         :	        _Vector_impl()
         :	        : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
         :	        { }
         :
         :	        _Vector_impl(_Tp_alloc_type const& __a)
    7.94 :	  42513c:       push   %rbp
    1.59 :	  42513d:       mov    %rsp,%rbp
    1.59 :	  425140:       sub    $0x10,%rsp
    0.00 :	  425144:       mov    %rdi,-0x8(%rbp)
    7.94 :	  425148:       mov    %rsi,-0x10(%rbp)
         :	        : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    0.00 :	  42514c:       mov    -0x10(%rbp),%rdx
    1.59 :	  425150:       mov    -0x8(%rbp),%rax
    0.00 :	  425154:       mov    %rdx,%rsi
    0.00 :	  425157:       mov    %rax,%rdi
    0.00 :	  42515a:       callq  42510c <std::allocator<LLord>::allocator(std::allocator<LLord> const&)>
    4.76 :	  42515f:       mov    -0x8(%rbp),%rax
    7.94 :	  425163:       movq   $0x0,(%rax)
   14.29 :	  42516a:       mov    -0x8(%rbp),%rax
    1.59 :	  42516e:       movq   $0x0,0x8(%rax)
   20.63 :	  425176:       mov    -0x8(%rbp),%rax
    1.59 :	  42517a:       movq   $0x0,0x10(%rax)
         :	        { }
   22.22 :	  425182:       leaveq
    6.35 :	  425183:       retq
 Percent |	Source code & Disassembly of main for cycles:u (62 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431512 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS1_SaIS1_EEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   35.48 :	  431512:       push   %rbp
   14.52 :	  431513:       mov    %rsp,%rbp
    3.23 :	  431516:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
   29.03 :	  43151a:       mov    -0x8(%rbp),%rax
   17.74 :	  43151e:       pop    %rbp
    0.00 :	  43151f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (61 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>:
         :	_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm():
         :
         :	    public:
         :	      _Vector_impl _M_impl;
         :
         :	      pointer
         :	      _M_allocate(size_t __n)
    9.84 :	  423684:       push   %rbp
    0.00 :	  423685:       mov    %rsp,%rbp
   18.03 :	  423688:       sub    $0x10,%rsp
    3.28 :	  42368c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  423690:       mov    %rsi,-0x10(%rbp)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    0.00 :	  423694:       cmpq   $0x0,-0x10(%rbp)
   31.15 :	  423699:       je     4236b5 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)+0x31>
    3.28 :	  42369b:       mov    -0x8(%rbp),%rax
    1.64 :	  42369f:       mov    -0x10(%rbp),%rcx
    0.00 :	  4236a3:       mov    $0x0,%edx
    0.00 :	  4236a8:       mov    %rcx,%rsi
    4.92 :	  4236ab:       mov    %rax,%rdi
    0.00 :	  4236ae:       callq  425c92 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)>
    6.56 :	  4236b3:       jmp    4236ba <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)+0x36>
    0.00 :	  4236b5:       mov    $0x0,%eax
   11.48 :	  4236ba:       leaveq
    9.84 :	  4236bb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (60 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430038 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator-(long const&) const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEmiERKl():
         :	      __normal_iterator&
         :	      operator-=(const difference_type& __n)
         :	      { _M_current -= __n; return *this; }
         :
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
    5.00 :	  430038:       push   %rbp
    1.67 :	  430039:       mov    %rsp,%rbp
    0.00 :	  43003c:       sub    $0x20,%rsp
    1.67 :	  430040:       mov    %rdi,-0x18(%rbp)
    3.33 :	  430044:       mov    %rsi,-0x20(%rbp)
         :	      { return __normal_iterator(_M_current - __n); }
    3.33 :	  430048:       mov    -0x18(%rbp),%rax
    0.00 :	  43004c:       mov    (%rax),%rdx
   11.67 :	  43004f:       mov    -0x20(%rbp),%rax
    1.67 :	  430053:       mov    (%rax),%rax
    5.00 :	  430056:       shl    $0x4,%rax
    1.67 :	  43005a:       neg    %rax
   11.67 :	  43005d:       add    %rdx,%rax
    5.00 :	  430060:       mov    %rax,-0x8(%rbp)
   10.00 :	  430064:       lea    -0x8(%rbp),%rdx
    0.00 :	  430068:       lea    -0x10(%rbp),%rax
    0.00 :	  43006c:       mov    %rdx,%rsi
    0.00 :	  43006f:       mov    %rax,%rdi
    0.00 :	  430072:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  430077:       mov    -0x10(%rbp),%rax
   36.67 :	  43007b:       leaveq
    1.67 :	  43007c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (60 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
    6.67 :	  42e450:       push   %rbp
    0.00 :	  42e451:       mov    %rsp,%rbp
    8.33 :	  42e454:       sub    $0x10,%rsp
    5.00 :	  42e458:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    0.00 :	  42e45c:       mov    -0x8(%rbp),%rax
    5.00 :	  42e460:       mov    0x10(%rax),%rax
   16.67 :	  42e464:       mov    %rax,%rdx
    3.33 :	  42e467:       mov    -0x8(%rbp),%rax
    0.00 :	  42e46b:       mov    (%rax),%rax
    8.33 :	  42e46e:       sub    %rax,%rdx
    5.00 :	  42e471:       mov    %rdx,%rax
    3.33 :	  42e474:       sar    $0x4,%rax
    3.33 :	  42e478:       mov    %rax,%rdx
    0.00 :	  42e47b:       mov    -0x8(%rbp),%rax
    5.00 :	  42e47f:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    1.67 :	  42e482:       mov    -0x8(%rbp),%rax
    3.33 :	  42e486:       mov    %rcx,%rsi
    0.00 :	  42e489:       mov    %rax,%rdi
    0.00 :	  42e48c:       callq  42e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    1.67 :	  42e491:       mov    -0x8(%rbp),%rax
    1.67 :	  42e495:       mov    %rax,%rdi
    0.00 :	  42e498:       callq  42e3d8 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42e49d:       leaveq
   21.67 :	  42e49e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (60 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422c68 <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_base(unsigned long, std::allocator<LLord> const&)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EEC2EmRKS1_():
         :
         :	      _Vector_base(size_t __n)
         :	      : _M_impl()
         :	      { _M_create_storage(__n); }
         :
         :	      _Vector_base(size_t __n, const allocator_type& __a)
    0.00 :	  422c68:       push   %rbp
    0.00 :	  422c69:       mov    %rsp,%rbp
    5.00 :	  422c6c:       push   %rbx
    0.00 :	  422c6d:       sub    $0x28,%rsp
    6.67 :	  422c71:       mov    %rdi,-0x18(%rbp)
    0.00 :	  422c75:       mov    %rsi,-0x20(%rbp)
    0.00 :	  422c79:       mov    %rdx,-0x28(%rbp)
         :	      : _M_impl(__a)
    0.00 :	  422c7d:       mov    -0x18(%rbp),%rax
    5.00 :	  422c81:       mov    -0x28(%rbp),%rdx
   28.33 :	  422c85:       mov    %rdx,%rsi
    0.00 :	  422c88:       mov    %rax,%rdi
    0.00 :	  422c8b:       callq  42513c <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::_Vector_impl(std::allocator<LLord> const&)>
         :	      { _M_create_storage(__n); }
   10.00 :	  422c90:       mov    -0x20(%rbp),%rdx
    5.00 :	  422c94:       mov    -0x18(%rbp),%rax
    8.33 :	  422c98:       mov    %rdx,%rsi
    0.00 :	  422c9b:       mov    %rax,%rdi
    1.67 :	  422c9e:       callq  425184 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_create_storage(unsigned long)>
    8.33 :	  422ca3:       jmp    422cbf <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_base(unsigned long, std::allocator<LLord> const&)+0x57>
    0.00 :	  422ca5:       mov    %rax,%rbx
         :	      : _M_impl(__a)
    0.00 :	  422ca8:       mov    -0x18(%rbp),%rax
    0.00 :	  422cac:       mov    %rax,%rdi
    0.00 :	  422caf:       callq  421fce <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  422cb4:       mov    %rbx,%rax
    0.00 :	  422cb7:       mov    %rax,%rdi
    0.00 :	  422cba:       callq  41dda0 <_Unwind_Resume@plt>
         :	      { _M_create_storage(__n); }
    8.33 :	  422cbf:       add    $0x28,%rsp
    1.67 :	  422cc3:       pop    %rbx
    8.33 :	  422cc4:       pop    %rbp
    3.33 :	  422cc5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (59 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426de1 <std::enable_if<!std::allocator_traits<std::allocator<int> >::__select_helper<std::allocator<int> const>::value, std::allocator<int> const>::type std::allocator_traits<std::allocator<int> >::_S_select<std::allocator<int> const>(std::allocator<int> const&)>:
         :	_ZNSt16allocator_traitsISaIiEE9_S_selectIKS0_EENSt9enable_ifIXntsrNS1_15__select_helperIT_EE5valueES6_E4typeERS6_():
         :	        { return __a.select_on_container_copy_construction(); }
         :
         :	      template<typename _Alloc2>
         :	        static typename
         :	        enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
         :	        _S_select(_Alloc2& __a)
    3.39 :	  426de1:       push   %rbp
    5.08 :	  426de2:       mov    %rsp,%rbp
    3.39 :	  426de5:       sub    $0x10,%rsp
    0.00 :	  426de9:       mov    %rdi,-0x8(%rbp)
    8.47 :	  426ded:       mov    %rsi,-0x10(%rbp)
         :	        { return __a; }
    1.69 :	  426df1:       mov    -0x10(%rbp),%rdx
    5.08 :	  426df5:       mov    -0x8(%rbp),%rax
    3.39 :	  426df9:       mov    %rdx,%rsi
    8.47 :	  426dfc:       mov    %rax,%rdi
    0.00 :	  426dff:       callq  425074 <std::allocator<int>::allocator(std::allocator<int> const&)>
   22.03 :	  426e04:       mov    -0x8(%rbp),%rax
   25.42 :	  426e08:       leaveq
   13.56 :	  426e09:       retq
 Percent |	Source code & Disassembly of main for cycles:u (57 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>:
         :	_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv():
         :
         :	    public:
         :	      typedef _Alloc allocator_type;
         :
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    7.02 :	  420e4e:       push   %rbp
   14.04 :	  420e4f:       mov    %rsp,%rbp
    1.75 :	  420e52:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    3.51 :	  420e56:       mov    -0x8(%rbp),%rax
   73.68 :	  420e5a:       pop    %rbp
    0.00 :	  420e5b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (54 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429336 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   18.52 :	  429336:       push   %rbp
   12.96 :	  429337:       mov    %rsp,%rbp
    0.00 :	  42933a:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
   18.52 :	  42933e:       mov    -0x8(%rbp),%rax
   46.30 :	  429342:       pop    %rbp
    3.70 :	  429343:       retq
 Percent |	Source code & Disassembly of main for cycles:u (54 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004308e5 <std::enable_if<std::allocator_traits<std::allocator<double> >::__construct_helper<double<double> >::value, void>::type std::allocator_traits<std::allocator<double> >::_S_construct<double, double>(std::allocator<double>&, double*, double&&)>:
         :	_ZNSt16allocator_traitsISaIdEE12_S_constructIdIdEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS5_DpOS6_():
         :	        };
         :
         :	      template<typename _Tp, typename... _Args>
         :	        static typename
         :	        enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
         :	        _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    3.70 :	  4308e5:       push   %rbp
    1.85 :	  4308e6:       mov    %rsp,%rbp
    0.00 :	  4308e9:       sub    $0x20,%rsp
    3.70 :	  4308ed:       mov    %rdi,-0x8(%rbp)
    7.41 :	  4308f1:       mov    %rsi,-0x10(%rbp)
    5.56 :	  4308f5:       mov    %rdx,-0x18(%rbp)
         :	        { __a.construct(__p, std::forward<_Args>(__args)...); }
    3.70 :	  4308f9:       mov    -0x18(%rbp),%rax
   24.07 :	  4308fd:       mov    %rax,%rdi
    1.85 :	  430900:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    5.56 :	  430905:       mov    %rax,%rdx
    1.85 :	  430908:       mov    -0x10(%rbp),%rcx
   18.52 :	  43090c:       mov    -0x8(%rbp),%rax
    0.00 :	  430910:       mov    %rcx,%rsi
    0.00 :	  430913:       mov    %rax,%rdi
    0.00 :	  430916:       callq  430f92 <void __gnu_cxx::new_allocator<double>::construct<double, double>(double*, double&&)>
   11.11 :	  43091b:       leaveq
   11.11 :	  43091c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (53 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e3f2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_base(unsigned long, std::allocator<LLcol> const&)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EEC2EmRKS1_():
         :
         :	      _Vector_base(size_t __n)
         :	      : _M_impl()
         :	      { _M_create_storage(__n); }
         :
         :	      _Vector_base(size_t __n, const allocator_type& __a)
    7.55 :	  42e3f2:       push   %rbp
    0.00 :	  42e3f3:       mov    %rsp,%rbp
    5.66 :	  42e3f6:       push   %rbx
    0.00 :	  42e3f7:       sub    $0x28,%rsp
    0.00 :	  42e3fb:       mov    %rdi,-0x18(%rbp)
   16.98 :	  42e3ff:       mov    %rsi,-0x20(%rbp)
    1.89 :	  42e403:       mov    %rdx,-0x28(%rbp)
         :	      : _M_impl(__a)
    0.00 :	  42e407:       mov    -0x18(%rbp),%rax
    0.00 :	  42e40b:       mov    -0x28(%rbp),%rdx
   28.30 :	  42e40f:       mov    %rdx,%rsi
    0.00 :	  42e412:       mov    %rax,%rdi
    0.00 :	  42e415:       callq  42f502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::_Vector_impl(std::allocator<LLcol> const&)>
         :	      { _M_create_storage(__n); }
    0.00 :	  42e41a:       mov    -0x20(%rbp),%rdx
    9.43 :	  42e41e:       mov    -0x18(%rbp),%rax
    1.89 :	  42e422:       mov    %rdx,%rsi
    0.00 :	  42e425:       mov    %rax,%rdi
    5.66 :	  42e428:       callq  42f54a <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_create_storage(unsigned long)>
    3.77 :	  42e42d:       jmp    42e449 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_base(unsigned long, std::allocator<LLcol> const&)+0x57>
    0.00 :	  42e42f:       mov    %rax,%rbx
         :	      : _M_impl(__a)
    0.00 :	  42e432:       mov    -0x18(%rbp),%rax
    0.00 :	  42e436:       mov    %rax,%rdi
    0.00 :	  42e439:       callq  42e3d8 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42e43e:       mov    %rbx,%rax
    0.00 :	  42e441:       mov    %rax,%rdi
    0.00 :	  42e444:       callq  41dda0 <_Unwind_Resume@plt>
         :	      { _M_create_storage(__n); }
   11.32 :	  42e449:       add    $0x28,%rsp
    0.00 :	  42e44d:       pop    %rbx
    0.00 :	  42e44e:       pop    %rbp
    7.55 :	  42e44f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (52 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428ab2 <std::_Niter_base<int*>::iterator_type std::__niter_base<int*>(int*)>:
         :	_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
   11.54 :	  428ab2:       push   %rbp
   11.54 :	  428ab3:       mov    %rsp,%rbp
    1.92 :	  428ab6:       sub    $0x10,%rsp
    1.92 :	  428aba:       mov    %rdi,-0x8(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    3.85 :	  428abe:       mov    -0x8(%rbp),%rax
   40.38 :	  428ac2:       mov    %rax,%rdi
    0.00 :	  428ac5:       callq  428eda <std::_Iter_base<int*, false>::_S_base(int*)>
    0.00 :	  428aca:       leaveq
   28.85 :	  428acb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (52 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e6bb <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_():
         :	   *  Note that the end of the output range is permitted to be contained
         :	   *  within [first,last).
         :	  */
         :	  template<typename _II, typename _OI>
         :	    inline _OI
         :	    copy(_II __first, _II __last, _OI __result)
    9.62 :	  42e6bb:       push   %rbp
    0.00 :	  42e6bc:       mov    %rsp,%rbp
    5.77 :	  42e6bf:       push   %rbx
    0.00 :	  42e6c0:       sub    $0x38,%rsp
    0.00 :	  42e6c4:       mov    %rdi,-0x20(%rbp)
    5.77 :	  42e6c8:       mov    %rsi,-0x30(%rbp)
    0.00 :	  42e6cc:       mov    %rdx,-0x40(%rbp)
         :	            typename iterator_traits<_II>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
         :	              (std::__miter_base(__first), std::__miter_base(__last),
         :	               __result));
    1.92 :	  42e6d0:       mov    -0x30(%rbp),%rax
    0.00 :	  42e6d4:       mov    %rax,%rdi
    9.62 :	  42e6d7:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    3.85 :	  42e6dc:       mov    %rax,%rbx
    0.00 :	  42e6df:       mov    -0x20(%rbp),%rax
   11.54 :	  42e6e3:       mov    %rax,%rdi
    1.92 :	  42e6e6:       callq  42f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    3.85 :	  42e6eb:       mov    -0x40(%rbp),%rdx
   13.46 :	  42e6ef:       mov    %rbx,%rsi
    1.92 :	  42e6f2:       mov    %rax,%rdi
    0.00 :	  42e6f5:       callq  42f69c <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    3.85 :	  42e6fa:       add    $0x38,%rsp
    9.62 :	  42e6fe:       pop    %rbx
   15.38 :	  42e6ff:       pop    %rbp
    1.92 :	  42e700:       retq
 Percent |	Source code & Disassembly of main for cycles:u (52 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422cf6 <std::vector<LLord, std::allocator<LLord> >::end() const>:
         :	_ZNKSt6vectorI5LLordSaIS0_EE3endEv():
         :	       *  Returns a read-only (constant) iterator that points one past
         :	       *  the last element in the %vector.  Iteration is done in
         :	       *  ordinary element order.
         :	       */
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
   11.54 :	  422cf6:       push   %rbp
    0.00 :	  422cf7:       mov    %rsp,%rbp
    0.00 :	  422cfa:       sub    $0x20,%rsp
    7.69 :	  422cfe:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_finish); }
    0.00 :	  422d02:       mov    -0x18(%rbp),%rax
    1.92 :	  422d06:       mov    0x8(%rax),%rax
   28.85 :	  422d0a:       mov    %rax,-0x8(%rbp)
   15.38 :	  422d0e:       lea    -0x8(%rbp),%rdx
    0.00 :	  422d12:       lea    -0x10(%rbp),%rax
    1.92 :	  422d16:       mov    %rdx,%rsi
    0.00 :	  422d19:       mov    %rax,%rdi
    5.77 :	  422d1c:       callq  4251da <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::__normal_iterator(LLord const* const&)>
    0.00 :	  422d21:       mov    -0x10(%rbp),%rax
   26.92 :	  422d25:       leaveq
    0.00 :	  422d26:       retq
 Percent |	Source code & Disassembly of main for cycles:u (51 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b26 <__gnu_cxx::__alloc_traits<std::allocator<int> >::_S_select_on_copy(std::allocator<int> const&)>:
         :	_ZN9__gnu_cxx14__alloc_traitsISaIiEE17_S_select_on_copyERKS1_():
         :	    template<typename _Ptr>
         :	      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
         :	      destroy(_Alloc& __a, _Ptr __p)
         :	      { _Base_type::destroy(__a, std::addressof(*__p)); }
         :
         :	    static _Alloc _S_select_on_copy(const _Alloc& __a)
    3.92 :	  422b26:       push   %rbp
    9.80 :	  422b27:       mov    %rsp,%rbp
    0.00 :	  422b2a:       sub    $0x10,%rsp
    1.96 :	  422b2e:       mov    %rdi,-0x8(%rbp)
   11.76 :	  422b32:       mov    %rsi,-0x10(%rbp)
         :	    { return _Base_type::select_on_container_copy_construction(__a); }
    0.00 :	  422b36:       mov    -0x8(%rbp),%rax
    0.00 :	  422b3a:       mov    -0x10(%rbp),%rdx
    1.96 :	  422b3e:       mov    %rdx,%rsi
   11.76 :	  422b41:       mov    %rax,%rdi
    0.00 :	  422b44:       callq  42504b <std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const&)>
   13.73 :	  422b49:       mov    -0x8(%rbp),%rax
   33.33 :	  422b4d:       leaveq
   11.76 :	  422b4e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (48 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC2ERKS2_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    0.00 :	  42509a:       push   %rbp
    2.08 :	  42509b:       mov    %rsp,%rbp
   10.42 :	  42509e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4250a2:       mov    %rsi,-0x10(%rbp)
    6.25 :	  4250a6:       mov    -0x10(%rbp),%rax
   16.67 :	  4250aa:       mov    (%rax),%rdx
   39.58 :	  4250ad:       mov    -0x8(%rbp),%rax
    0.00 :	  4250b1:       mov    %rdx,(%rax)
   22.92 :	  4250b4:       pop    %rbp
    2.08 :	  4250b5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (47 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004251da <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::__normal_iterator(LLord const* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEEC2ERKS3_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    2.13 :	  4251da:       push   %rbp
    0.00 :	  4251db:       mov    %rsp,%rbp
   17.02 :	  4251de:       mov    %rdi,-0x8(%rbp)
    2.13 :	  4251e2:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4251e6:       mov    -0x10(%rbp),%rax
   23.40 :	  4251ea:       mov    (%rax),%rdx
   44.68 :	  4251ed:       mov    -0x8(%rbp),%rax
    0.00 :	  4251f1:       mov    %rdx,(%rax)
   10.64 :	  4251f4:       pop    %rbp
    0.00 :	  4251f5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (46 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE19_M_get_Tp_allocatorEv():
         :
         :	    public:
         :	      typedef _Alloc allocator_type;
         :
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   23.91 :	  42e502:       push   %rbp
    4.35 :	  42e503:       mov    %rsp,%rbp
   17.39 :	  42e506:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
   13.04 :	  42e50a:       mov    -0x8(%rbp),%rax
   41.30 :	  42e50e:       pop    %rbp
    0.00 :	  42e50f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (46 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>:
         :	_ZNSt6vectorI5LLcolSaIS0_EED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    6.52 :	  42d2a8:       push   %rbp
    4.35 :	  42d2a9:       mov    %rsp,%rbp
    0.00 :	  42d2ac:       sub    $0x10,%rsp
    6.52 :	  42d2b0:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
   10.87 :	  42d2b4:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2b8:       mov    %rax,%rdi
    0.00 :	  42d2bb:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    4.35 :	  42d2c0:       mov    %rax,%rdx
    2.17 :	  42d2c3:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2c7:       mov    0x8(%rax),%rcx
   13.04 :	  42d2cb:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2cf:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8.70 :	  42d2d2:       mov    %rcx,%rsi
    2.17 :	  42d2d5:       mov    %rax,%rdi
    2.17 :	  42d2d8:       callq  42e541 <void std::_Destroy<LLcol*, LLcol>(LLcol*, LLcol*, std::allocator<LLcol>&)>
         :	                      _M_get_Tp_allocator()); }
    6.52 :	  42d2dd:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2e1:       mov    %rax,%rdi
    0.00 :	  42d2e4:       callq  42e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>
   21.74 :	  42d2e9:       leaveq
   10.87 :	  42d2ea:       retq
 Percent |	Source code & Disassembly of main for cycles:u (45 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428eda <std::_Iter_base<int*, false>::_S_base(int*)>:
         :	_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    8.89 :	  428eda:       push   %rbp
   24.44 :	  428edb:       mov    %rsp,%rbp
    0.00 :	  428ede:       mov    %rdi,-0x8(%rbp)
         :	      { return __it; }
   22.22 :	  428ee2:       mov    -0x8(%rbp),%rax
   44.44 :	  428ee6:       pop    %rbp
    0.00 :	  428ee7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (45 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f4b3 <std::allocator_traits<std::allocator<LLcol> >::select_on_container_copy_construction(std::allocator<LLcol> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLcolEE37select_on_container_copy_constructionERKS1_():
         :	       *
         :	       *  Returns @c __rhs.select_on_container_copy_construction() if that
         :	       *  expression is well-formed, otherwise returns @a __rhs
         :	      */
         :	      static _Alloc
         :	      select_on_container_copy_construction(const _Alloc& __rhs)
    8.89 :	  42f4b3:       push   %rbp
    0.00 :	  42f4b4:       mov    %rsp,%rbp
    0.00 :	  42f4b7:       sub    $0x10,%rsp
    6.67 :	  42f4bb:       mov    %rdi,-0x8(%rbp)
    2.22 :	  42f4bf:       mov    %rsi,-0x10(%rbp)
         :	      { return _S_select(__rhs); }
    0.00 :	  42f4c3:       mov    -0x8(%rbp),%rax
    8.89 :	  42f4c7:       mov    -0x10(%rbp),%rdx
   22.22 :	  42f4cb:       mov    %rdx,%rsi
    0.00 :	  42f4ce:       mov    %rax,%rdi
    0.00 :	  42f4d1:       callq  43047c <std::enable_if<!std::allocator_traits<std::allocator<LLcol> >::__select_helper<std::allocator<LLcol> const>::value, std::allocator<LLcol> const>::type std::allocator_traits<std::allocator<LLcol> >::_S_select<std::allocator<LLcol> const>(std::allocator<LLcol> const&)>
   24.44 :	  42f4d6:       mov    -0x8(%rbp),%rax
   17.78 :	  42f4da:       leaveq
    8.89 :	  42f4db:       retq
 Percent |	Source code & Disassembly of main for cycles:u (44 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042504b <std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const&)>:
         :	_ZNSt16allocator_traitsISaIiEE37select_on_container_copy_constructionERKS0_():
         :	       *
         :	       *  Returns @c __rhs.select_on_container_copy_construction() if that
         :	       *  expression is well-formed, otherwise returns @a __rhs
         :	      */
         :	      static _Alloc
         :	      select_on_container_copy_construction(const _Alloc& __rhs)
    0.00 :	  42504b:       push   %rbp
    6.82 :	  42504c:       mov    %rsp,%rbp
    0.00 :	  42504f:       sub    $0x10,%rsp
    2.27 :	  425053:       mov    %rdi,-0x8(%rbp)
    9.09 :	  425057:       mov    %rsi,-0x10(%rbp)
         :	      { return _S_select(__rhs); }
    0.00 :	  42505b:       mov    -0x8(%rbp),%rax
    4.55 :	  42505f:       mov    -0x10(%rbp),%rdx
    4.55 :	  425063:       mov    %rdx,%rsi
   11.36 :	  425066:       mov    %rax,%rdi
    0.00 :	  425069:       callq  426de1 <std::enable_if<!std::allocator_traits<std::allocator<int> >::__select_helper<std::allocator<int> const>::value, std::allocator<int> const>::type std::allocator_traits<std::allocator<int> >::_S_select<std::allocator<int> const>(std::allocator<int> const&)>
   13.64 :	  42506e:       mov    -0x8(%rbp),%rax
   31.82 :	  425072:       leaveq
   15.91 :	  425073:       retq
 Percent |	Source code & Disassembly of main for cycles:u (40 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f70f <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEEvT_S8_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    2.50 :	  42f70f:       push   %rbp
    0.00 :	  42f710:       mov    %rsp,%rbp
   22.50 :	  42f713:       sub    $0x20,%rsp
    0.00 :	  42f717:       mov    %rdi,-0x10(%rbp)
    7.50 :	  42f71b:       mov    %rsi,-0x20(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    5.00 :	  42f71f:       mov    -0x20(%rbp),%rdx
   32.50 :	  42f723:       mov    -0x10(%rbp),%rax
   17.50 :	  42f727:       mov    %rdx,%rsi
    0.00 :	  42f72a:       mov    %rax,%rdi
    2.50 :	  42f72d:       callq  430562 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	        __destroy(__first, __last);
         :	    }
    5.00 :	  42f732:       leaveq
    5.00 :	  42f733:       retq
 Percent |	Source code & Disassembly of main for cycles:u (37 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431865 <__gnu_cxx::__enable_if<!std::__is_scalar<LLcol>::__value, LLcol*>::__type std::__fill_n_a<LLcol*, unsigned long, LLcol>(LLcol*, unsigned long, LLcol const&)>:
         :	_ZSt10__fill_n_aIP5LLcolmS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_():
         :	    }
         :
         :	  template<typename _OutputIterator, typename _Size, typename _Tp>
         :	    inline typename
         :	    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :	    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    0.00 :	  431865:       push   %rbp
    0.00 :	  431866:       mov    %rsp,%rbp
    0.00 :	  431869:       mov    %rdi,-0x18(%rbp)
    0.00 :	  43186d:       mov    %rsi,-0x20(%rbp)
    0.00 :	  431871:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  431875:       mov    -0x20(%rbp),%rax
    0.00 :	  431879:       mov    %rax,-0x8(%rbp)
    0.00 :	  43187d:       jmp    43189f <__gnu_cxx::__enable_if<!std::__is_scalar<LLcol>::__value, LLcol*>::__type std::__fill_n_a<LLcol*, unsigned long, LLcol>(LLcol*, unsigned long, LLcol const&)+0x3a>
         :	           __niter > 0; --__niter, ++__first)
         :	        *__first = __value;
    5.41 :	  43187f:       mov    -0x18(%rbp),%rcx
    2.70 :	  431883:       mov    -0x28(%rbp),%rax
    0.00 :	  431887:       mov    0x8(%rax),%rdx
    0.00 :	  43188b:       mov    (%rax),%rax
    0.00 :	  43188e:       mov    %rax,(%rcx)
   67.57 :	  431891:       mov    %rdx,0x8(%rcx)
         :	      for (__decltype(__n + 0) __niter = __n;
   13.51 :	  431895:       subq   $0x1,-0x8(%rbp)
    0.00 :	  43189a:       addq   $0x10,-0x18(%rbp)
    5.41 :	  43189f:       cmpq   $0x0,-0x8(%rbp)
    5.41 :	  4318a4:       jne    43187f <__gnu_cxx::__enable_if<!std::__is_scalar<LLcol>::__value, LLcol*>::__type std::__fill_n_a<LLcol*, unsigned long, LLcol>(LLcol*, unsigned long, LLcol const&)+0x1a>
         :	      return __first;
    0.00 :	  4318a6:       mov    -0x18(%rbp),%rax
         :	    }
    0.00 :	  4318aa:       pop    %rbp
    0.00 :	  4318ab:       retq
 Percent |	Source code & Disassembly of main for cycles:u (37 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043057e <std::_Niter_base<LLcol*>::iterator_type std::__niter_base<LLcol*>(LLcol*)>:
         :	_ZSt12__niter_baseIP5LLcolENSt11_Niter_baseIT_E13iterator_typeES3_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
   13.51 :	  43057e:       push   %rbp
   13.51 :	  43057f:       mov    %rsp,%rbp
   10.81 :	  430582:       sub    $0x10,%rsp
    2.70 :	  430586:       mov    %rdi,-0x8(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
   16.22 :	  43058a:       mov    -0x8(%rbp),%rax
   35.14 :	  43058e:       mov    %rax,%rdi
    0.00 :	  430591:       callq  430570 <std::_Iter_base<LLcol*, false>::_S_base(LLcol*)>
    0.00 :	  430596:       leaveq
    8.11 :	  430597:       retq
 Percent |	Source code & Disassembly of main for cycles:u (36 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041ec22 <Edge::operator<(Edge const&) const>:
         :	_ZNK4EdgeltERKS_():
         :	        //     r = c;
         :	        //     c = tmp;
         :	        // }
         :	    }
         :
         :	    bool operator < (const Edge& e) const
    5.56 :	  41ec22:       push   %rbp
    0.00 :	  41ec23:       mov    %rsp,%rbp
    5.56 :	  41ec26:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41ec2a:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	        return (this->c < e.c) || ((this->c == e.c) && this->r < e.r);
    0.00 :	  41ec2e:       mov    -0x8(%rbp),%rax
    8.33 :	  41ec32:       mov    0x4(%rax),%edx
   19.44 :	  41ec35:       mov    -0x10(%rbp),%rax
    2.78 :	  41ec39:       mov    0x4(%rax),%eax
   33.33 :	  41ec3c:       cmp    %eax,%edx
    0.00 :	  41ec3e:       jl     41ec62 <Edge::operator<(Edge const&) const+0x40>
    5.56 :	  41ec40:       mov    -0x8(%rbp),%rax
    5.56 :	  41ec44:       mov    0x4(%rax),%edx
    2.78 :	  41ec47:       mov    -0x10(%rbp),%rax
    0.00 :	  41ec4b:       mov    0x4(%rax),%eax
    0.00 :	  41ec4e:       cmp    %eax,%edx
    0.00 :	  41ec50:       jne    41ec69 <Edge::operator<(Edge const&) const+0x47>
    2.78 :	  41ec52:       mov    -0x8(%rbp),%rax
    0.00 :	  41ec56:       mov    (%rax),%edx
    0.00 :	  41ec58:       mov    -0x10(%rbp),%rax
    0.00 :	  41ec5c:       mov    (%rax),%eax
    0.00 :	  41ec5e:       cmp    %eax,%edx
    0.00 :	  41ec60:       jge    41ec69 <Edge::operator<(Edge const&) const+0x47>
    2.78 :	  41ec62:       mov    $0x1,%eax
    0.00 :	  41ec67:       jmp    41ec6e <Edge::operator<(Edge const&) const+0x4c>
    0.00 :	  41ec69:       mov    $0x0,%eax
         :	    }
    0.00 :	  41ec6e:       pop    %rbp
    5.56 :	  41ec6f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (35 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430570 <std::_Iter_base<LLcol*, false>::_S_base(LLcol*)>:
         :	_ZNSt10_Iter_baseIP5LLcolLb0EE7_S_baseES1_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  430570:       push   %rbp
   14.29 :	  430571:       mov    %rsp,%rbp
    0.00 :	  430574:       mov    %rdi,-0x8(%rbp)
         :	      { return __it; }
    0.00 :	  430578:       mov    -0x8(%rbp),%rax
   85.71 :	  43057c:       pop    %rbp
    0.00 :	  43057d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (35 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421fce <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::~_Vector_impl()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE12_Vector_implD2Ev():
         :	      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
         :	        rebind<_Tp>::other _Tp_alloc_type;
         :	      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
         :	        pointer;
         :
         :	      struct _Vector_impl
   11.43 :	  421fce:       push   %rbp
   11.43 :	  421fcf:       mov    %rsp,%rbp
    0.00 :	  421fd2:       sub    $0x10,%rsp
    8.57 :	  421fd6:       mov    %rdi,-0x8(%rbp)
    2.86 :	  421fda:       mov    -0x8(%rbp),%rax
   11.43 :	  421fde:       mov    %rax,%rdi
    0.00 :	  421fe1:       callq  422c4e <std::allocator<LLord>::~allocator()>
   11.43 :	  421fe6:       leaveq
   42.86 :	  421fe7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (35 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d97e <std::vector<double, std::allocator<double> >::push_back(double&&)>:
         :	_ZNSt6vectorIdSaIdEE9push_backEOd():
         :	#endif
         :	      }
         :
         :	#if __cplusplus >= 201103L
         :	      void
         :	      push_back(value_type&& __x)
    0.00 :	  42d97e:       push   %rbp
    8.57 :	  42d97f:       mov    %rsp,%rbp
    0.00 :	  42d982:       sub    $0x10,%rsp
    2.86 :	  42d986:       mov    %rdi,-0x8(%rbp)
   11.43 :	  42d98a:       mov    %rsi,-0x10(%rbp)
         :	      { emplace_back(std::move(__x)); }
    0.00 :	  42d98e:       mov    -0x10(%rbp),%rax
    2.86 :	  42d992:       mov    %rax,%rdi
    0.00 :	  42d995:       callq  42d96f <std::remove_reference<double&>::type&& std::move<double&>(double&)>
    5.71 :	  42d99a:       mov    %rax,%rdx
    0.00 :	  42d99d:       mov    -0x8(%rbp),%rax
    2.86 :	  42d9a1:       mov    %rdx,%rsi
    0.00 :	  42d9a4:       mov    %rax,%rdi
   17.14 :	  42d9a7:       callq  42ec5c <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)>
   11.43 :	  42d9ac:       leaveq
   37.14 :	  42d9ad:       retq
 Percent |	Source code & Disassembly of main for cycles:u (34 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f652 <__gnu_cxx::new_allocator<LLcol>::deallocate(LLcol*, unsigned long)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolE10deallocateEPS1_m():
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
         :	      }
         :
         :	      // __p is not permitted to be a null pointer.
         :	      void
         :	      deallocate(pointer __p, size_type)
   17.65 :	  42f652:       push   %rbp
   14.71 :	  42f653:       mov    %rsp,%rbp
   17.65 :	  42f656:       sub    $0x20,%rsp
    0.00 :	  42f65a:       mov    %rdi,-0x8(%rbp)
    8.82 :	  42f65e:       mov    %rsi,-0x10(%rbp)
   11.76 :	  42f662:       mov    %rdx,-0x18(%rbp)
         :	      { ::operator delete(__p); }
    2.94 :	  42f666:       mov    -0x10(%rbp),%rax
    2.94 :	  42f66a:       mov    %rax,%rdi
    0.00 :	  42f66d:       callq  41db20 <operator delete(void*)@plt>
    2.94 :	  42f672:       leaveq
   20.59 :	  42f673:       retq
 Percent |	Source code & Disassembly of main for cycles:u (34 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004274b0 <__gnu_cxx::new_allocator<int>::max_size() const>:
         :	_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv():
         :	      void
         :	      deallocate(pointer __p, size_type)
         :	      { ::operator delete(__p); }
         :
         :	      size_type
         :	      max_size() const _GLIBCXX_USE_NOEXCEPT
    2.94 :	  4274b0:       push   %rbp
    0.00 :	  4274b1:       mov    %rsp,%rbp
   11.76 :	  4274b4:       mov    %rdi,-0x8(%rbp)
         :	      { return size_t(-1) / sizeof(_Tp); }
    0.00 :	  4274b8:       movabs $0x3fffffffffffffff,%rax
    8.82 :	  4274c2:       pop    %rbp
   76.47 :	  4274c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (33 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d96f <std::remove_reference<double&>::type&& std::move<double&>(double&)>:
         :	_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_():
         :	   *  @param  __t  A thing of arbitrary type.
         :	   *  @return The parameter cast to an rvalue-reference to allow moving it.
         :	  */
         :	  template<typename _Tp>
         :	    constexpr typename std::remove_reference<_Tp>::type&&
         :	    move(_Tp&& __t) noexcept
   24.24 :	  42d96f:       push   %rbp
    0.00 :	  42d970:       mov    %rsp,%rbp
   15.15 :	  42d973:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    0.00 :	  42d977:       mov    -0x8(%rbp),%rax
   15.15 :	  42d97b:       pop    %rbp
   45.45 :	  42d97c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (32 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e0a <__gnu_cxx::new_allocator<int>::new_allocator(__gnu_cxx::new_allocator<int> const&)>:
         :	_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_():
         :	      typedef std::true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    6.25 :	  426e0a:       push   %rbp
   12.50 :	  426e0b:       mov    %rsp,%rbp
   34.38 :	  426e0e:       mov    %rdi,-0x8(%rbp)
    3.12 :	  426e12:       mov    %rsi,-0x10(%rbp)
   28.12 :	  426e16:       pop    %rbp
   15.62 :	  426e17:       retq
 Percent |	Source code & Disassembly of main for cycles:u (32 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004230b0 <void std::_Destroy<int*>(int*, int*)>:
         :	_ZSt8_DestroyIPiEvT_S1_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    9.38 :	  4230b0:       push   %rbp
    3.12 :	  4230b1:       mov    %rsp,%rbp
   12.50 :	  4230b4:       sub    $0x10,%rsp
    6.25 :	  4230b8:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4230bc:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    0.00 :	  4230c0:       mov    -0x10(%rbp),%rdx
   12.50 :	  4230c4:       mov    -0x8(%rbp),%rax
   21.88 :	  4230c8:       mov    %rdx,%rsi
    0.00 :	  4230cb:       mov    %rax,%rdi
   15.62 :	  4230ce:       callq  4255de <void std::_Destroy_aux<true>::__destroy<int*>(int*, int*)>
         :	        __destroy(__first, __last);
         :	    }
    3.12 :	  4230d3:       leaveq
   15.62 :	  4230d4:       retq
 Percent |	Source code & Disassembly of main for cycles:u (32 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e45 <std::enable_if<!std::allocator_traits<std::allocator<LLord> >::__select_helper<std::allocator<LLord> const>::value, std::allocator<LLord> const>::type std::allocator_traits<std::allocator<LLord> >::_S_select<std::allocator<LLord> const>(std::allocator<LLord> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLordEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_():
         :	        { return __a.select_on_container_copy_construction(); }
         :
         :	      template<typename _Alloc2>
         :	        static typename
         :	        enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
         :	        _S_select(_Alloc2& __a)
   15.62 :	  426e45:       push   %rbp
    6.25 :	  426e46:       mov    %rsp,%rbp
    0.00 :	  426e49:       sub    $0x10,%rsp
    6.25 :	  426e4d:       mov    %rdi,-0x8(%rbp)
    0.00 :	  426e51:       mov    %rsi,-0x10(%rbp)
         :	        { return __a; }
    0.00 :	  426e55:       mov    -0x10(%rbp),%rdx
   37.50 :	  426e59:       mov    -0x8(%rbp),%rax
    0.00 :	  426e5d:       mov    %rdx,%rsi
    0.00 :	  426e60:       mov    %rax,%rdi
    0.00 :	  426e63:       callq  42510c <std::allocator<LLord>::allocator(std::allocator<LLord> const&)>
   25.00 :	  426e68:       mov    -0x8(%rbp),%rax
    0.00 :	  426e6c:       leaveq
    9.38 :	  426e6d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (31 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422c16 <__gnu_cxx::__alloc_traits<std::allocator<LLord> >::_S_select_on_copy(std::allocator<LLord> const&)>:
         :	_ZN9__gnu_cxx14__alloc_traitsISaI5LLordEE17_S_select_on_copyERKS2_():
         :	    template<typename _Ptr>
         :	      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
         :	      destroy(_Alloc& __a, _Ptr __p)
         :	      { _Base_type::destroy(__a, std::addressof(*__p)); }
         :
         :	    static _Alloc _S_select_on_copy(const _Alloc& __a)
    6.45 :	  422c16:       push   %rbp
    6.45 :	  422c17:       mov    %rsp,%rbp
    0.00 :	  422c1a:       sub    $0x10,%rsp
    3.23 :	  422c1e:       mov    %rdi,-0x8(%rbp)
   16.13 :	  422c22:       mov    %rsi,-0x10(%rbp)
         :	    { return _Base_type::select_on_container_copy_construction(__a); }
    0.00 :	  422c26:       mov    -0x8(%rbp),%rax
    0.00 :	  422c2a:       mov    -0x10(%rbp),%rdx
   22.58 :	  422c2e:       mov    %rdx,%rsi
    9.68 :	  422c31:       mov    %rax,%rdi
    0.00 :	  422c34:       callq  4250e3 <std::allocator_traits<std::allocator<LLord> >::select_on_container_copy_construction(std::allocator<LLord> const&)>
    6.45 :	  422c39:       mov    -0x8(%rbp),%rax
   16.13 :	  422c3d:       leaveq
   12.90 :	  422c3e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (31 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>:
         :	_ZNKSt12_Vector_baseI5LLcolSaIS0_EE19_M_get_Tp_allocatorEv():
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
         :
         :	      const _Tp_alloc_type&
         :	      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    3.23 :	  42e3ca:       push   %rbp
   22.58 :	  42e3cb:       mov    %rsp,%rbp
    0.00 :	  42e3ce:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
    0.00 :	  42e3d2:       mov    -0x8(%rbp),%rax
   74.19 :	  42e3d6:       pop    %rbp
    0.00 :	  42e3d7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (28 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e72b <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, std::allocator<LLcol>&)>:
         :	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES2_EvT_S8_RSaIT0_E():
         :	        __traits::destroy(__alloc, std::__addressof(*__first));
         :	    }
         :
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   28.57 :	  42e72b:       push   %rbp
    0.00 :	  42e72c:       mov    %rsp,%rbp
    3.57 :	  42e72f:       sub    $0x20,%rsp
    7.14 :	  42e733:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42e737:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42e73b:       mov    %rdx,-0x18(%rbp)
         :	             allocator<_Tp>&)
         :	    {
         :	      _Destroy(__first, __last);
    7.14 :	  42e73f:       mov    -0x20(%rbp),%rdx
    7.14 :	  42e743:       mov    -0x10(%rbp),%rax
    0.00 :	  42e747:       mov    %rdx,%rsi
   10.71 :	  42e74a:       mov    %rax,%rdi
   17.86 :	  42e74d:       callq  42f70f <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    3.57 :	  42e752:       leaveq
   14.29 :	  42e753:       retq
 Percent |	Source code & Disassembly of main for cycles:u (28 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE13_M_deallocateEPS0_m():
         :	      pointer
         :	      _M_allocate(size_t __n)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
         :
         :	      void
         :	      _M_deallocate(pointer __p, size_t __n)
   10.71 :	  42e5a2:       push   %rbp
    0.00 :	  42e5a3:       mov    %rsp,%rbp
    3.57 :	  42e5a6:       sub    $0x20,%rsp
    3.57 :	  42e5aa:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42e5ae:       mov    %rsi,-0x10(%rbp)
   10.71 :	  42e5b2:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__p)
    0.00 :	  42e5b6:       cmpq   $0x0,-0x10(%rbp)
    3.57 :	  42e5bb:       je     42e5d4 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)+0x32>
         :	          _M_impl.deallocate(__p, __n);
    3.57 :	  42e5bd:       mov    -0x8(%rbp),%rax
    3.57 :	  42e5c1:       mov    -0x18(%rbp),%rdx
   14.29 :	  42e5c5:       mov    -0x10(%rbp),%rcx
    0.00 :	  42e5c9:       mov    %rcx,%rsi
    3.57 :	  42e5cc:       mov    %rax,%rdi
    7.14 :	  42e5cf:       callq  42f652 <__gnu_cxx::new_allocator<LLcol>::deallocate(LLcol*, unsigned long)>
         :	      }
   10.71 :	  42e5d4:       leaveq
   25.00 :	  42e5d5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (28 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004250e3 <std::allocator_traits<std::allocator<LLord> >::select_on_container_copy_construction(std::allocator<LLord> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLordEE37select_on_container_copy_constructionERKS1_():
         :	       *
         :	       *  Returns @c __rhs.select_on_container_copy_construction() if that
         :	       *  expression is well-formed, otherwise returns @a __rhs
         :	      */
         :	      static _Alloc
         :	      select_on_container_copy_construction(const _Alloc& __rhs)
    3.57 :	  4250e3:       push   %rbp
    0.00 :	  4250e4:       mov    %rsp,%rbp
    0.00 :	  4250e7:       sub    $0x10,%rsp
    7.14 :	  4250eb:       mov    %rdi,-0x8(%rbp)
    3.57 :	  4250ef:       mov    %rsi,-0x10(%rbp)
         :	      { return _S_select(__rhs); }
    0.00 :	  4250f3:       mov    -0x8(%rbp),%rax
    0.00 :	  4250f7:       mov    -0x10(%rbp),%rdx
   53.57 :	  4250fb:       mov    %rdx,%rsi
    0.00 :	  4250fe:       mov    %rax,%rdi
    0.00 :	  425101:       callq  426e45 <std::enable_if<!std::allocator_traits<std::allocator<LLord> >::__select_helper<std::allocator<LLord> const>::value, std::allocator<LLord> const>::type std::allocator_traits<std::allocator<LLord> >::_S_select<std::allocator<LLord> const>(std::allocator<LLord> const&)>
    0.00 :	  425106:       mov    -0x8(%rbp),%rax
    3.57 :	  42510a:       leaveq
   28.57 :	  42510b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (27 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e3d8 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::~_Vector_impl()>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE12_Vector_implD2Ev():
         :	      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
         :	        rebind<_Tp>::other _Tp_alloc_type;
         :	      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
         :	        pointer;
         :
         :	      struct _Vector_impl
    7.41 :	  42e3d8:       push   %rbp
   11.11 :	  42e3d9:       mov    %rsp,%rbp
   14.81 :	  42e3dc:       sub    $0x10,%rsp
    0.00 :	  42e3e0:       mov    %rdi,-0x8(%rbp)
   11.11 :	  42e3e4:       mov    -0x8(%rbp),%rax
   11.11 :	  42e3e8:       mov    %rax,%rdi
   11.11 :	  42e3eb:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    3.70 :	  42e3f0:       leaveq
   29.63 :	  42e3f1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (26 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e541 <void std::_Destroy<LLcol*, LLcol>(LLcol*, LLcol*, std::allocator<LLcol>&)>:
         :	_ZSt8_DestroyIP5LLcolS0_EvT_S2_RSaIT0_E():
         :	        __traits::destroy(__alloc, std::__addressof(*__first));
         :	    }
         :
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   11.54 :	  42e541:       push   %rbp
    0.00 :	  42e542:       mov    %rsp,%rbp
    7.69 :	  42e545:       sub    $0x20,%rsp
    0.00 :	  42e549:       mov    %rdi,-0x8(%rbp)
    3.85 :	  42e54d:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42e551:       mov    %rdx,-0x18(%rbp)
         :	             allocator<_Tp>&)
         :	    {
         :	      _Destroy(__first, __last);
    7.69 :	  42e555:       mov    -0x10(%rbp),%rdx
   23.08 :	  42e559:       mov    -0x8(%rbp),%rax
   19.23 :	  42e55d:       mov    %rdx,%rsi
    0.00 :	  42e560:       mov    %rax,%rdi
    3.85 :	  42e563:       callq  42f5e9 <void std::_Destroy<LLcol*>(LLcol*, LLcol*)>
         :	    }
   11.54 :	  42e568:       leaveq
   11.54 :	  42e569:       retq
 Percent |	Source code & Disassembly of main for cycles:u (25 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e7d6 <__gnu_cxx::new_allocator<LLcol>::~new_allocator()>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolED2Ev():
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      template<typename _Tp1>
         :	        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   20.00 :	  42e7d6:       push   %rbp
   28.00 :	  42e7d7:       mov    %rsp,%rbp
   28.00 :	  42e7da:       mov    %rdi,-0x8(%rbp)
   16.00 :	  42e7de:       pop    %rbp
    8.00 :	  42e7df:       retq
 Percent |	Source code & Disassembly of main for cycles:u (24 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d2eb <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_propagate_on_copy_assign()>:
         :	_ZN9__gnu_cxx14__alloc_traitsISaI5LLcolEE27_S_propagate_on_copy_assignEv():
         :	    { return _Base_type::select_on_container_copy_construction(__a); }
         :
         :	    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
         :	    { std::__alloc_on_swap(__a, __b); }
         :
         :	    static constexpr bool _S_propagate_on_copy_assign()
   62.50 :	  42d2eb:       push   %rbp
   25.00 :	  42d2ec:       mov    %rsp,%rbp
         :	    { return _Base_type::propagate_on_container_copy_assignment::value; }
   12.50 :	  42d2ef:       mov    $0x0,%eax
    0.00 :	  42d2f4:       pop    %rbp
    0.00 :	  42d2f5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (24 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425132 <__gnu_cxx::new_allocator<LLord>::~new_allocator()>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordED2Ev():
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      template<typename _Tp1>
         :	        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   20.83 :	  425132:       push   %rbp
   37.50 :	  425133:       mov    %rsp,%rbp
   20.83 :	  425136:       mov    %rdi,-0x8(%rbp)
    4.17 :	  42513a:       pop    %rbp
   16.67 :	  42513b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (24 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>:
         :	_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E():
         :	        __traits::destroy(__alloc, std::__addressof(*__first));
         :	    }
         :
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    0.00 :	  420e5c:       push   %rbp
    0.00 :	  420e5d:       mov    %rsp,%rbp
   12.50 :	  420e60:       sub    $0x20,%rsp
    0.00 :	  420e64:       mov    %rdi,-0x8(%rbp)
    4.17 :	  420e68:       mov    %rsi,-0x10(%rbp)
   12.50 :	  420e6c:       mov    %rdx,-0x18(%rbp)
         :	             allocator<_Tp>&)
         :	    {
         :	      _Destroy(__first, __last);
    0.00 :	  420e70:       mov    -0x10(%rbp),%rdx
   25.00 :	  420e74:       mov    -0x8(%rbp),%rax
   33.33 :	  420e78:       mov    %rdx,%rsi
    0.00 :	  420e7b:       mov    %rax,%rdi
    4.17 :	  420e7e:       callq  4230b0 <void std::_Destroy<int*>(int*, int*)>
         :	    }
    4.17 :	  420e83:       leaveq
    4.17 :	  420e84:       retq
 Percent |	Source code & Disassembly of main for cycles:u (23 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	000000000041dc60 <memmove@plt>:
  100.00 :	  41dc60:       jmpq   *0x222482(%rip)        # 6400e8 <memmove@GLIBC_2.2.5>
    0.00 :	  41dc66:       pushq  $0x1a
    0.00 :	  41dc6b:       jmpq   41dab0 <.plt>
 Percent |	Source code & Disassembly of main for cycles:u (23 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420dca <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>:
         :	_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD2Ev():
         :	      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
         :	        rebind<_Tp>::other _Tp_alloc_type;
         :	      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
         :	        pointer;
         :
         :	      struct _Vector_impl
    0.00 :	  420dca:       push   %rbp
   13.04 :	  420dcb:       mov    %rsp,%rbp
   13.04 :	  420dce:       sub    $0x10,%rsp
    0.00 :	  420dd2:       mov    %rdi,-0x8(%rbp)
    4.35 :	  420dd6:       mov    -0x8(%rbp),%rax
   47.83 :	  420dda:       mov    %rax,%rdi
    0.00 :	  420ddd:       callq  42048a <std::allocator<int>::~allocator()>
    0.00 :	  420de2:       leaveq
   21.74 :	  420de3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (21 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304a6 <__gnu_cxx::new_allocator<LLcol>::new_allocator(__gnu_cxx::new_allocator<LLcol> const&)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolEC2ERKS2_():
         :	      typedef std::true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   19.05 :	  4304a6:       push   %rbp
   14.29 :	  4304a7:       mov    %rsp,%rbp
   28.57 :	  4304aa:       mov    %rdi,-0x8(%rbp)
   19.05 :	  4304ae:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4304b2:       pop    %rbp
   19.05 :	  4304b3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (21 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004285b2 <__gnu_cxx::new_allocator<LLord>::max_size() const>:
         :	_ZNK9__gnu_cxx13new_allocatorI5LLordE8max_sizeEv():
         :	      void
         :	      deallocate(pointer __p, size_type)
         :	      { ::operator delete(__p); }
         :
         :	      size_type
         :	      max_size() const _GLIBCXX_USE_NOEXCEPT
   19.05 :	  4285b2:       push   %rbp
   47.62 :	  4285b3:       mov    %rsp,%rbp
    0.00 :	  4285b6:       mov    %rdi,-0x8(%rbp)
         :	      { return size_t(-1) / sizeof(_Tp); }
    9.52 :	  4285ba:       movabs $0xfffffffffffffff,%rax
   19.05 :	  4285c4:       pop    %rbp
    4.76 :	  4285c5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (21 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424228 <std::less<int>::operator()(int const&, int const&) const>:
         :	_ZNKSt4lessIiEclERKiS2_():
         :	  /// One of the @link comparison_functors comparison functors@endlink.
         :	  template<typename _Tp>
         :	    struct less : public binary_function<_Tp, _Tp, bool>
         :	    {
         :	      bool
         :	      operator()(const _Tp& __x, const _Tp& __y) const
    0.00 :	  424228:       push   %rbp
    0.00 :	  424229:       mov    %rsp,%rbp
    0.00 :	  42422c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  424230:       mov    %rsi,-0x10(%rbp)
    0.00 :	  424234:       mov    %rdx,-0x18(%rbp)
         :	      { return __x < __y; }
    0.00 :	  424238:       mov    -0x10(%rbp),%rax
   14.29 :	  42423c:       mov    (%rax),%edx
   76.19 :	  42423e:       mov    -0x18(%rbp),%rax
    0.00 :	  424242:       mov    (%rax),%eax
    9.52 :	  424244:       cmp    %eax,%edx
    0.00 :	  424246:       setl   %al
    0.00 :	  424249:       pop    %rbp
    0.00 :	  42424a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (20 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430ade <__gnu_cxx::new_allocator<LLcol>::max_size() const>:
         :	_ZNK9__gnu_cxx13new_allocatorI5LLcolE8max_sizeEv():
         :	      void
         :	      deallocate(pointer __p, size_type)
         :	      { ::operator delete(__p); }
         :
         :	      size_type
         :	      max_size() const _GLIBCXX_USE_NOEXCEPT
   15.00 :	  430ade:       push   %rbp
   35.00 :	  430adf:       mov    %rsp,%rbp
    0.00 :	  430ae2:       mov    %rdi,-0x8(%rbp)
         :	      { return size_t(-1) / sizeof(_Tp); }
   45.00 :	  430ae6:       movabs $0xfffffffffffffff,%rax
    5.00 :	  430af0:       pop    %rbp
    0.00 :	  430af1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (20 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f5e9 <void std::_Destroy<LLcol*>(LLcol*, LLcol*)>:
         :	_ZSt8_DestroyIP5LLcolEvT_S2_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    5.00 :	  42f5e9:       push   %rbp
    0.00 :	  42f5ea:       mov    %rsp,%rbp
   20.00 :	  42f5ed:       sub    $0x10,%rsp
   15.00 :	  42f5f1:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f5f5:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
   10.00 :	  42f5f9:       mov    -0x10(%rbp),%rdx
   10.00 :	  42f5fd:       mov    -0x8(%rbp),%rax
   10.00 :	  42f601:       mov    %rdx,%rsi
    0.00 :	  42f604:       mov    %rax,%rdi
   10.00 :	  42f607:       callq  4304e1 <void std::_Destroy_aux<true>::__destroy<LLcol*>(LLcol*, LLcol*)>
         :	        __destroy(__first, __last);
         :	    }
   20.00 :	  42f60c:       leaveq
    0.00 :	  42f60d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (17 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e6e <__gnu_cxx::new_allocator<LLord>::new_allocator(__gnu_cxx::new_allocator<LLord> const&)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordEC2ERKS2_():
         :	      typedef std::true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   52.94 :	  426e6e:       push   %rbp
    0.00 :	  426e6f:       mov    %rsp,%rbp
   29.41 :	  426e72:       mov    %rdi,-0x8(%rbp)
    0.00 :	  426e76:       mov    %rsi,-0x10(%rbp)
   11.76 :	  426e7a:       pop    %rbp
    5.88 :	  426e7b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (17 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422124 <__gnu_cxx::new_allocator<int>::~new_allocator()>:
         :	_ZN9__gnu_cxx13new_allocatorIiED2Ev():
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      template<typename _Tp1>
         :	        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   41.18 :	  422124:       push   %rbp
    5.88 :	  422125:       mov    %rsp,%rbp
   17.65 :	  422128:       mov    %rdi,-0x8(%rbp)
   35.29 :	  42212c:       pop    %rbp
    0.00 :	  42212d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (17 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042a6a1 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)>:
         :	_Z16getPartition_valRSt6vectorI5LLcolSaIS0_EEiiRiS4_S4_S4_():
         :	    }
         :	    intcomp++;
         :	}
         :
         :	int getPartition_val(std::vector<LLcol> &nums, int low, int height, int &intops, int &intcomp, int &flcomp, int &flops)
         :	{
    0.00 :	  42a6a1:       push   %rbp
    0.00 :	  42a6a2:       mov    %rsp,%rbp
    0.00 :	  42a6a5:       push   %rbx
    0.00 :	  42a6a6:       sub    $0x48,%rsp
    0.00 :	  42a6aa:       mov    %rdi,-0x28(%rbp)
    0.00 :	  42a6ae:       mov    %esi,-0x2c(%rbp)
    0.00 :	  42a6b1:       mov    %edx,-0x30(%rbp)
    0.00 :	  42a6b4:       mov    %rcx,-0x38(%rbp)
    0.00 :	  42a6b8:       mov    %r8,-0x40(%rbp)
    0.00 :	  42a6bc:       mov    %r9,-0x48(%rbp)
         :	    LLcol keyVal = nums[low];
    0.00 :	  42a6c0:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a6c3:       movslq %eax,%rdx
    0.00 :	  42a6c6:       mov    -0x28(%rbp),%rax
    0.00 :	  42a6ca:       mov    %rdx,%rsi
    0.00 :	  42a6cd:       mov    %rax,%rdi
    0.00 :	  42a6d0:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a6d5:       mov    0x8(%rax),%rdx
    0.00 :	  42a6d9:       mov    (%rax),%rax
    0.00 :	  42a6dc:       mov    %rax,-0x20(%rbp)
    0.00 :	  42a6e0:       mov    %rdx,-0x18(%rbp)
         :	    while (low<height)
    0.00 :	  42a6e4:       jmpq   42a88a <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x1e9>
         :	    {
         :	        intcomp++;
    0.00 :	  42a6e9:       mov    -0x40(%rbp),%rax
    0.00 :	  42a6ed:       mov    (%rax),%eax
    0.00 :	  42a6ef:       lea    0x1(%rax),%edx
    0.00 :	  42a6f2:       mov    -0x40(%rbp),%rax
    0.00 :	  42a6f6:       mov    %edx,(%rax)
         :	        while (low < height && nums[height].cval >= keyVal.cval) {
    0.00 :	  42a6f8:       jmp    42a72b <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x8a>
         :	            height--;
    0.00 :	  42a6fa:       subl   $0x1,-0x30(%rbp)
         :	            intcomp++;
    0.00 :	  42a6fe:       mov    -0x40(%rbp),%rax
    0.00 :	  42a702:       mov    (%rax),%eax
    0.00 :	  42a704:       lea    0x1(%rax),%edx
    0.00 :	  42a707:       mov    -0x40(%rbp),%rax
    0.00 :	  42a70b:       mov    %edx,(%rax)
         :	            intops++;
    0.00 :	  42a70d:       mov    -0x38(%rbp),%rax
    0.00 :	  42a711:       mov    (%rax),%eax
    0.00 :	  42a713:       lea    0x1(%rax),%edx
    0.00 :	  42a716:       mov    -0x38(%rbp),%rax
    0.00 :	  42a71a:       mov    %edx,(%rax)
         :	            flcomp++;
    0.00 :	  42a71c:       mov    -0x48(%rbp),%rax
    0.00 :	  42a720:       mov    (%rax),%eax
    0.00 :	  42a722:       lea    0x1(%rax),%edx
    0.00 :	  42a725:       mov    -0x48(%rbp),%rax
    0.00 :	  42a729:       mov    %edx,(%rax)
         :	        while (low < height && nums[height].cval >= keyVal.cval) {
    0.00 :	  42a72b:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a72e:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a731:       jge    42a75f <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0xbe>
    0.00 :	  42a733:       mov    -0x30(%rbp),%eax
    0.00 :	  42a736:       movslq %eax,%rdx
    0.00 :	  42a739:       mov    -0x28(%rbp),%rax
    0.00 :	  42a73d:       mov    %rdx,%rsi
    0.00 :	  42a740:       mov    %rax,%rdi
    0.00 :	  42a743:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a748:       vmovsd 0x8(%rax),%xmm0
    0.00 :	  42a74d:       vmovsd -0x18(%rbp),%xmm1
    0.00 :	  42a752:       vucomisd %xmm1,%xmm0
    0.00 :	  42a756:       jb     42a75f <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0xbe>
    0.00 :	  42a758:       mov    $0x1,%eax
    0.00 :	  42a75d:       jmp    42a764 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0xc3>
    0.00 :	  42a75f:       mov    $0x0,%eax
   11.76 :	  42a764:       test   %al,%al
    0.00 :	  42a766:       jne    42a6fa <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x59>
         :	        }
         :	        intcomp++;
    0.00 :	  42a768:       mov    -0x40(%rbp),%rax
    0.00 :	  42a76c:       mov    (%rax),%eax
    0.00 :	  42a76e:       lea    0x1(%rax),%edx
    5.88 :	  42a771:       mov    -0x40(%rbp),%rax
    0.00 :	  42a775:       mov    %edx,(%rax)
         :	        flcomp++;
    0.00 :	  42a777:       mov    -0x48(%rbp),%rax
    0.00 :	  42a77b:       mov    (%rax),%eax
    5.88 :	  42a77d:       lea    0x1(%rax),%edx
    5.88 :	  42a780:       mov    -0x48(%rbp),%rax
    0.00 :	  42a784:       mov    %edx,(%rax)
         :	        nums[low] = nums[height];
    0.00 :	  42a786:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a789:       movslq %eax,%rdx
    0.00 :	  42a78c:       mov    -0x28(%rbp),%rax
    0.00 :	  42a790:       mov    %rdx,%rsi
    0.00 :	  42a793:       mov    %rax,%rdi
    0.00 :	  42a796:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a79b:       mov    %rax,%rbx
    0.00 :	  42a79e:       mov    -0x30(%rbp),%eax
    0.00 :	  42a7a1:       movslq %eax,%rdx
    0.00 :	  42a7a4:       mov    -0x28(%rbp),%rax
    0.00 :	  42a7a8:       mov    %rdx,%rsi
    5.88 :	  42a7ab:       mov    %rax,%rdi
    0.00 :	  42a7ae:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a7b3:       mov    0x8(%rax),%rdx
    5.88 :	  42a7b7:       mov    (%rax),%rax
    0.00 :	  42a7ba:       mov    %rax,(%rbx)
    0.00 :	  42a7bd:       mov    %rdx,0x8(%rbx)
         :	        while (low < height && nums[low].cval <= keyVal.cval) {
    0.00 :	  42a7c1:       jmp    42a7f4 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x153>
         :	            low++;
    5.88 :	  42a7c3:       addl   $0x1,-0x2c(%rbp)
         :	            intcomp++;
    0.00 :	  42a7c7:       mov    -0x40(%rbp),%rax
    0.00 :	  42a7cb:       mov    (%rax),%eax
    5.88 :	  42a7cd:       lea    0x1(%rax),%edx
    0.00 :	  42a7d0:       mov    -0x40(%rbp),%rax
    0.00 :	  42a7d4:       mov    %edx,(%rax)
         :	            intops++;
    0.00 :	  42a7d6:       mov    -0x38(%rbp),%rax
    0.00 :	  42a7da:       mov    (%rax),%eax
    0.00 :	  42a7dc:       lea    0x1(%rax),%edx
    0.00 :	  42a7df:       mov    -0x38(%rbp),%rax
    0.00 :	  42a7e3:       mov    %edx,(%rax)
         :	            flcomp++;
    0.00 :	  42a7e5:       mov    -0x48(%rbp),%rax
    0.00 :	  42a7e9:       mov    (%rax),%eax
    0.00 :	  42a7eb:       lea    0x1(%rax),%edx
    0.00 :	  42a7ee:       mov    -0x48(%rbp),%rax
    0.00 :	  42a7f2:       mov    %edx,(%rax)
         :	        while (low < height && nums[low].cval <= keyVal.cval) {
    0.00 :	  42a7f4:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a7f7:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a7fa:       jge    42a828 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x187>
    0.00 :	  42a7fc:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a7ff:       movslq %eax,%rdx
    0.00 :	  42a802:       mov    -0x28(%rbp),%rax
    0.00 :	  42a806:       mov    %rdx,%rsi
    0.00 :	  42a809:       mov    %rax,%rdi
    0.00 :	  42a80c:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a811:       vmovsd 0x8(%rax),%xmm1
    0.00 :	  42a816:       vmovsd -0x18(%rbp),%xmm0
    0.00 :	  42a81b:       vucomisd %xmm1,%xmm0
    0.00 :	  42a81f:       jb     42a828 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x187>
    0.00 :	  42a821:       mov    $0x1,%eax
    0.00 :	  42a826:       jmp    42a82d <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x18c>
    0.00 :	  42a828:       mov    $0x0,%eax
    0.00 :	  42a82d:       test   %al,%al
    0.00 :	  42a82f:       jne    42a7c3 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x122>
         :	        }
         :	        intcomp++;
    0.00 :	  42a831:       mov    -0x40(%rbp),%rax
    0.00 :	  42a835:       mov    (%rax),%eax
    5.88 :	  42a837:       lea    0x1(%rax),%edx
    0.00 :	  42a83a:       mov    -0x40(%rbp),%rax
    0.00 :	  42a83e:       mov    %edx,(%rax)
         :	        flcomp++;
    5.88 :	  42a840:       mov    -0x48(%rbp),%rax
    0.00 :	  42a844:       mov    (%rax),%eax
    0.00 :	  42a846:       lea    0x1(%rax),%edx
    0.00 :	  42a849:       mov    -0x48(%rbp),%rax
    0.00 :	  42a84d:       mov    %edx,(%rax)
         :	        nums[height] = nums[low];
    0.00 :	  42a84f:       mov    -0x30(%rbp),%eax
    0.00 :	  42a852:       movslq %eax,%rdx
    0.00 :	  42a855:       mov    -0x28(%rbp),%rax
    0.00 :	  42a859:       mov    %rdx,%rsi
    0.00 :	  42a85c:       mov    %rax,%rdi
    0.00 :	  42a85f:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a864:       mov    %rax,%rbx
    5.88 :	  42a867:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a86a:       movslq %eax,%rdx
    0.00 :	  42a86d:       mov    -0x28(%rbp),%rax
    0.00 :	  42a871:       mov    %rdx,%rsi
    0.00 :	  42a874:       mov    %rax,%rdi
    0.00 :	  42a877:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a87c:       mov    0x8(%rax),%rdx
    0.00 :	  42a880:       mov    (%rax),%rax
    0.00 :	  42a883:       mov    %rax,(%rbx)
    0.00 :	  42a886:       mov    %rdx,0x8(%rbx)
         :	    while (low<height)
    5.88 :	  42a88a:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a88d:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a890:       jl     42a6e9 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0x48>
         :	    }
         :	    intcomp++;
    0.00 :	  42a896:       mov    -0x40(%rbp),%rax
    0.00 :	  42a89a:       mov    (%rax),%eax
    0.00 :	  42a89c:       lea    0x1(%rax),%edx
    0.00 :	  42a89f:       mov    -0x40(%rbp),%rax
    0.00 :	  42a8a3:       mov    %edx,(%rax)
         :	    nums[low] = keyVal;
    0.00 :	  42a8a5:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a8a8:       movslq %eax,%rdx
    0.00 :	  42a8ab:       mov    -0x28(%rbp),%rax
    0.00 :	  42a8af:       mov    %rdx,%rsi
    0.00 :	  42a8b2:       mov    %rax,%rdi
    5.88 :	  42a8b5:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a8ba:       mov    %rax,%rcx
    0.00 :	  42a8bd:       mov    -0x20(%rbp),%rax
    0.00 :	  42a8c1:       mov    -0x18(%rbp),%rdx
    0.00 :	  42a8c5:       mov    %rax,(%rcx)
   11.76 :	  42a8c8:       mov    %rdx,0x8(%rcx)
         :	    return low;
    5.88 :	  42a8cc:       mov    -0x2c(%rbp),%eax
         :	}
    0.00 :	  42a8cf:       add    $0x48,%rsp
    0.00 :	  42a8d3:       pop    %rbx
    0.00 :	  42a8d4:       pop    %rbp
    0.00 :	  42a8d5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (17 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430562 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS4_SaIS4_EEEEEEvT_SA_():
         :	  template<>
         :	    struct _Destroy_aux<true>
         :	    {
         :	      template<typename _ForwardIterator>
         :	        static void
         :	        __destroy(_ForwardIterator, _ForwardIterator) { }
   41.18 :	  430562:       push   %rbp
    0.00 :	  430563:       mov    %rsp,%rbp
   11.76 :	  430566:       mov    %rdi,-0x10(%rbp)
   47.06 :	  43056a:       mov    %rsi,-0x20(%rbp)
    0.00 :	  43056e:       pop    %rbp
    0.00 :	  43056f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (17 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004255de <void std::_Destroy_aux<true>::__destroy<int*>(int*, int*)>:
         :	_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_():
         :	  template<>
         :	    struct _Destroy_aux<true>
         :	    {
         :	      template<typename _ForwardIterator>
         :	        static void
         :	        __destroy(_ForwardIterator, _ForwardIterator) { }
    5.88 :	  4255de:       push   %rbp
   11.76 :	  4255df:       mov    %rsp,%rbp
   29.41 :	  4255e2:       mov    %rdi,-0x8(%rbp)
    5.88 :	  4255e6:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4255ea:       pop    %rbp
   47.06 :	  4255eb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (16 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ac76 <approxChol_count(LLMatOrd, int&, int&, int&, int&)>:
         :	_Z16approxChol_count8LLMatOrdRiS0_S0_S0_():
         :
         :	    colspace = c;
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
         :	}
         :
         :	void approxChol_count(LLMatOrd a, int &flops_count, int &flcomp_count, int &intops_count, int &intcomp_count) {
    0.00 :	  42ac76:       push   %rbp
    0.00 :	  42ac77:       mov    %rsp,%rbp
    0.00 :	  42ac7a:       push   %rbx
    0.00 :	  42ac7b:       sub    $0x288,%rsp
    0.00 :	  42ac82:       mov    %rdi,-0x268(%rbp)
    0.00 :	  42ac89:       mov    %rsi,-0x270(%rbp)
    0.00 :	  42ac90:       mov    %rdx,-0x278(%rbp)
    0.00 :	  42ac97:       mov    %rcx,-0x280(%rbp)
    0.00 :	  42ac9e:       mov    %r8,-0x288(%rbp)
         :	    auto n = a.n;
    0.00 :	  42aca5:       mov    -0x268(%rbp),%rax
    0.00 :	  42acac:       mov    (%rax),%rax
    0.00 :	  42acaf:       mov    %rax,-0x50(%rbp)
         :	    flops_count = 0;
    0.00 :	  42acb3:       mov    -0x270(%rbp),%rax
    0.00 :	  42acba:       movl   $0x0,(%rax)
         :	    flcomp_count = 0;
    0.00 :	  42acc0:       mov    -0x278(%rbp),%rax
    0.00 :	  42acc7:       movl   $0x0,(%rax)
         :	    intops_count = 0;
    0.00 :	  42accd:       mov    -0x280(%rbp),%rax
    0.00 :	  42acd4:       movl   $0x0,(%rax)
         :	    intcomp_count = 0;
    0.00 :	  42acda:       mov    -0x288(%rbp),%rax
    0.00 :	  42ace1:       movl   $0x0,(%rax)
         :
         :	    // need to make custom one without col info later
         :	    LDLinv ldli(a);
    0.00 :	  42ace7:       mov    -0x268(%rbp),%rdx
    0.00 :	  42acee:       lea    -0x110(%rbp),%rax
    0.00 :	  42acf5:       mov    %rdx,%rsi
    0.00 :	  42acf8:       mov    %rax,%rdi
    0.00 :	  42acfb:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.00 :	  42ad00:       lea    -0x110(%rbp),%rdx
    0.00 :	  42ad07:       lea    -0x260(%rbp),%rax
    0.00 :	  42ad0e:       mov    %rdx,%rsi
    0.00 :	  42ad11:       mov    %rax,%rdi
    0.00 :	  42ad14:       callq  42cdda <LDLinv::LDLinv(LLMatOrd)>
    0.00 :	  42ad19:       lea    -0x110(%rbp),%rax
    0.00 :	  42ad20:       mov    %rax,%rdi
    0.00 :	  42ad23:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	    Tind ldli_row_ptr = 0;
    0.00 :	  42ad28:       movl   $0x0,-0x14(%rbp)
         :
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42ad2f:       lea    -0xd1(%rbp),%rax
    0.00 :	  42ad36:       mov    %rax,%rdi
    0.00 :	  42ad39:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  42ad3e:       mov    $0x0,%eax
    0.00 :	  42ad43:       mov    %rax,-0xd0(%rbp)
    0.00 :	  42ad4a:       mov    -0x50(%rbp),%rsi
    0.00 :	  42ad4e:       lea    -0xd1(%rbp),%rcx
    0.00 :	  42ad55:       lea    -0xd0(%rbp),%rdx
    0.00 :	  42ad5c:       lea    -0x130(%rbp),%rax
    0.00 :	  42ad63:       mov    %rax,%rdi
    0.00 :	  42ad66:       callq  41fd00 <std::vector<double, std::allocator<double> >::vector(unsigned long, double const&, std::allocator<double> const&)>
    0.00 :	  42ad6b:       lea    -0xd1(%rbp),%rax
    0.00 :	  42ad72:       mov    %rax,%rdi
    0.00 :	  42ad75:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42ad7a:       lea    -0xc2(%rbp),%rax
    0.00 :	  42ad81:       mov    %rax,%rdi
    0.00 :	  42ad84:       callq  42d618 <std::allocator<LLcol>::allocator()>
    0.00 :	  42ad89:       mov    -0x50(%rbp),%rcx
    0.00 :	  42ad8d:       lea    -0xc2(%rbp),%rdx
    0.00 :	  42ad94:       lea    -0x150(%rbp),%rax
    0.00 :	  42ad9b:       mov    %rcx,%rsi
    0.00 :	  42ad9e:       mov    %rax,%rdi
    0.00 :	  42ada1:       callq  42d64c <std::vector<LLcol, std::allocator<LLcol> >::vector(unsigned long, std::allocator<LLcol> const&)>
    0.00 :	  42ada6:       lea    -0xc2(%rbp),%rax
    0.00 :	  42adad:       mov    %rax,%rdi
    0.00 :	  42adb0:       callq  42d632 <std::allocator<LLcol>::~allocator()>
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42adb5:       lea    -0xc1(%rbp),%rax
    0.00 :	  42adbc:       mov    %rax,%rdi
    0.00 :	  42adbf:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  42adc4:       mov    -0x50(%rbp),%rcx
    0.00 :	  42adc8:       lea    -0xc1(%rbp),%rdx
    0.00 :	  42adcf:       lea    -0x170(%rbp),%rax
    0.00 :	  42add6:       mov    %rcx,%rsi
    0.00 :	  42add9:       mov    %rax,%rdi
    0.00 :	  42addc:       callq  42d6ae <std::vector<double, std::allocator<double> >::vector(unsigned long, std::allocator<double> const&)>
    0.00 :	  42ade1:       lea    -0xc1(%rbp),%rax
    0.00 :	  42ade8:       mov    %rax,%rdi
    0.00 :	  42adeb:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    // random engine and distribution
         :	    std::default_random_engine engine;
    0.00 :	  42adf0:       lea    -0x180(%rbp),%rax
    0.00 :	  42adf7:       mov    $0x1,%esi
    0.00 :	  42adfc:       mov    %rax,%rdi
    0.00 :	  42adff:       callq  42d710 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
         :	    std::uniform_real_distribution<Tval> u(0.0, 1.0);
    0.00 :	  42ae04:       lea    -0x190(%rbp),%rax
    0.00 :	  42ae0b:       vmovsd 0x8e65(%rip),%xmm1        # 433c78 <std::ignore+0x196>
    0.00 :	  42ae13:       vxorpd %xmm0,%xmm0,%xmm0
    0.00 :	  42ae17:       mov    %rax,%rdi
    0.00 :	  42ae1a:       callq  42d736 <std::uniform_real_distribution<double>::uniform_real_distribution(double, double)>
         :
         :	    for (long i = 0; i <= n-2; i++) {
    0.00 :	  42ae1f:       movq   $0x0,-0x20(%rbp)
    0.00 :	  42ae27:       jmpq   42b4ab <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x835>
         :
         :	        ldli.col[i] = i;
    0.00 :	  42ae2c:       mov    -0x20(%rbp),%rdx
    0.00 :	  42ae30:       lea    -0x260(%rbp),%rax
    0.00 :	  42ae37:       mov    %rdx,%rsi
    0.00 :	  42ae3a:       mov    %rax,%rdi
    0.00 :	  42ae3d:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42ae42:       mov    -0x20(%rbp),%rdx
    0.00 :	  42ae46:       mov    %edx,(%rax)
         :	        ldli.colptr[i] = ldli_row_ptr;
    0.00 :	  42ae48:       mov    -0x20(%rbp),%rax
    0.00 :	  42ae4c:       lea    -0x260(%rbp),%rdx
    0.00 :	  42ae53:       add    $0x18,%rdx
    0.00 :	  42ae57:       mov    %rax,%rsi
    0.00 :	  42ae5a:       mov    %rdx,%rdi
    0.00 :	  42ae5d:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42ae62:       mov    -0x14(%rbp),%edx
    0.00 :	  42ae65:       mov    %edx,(%rax)
         :
         :	        int len = get_ll_col_count(a, i, colspace, intops_count, intcomp_count);
    6.25 :	  42ae67:       mov    -0x20(%rbp),%rax
    0.00 :	  42ae6b:       mov    %eax,%ebx
    0.00 :	  42ae6d:       mov    -0x268(%rbp),%rdx
    0.00 :	  42ae74:       lea    -0xc0(%rbp),%rax
    0.00 :	  42ae7b:       mov    %rdx,%rsi
    0.00 :	  42ae7e:       mov    %rax,%rdi
    0.00 :	  42ae81:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.00 :	  42ae86:       mov    -0x288(%rbp),%rsi
    6.25 :	  42ae8d:       mov    -0x280(%rbp),%rcx
    0.00 :	  42ae94:       lea    -0x150(%rbp),%rdx
    0.00 :	  42ae9b:       lea    -0xc0(%rbp),%rax
    0.00 :	  42aea2:       mov    %rsi,%r8
    0.00 :	  42aea5:       mov    %ebx,%esi
    0.00 :	  42aea7:       mov    %rax,%rdi
    0.00 :	  42aeaa:       callq  42a2e4 <get_ll_col_count(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&, int&, int&)>
    0.00 :	  42aeaf:       mov    %eax,-0x54(%rbp)
    0.00 :	  42aeb2:       lea    -0xc0(%rbp),%rax
    0.00 :	  42aeb9:       mov    %rax,%rdi
    0.00 :	  42aebc:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	        len = compressCol_count(colspace, len, intops_count, intcomp_count, flcomp_count, flops_count);
    0.00 :	  42aec1:       mov    -0x270(%rbp),%r8
    0.00 :	  42aec8:       mov    -0x278(%rbp),%rdi
    0.00 :	  42aecf:       mov    -0x288(%rbp),%rcx
    0.00 :	  42aed6:       mov    -0x280(%rbp),%rdx
    0.00 :	  42aedd:       mov    -0x54(%rbp),%esi
    0.00 :	  42aee0:       lea    -0x150(%rbp),%rax
    0.00 :	  42aee7:       mov    %r8,%r9
    0.00 :	  42aeea:       mov    %rdi,%r8
    0.00 :	  42aeed:       mov    %rax,%rdi
    0.00 :	  42aef0:       callq  42a993 <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)>
    0.00 :	  42aef5:       mov    %eax,-0x54(%rbp)
         :	        // flop count: sort LLcol len*log(len)?
         :
         :	        Tval csum = 0;
    0.00 :	  42aef8:       mov    $0x0,%eax
    0.00 :	  42aefd:       mov    %rax,-0x28(%rbp)
         :	        for (int ii = 0; ii < len; ii++) {
    0.00 :	  42af01:       movl   $0x0,-0x2c(%rbp)
    0.00 :	  42af08:       jmp    42af70 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x2fa>
         :	            csum += colspace[ii].cval;
    0.00 :	  42af0a:       mov    -0x2c(%rbp),%eax
    0.00 :	  42af0d:       movslq %eax,%rdx
    0.00 :	  42af10:       lea    -0x150(%rbp),%rax
    0.00 :	  42af17:       mov    %rdx,%rsi
    0.00 :	  42af1a:       mov    %rax,%rdi
    0.00 :	  42af1d:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42af22:       vmovsd 0x8(%rax),%xmm0
    6.25 :	  42af27:       vmovsd -0x28(%rbp),%xmm1
    0.00 :	  42af2c:       vaddsd %xmm0,%xmm1,%xmm0
    6.25 :	  42af30:       vmovsd %xmm0,-0x28(%rbp)
         :	            flops_count++;
    0.00 :	  42af35:       mov    -0x270(%rbp),%rax
    0.00 :	  42af3c:       mov    (%rax),%eax
    0.00 :	  42af3e:       lea    0x1(%rax),%edx
    0.00 :	  42af41:       mov    -0x270(%rbp),%rax
    0.00 :	  42af48:       mov    %edx,(%rax)
         :	            cumspace[ii] = csum;
    0.00 :	  42af4a:       mov    -0x2c(%rbp),%eax
    0.00 :	  42af4d:       movslq %eax,%rdx
    0.00 :	  42af50:       lea    -0x170(%rbp),%rax
    0.00 :	  42af57:       mov    %rdx,%rsi
    0.00 :	  42af5a:       mov    %rax,%rdi
    0.00 :	  42af5d:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  42af62:       mov    %rax,%rdx
    0.00 :	  42af65:       mov    -0x28(%rbp),%rax
    0.00 :	  42af69:       mov    %rax,(%rdx)
         :	        for (int ii = 0; ii < len; ii++) {
    0.00 :	  42af6c:       addl   $0x1,-0x2c(%rbp)
    0.00 :	  42af70:       mov    -0x2c(%rbp),%eax
    0.00 :	  42af73:       cmp    -0x54(%rbp),%eax
    0.00 :	  42af76:       jl     42af0a <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x294>
         :	        }
         :	        Tval wdeg = csum;
    0.00 :	  42af78:       mov    -0x28(%rbp),%rax
    0.00 :	  42af7c:       mov    %rax,-0x38(%rbp)
         :
         :	        Tval colScale = 1;
    0.00 :	  42af80:       movabs $0x3ff0000000000000,%rax
    0.00 :	  42af8a:       mov    %rax,-0x40(%rbp)
         :
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    0.00 :	  42af8e:       movl   $0x0,-0x44(%rbp)
    0.00 :	  42af95:       jmpq   42b3c5 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x74f>
         :
         :	            LLcol llcol = colspace[joffset];
    0.00 :	  42af9a:       mov    -0x44(%rbp),%eax
    0.00 :	  42af9d:       movslq %eax,%rdx
    0.00 :	  42afa0:       lea    -0x150(%rbp),%rax
    0.00 :	  42afa7:       mov    %rdx,%rsi
    0.00 :	  42afaa:       mov    %rax,%rdi
    0.00 :	  42afad:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42afb2:       mov    0x8(%rax),%rdx
   12.50 :	  42afb6:       mov    (%rax),%rax
    0.00 :	  42afb9:       mov    %rax,-0x1c0(%rbp)
    0.00 :	  42afc0:       mov    %rdx,-0x1b8(%rbp)
         :	            Tval w = llcol.cval * colScale;
    0.00 :	  42afc7:       vmovsd -0x1b8(%rbp),%xmm0
    6.25 :	  42afcf:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    0.00 :	  42afd4:       vmovsd %xmm0,-0x60(%rbp)
         :	            Tind j = llcol.row;
    0.00 :	  42afd9:       mov    -0x1c0(%rbp),%eax
    0.00 :	  42afdf:       mov    %eax,-0x1c4(%rbp)
         :
         :	            Tval f = w/wdeg;
    0.00 :	  42afe5:       vmovsd -0x60(%rbp),%xmm0
    0.00 :	  42afea:       vdivsd -0x38(%rbp),%xmm0,%xmm0
    0.00 :	  42afef:       vmovsd %xmm0,-0x1d0(%rbp)
         :	            flops_count++;
    0.00 :	  42aff7:       mov    -0x270(%rbp),%rax
    0.00 :	  42affe:       mov    (%rax),%eax
    0.00 :	  42b000:       lea    0x1(%rax),%edx
    0.00 :	  42b003:       mov    -0x270(%rbp),%rax
    0.00 :	  42b00a:       mov    %edx,(%rax)
         :	            // flop count: 1 mul
         :
         :	            Tval r = u(engine);
    0.00 :	  42b00c:       lea    -0x180(%rbp),%rdx
    0.00 :	  42b013:       lea    -0x190(%rbp),%rax
    0.00 :	  42b01a:       mov    %rdx,%rsi
    6.25 :	  42b01d:       mov    %rax,%rdi
    0.00 :	  42b020:       callq  42d774 <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    0.00 :	  42b025:       vmovsd %xmm0,-0x290(%rbp)
    0.00 :	  42b02d:       mov    -0x290(%rbp),%rax
    6.25 :	  42b034:       mov    %rax,-0x1d8(%rbp)
         :	            //Tval r = randnums[randptr++];
         :	            r = r * (csum - cumspace[joffset]) + cumspace[joffset];
    0.00 :	  42b03b:       mov    -0x44(%rbp),%eax
    0.00 :	  42b03e:       movslq %eax,%rdx
    0.00 :	  42b041:       lea    -0x170(%rbp),%rax
    0.00 :	  42b048:       mov    %rdx,%rsi
    0.00 :	  42b04b:       mov    %rax,%rdi
    0.00 :	  42b04e:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  42b053:       vmovsd (%rax),%xmm1
    0.00 :	  42b057:       vmovsd -0x28(%rbp),%xmm0
    0.00 :	  42b05c:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  42b060:       vmovsd -0x1d8(%rbp),%xmm1
    0.00 :	  42b068:       vmulsd %xmm1,%xmm0,%xmm2
    0.00 :	  42b06c:       vmovsd %xmm2,-0x290(%rbp)
    0.00 :	  42b074:       mov    -0x44(%rbp),%eax
    0.00 :	  42b077:       movslq %eax,%rdx
    0.00 :	  42b07a:       lea    -0x170(%rbp),%rax
    0.00 :	  42b081:       mov    %rdx,%rsi
    0.00 :	  42b084:       mov    %rax,%rdi
    0.00 :	  42b087:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  42b08c:       vmovsd (%rax),%xmm0
    6.25 :	  42b090:       vaddsd -0x290(%rbp),%xmm0,%xmm0
    0.00 :	  42b098:       vmovsd %xmm0,-0x1d8(%rbp)
         :	            flops_count += 3;
    0.00 :	  42b0a0:       mov    -0x270(%rbp),%rax
    0.00 :	  42b0a7:       mov    (%rax),%eax
    0.00 :	  42b0a9:       lea    0x3(%rax),%edx
    0.00 :	  42b0ac:       mov    -0x270(%rbp),%rax
    0.00 :	  42b0b3:       mov    %edx,(%rax)
         :	            // flop count: 1 mul 2 add
         :
         :	            auto cumspace_last = cumspace.begin();
    0.00 :	  42b0b5:       lea    -0x170(%rbp),%rax
    0.00 :	  42b0bc:       mov    %rax,%rdi
    0.00 :	  42b0bf:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.00 :	  42b0c4:       mov    %rax,-0x1e0(%rbp)
         :	            std::advance(cumspace_last, len);
    0.00 :	  42b0cb:       mov    -0x54(%rbp),%edx
    0.00 :	  42b0ce:       lea    -0x1e0(%rbp),%rax
    0.00 :	  42b0d5:       mov    %edx,%esi
    0.00 :	  42b0d7:       mov    %rax,%rdi
    0.00 :	  42b0da:       callq  42d7af <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)>
         :	            int koff = std::distance(cumspace.begin(), std::lower_bound(cumspace.begin(), cumspace_last, r));
    0.00 :	  42b0df:       lea    -0x170(%rbp),%rax
    0.00 :	  42b0e6:       mov    %rax,%rdi
    0.00 :	  42b0e9:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    6.25 :	  42b0ee:       lea    -0x1d8(%rbp),%rdx
    0.00 :	  42b0f5:       mov    -0x1e0(%rbp),%rcx
    0.00 :	  42b0fc:       mov    %rcx,%rsi
    0.00 :	  42b0ff:       mov    %rax,%rdi
    0.00 :	  42b102:       callq  42d7fb <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)>
    0.00 :	  42b107:       mov    %rax,%rbx
    0.00 :	  42b10a:       lea    -0x170(%rbp),%rax
    0.00 :	  42b111:       mov    %rax,%rdi
    0.00 :	  42b114:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.00 :	  42b119:       mov    %rbx,%rsi
    0.00 :	  42b11c:       mov    %rax,%rdi
    0.00 :	  42b11f:       callq  42d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>
    0.00 :	  42b124:       mov    %eax,-0x64(%rbp)
         :	            // flop count: len?
         :
         :	            Tind k = colspace[koff].row;
    0.00 :	  42b127:       mov    -0x64(%rbp),%eax
    0.00 :	  42b12a:       movslq %eax,%rdx
    0.00 :	  42b12d:       lea    -0x150(%rbp),%rax
    0.00 :	  42b134:       mov    %rdx,%rsi
    0.00 :	  42b137:       mov    %rax,%rdi
    0.00 :	  42b13a:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42b13f:       mov    (%rax),%eax
    0.00 :	  42b141:       mov    %eax,-0x68(%rbp)
         :
         :	            Tval newEdgeVal = w*(1-f);
    0.00 :	  42b144:       vmovsd -0x1d0(%rbp),%xmm1
    0.00 :	  42b14c:       vmovsd 0x8b24(%rip),%xmm0        # 433c78 <std::ignore+0x196>
   12.50 :	  42b154:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  42b158:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.00 :	  42b15d:       vmovsd %xmm0,-0x70(%rbp)
         :	            flops_count += 2;
    0.00 :	  42b162:       mov    -0x270(%rbp),%rax
    0.00 :	  42b169:       mov    (%rax),%eax
    0.00 :	  42b16b:       lea    0x2(%rax),%edx
    0.00 :	  42b16e:       mov    -0x270(%rbp),%rax
    0.00 :	  42b175:       mov    %edx,(%rax)
         :	            // flop count: 1 mul 1 add
         :
         :	            // create edge (j,k) with newEdgeVal
         :	            // do it by reassigning ll
         :	            if (j < k) {    // put it in col j
    0.00 :	  42b177:       mov    -0x1c4(%rbp),%eax
    0.00 :	  42b17d:       cmp    -0x68(%rbp),%eax
    0.00 :	  42b180:       jge    42b244 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x5ce>
         :	                Tind jhead = a.cols[j];
    0.00 :	  42b186:       mov    -0x1c4(%rbp),%eax
    0.00 :	  42b18c:       cltq
    0.00 :	  42b18e:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b195:       add    $0x8,%rdx
    0.00 :	  42b199:       mov    %rax,%rsi
    0.00 :	  42b19c:       mov    %rdx,%rdi
    0.00 :	  42b19f:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42b1a4:       mov    (%rax),%eax
   12.50 :	  42b1a6:       mov    %eax,-0x74(%rbp)
         :	                a.lles[llcol.ptr].row = k;
    0.00 :	  42b1a9:       mov    -0x1bc(%rbp),%eax
    0.00 :	  42b1af:       cltq
    0.00 :	  42b1b1:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b1b8:       add    $0x20,%rdx
    0.00 :	  42b1bc:       mov    %rax,%rsi
    0.00 :	  42b1bf:       mov    %rdx,%rdi
    0.00 :	  42b1c2:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    6.25 :	  42b1c7:       mov    -0x68(%rbp),%edx
    0.00 :	  42b1ca:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = jhead;
    0.00 :	  42b1cc:       mov    -0x1bc(%rbp),%eax
    0.00 :	  42b1d2:       cltq
    0.00 :	  42b1d4:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b1db:       add    $0x20,%rdx
    0.00 :	  42b1df:       mov    %rax,%rsi
    0.00 :	  42b1e2:       mov    %rdx,%rdi
    0.00 :	  42b1e5:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42b1ea:       mov    -0x74(%rbp),%edx
    0.00 :	  42b1ed:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    0.00 :	  42b1f0:       mov    -0x1bc(%rbp),%eax
    0.00 :	  42b1f6:       cltq
    0.00 :	  42b1f8:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b1ff:       add    $0x20,%rdx
    0.00 :	  42b203:       mov    %rax,%rsi
    0.00 :	  42b206:       mov    %rdx,%rdi
    0.00 :	  42b209:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42b20e:       mov    %rax,%rdx
    0.00 :	  42b211:       mov    -0x70(%rbp),%rax
    0.00 :	  42b215:       mov    %rax,0x8(%rdx)
         :	                a.cols[j] = llcol.ptr;
    0.00 :	  42b219:       mov    -0x1c4(%rbp),%eax
    0.00 :	  42b21f:       cltq
    0.00 :	  42b221:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b228:       add    $0x8,%rdx
    0.00 :	  42b22c:       mov    %rax,%rsi
    0.00 :	  42b22f:       mov    %rdx,%rdi
    0.00 :	  42b232:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42b237:       mov    -0x1bc(%rbp),%edx
    0.00 :	  42b23d:       mov    %edx,(%rax)
    0.00 :	  42b23f:       jmpq   42b2fa <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x684>
         :	            } else {        // put it in col k
         :	                Tind khead = a.cols[k];
    0.00 :	  42b244:       mov    -0x68(%rbp),%eax
    0.00 :	  42b247:       cltq
    0.00 :	  42b249:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b250:       add    $0x8,%rdx
    0.00 :	  42b254:       mov    %rax,%rsi
    0.00 :	  42b257:       mov    %rdx,%rdi
    0.00 :	  42b25a:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42b25f:       mov    (%rax),%eax
    0.00 :	  42b261:       mov    %eax,-0x78(%rbp)
         :	                a.lles[llcol.ptr].row = j;
    0.00 :	  42b264:       mov    -0x1bc(%rbp),%eax
    0.00 :	  42b26a:       cltq
    0.00 :	  42b26c:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b273:       add    $0x20,%rdx
    0.00 :	  42b277:       mov    %rax,%rsi
    0.00 :	  42b27a:       mov    %rdx,%rdi
    0.00 :	  42b27d:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42b282:       mov    -0x1c4(%rbp),%edx
    0.00 :	  42b288:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = khead;
    0.00 :	  42b28a:       mov    -0x1bc(%rbp),%eax
    0.00 :	  42b290:       cltq
    0.00 :	  42b292:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b299:       add    $0x20,%rdx
    0.00 :	  42b29d:       mov    %rax,%rsi
    0.00 :	  42b2a0:       mov    %rdx,%rdi
    0.00 :	  42b2a3:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42b2a8:       mov    -0x78(%rbp),%edx
    0.00 :	  42b2ab:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    0.00 :	  42b2ae:       mov    -0x1bc(%rbp),%eax
    0.00 :	  42b2b4:       cltq
    0.00 :	  42b2b6:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b2bd:       add    $0x20,%rdx
    0.00 :	  42b2c1:       mov    %rax,%rsi
    0.00 :	  42b2c4:       mov    %rdx,%rdi
    0.00 :	  42b2c7:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42b2cc:       mov    %rax,%rdx
    0.00 :	  42b2cf:       mov    -0x70(%rbp),%rax
    0.00 :	  42b2d3:       mov    %rax,0x8(%rdx)
         :	                a.cols[k] = llcol.ptr;
    0.00 :	  42b2d7:       mov    -0x68(%rbp),%eax
    0.00 :	  42b2da:       cltq
    0.00 :	  42b2dc:       mov    -0x268(%rbp),%rdx
    0.00 :	  42b2e3:       add    $0x8,%rdx
    0.00 :	  42b2e7:       mov    %rax,%rsi
    0.00 :	  42b2ea:       mov    %rdx,%rdi
    0.00 :	  42b2ed:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42b2f2:       mov    -0x1bc(%rbp),%edx
    0.00 :	  42b2f8:       mov    %edx,(%rax)
         :	            }
         :	            intcomp_count++;
    0.00 :	  42b2fa:       mov    -0x288(%rbp),%rax
    0.00 :	  42b301:       mov    (%rax),%eax
    0.00 :	  42b303:       lea    0x1(%rax),%edx
    0.00 :	  42b306:       mov    -0x288(%rbp),%rax
    0.00 :	  42b30d:       mov    %edx,(%rax)
         :
         :	            colScale *= 1 - f;
    0.00 :	  42b30f:       vmovsd -0x1d0(%rbp),%xmm1
    0.00 :	  42b317:       vmovsd 0x8959(%rip),%xmm0        # 433c78 <std::ignore+0x196>
    0.00 :	  42b31f:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  42b323:       vmovsd -0x40(%rbp),%xmm1
    0.00 :	  42b328:       vmulsd %xmm0,%xmm1,%xmm0
    0.00 :	  42b32c:       vmovsd %xmm0,-0x40(%rbp)
         :	            wdeg = wdeg - 2*w + w*f;
    0.00 :	  42b331:       vmovsd -0x60(%rbp),%xmm0
    0.00 :	  42b336:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  42b33a:       vmovsd -0x38(%rbp),%xmm1
    0.00 :	  42b33f:       vsubsd %xmm0,%xmm1,%xmm1
    0.00 :	  42b343:       vmovsd -0x1d0(%rbp),%xmm0
    0.00 :	  42b34b:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.00 :	  42b350:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  42b354:       vmovsd %xmm0,-0x38(%rbp)
         :	            flops_count += 6;
    0.00 :	  42b359:       mov    -0x270(%rbp),%rax
    0.00 :	  42b360:       mov    (%rax),%eax
    0.00 :	  42b362:       lea    0x6(%rax),%edx
    0.00 :	  42b365:       mov    -0x270(%rbp),%rax
    0.00 :	  42b36c:       mov    %edx,(%rax)
         :	            // flop count: 3 mul 3 add
         :
         :	            ldli.rowval.push_back(j);
    0.00 :	  42b36e:       lea    -0x1c4(%rbp),%rax
    0.00 :	  42b375:       lea    -0x260(%rbp),%rdx
    0.00 :	  42b37c:       add    $0x30,%rdx
    0.00 :	  42b380:       mov    %rax,%rsi
    0.00 :	  42b383:       mov    %rdx,%rdi
    0.00 :	  42b386:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	            ldli.fval.push_back(f);
    0.00 :	  42b38b:       lea    -0x1d0(%rbp),%rax
    0.00 :	  42b392:       lea    -0x260(%rbp),%rdx
    0.00 :	  42b399:       add    $0x48,%rdx
    0.00 :	  42b39d:       mov    %rax,%rsi
    0.00 :	  42b3a0:       mov    %rdx,%rdi
    0.00 :	  42b3a3:       callq  42d904 <std::vector<double, std::allocator<double> >::push_back(double const&)>
         :	            ldli_row_ptr += 1;
    0.00 :	  42b3a8:       addl   $0x1,-0x14(%rbp)
         :	            intops_count++;
    0.00 :	  42b3ac:       mov    -0x280(%rbp),%rax
    0.00 :	  42b3b3:       mov    (%rax),%eax
    0.00 :	  42b3b5:       lea    0x1(%rax),%edx
    0.00 :	  42b3b8:       mov    -0x280(%rbp),%rax
    0.00 :	  42b3bf:       mov    %edx,(%rax)
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    0.00 :	  42b3c1:       addl   $0x1,-0x44(%rbp)
    0.00 :	  42b3c5:       mov    -0x54(%rbp),%eax
    0.00 :	  42b3c8:       sub    $0x2,%eax
    0.00 :	  42b3cb:       cmp    -0x44(%rbp),%eax
    0.00 :	  42b3ce:       jge    42af9a <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x324>
         :	        }
         :
         :	        LLcol llcol = colspace[len-1];
    0.00 :	  42b3d4:       mov    -0x54(%rbp),%eax
    0.00 :	  42b3d7:       sub    $0x1,%eax
    0.00 :	  42b3da:       movslq %eax,%rdx
    0.00 :	  42b3dd:       lea    -0x150(%rbp),%rax
    0.00 :	  42b3e4:       mov    %rdx,%rsi
    0.00 :	  42b3e7:       mov    %rax,%rdi
    0.00 :	  42b3ea:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42b3ef:       mov    0x8(%rax),%rdx
    0.00 :	  42b3f3:       mov    (%rax),%rax
    0.00 :	  42b3f6:       mov    %rax,-0x1a0(%rbp)
    0.00 :	  42b3fd:       mov    %rdx,-0x198(%rbp)
         :	        Tval w = llcol.cval * colScale;
    0.00 :	  42b404:       vmovsd -0x198(%rbp),%xmm0
    0.00 :	  42b40c:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    0.00 :	  42b411:       vmovsd %xmm0,-0x80(%rbp)
         :	        flops_count += 1;
    0.00 :	  42b416:       mov    -0x270(%rbp),%rax
    0.00 :	  42b41d:       mov    (%rax),%eax
    0.00 :	  42b41f:       lea    0x1(%rax),%edx
    0.00 :	  42b422:       mov    -0x270(%rbp),%rax
    0.00 :	  42b429:       mov    %edx,(%rax)
         :	        // flop count: 1 mul
         :	        Tind j = llcol.row;
    0.00 :	  42b42b:       mov    -0x1a0(%rbp),%eax
    0.00 :	  42b431:       mov    %eax,-0x1a4(%rbp)
         :
         :	        ldli.rowval.push_back(j);
    0.00 :	  42b437:       lea    -0x1a4(%rbp),%rax
    0.00 :	  42b43e:       lea    -0x260(%rbp),%rdx
    0.00 :	  42b445:       add    $0x30,%rdx
    0.00 :	  42b449:       mov    %rax,%rsi
    0.00 :	  42b44c:       mov    %rdx,%rdi
    0.00 :	  42b44f:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	        ldli.fval.push_back(1);
    0.00 :	  42b454:       movabs $0x3ff0000000000000,%rax
    0.00 :	  42b45e:       mov    %rax,-0x88(%rbp)
    0.00 :	  42b465:       lea    -0x88(%rbp),%rax
    0.00 :	  42b46c:       lea    -0x260(%rbp),%rdx
    0.00 :	  42b473:       add    $0x48,%rdx
    0.00 :	  42b477:       mov    %rax,%rsi
    0.00 :	  42b47a:       mov    %rdx,%rdi
    0.00 :	  42b47d:       callq  42d97e <std::vector<double, std::allocator<double> >::push_back(double&&)>
         :	        ldli_row_ptr += 1;
    0.00 :	  42b482:       addl   $0x1,-0x14(%rbp)
         :
         :	        d[i] = w;
    0.00 :	  42b486:       mov    -0x20(%rbp),%rdx
    0.00 :	  42b48a:       lea    -0x130(%rbp),%rax
    0.00 :	  42b491:       mov    %rdx,%rsi
    0.00 :	  42b494:       mov    %rax,%rdi
    0.00 :	  42b497:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  42b49c:       mov    %rax,%rdx
    0.00 :	  42b49f:       mov    -0x80(%rbp),%rax
    0.00 :	  42b4a3:       mov    %rax,(%rdx)
         :	    for (long i = 0; i <= n-2; i++) {
    0.00 :	  42b4a6:       addq   $0x1,-0x20(%rbp)
    0.00 :	  42b4ab:       mov    -0x50(%rbp),%rax
    0.00 :	  42b4af:       sub    $0x2,%rax
    0.00 :	  42b4b3:       cmp    -0x20(%rbp),%rax
    0.00 :	  42b4b7:       jge    42ae2c <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x1b6>
         :	    }
         :
         :	    ldli.colptr[n-1] = ldli_row_ptr;
    0.00 :	  42b4bd:       mov    -0x50(%rbp),%rax
    0.00 :	  42b4c1:       sub    $0x1,%rax
    0.00 :	  42b4c5:       lea    -0x260(%rbp),%rdx
    0.00 :	  42b4cc:       add    $0x18,%rdx
    0.00 :	  42b4d0:       mov    %rax,%rsi
    0.00 :	  42b4d3:       mov    %rdx,%rdi
    0.00 :	  42b4d6:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42b4db:       mov    -0x14(%rbp),%edx
    0.00 :	  42b4de:       mov    %edx,(%rax)
         :	    ldli.d = d;
    0.00 :	  42b4e0:       lea    -0x130(%rbp),%rax
    0.00 :	  42b4e7:       lea    -0x260(%rbp),%rdx
    0.00 :	  42b4ee:       add    $0x60,%rdx
    0.00 :	  42b4f2:       mov    %rax,%rsi
    0.00 :	  42b4f5:       mov    %rdx,%rdi
    0.00 :	  42b4f8:       callq  42d9ba <std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> > const&)>
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42b4fd:       lea    -0x170(%rbp),%rax
    0.00 :	  42b504:       mov    %rax,%rdi
    0.00 :	  42b507:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42b50c:       lea    -0x150(%rbp),%rax
    0.00 :	  42b513:       mov    %rax,%rdi
    0.00 :	  42b516:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42b51b:       lea    -0x130(%rbp),%rax
    0.00 :	  42b522:       mov    %rax,%rdi
    0.00 :	  42b525:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    ldli.d = d;
    0.00 :	  42b52a:       lea    -0x260(%rbp),%rax
    0.00 :	  42b531:       mov    %rax,%rdi
    0.00 :	  42b534:       callq  41f9b8 <LDLinv::~LDLinv()>
    0.00 :	  42b539:       jmpq   42b600 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x98a>
    0.00 :	  42b53e:       mov    %rax,%rbx
    0.00 :	  42b541:       lea    -0x110(%rbp),%rax
    0.00 :	  42b548:       mov    %rax,%rdi
    0.00 :	  42b54b:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42b550:       mov    %rbx,%rax
    0.00 :	  42b553:       jmpq   42b5f8 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x982>
    0.00 :	  42b558:       mov    %rax,%rbx
    0.00 :	  42b55b:       lea    -0xd1(%rbp),%rax
    0.00 :	  42b562:       mov    %rax,%rdi
    0.00 :	  42b565:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42b56a:       jmp    42b5e4 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x96e>
    0.00 :	  42b56c:       mov    %rax,%rbx
    0.00 :	  42b56f:       lea    -0xc2(%rbp),%rax
    0.00 :	  42b576:       mov    %rax,%rdi
    0.00 :	  42b579:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42b57e:       jmp    42b5d5 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x95f>
    0.00 :	  42b580:       mov    %rax,%rbx
    0.00 :	  42b583:       lea    -0xc1(%rbp),%rax
    0.00 :	  42b58a:       mov    %rax,%rdi
    0.00 :	  42b58d:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42b592:       jmp    42b5c6 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x950>
    0.00 :	  42b594:       mov    %rax,%rbx
         :	        int len = get_ll_col_count(a, i, colspace, intops_count, intcomp_count);
    0.00 :	  42b597:       lea    -0xc0(%rbp),%rax
    0.00 :	  42b59e:       mov    %rax,%rdi
    0.00 :	  42b5a1:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42b5a6:       mov    %rbx,%rax
    0.00 :	  42b5a9:       jmp    42b5af <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x939>
    0.00 :	  42b5ab:       jmp    42b5af <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x939>
    0.00 :	  42b5ad:       jmp    42b5af <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x939>
    0.00 :	  42b5af:       mov    %rax,%rbx
    0.00 :	  42b5b2:       jmp    42b5b7 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x941>
    0.00 :	  42b5b4:       mov    %rax,%rbx
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42b5b7:       lea    -0x170(%rbp),%rax
    0.00 :	  42b5be:       mov    %rax,%rdi
    0.00 :	  42b5c1:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42b5c6:       lea    -0x150(%rbp),%rax
    0.00 :	  42b5cd:       mov    %rax,%rdi
    0.00 :	  42b5d0:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42b5d5:       lea    -0x130(%rbp),%rax
    0.00 :	  42b5dc:       mov    %rax,%rdi
    0.00 :	  42b5df:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    ldli.d = d;
    0.00 :	  42b5e4:       lea    -0x260(%rbp),%rax
    0.00 :	  42b5eb:       mov    %rax,%rdi
    0.00 :	  42b5ee:       callq  41f9b8 <LDLinv::~LDLinv()>
    0.00 :	  42b5f3:       mov    %rbx,%rax
    0.00 :	  42b5f6:       jmp    42b5f8 <approxChol_count(LLMatOrd, int&, int&, int&, int&)+0x982>
    0.00 :	  42b5f8:       mov    %rax,%rdi
    0.00 :	  42b5fb:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  42b600:       add    $0x288,%rsp
    0.00 :	  42b607:       pop    %rbx
    0.00 :	  42b608:       pop    %rbp
    0.00 :	  42b609:       retq
 Percent |	Source code & Disassembly of main for cycles:u (16 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b50 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>:
         :	_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv():
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
         :
         :	      const _Tp_alloc_type&
         :	      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    0.00 :	  422b50:       push   %rbp
   18.75 :	  422b51:       mov    %rsp,%rbp
   56.25 :	  422b54:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
    6.25 :	  422b58:       mov    -0x8(%rbp),%rax
   12.50 :	  422b5c:       pop    %rbp
    6.25 :	  422b5d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (14 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304e1 <void std::_Destroy_aux<true>::__destroy<LLcol*>(LLcol*, LLcol*)>:
         :	_ZNSt12_Destroy_auxILb1EE9__destroyIP5LLcolEEvT_S4_():
         :	  template<>
         :	    struct _Destroy_aux<true>
         :	    {
         :	      template<typename _ForwardIterator>
         :	        static void
         :	        __destroy(_ForwardIterator, _ForwardIterator) { }
   14.29 :	  4304e1:       push   %rbp
    0.00 :	  4304e2:       mov    %rsp,%rbp
   71.43 :	  4304e5:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4304e9:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4304ed:       pop    %rbp
   14.29 :	  4304ee:       retq
 Percent |	Source code & Disassembly of main for cycles:u (14 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042416e <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int> const*, int const&) const>:
         :	_ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPKSt13_Rb_tree_nodeIiES9_RKi():
         :
         :	  template<typename _Key, typename _Val, typename _KeyOfValue,
         :	           typename _Compare, typename _Alloc>
         :	    typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                      _Compare, _Alloc>::const_iterator
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  42416e:       push   %rbp
    0.00 :	  42416f:       mov    %rsp,%rbp
    0.00 :	  424172:       sub    $0x30,%rsp
    0.00 :	  424176:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42417a:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42417e:       mov    %rdx,-0x28(%rbp)
    0.00 :	  424182:       mov    %rcx,-0x30(%rbp)
         :	    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
         :	                   const _Key& __k) const
         :	    {
         :	      while (__x != 0)
    0.00 :	  424186:       jmp    4241db <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int> const*, int const&) const+0x6d>
         :	        if (!_M_impl._M_key_compare(_S_key(__x), __k))
    7.14 :	  424188:       mov    -0x20(%rbp),%rax
    0.00 :	  42418c:       mov    %rax,%rdi
    0.00 :	  42418f:       callq  425ffc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node<int> const*)>
    0.00 :	  424194:       mov    %rax,%rcx
    0.00 :	  424197:       mov    -0x18(%rbp),%rax
    0.00 :	  42419b:       mov    -0x30(%rbp),%rdx
    0.00 :	  42419f:       mov    %rcx,%rsi
    0.00 :	  4241a2:       mov    %rax,%rdi
    0.00 :	  4241a5:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
    0.00 :	  4241aa:       xor    $0x1,%eax
    0.00 :	  4241ad:       test   %al,%al
    0.00 :	  4241af:       je     4241cb <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int> const*, int const&) const+0x5d>
         :	          __y = __x, __x = _S_left(__x);
    7.14 :	  4241b1:       mov    -0x20(%rbp),%rax
   42.86 :	  4241b5:       mov    %rax,-0x28(%rbp)
    0.00 :	  4241b9:       mov    -0x20(%rbp),%rax
    0.00 :	  4241bd:       mov    %rax,%rdi
    0.00 :	  4241c0:       callq  426430 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_left(std::_Rb_tree_node_base const*)>
    0.00 :	  4241c5:       mov    %rax,-0x20(%rbp)
    0.00 :	  4241c9:       jmp    4241db <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int> const*, int const&) const+0x6d>
         :	        else
         :	          __x = _S_right(__x);
   14.29 :	  4241cb:       mov    -0x20(%rbp),%rax
    7.14 :	  4241cf:       mov    %rax,%rdi
    0.00 :	  4241d2:       callq  426442 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base const*)>
    0.00 :	  4241d7:       mov    %rax,-0x20(%rbp)
         :	      while (__x != 0)
    7.14 :	  4241db:       cmpq   $0x0,-0x20(%rbp)
    7.14 :	  4241e0:       jne    424188 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int> const*, int const&) const+0x1a>
         :	      return const_iterator(__y);
    7.14 :	  4241e2:       mov    -0x28(%rbp),%rdx
    0.00 :	  4241e6:       lea    -0x10(%rbp),%rax
    0.00 :	  4241ea:       mov    %rdx,%rsi
    0.00 :	  4241ed:       mov    %rax,%rdi
    0.00 :	  4241f0:       callq  424130 <std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_node<int> const*)>
    0.00 :	  4241f5:       mov    -0x10(%rbp),%rax
         :	    }
    0.00 :	  4241f9:       leaveq
    0.00 :	  4241fa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (13 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042a422 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)>:
         :	_Z16getPartition_rowRSt6vectorI5LLcolSaIS0_EEiiRiS4_():
         :
         :	    return len;
         :	}
         :
         :	int getPartition_row(std::vector<LLcol> &nums, int low, int height, int &intops, int &intcomp)
         :	{
    0.00 :	  42a422:       push   %rbp
    0.00 :	  42a423:       mov    %rsp,%rbp
    0.00 :	  42a426:       push   %rbx
    0.00 :	  42a427:       sub    $0x38,%rsp
    0.00 :	  42a42b:       mov    %rdi,-0x28(%rbp)
    0.00 :	  42a42f:       mov    %esi,-0x2c(%rbp)
    0.00 :	  42a432:       mov    %edx,-0x30(%rbp)
    0.00 :	  42a435:       mov    %rcx,-0x38(%rbp)
    0.00 :	  42a439:       mov    %r8,-0x40(%rbp)
         :	    LLcol keyVal = nums[low];
    0.00 :	  42a43d:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a440:       movslq %eax,%rdx
    0.00 :	  42a443:       mov    -0x28(%rbp),%rax
    0.00 :	  42a447:       mov    %rdx,%rsi
    0.00 :	  42a44a:       mov    %rax,%rdi
    0.00 :	  42a44d:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a452:       mov    0x8(%rax),%rdx
    0.00 :	  42a456:       mov    (%rax),%rax
    7.69 :	  42a459:       mov    %rax,-0x20(%rbp)
    0.00 :	  42a45d:       mov    %rdx,-0x18(%rbp)
         :	    while (low<height)
    0.00 :	  42a461:       jmpq   42a5bd <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x19b>
         :	    {
         :	        intcomp++;
    0.00 :	  42a466:       mov    -0x40(%rbp),%rax
    0.00 :	  42a46a:       mov    (%rax),%eax
    0.00 :	  42a46c:       lea    0x1(%rax),%edx
    0.00 :	  42a46f:       mov    -0x40(%rbp),%rax
    0.00 :	  42a473:       mov    %edx,(%rax)
         :	        while (low < height && nums[height].row >= keyVal.row) {
    0.00 :	  42a475:       jmp    42a499 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x77>
         :	            height--;
    0.00 :	  42a477:       subl   $0x1,-0x30(%rbp)
         :	            intcomp += 2;
    7.69 :	  42a47b:       mov    -0x40(%rbp),%rax
    0.00 :	  42a47f:       mov    (%rax),%eax
    0.00 :	  42a481:       lea    0x2(%rax),%edx
    0.00 :	  42a484:       mov    -0x40(%rbp),%rax
    0.00 :	  42a488:       mov    %edx,(%rax)
         :	            intops++;
    0.00 :	  42a48a:       mov    -0x38(%rbp),%rax
    0.00 :	  42a48e:       mov    (%rax),%eax
    0.00 :	  42a490:       lea    0x1(%rax),%edx
    0.00 :	  42a493:       mov    -0x38(%rbp),%rax
    0.00 :	  42a497:       mov    %edx,(%rax)
         :	        while (low < height && nums[height].row >= keyVal.row) {
    0.00 :	  42a499:       mov    -0x2c(%rbp),%eax
    7.69 :	  42a49c:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a49f:       jge    42a4c6 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xa4>
    0.00 :	  42a4a1:       mov    -0x30(%rbp),%eax
    0.00 :	  42a4a4:       movslq %eax,%rdx
    7.69 :	  42a4a7:       mov    -0x28(%rbp),%rax
    0.00 :	  42a4ab:       mov    %rdx,%rsi
    0.00 :	  42a4ae:       mov    %rax,%rdi
    0.00 :	  42a4b1:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a4b6:       mov    (%rax),%edx
    7.69 :	  42a4b8:       mov    -0x20(%rbp),%eax
    0.00 :	  42a4bb:       cmp    %eax,%edx
    0.00 :	  42a4bd:       jl     42a4c6 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xa4>
    0.00 :	  42a4bf:       mov    $0x1,%eax
    0.00 :	  42a4c4:       jmp    42a4cb <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xa9>
    0.00 :	  42a4c6:       mov    $0x0,%eax
    0.00 :	  42a4cb:       test   %al,%al
    0.00 :	  42a4cd:       jne    42a477 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x55>
         :	        }
         :	        intcomp += 2;
    7.69 :	  42a4cf:       mov    -0x40(%rbp),%rax
    0.00 :	  42a4d3:       mov    (%rax),%eax
    0.00 :	  42a4d5:       lea    0x2(%rax),%edx
    0.00 :	  42a4d8:       mov    -0x40(%rbp),%rax
    0.00 :	  42a4dc:       mov    %edx,(%rax)
         :	        nums[low] = nums[height];
    0.00 :	  42a4de:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a4e1:       movslq %eax,%rdx
    0.00 :	  42a4e4:       mov    -0x28(%rbp),%rax
    0.00 :	  42a4e8:       mov    %rdx,%rsi
    0.00 :	  42a4eb:       mov    %rax,%rdi
    0.00 :	  42a4ee:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a4f3:       mov    %rax,%rbx
    0.00 :	  42a4f6:       mov    -0x30(%rbp),%eax
    0.00 :	  42a4f9:       movslq %eax,%rdx
    0.00 :	  42a4fc:       mov    -0x28(%rbp),%rax
    0.00 :	  42a500:       mov    %rdx,%rsi
    0.00 :	  42a503:       mov    %rax,%rdi
    0.00 :	  42a506:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a50b:       mov    0x8(%rax),%rdx
    0.00 :	  42a50f:       mov    (%rax),%rax
    0.00 :	  42a512:       mov    %rax,(%rbx)
    0.00 :	  42a515:       mov    %rdx,0x8(%rbx)
         :	        while (low < height && nums[low].row <= keyVal.row) {
    0.00 :	  42a519:       jmp    42a53d <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x11b>
         :	            low++;
    0.00 :	  42a51b:       addl   $0x1,-0x2c(%rbp)
         :	            intcomp += 2;
    7.69 :	  42a51f:       mov    -0x40(%rbp),%rax
    0.00 :	  42a523:       mov    (%rax),%eax
    0.00 :	  42a525:       lea    0x2(%rax),%edx
    0.00 :	  42a528:       mov    -0x40(%rbp),%rax
    0.00 :	  42a52c:       mov    %edx,(%rax)
         :	            intops++;
    0.00 :	  42a52e:       mov    -0x38(%rbp),%rax
    0.00 :	  42a532:       mov    (%rax),%eax
    0.00 :	  42a534:       lea    0x1(%rax),%edx
    0.00 :	  42a537:       mov    -0x38(%rbp),%rax
    0.00 :	  42a53b:       mov    %edx,(%rax)
         :	        while (low < height && nums[low].row <= keyVal.row) {
    7.69 :	  42a53d:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a540:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a543:       jge    42a56a <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x148>
    0.00 :	  42a545:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a548:       movslq %eax,%rdx
    0.00 :	  42a54b:       mov    -0x28(%rbp),%rax
    0.00 :	  42a54f:       mov    %rdx,%rsi
    0.00 :	  42a552:       mov    %rax,%rdi
    0.00 :	  42a555:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a55a:       mov    (%rax),%edx
    7.69 :	  42a55c:       mov    -0x20(%rbp),%eax
    0.00 :	  42a55f:       cmp    %eax,%edx
    0.00 :	  42a561:       jg     42a56a <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x148>
    0.00 :	  42a563:       mov    $0x1,%eax
    0.00 :	  42a568:       jmp    42a56f <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x14d>
    0.00 :	  42a56a:       mov    $0x0,%eax
    7.69 :	  42a56f:       test   %al,%al
    0.00 :	  42a571:       jne    42a51b <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0xf9>
         :	        }
         :	        intcomp += 2;
    0.00 :	  42a573:       mov    -0x40(%rbp),%rax
    7.69 :	  42a577:       mov    (%rax),%eax
    0.00 :	  42a579:       lea    0x2(%rax),%edx
    0.00 :	  42a57c:       mov    -0x40(%rbp),%rax
    0.00 :	  42a580:       mov    %edx,(%rax)
         :	        nums[height] = nums[low];
    7.69 :	  42a582:       mov    -0x30(%rbp),%eax
    0.00 :	  42a585:       movslq %eax,%rdx
    0.00 :	  42a588:       mov    -0x28(%rbp),%rax
    0.00 :	  42a58c:       mov    %rdx,%rsi
    0.00 :	  42a58f:       mov    %rax,%rdi
    0.00 :	  42a592:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a597:       mov    %rax,%rbx
    0.00 :	  42a59a:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a59d:       movslq %eax,%rdx
    0.00 :	  42a5a0:       mov    -0x28(%rbp),%rax
    0.00 :	  42a5a4:       mov    %rdx,%rsi
    0.00 :	  42a5a7:       mov    %rax,%rdi
    0.00 :	  42a5aa:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a5af:       mov    0x8(%rax),%rdx
    0.00 :	  42a5b3:       mov    (%rax),%rax
    0.00 :	  42a5b6:       mov    %rax,(%rbx)
    0.00 :	  42a5b9:       mov    %rdx,0x8(%rbx)
         :	    while (low<height)
    0.00 :	  42a5bd:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a5c0:       cmp    -0x30(%rbp),%eax
    0.00 :	  42a5c3:       jl     42a466 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x44>
         :	    }
         :	    intcomp++;
    0.00 :	  42a5c9:       mov    -0x40(%rbp),%rax
    0.00 :	  42a5cd:       mov    (%rax),%eax
    0.00 :	  42a5cf:       lea    0x1(%rax),%edx
    0.00 :	  42a5d2:       mov    -0x40(%rbp),%rax
    0.00 :	  42a5d6:       mov    %edx,(%rax)
         :	    nums[low] = keyVal;
    0.00 :	  42a5d8:       mov    -0x2c(%rbp),%eax
    0.00 :	  42a5db:       movslq %eax,%rdx
    0.00 :	  42a5de:       mov    -0x28(%rbp),%rax
    0.00 :	  42a5e2:       mov    %rdx,%rsi
    0.00 :	  42a5e5:       mov    %rax,%rdi
    0.00 :	  42a5e8:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a5ed:       mov    %rax,%rcx
    0.00 :	  42a5f0:       mov    -0x20(%rbp),%rax
    0.00 :	  42a5f4:       mov    -0x18(%rbp),%rdx
    0.00 :	  42a5f8:       mov    %rax,(%rcx)
    7.69 :	  42a5fb:       mov    %rdx,0x8(%rcx)
         :	    return low;
    0.00 :	  42a5ff:       mov    -0x2c(%rbp),%eax
         :	}
    0.00 :	  42a602:       add    $0x38,%rsp
    0.00 :	  42a606:       pop    %rbx
    0.00 :	  42a607:       pop    %rbp
    0.00 :	  42a608:       retq
 Percent |	Source code & Disassembly of main for cycles:u (11 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422c40 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator() const>:
         :	_ZNKSt12_Vector_baseI5LLordSaIS0_EE19_M_get_Tp_allocatorEv():
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
         :
         :	      const _Tp_alloc_type&
         :	      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    0.00 :	  422c40:       push   %rbp
    9.09 :	  422c41:       mov    %rsp,%rbp
   36.36 :	  422c44:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
    0.00 :	  422c48:       mov    -0x8(%rbp),%rax
   45.45 :	  422c4c:       pop    %rbp
    9.09 :	  422c4d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (9 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431a36 <cmp_edge(Edge const&, Edge const&)>:
         :	_Z8cmp_edgeRK4EdgeS1_():
         :	#include "approxCholTypes.h"
         :
         :	bool cmp_edge(const Edge& a, const Edge& b){
    0.00 :	  431a36:       push   %rbp
   11.11 :	  431a37:       mov    %rsp,%rbp
    0.00 :	  431a3a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  431a3e:       mov    %rsi,-0x10(%rbp)
         :	    return (a.c < b.c) || (a.c == b.c && a.r < b.r);
    0.00 :	  431a42:       mov    -0x8(%rbp),%rax
   22.22 :	  431a46:       mov    0x4(%rax),%edx
   11.11 :	  431a49:       mov    -0x10(%rbp),%rax
    0.00 :	  431a4d:       mov    0x4(%rax),%eax
   44.44 :	  431a50:       cmp    %eax,%edx
    0.00 :	  431a52:       jl     431a76 <cmp_edge(Edge const&, Edge const&)+0x40>
    0.00 :	  431a54:       mov    -0x8(%rbp),%rax
    0.00 :	  431a58:       mov    0x4(%rax),%edx
    0.00 :	  431a5b:       mov    -0x10(%rbp),%rax
    0.00 :	  431a5f:       mov    0x4(%rax),%eax
    0.00 :	  431a62:       cmp    %eax,%edx
    0.00 :	  431a64:       jne    431a7d <cmp_edge(Edge const&, Edge const&)+0x47>
    0.00 :	  431a66:       mov    -0x8(%rbp),%rax
    0.00 :	  431a6a:       mov    (%rax),%edx
    0.00 :	  431a6c:       mov    -0x10(%rbp),%rax
    0.00 :	  431a70:       mov    (%rax),%eax
    0.00 :	  431a72:       cmp    %eax,%edx
    0.00 :	  431a74:       jge    431a7d <cmp_edge(Edge const&, Edge const&)+0x47>
    0.00 :	  431a76:       mov    $0x1,%eax
    0.00 :	  431a7b:       jmp    431a82 <cmp_edge(Edge const&, Edge const&)+0x4c>
    0.00 :	  431a7d:       mov    $0x0,%eax
         :	}
   11.11 :	  431a82:       pop    %rbp
    0.00 :	  431a83:       retq
 Percent |	Source code & Disassembly of main for cycles:u (8 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042a993 <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)>:
         :	_Z17compressCol_countRSt6vectorI5LLcolSaIS0_EEiRiS4_S4_S4_():
         :	        sort_val(c, mid + 1, high, intops, intcomp, flcomp, flops);
         :	    }
         :	    intcomp++;
         :	}
         :
         :	Tind compressCol_count(std::vector<LLcol> &colspace, int len, int &intops, int &intcomp, int &flcomp, int &flops) {
    0.00 :	  42a993:       push   %rbp
    0.00 :	  42a994:       mov    %rsp,%rbp
    0.00 :	  42a997:       push   %rbx
    0.00 :	  42a998:       sub    $0x78,%rsp
    0.00 :	  42a99c:       mov    %rdi,-0x48(%rbp)
    0.00 :	  42a9a0:       mov    %esi,-0x4c(%rbp)
    0.00 :	  42a9a3:       mov    %rdx,-0x58(%rbp)
    0.00 :	  42a9a7:       mov    %rcx,-0x60(%rbp)
    0.00 :	  42a9ab:       mov    %r8,-0x68(%rbp)
    0.00 :	  42a9af:       mov    %r9,-0x70(%rbp)
         :
         :	    // sort colspace ? DY: just checked, yes!
         :	    sort_row(colspace, 0, len-1, intops, intcomp);
    0.00 :	  42a9b3:       mov    -0x4c(%rbp),%eax
    0.00 :	  42a9b6:       lea    -0x1(%rax),%esi
    0.00 :	  42a9b9:       mov    -0x60(%rbp),%rcx
    0.00 :	  42a9bd:       mov    -0x58(%rbp),%rdx
    0.00 :	  42a9c1:       mov    -0x48(%rbp),%rax
    0.00 :	  42a9c5:       mov    %rcx,%r8
    0.00 :	  42a9c8:       mov    %rdx,%rcx
    0.00 :	  42a9cb:       mov    %esi,%edx
    0.00 :	  42a9cd:       mov    $0x0,%esi
    0.00 :	  42a9d2:       mov    %rax,%rdi
    0.00 :	  42a9d5:       callq  42a609 <sort_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)>
         :
         :	    std::vector<LLcol> c = colspace;
    0.00 :	  42a9da:       mov    -0x48(%rbp),%rdx
    0.00 :	  42a9de:       lea    -0x40(%rbp),%rax
    0.00 :	  42a9e2:       mov    %rdx,%rsi
    0.00 :	  42a9e5:       mov    %rax,%rdi
    0.00 :	  42a9e8:       callq  42d1bc <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :
         :	    Tind ptr = -1;
    0.00 :	  42a9ed:       movl   $0xffffffff,-0x14(%rbp)
         :	    Tind currow = c[0].row;     // julia index start from 1?
   12.50 :	  42a9f4:       lea    -0x40(%rbp),%rax
    0.00 :	  42a9f8:       mov    $0x0,%esi
    0.00 :	  42a9fd:       mov    %rax,%rdi
    0.00 :	  42aa00:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aa05:       mov    (%rax),%eax
    0.00 :	  42aa07:       mov    %eax,-0x18(%rbp)
         :	    Tval curval = c[0].cval;
    0.00 :	  42aa0a:       lea    -0x40(%rbp),%rax
    0.00 :	  42aa0e:       mov    $0x0,%esi
    0.00 :	  42aa13:       mov    %rax,%rdi
    0.00 :	  42aa16:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aa1b:       mov    0x8(%rax),%rax
    0.00 :	  42aa1f:       mov    %rax,-0x20(%rbp)
         :	    Tind curptr = c[0].ptr;
    0.00 :	  42aa23:       lea    -0x40(%rbp),%rax
    0.00 :	  42aa27:       mov    $0x0,%esi
    0.00 :	  42aa2c:       mov    %rax,%rdi
    0.00 :	  42aa2f:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aa34:       mov    0x4(%rax),%eax
    0.00 :	  42aa37:       mov    %eax,-0x24(%rbp)
         :	    intops++;
    0.00 :	  42aa3a:       mov    -0x58(%rbp),%rax
    0.00 :	  42aa3e:       mov    (%rax),%eax
    0.00 :	  42aa40:       lea    0x1(%rax),%edx
    0.00 :	  42aa43:       mov    -0x58(%rbp),%rax
    0.00 :	  42aa47:       mov    %edx,(%rax)
         :
         :	    // not consider inbounds
         :	    for (int i = 1; i < len; i++) {
    0.00 :	  42aa49:       movl   $0x1,-0x28(%rbp)
    0.00 :	  42aa50:       jmpq   42ab80 <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)+0x1ed>
         :
         :	        if (c[i].row != currow) {
    0.00 :	  42aa55:       mov    -0x28(%rbp),%eax
    0.00 :	  42aa58:       movslq %eax,%rdx
    0.00 :	  42aa5b:       lea    -0x40(%rbp),%rax
    0.00 :	  42aa5f:       mov    %rdx,%rsi
    0.00 :	  42aa62:       mov    %rax,%rdi
    0.00 :	  42aa65:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aa6a:       mov    (%rax),%eax
    0.00 :	  42aa6c:       cmp    -0x18(%rbp),%eax
   12.50 :	  42aa6f:       setne  %al
    0.00 :	  42aa72:       test   %al,%al
    0.00 :	  42aa74:       je     42ab36 <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)+0x1a3>
         :
         :	            ptr += 1;
    0.00 :	  42aa7a:       addl   $0x1,-0x14(%rbp)
         :	            c[ptr].row = currow;
    0.00 :	  42aa7e:       mov    -0x14(%rbp),%eax
    0.00 :	  42aa81:       movslq %eax,%rdx
    0.00 :	  42aa84:       lea    -0x40(%rbp),%rax
    0.00 :	  42aa88:       mov    %rdx,%rsi
    0.00 :	  42aa8b:       mov    %rax,%rdi
    0.00 :	  42aa8e:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aa93:       mov    -0x18(%rbp),%edx
    0.00 :	  42aa96:       mov    %edx,(%rax)
         :	            c[ptr].cval = curval;
    0.00 :	  42aa98:       mov    -0x14(%rbp),%eax
    0.00 :	  42aa9b:       movslq %eax,%rdx
    0.00 :	  42aa9e:       lea    -0x40(%rbp),%rax
    0.00 :	  42aaa2:       mov    %rdx,%rsi
    0.00 :	  42aaa5:       mov    %rax,%rdi
    0.00 :	  42aaa8:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aaad:       mov    %rax,%rdx
    0.00 :	  42aab0:       mov    -0x20(%rbp),%rax
    0.00 :	  42aab4:       mov    %rax,0x8(%rdx)
         :	            c[ptr].ptr = curptr;
    0.00 :	  42aab8:       mov    -0x14(%rbp),%eax
    0.00 :	  42aabb:       movslq %eax,%rdx
    0.00 :	  42aabe:       lea    -0x40(%rbp),%rax
    0.00 :	  42aac2:       mov    %rdx,%rsi
    0.00 :	  42aac5:       mov    %rax,%rdi
    0.00 :	  42aac8:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aacd:       mov    -0x24(%rbp),%edx
    0.00 :	  42aad0:       mov    %edx,0x4(%rax)
         :
         :	            currow = c[i].row;
    0.00 :	  42aad3:       mov    -0x28(%rbp),%eax
    0.00 :	  42aad6:       movslq %eax,%rdx
    0.00 :	  42aad9:       lea    -0x40(%rbp),%rax
    0.00 :	  42aadd:       mov    %rdx,%rsi
    0.00 :	  42aae0:       mov    %rax,%rdi
    0.00 :	  42aae3:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aae8:       mov    (%rax),%eax
    0.00 :	  42aaea:       mov    %eax,-0x18(%rbp)
         :	            curval = c[i].cval;
    0.00 :	  42aaed:       mov    -0x28(%rbp),%eax
    0.00 :	  42aaf0:       movslq %eax,%rdx
    0.00 :	  42aaf3:       lea    -0x40(%rbp),%rax
    0.00 :	  42aaf7:       mov    %rdx,%rsi
    0.00 :	  42aafa:       mov    %rax,%rdi
    0.00 :	  42aafd:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42ab02:       mov    0x8(%rax),%rax
    0.00 :	  42ab06:       mov    %rax,-0x20(%rbp)
         :	            curptr = c[i].ptr;
    0.00 :	  42ab0a:       mov    -0x28(%rbp),%eax
    0.00 :	  42ab0d:       movslq %eax,%rdx
    0.00 :	  42ab10:       lea    -0x40(%rbp),%rax
    0.00 :	  42ab14:       mov    %rdx,%rsi
    0.00 :	  42ab17:       mov    %rax,%rdi
    0.00 :	  42ab1a:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42ab1f:       mov    0x4(%rax),%eax
   12.50 :	  42ab22:       mov    %eax,-0x24(%rbp)
         :	            intops++;
    0.00 :	  42ab25:       mov    -0x58(%rbp),%rax
    0.00 :	  42ab29:       mov    (%rax),%eax
    0.00 :	  42ab2b:       lea    0x1(%rax),%edx
    0.00 :	  42ab2e:       mov    -0x58(%rbp),%rax
    0.00 :	  42ab32:       mov    %edx,(%rax)
    0.00 :	  42ab34:       jmp    42ab6d <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)+0x1da>
         :
         :	        } else {
         :
         :	            curval += c[i].cval;
    0.00 :	  42ab36:       mov    -0x28(%rbp),%eax
    0.00 :	  42ab39:       movslq %eax,%rdx
    0.00 :	  42ab3c:       lea    -0x40(%rbp),%rax
    0.00 :	  42ab40:       mov    %rdx,%rsi
    0.00 :	  42ab43:       mov    %rax,%rdi
    0.00 :	  42ab46:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42ab4b:       vmovsd 0x8(%rax),%xmm0
    0.00 :	  42ab50:       vmovsd -0x20(%rbp),%xmm1
    0.00 :	  42ab55:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  42ab59:       vmovsd %xmm0,-0x20(%rbp)
         :	            flops++;
    0.00 :	  42ab5e:       mov    -0x70(%rbp),%rax
    0.00 :	  42ab62:       mov    (%rax),%eax
    0.00 :	  42ab64:       lea    0x1(%rax),%edx
    0.00 :	  42ab67:       mov    -0x70(%rbp),%rax
    0.00 :	  42ab6b:       mov    %edx,(%rax)
         :
         :	        }
         :	        intcomp++;
    0.00 :	  42ab6d:       mov    -0x60(%rbp),%rax
   12.50 :	  42ab71:       mov    (%rax),%eax
    0.00 :	  42ab73:       lea    0x1(%rax),%edx
    0.00 :	  42ab76:       mov    -0x60(%rbp),%rax
    0.00 :	  42ab7a:       mov    %edx,(%rax)
         :	    for (int i = 1; i < len; i++) {
   12.50 :	  42ab7c:       addl   $0x1,-0x28(%rbp)
    0.00 :	  42ab80:       mov    -0x28(%rbp),%eax
    0.00 :	  42ab83:       cmp    -0x4c(%rbp),%eax
    0.00 :	  42ab86:       jl     42aa55 <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)+0xc2>
         :	    }
         :
         :	    // emit the last row
         :	    ptr += 1;
    0.00 :	  42ab8c:       addl   $0x1,-0x14(%rbp)
         :	    c[ptr].row = currow;
   12.50 :	  42ab90:       mov    -0x14(%rbp),%eax
    0.00 :	  42ab93:       movslq %eax,%rdx
    0.00 :	  42ab96:       lea    -0x40(%rbp),%rax
    0.00 :	  42ab9a:       mov    %rdx,%rsi
    0.00 :	  42ab9d:       mov    %rax,%rdi
    0.00 :	  42aba0:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42aba5:       mov    -0x18(%rbp),%edx
    0.00 :	  42aba8:       mov    %edx,(%rax)
         :	    c[ptr].cval = curval;
    0.00 :	  42abaa:       mov    -0x14(%rbp),%eax
    0.00 :	  42abad:       movslq %eax,%rdx
    0.00 :	  42abb0:       lea    -0x40(%rbp),%rax
    0.00 :	  42abb4:       mov    %rdx,%rsi
    0.00 :	  42abb7:       mov    %rax,%rdi
    0.00 :	  42abba:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42abbf:       mov    %rax,%rdx
    0.00 :	  42abc2:       mov    -0x20(%rbp),%rax
    0.00 :	  42abc6:       mov    %rax,0x8(%rdx)
         :	    c[ptr].ptr = curptr;
    0.00 :	  42abca:       mov    -0x14(%rbp),%eax
    0.00 :	  42abcd:       movslq %eax,%rdx
   12.50 :	  42abd0:       lea    -0x40(%rbp),%rax
    0.00 :	  42abd4:       mov    %rdx,%rsi
    0.00 :	  42abd7:       mov    %rax,%rdi
    0.00 :	  42abda:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42abdf:       mov    -0x24(%rbp),%edx
    0.00 :	  42abe2:       mov    %edx,0x4(%rax)
         :	    intops++;
   12.50 :	  42abe5:       mov    -0x58(%rbp),%rax
    0.00 :	  42abe9:       mov    (%rax),%eax
    0.00 :	  42abeb:       lea    0x1(%rax),%edx
    0.00 :	  42abee:       mov    -0x58(%rbp),%rax
    0.00 :	  42abf2:       mov    %edx,(%rax)
         :
         :	    sort_val(colspace, 0, len-1, intops, intcomp, flcomp, flops);
    0.00 :	  42abf4:       mov    -0x4c(%rbp),%eax
    0.00 :	  42abf7:       lea    -0x1(%rax),%esi
    0.00 :	  42abfa:       mov    -0x68(%rbp),%r8
    0.00 :	  42abfe:       mov    -0x60(%rbp),%rdi
    0.00 :	  42ac02:       mov    -0x58(%rbp),%rdx
    0.00 :	  42ac06:       mov    -0x48(%rbp),%rax
    0.00 :	  42ac0a:       mov    -0x70(%rbp),%rcx
    0.00 :	  42ac0e:       mov    %rcx,(%rsp)
    0.00 :	  42ac12:       mov    %r8,%r9
    0.00 :	  42ac15:       mov    %rdi,%r8
    0.00 :	  42ac18:       mov    %rdx,%rcx
    0.00 :	  42ac1b:       mov    %esi,%edx
    0.00 :	  42ac1d:       mov    $0x0,%esi
    0.00 :	  42ac22:       mov    %rax,%rdi
    0.00 :	  42ac25:       callq  42a8d6 <sort_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)>
         :
         :	    colspace = c;
    0.00 :	  42ac2a:       lea    -0x40(%rbp),%rdx
    0.00 :	  42ac2e:       mov    -0x48(%rbp),%rax
    0.00 :	  42ac32:       mov    %rdx,%rsi
    0.00 :	  42ac35:       mov    %rax,%rdi
    0.00 :	  42ac38:       callq  42d302 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
    0.00 :	  42ac3d:       mov    -0x14(%rbp),%eax
    0.00 :	  42ac40:       lea    0x1(%rax),%ebx
    0.00 :	  42ac43:       lea    -0x40(%rbp),%rax
    0.00 :	  42ac47:       mov    %rax,%rdi
    0.00 :	  42ac4a:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    0.00 :	  42ac4f:       mov    %ebx,%eax
    0.00 :	  42ac51:       jmp    42ac6f <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)+0x2dc>
    0.00 :	  42ac53:       mov    %rax,%rbx
    0.00 :	  42ac56:       lea    -0x40(%rbp),%rax
    0.00 :	  42ac5a:       mov    %rax,%rdi
    0.00 :	  42ac5d:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    0.00 :	  42ac62:       mov    %rbx,%rax
    0.00 :	  42ac65:       jmp    42ac67 <compressCol_count(std::vector<LLcol, std::allocator<LLcol> >&, int, int&, int&, int&, int&)+0x2d4>
    0.00 :	  42ac67:       mov    %rax,%rdi
    0.00 :	  42ac6a:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  42ac6f:       add    $0x78,%rsp
    0.00 :	  42ac73:       pop    %rbx
    0.00 :	  42ac74:       pop    %rbp
    0.00 :	  42ac75:       retq
 Percent |	Source code & Disassembly of main for cycles:u (8 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042a2e4 <get_ll_col_count(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&, int&, int&)>:
         :	_Z16get_ll_col_count8LLMatOrdiRSt6vectorI5LLcolSaIS1_EERiS5_():
         :	    ldli.d = d;
         :
         :	    return ldli;
         :	}
         :
         :	int get_ll_col_count(LLMatOrd llmat, int i, std::vector<LLcol> &colspace, int &intops, int &intcomp) {
    0.00 :	  42a2e4:       push   %rbp
    0.00 :	  42a2e5:       mov    %rsp,%rbp
    0.00 :	  42a2e8:       push   %rbx
    0.00 :	  42a2e9:       sub    $0x58,%rsp
    0.00 :	  42a2ed:       mov    %rdi,-0x38(%rbp)
    0.00 :	  42a2f1:       mov    %esi,-0x3c(%rbp)
    0.00 :	  42a2f4:       mov    %rdx,-0x48(%rbp)
    0.00 :	  42a2f8:       mov    %rcx,-0x50(%rbp)
    0.00 :	  42a2fc:       mov    %r8,-0x58(%rbp)
         :
         :	    Tind ptr = llmat.cols[i];
    0.00 :	  42a300:       mov    -0x3c(%rbp),%eax
    0.00 :	  42a303:       cltq
    0.00 :	  42a305:       mov    -0x38(%rbp),%rdx
    0.00 :	  42a309:       add    $0x8,%rdx
    0.00 :	  42a30d:       mov    %rax,%rsi
    0.00 :	  42a310:       mov    %rdx,%rdi
    0.00 :	  42a313:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42a318:       mov    (%rax),%eax
    0.00 :	  42a31a:       mov    %eax,-0x14(%rbp)
         :	    int len = 0;
    0.00 :	  42a31d:       movl   $0x0,-0x18(%rbp)
         :
         :	    while (ptr != -1) {
    0.00 :	  42a324:       jmpq   42a404 <get_ll_col_count(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&, int&, int&)+0x120>
         :	        LLcol item = {llmat.lles[ptr].row, ptr, llmat.lles[ptr].val};
    0.00 :	  42a329:       mov    -0x14(%rbp),%eax
    0.00 :	  42a32c:       cltq
    0.00 :	  42a32e:       mov    -0x38(%rbp),%rdx
    0.00 :	  42a332:       add    $0x20,%rdx
    0.00 :	  42a336:       mov    %rax,%rsi
    0.00 :	  42a339:       mov    %rdx,%rdi
    0.00 :	  42a33c:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42a341:       mov    (%rax),%eax
   62.50 :	  42a343:       mov    %eax,-0x30(%rbp)
    0.00 :	  42a346:       mov    -0x14(%rbp),%eax
    0.00 :	  42a349:       mov    %eax,-0x2c(%rbp)
    0.00 :	  42a34c:       mov    -0x14(%rbp),%eax
    0.00 :	  42a34f:       cltq
    0.00 :	  42a351:       mov    -0x38(%rbp),%rdx
    0.00 :	  42a355:       add    $0x20,%rdx
    0.00 :	  42a359:       mov    %rax,%rsi
    0.00 :	  42a35c:       mov    %rdx,%rdi
    0.00 :	  42a35f:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42a364:       mov    0x8(%rax),%rax
    0.00 :	  42a368:       mov    %rax,-0x28(%rbp)
         :
         :	        if (len >= colspace.size()) {
    0.00 :	  42a36c:       mov    -0x18(%rbp),%eax
    0.00 :	  42a36f:       movslq %eax,%rbx
    0.00 :	  42a372:       mov    -0x48(%rbp),%rax
    0.00 :	  42a376:       mov    %rax,%rdi
    0.00 :	  42a379:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42a37e:       cmp    %rax,%rbx
    0.00 :	  42a381:       setae  %al
    0.00 :	  42a384:       test   %al,%al
    0.00 :	  42a386:       je     42a39d <get_ll_col_count(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&, int&, int&)+0xb9>
         :	            colspace.push_back(item);
    0.00 :	  42a388:       lea    -0x30(%rbp),%rdx
    0.00 :	  42a38c:       mov    -0x48(%rbp),%rax
    0.00 :	  42a390:       mov    %rdx,%rsi
    0.00 :	  42a393:       mov    %rax,%rdi
    0.00 :	  42a396:       callq  42d04a <std::vector<LLcol, std::allocator<LLcol> >::push_back(LLcol const&)>
    0.00 :	  42a39b:       jmp    42a3c4 <get_ll_col_count(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&, int&, int&)+0xe0>
         :	        } else {
         :	            colspace[len] = item;
    0.00 :	  42a39d:       mov    -0x18(%rbp),%eax
    0.00 :	  42a3a0:       movslq %eax,%rdx
    0.00 :	  42a3a3:       mov    -0x48(%rbp),%rax
    0.00 :	  42a3a7:       mov    %rdx,%rsi
    0.00 :	  42a3aa:       mov    %rax,%rdi
    0.00 :	  42a3ad:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a3b2:       mov    %rax,%rcx
    0.00 :	  42a3b5:       mov    -0x30(%rbp),%rax
   12.50 :	  42a3b9:       mov    -0x28(%rbp),%rdx
    0.00 :	  42a3bd:       mov    %rax,(%rcx)
    0.00 :	  42a3c0:       mov    %rdx,0x8(%rcx)
         :	        }
         :
         :	        len += 1;
    0.00 :	  42a3c4:       addl   $0x1,-0x18(%rbp)
         :	        ptr = llmat.lles[ptr].next;
    0.00 :	  42a3c8:       mov    -0x14(%rbp),%eax
    0.00 :	  42a3cb:       cltq
    0.00 :	  42a3cd:       mov    -0x38(%rbp),%rdx
    0.00 :	  42a3d1:       add    $0x20,%rdx
    0.00 :	  42a3d5:       mov    %rax,%rsi
    0.00 :	  42a3d8:       mov    %rdx,%rdi
    0.00 :	  42a3db:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42a3e0:       mov    0x4(%rax),%eax
    0.00 :	  42a3e3:       mov    %eax,-0x14(%rbp)
         :	        intops++;
    0.00 :	  42a3e6:       mov    -0x50(%rbp),%rax
    0.00 :	  42a3ea:       mov    (%rax),%eax
    0.00 :	  42a3ec:       lea    0x1(%rax),%edx
    0.00 :	  42a3ef:       mov    -0x50(%rbp),%rax
    0.00 :	  42a3f3:       mov    %edx,(%rax)
         :	        intcomp++;
    0.00 :	  42a3f5:       mov    -0x58(%rbp),%rax
    0.00 :	  42a3f9:       mov    (%rax),%eax
    0.00 :	  42a3fb:       lea    0x1(%rax),%edx
    0.00 :	  42a3fe:       mov    -0x58(%rbp),%rax
    0.00 :	  42a402:       mov    %edx,(%rax)
         :	    while (ptr != -1) {
    0.00 :	  42a404:       cmpl   $0xffffffff,-0x14(%rbp)
   12.50 :	  42a408:       jne    42a329 <get_ll_col_count(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&, int&, int&)+0x45>
         :	    }
         :
         :	    return len;
   12.50 :	  42a40e:       mov    -0x18(%rbp),%eax
    0.00 :	  42a411:       jmp    42a41b <get_ll_col_count(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&, int&, int&)+0x137>
    0.00 :	  42a413:       mov    %rax,%rdi
    0.00 :	  42a416:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  42a41b:       add    $0x58,%rsp
    0.00 :	  42a41f:       pop    %rbx
    0.00 :	  42a420:       pop    %rbp
    0.00 :	  42a421:       retq
 Percent |	Source code & Disassembly of main for cycles:u (8 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	000000000041dd90 <operator new(unsigned long)@plt>:
  100.00 :	  41dd90:       jmpq   *0x2223ea(%rip)        # 640180 <operator new(unsigned long)@GLIBCXX_3.4>
    0.00 :	  41dd96:       pushq  $0x2d
    0.00 :	  41dd9b:       jmpq   41dab0 <.plt>
 Percent |	Source code & Disassembly of main for cycles:u (8 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042429e <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_():
         :	           typename _Compare, typename _Alloc>
         :	    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::_Base_ptr,
         :	         typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::_Base_ptr>
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  42429e:       push   %rbp
    0.00 :	  42429f:       mov    %rsp,%rbp
    0.00 :	  4242a2:       add    $0xffffffffffffff80,%rsp
    0.00 :	  4242a6:       mov    %rdi,-0x78(%rbp)
    0.00 :	  4242aa:       mov    %rsi,-0x80(%rbp)
         :	    _M_get_insert_unique_pos(const key_type& __k)
         :	    {
         :	      typedef pair<_Base_ptr, _Base_ptr> _Res;
         :	      _Link_type __x = _M_begin();
    0.00 :	  4242ae:       mov    -0x78(%rbp),%rax
    0.00 :	  4242b2:       mov    %rax,%rdi
    0.00 :	  4242b5:       callq  421bf2 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_begin()>
    0.00 :	  4242ba:       mov    %rax,-0x58(%rbp)
         :	      _Link_type __y = _M_end();
    0.00 :	  4242be:       mov    -0x78(%rbp),%rax
    0.00 :	  4242c2:       mov    %rax,%rdi
    0.00 :	  4242c5:       callq  42454e <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_end()>
    0.00 :	  4242ca:       mov    %rax,-0x60(%rbp)
         :	      bool __comp = true;
    0.00 :	  4242ce:       movb   $0x1,-0x1(%rbp)
         :	      while (__x != 0)
    0.00 :	  4242d2:       jmp    424325 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x87>
         :	        {
         :	          __y = __x;
    0.00 :	  4242d4:       mov    -0x58(%rbp),%rax
    0.00 :	  4242d8:       mov    %rax,-0x60(%rbp)
         :	          __comp = _M_impl._M_key_compare(__k, _S_key(__x));
    0.00 :	  4242dc:       mov    -0x58(%rbp),%rax
    0.00 :	  4242e0:       mov    %rax,%rdi
    0.00 :	  4242e3:       callq  426466 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_key(std::_Rb_tree_node<Edge> const*)>
    0.00 :	  4242e8:       mov    %rax,%rdx
    0.00 :	  4242eb:       mov    -0x78(%rbp),%rax
   25.00 :	  4242ef:       mov    -0x80(%rbp),%rcx
    0.00 :	  4242f3:       mov    %rcx,%rsi
    0.00 :	  4242f6:       mov    %rax,%rdi
    0.00 :	  4242f9:       callq  426492 <std::less<Edge>::operator()(Edge const&, Edge const&) const>
    0.00 :	  4242fe:       mov    %al,-0x1(%rbp)
         :	          __x = __comp ? _S_left(__x) : _S_right(__x);
    0.00 :	  424301:       cmpb   $0x0,-0x1(%rbp)
   12.50 :	  424305:       je     424315 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x77>
    0.00 :	  424307:       mov    -0x58(%rbp),%rax
   12.50 :	  42430b:       mov    %rax,%rdi
    0.00 :	  42430e:       callq  4240de <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_left(std::_Rb_tree_node_base*)>
    0.00 :	  424313:       jmp    424321 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x83>
    0.00 :	  424315:       mov    -0x58(%rbp),%rax
    0.00 :	  424319:       mov    %rax,%rdi
    0.00 :	  42431c:       callq  4240cc <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_right(std::_Rb_tree_node_base*)>
   12.50 :	  424321:       mov    %rax,-0x58(%rbp)
         :	      while (__x != 0)
    0.00 :	  424325:       mov    -0x58(%rbp),%rax
   25.00 :	  424329:       test   %rax,%rax
    0.00 :	  42432c:       jne    4242d4 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x36>
         :	        }
         :	      iterator __j = iterator(__y);
    0.00 :	  42432e:       mov    -0x60(%rbp),%rdx
    0.00 :	  424332:       lea    -0x70(%rbp),%rax
    0.00 :	  424336:       mov    %rdx,%rsi
    0.00 :	  424339:       mov    %rax,%rdi
    0.00 :	  42433c:       callq  424534 <std::_Rb_tree_iterator<Edge>::_Rb_tree_iterator(std::_Rb_tree_node<Edge>*)>
         :	      if (__comp)
    0.00 :	  424341:       cmpb   $0x0,-0x1(%rbp)
    0.00 :	  424345:       je     42439e <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x100>
         :	        {
         :	          if (__j == begin())
    0.00 :	  424347:       mov    -0x78(%rbp),%rax
    0.00 :	  42434b:       mov    %rax,%rdi
    0.00 :	  42434e:       callq  4264bc <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::begin()>
    0.00 :	  424353:       mov    %rax,-0x50(%rbp)
    0.00 :	  424357:       lea    -0x50(%rbp),%rdx
    0.00 :	  42435b:       lea    -0x70(%rbp),%rax
    0.00 :	  42435f:       mov    %rdx,%rsi
    0.00 :	  424362:       mov    %rax,%rdi
    0.00 :	  424365:       callq  4264e6 <std::_Rb_tree_iterator<Edge>::operator==(std::_Rb_tree_iterator<Edge> const&) const>
    0.00 :	  42436a:       test   %al,%al
    0.00 :	  42436c:       je     424392 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0xf4>
         :	            return _Res(__x, __y);
    0.00 :	  42436e:       lea    -0x60(%rbp),%rdx
    0.00 :	  424372:       lea    -0x58(%rbp),%rcx
    0.00 :	  424376:       lea    -0x40(%rbp),%rax
    0.00 :	  42437a:       mov    %rcx,%rsi
    0.00 :	  42437d:       mov    %rax,%rdi
    0.00 :	  424380:       callq  42425a <std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<Edge>*&, std::_Rb_tree_node<Edge>*&, void>(std::_Rb_tree_node<Edge>*&, std::_Rb_tree_node<Edge>*&)>
    0.00 :	  424385:       mov    -0x40(%rbp),%rax
    0.00 :	  424389:       mov    -0x38(%rbp),%rdx
    0.00 :	  42438d:       jmpq   424416 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x178>
         :	          else
         :	            --__j;
    0.00 :	  424392:       lea    -0x70(%rbp),%rax
    0.00 :	  424396:       mov    %rax,%rdi
    0.00 :	  424399:       callq  426508 <std::_Rb_tree_iterator<Edge>::operator--()>
         :	        }
         :	      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   12.50 :	  42439e:       mov    -0x70(%rbp),%rax
    0.00 :	  4243a2:       mov    %rax,%rdi
    0.00 :	  4243a5:       callq  426530 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_key(std::_Rb_tree_node_base const*)>
    0.00 :	  4243aa:       mov    %rax,%rcx
    0.00 :	  4243ad:       mov    -0x78(%rbp),%rax
    0.00 :	  4243b1:       mov    -0x80(%rbp),%rdx
    0.00 :	  4243b5:       mov    %rcx,%rsi
    0.00 :	  4243b8:       mov    %rax,%rdi
    0.00 :	  4243bb:       callq  426492 <std::less<Edge>::operator()(Edge const&, Edge const&) const>
    0.00 :	  4243c0:       test   %al,%al
    0.00 :	  4243c2:       je     4243e5 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x147>
         :	        return _Res(__x, __y);
    0.00 :	  4243c4:       lea    -0x60(%rbp),%rdx
    0.00 :	  4243c8:       lea    -0x58(%rbp),%rcx
    0.00 :	  4243cc:       lea    -0x30(%rbp),%rax
    0.00 :	  4243d0:       mov    %rcx,%rsi
    0.00 :	  4243d3:       mov    %rax,%rdi
    0.00 :	  4243d6:       callq  42425a <std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<Edge>*&, std::_Rb_tree_node<Edge>*&, void>(std::_Rb_tree_node<Edge>*&, std::_Rb_tree_node<Edge>*&)>
    0.00 :	  4243db:       mov    -0x30(%rbp),%rax
    0.00 :	  4243df:       mov    -0x28(%rbp),%rdx
    0.00 :	  4243e3:       jmp    424416 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x178>
         :	      return _Res(__j._M_node, 0);
    0.00 :	  4243e5:       movq   $0x0,-0x10(%rbp)
    0.00 :	  4243ed:       lea    -0x10(%rbp),%rdx
    0.00 :	  4243f1:       lea    -0x70(%rbp),%rcx
    0.00 :	  4243f5:       lea    -0x20(%rbp),%rax
    0.00 :	  4243f9:       mov    %rcx,%rsi
    0.00 :	  4243fc:       mov    %rax,%rdi
    0.00 :	  4243ff:       callq  423b1c <std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, void>(std::_Rb_tree_node_base*&, std::_Rb_tree_node_base* const&)>
    0.00 :	  424404:       mov    -0x20(%rbp),%rax
    0.00 :	  424408:       mov    -0x18(%rbp),%rdx
    0.00 :	  42440c:       jmp    424416 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)+0x178>
    0.00 :	  42440e:       mov    %rax,%rdi
    0.00 :	  424411:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  424416:       leaveq
    0.00 :	  424417:       retq
 Percent |	Source code & Disassembly of main for cycles:u (8 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425ffc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node<int> const*)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE():
         :	      static const_reference
         :	      _S_value(_Const_Link_type __x)
         :	      { return __x->_M_value_field; }
         :
         :	      static const _Key&
         :	      _S_key(_Const_Link_type __x)
   37.50 :	  425ffc:       push   %rbp
    0.00 :	  425ffd:       mov    %rsp,%rbp
    0.00 :	  426000:       sub    $0x20,%rsp
   12.50 :	  426004:       mov    %rdi,-0x18(%rbp)
         :	      { return _KeyOfValue()(_S_value(__x)); }
    0.00 :	  426008:       mov    -0x18(%rbp),%rax
   37.50 :	  42600c:       mov    %rax,%rdi
    0.00 :	  42600f:       callq  42768c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_value(std::_Rb_tree_node<int> const*)>
    0.00 :	  426014:       mov    %rax,%rdx
    0.00 :	  426017:       lea    -0x1(%rbp),%rax
   12.50 :	  42601b:       mov    %rdx,%rsi
    0.00 :	  42601e:       mov    %rax,%rdi
    0.00 :	  426021:       callq  423cd2 <std::_Identity<int>::operator()(int const&) const>
    0.00 :	  426026:       leaveq
    0.00 :	  426027:       retq
 Percent |	Source code & Disassembly of main for cycles:u (8 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426492 <std::less<Edge>::operator()(Edge const&, Edge const&) const>:
         :	_ZNKSt4lessI4EdgeEclERKS0_S3_():
         :	  /// One of the @link comparison_functors comparison functors@endlink.
         :	  template<typename _Tp>
         :	    struct less : public binary_function<_Tp, _Tp, bool>
         :	    {
         :	      bool
         :	      operator()(const _Tp& __x, const _Tp& __y) const
    0.00 :	  426492:       push   %rbp
    0.00 :	  426493:       mov    %rsp,%rbp
    0.00 :	  426496:       sub    $0x20,%rsp
    0.00 :	  42649a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42649e:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4264a2:       mov    %rdx,-0x18(%rbp)
         :	      { return __x < __y; }
    0.00 :	  4264a6:       mov    -0x18(%rbp),%rdx
   12.50 :	  4264aa:       mov    -0x10(%rbp),%rax
   37.50 :	  4264ae:       mov    %rdx,%rsi
    0.00 :	  4264b1:       mov    %rax,%rdi
   12.50 :	  4264b4:       callq  41ec22 <Edge::operator<(Edge const&) const>
   12.50 :	  4264b9:       leaveq
   25.00 :	  4264ba:       retq
 Percent |	Source code & Disassembly of main for cycles:u (7 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423cd2 <std::_Identity<int>::operator()(int const&) const>:
         :	_ZNKSt9_IdentityIiEclERKi():
         :	      _Tp&
         :	      operator()(_Tp& __x) const
         :	      { return __x; }
         :
         :	      const _Tp&
         :	      operator()(const _Tp& __x) const
    0.00 :	  423cd2:       push   %rbp
    0.00 :	  423cd3:       mov    %rsp,%rbp
   14.29 :	  423cd6:       mov    %rdi,-0x8(%rbp)
   14.29 :	  423cda:       mov    %rsi,-0x10(%rbp)
         :	      { return __x; }
    0.00 :	  423cde:       mov    -0x10(%rbp),%rax
   71.43 :	  423ce2:       pop    %rbp
    0.00 :	  423ce3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (6 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	000000000041dcc0 <logl@plt>:
  100.00 :	  41dcc0:       jmpq   *0x222452(%rip)        # 640118 <logl@GLIBC_2.2.5>
    0.00 :	  41dcc6:       pushq  $0x20
    0.00 :	  41dccb:       jmpq   41dab0 <.plt>
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427898 <std::_Identity<Edge>::operator()(Edge const&) const>:
         :	_ZNKSt9_IdentityI4EdgeEclERKS0_():
         :	      _Tp&
         :	      operator()(_Tp& __x) const
         :	      { return __x; }
         :
         :	      const _Tp&
         :	      operator()(const _Tp& __x) const
   20.00 :	  427898:       push   %rbp
    0.00 :	  427899:       mov    %rsp,%rbp
    0.00 :	  42789c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4278a0:       mov    %rsi,-0x10(%rbp)
         :	      { return __x; }
    0.00 :	  4278a4:       mov    -0x10(%rbp),%rax
   80.00 :	  4278a8:       pop    %rbp
    0.00 :	  4278a9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426466 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_key(std::_Rb_tree_node<Edge> const*)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt13_Rb_tree_nodeIS0_E():
         :	      static const_reference
         :	      _S_value(_Const_Link_type __x)
         :	      { return __x->_M_value_field; }
         :
         :	      static const _Key&
         :	      _S_key(_Const_Link_type __x)
    0.00 :	  426466:       push   %rbp
    0.00 :	  426467:       mov    %rsp,%rbp
    0.00 :	  42646a:       sub    $0x20,%rsp
   40.00 :	  42646e:       mov    %rdi,-0x18(%rbp)
         :	      { return _KeyOfValue()(_S_value(__x)); }
    0.00 :	  426472:       mov    -0x18(%rbp),%rax
   40.00 :	  426476:       mov    %rax,%rdi
    0.00 :	  426479:       callq  427886 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_value(std::_Rb_tree_node<Edge> const*)>
    0.00 :	  42647e:       mov    %rax,%rdx
    0.00 :	  426481:       lea    -0x1(%rbp),%rax
   20.00 :	  426485:       mov    %rdx,%rsi
    0.00 :	  426488:       mov    %rax,%rdi
    0.00 :	  42648b:       callq  427898 <std::_Identity<Edge>::operator()(Edge const&) const>
    0.00 :	  426490:       leaveq
    0.00 :	  426491:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004240cc <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_right(std::_Rb_tree_node_base*)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_S_rightEPSt18_Rb_tree_node_base():
         :	      static _Const_Link_type
         :	      _S_left(_Const_Base_ptr __x)
         :	      { return static_cast<_Const_Link_type>(__x->_M_left); }
         :
         :	      static _Link_type
         :	      _S_right(_Base_ptr __x)
   40.00 :	  4240cc:       push   %rbp
    0.00 :	  4240cd:       mov    %rsp,%rbp
    0.00 :	  4240d0:       mov    %rdi,-0x8(%rbp)
         :	      { return static_cast<_Link_type>(__x->_M_right); }
    0.00 :	  4240d4:       mov    -0x8(%rbp),%rax
    0.00 :	  4240d8:       mov    0x18(%rax),%rax
   60.00 :	  4240dc:       pop    %rbp
    0.00 :	  4240dd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427886 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_value(std::_Rb_tree_node<Edge> const*)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_S_valueEPKSt13_Rb_tree_nodeIS0_E():
         :	      _Const_Link_type
         :	      _M_end() const
         :	      { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }
         :
         :	      static const_reference
         :	      _S_value(_Const_Link_type __x)
    0.00 :	  427886:       push   %rbp
   20.00 :	  427887:       mov    %rsp,%rbp
    0.00 :	  42788a:       mov    %rdi,-0x8(%rbp)
         :	      { return __x->_M_value_field; }
    0.00 :	  42788e:       mov    -0x8(%rbp),%rax
   60.00 :	  427892:       add    $0x20,%rax
   20.00 :	  427896:       pop    %rbp
    0.00 :	  427897:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423b58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE24_M_get_insert_unique_posERKi():
         :	           typename _Compare, typename _Alloc>
         :	    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::_Base_ptr,
         :	         typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::_Base_ptr>
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  423b58:       push   %rbp
    0.00 :	  423b59:       mov    %rsp,%rbp
    0.00 :	  423b5c:       add    $0xffffffffffffff80,%rsp
    0.00 :	  423b60:       mov    %rdi,-0x78(%rbp)
    0.00 :	  423b64:       mov    %rsi,-0x80(%rbp)
         :	    _M_get_insert_unique_pos(const key_type& __k)
         :	    {
         :	      typedef pair<_Base_ptr, _Base_ptr> _Res;
         :	      _Link_type __x = _M_begin();
    0.00 :	  423b68:       mov    -0x78(%rbp),%rax
    0.00 :	  423b6c:       mov    %rax,%rdi
    0.00 :	  423b6f:       callq  42191e <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_begin()>
    0.00 :	  423b74:       mov    %rax,-0x58(%rbp)
         :	      _Link_type __y = _M_end();
    0.00 :	  423b78:       mov    -0x78(%rbp),%rax
    0.00 :	  423b7c:       mov    %rax,%rdi
    0.00 :	  423b7f:       callq  425fea <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_end()>
    0.00 :	  423b84:       mov    %rax,-0x60(%rbp)
         :	      bool __comp = true;
    0.00 :	  423b88:       movb   $0x1,-0x1(%rbp)
         :	      while (__x != 0)
    0.00 :	  423b8c:       jmp    423bdf <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x87>
         :	        {
         :	          __y = __x;
    0.00 :	  423b8e:       mov    -0x58(%rbp),%rax
    0.00 :	  423b92:       mov    %rax,-0x60(%rbp)
         :	          __comp = _M_impl._M_key_compare(__k, _S_key(__x));
    0.00 :	  423b96:       mov    -0x58(%rbp),%rax
    0.00 :	  423b9a:       mov    %rax,%rdi
    0.00 :	  423b9d:       callq  425ffc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node<int> const*)>
    0.00 :	  423ba2:       mov    %rax,%rdx
    0.00 :	  423ba5:       mov    -0x78(%rbp),%rax
    0.00 :	  423ba9:       mov    -0x80(%rbp),%rcx
    0.00 :	  423bad:       mov    %rcx,%rsi
    0.00 :	  423bb0:       mov    %rax,%rdi
    0.00 :	  423bb3:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
    0.00 :	  423bb8:       mov    %al,-0x1(%rbp)
         :	          __x = __comp ? _S_left(__x) : _S_right(__x);
   20.00 :	  423bbb:       cmpb   $0x0,-0x1(%rbp)
   60.00 :	  423bbf:       je     423bcf <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x77>
    0.00 :	  423bc1:       mov    -0x58(%rbp),%rax
    0.00 :	  423bc5:       mov    %rax,%rdi
    0.00 :	  423bc8:       callq  423a6a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_left(std::_Rb_tree_node_base*)>
    0.00 :	  423bcd:       jmp    423bdb <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x83>
    0.00 :	  423bcf:       mov    -0x58(%rbp),%rax
    0.00 :	  423bd3:       mov    %rax,%rdi
    0.00 :	  423bd6:       callq  423a58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base*)>
    0.00 :	  423bdb:       mov    %rax,-0x58(%rbp)
         :	      while (__x != 0)
    0.00 :	  423bdf:       mov    -0x58(%rbp),%rax
    0.00 :	  423be3:       test   %rax,%rax
    0.00 :	  423be6:       jne    423b8e <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x36>
         :	        }
         :	      iterator __j = iterator(__y);
   20.00 :	  423be8:       mov    -0x60(%rbp),%rdx
    0.00 :	  423bec:       lea    -0x70(%rbp),%rax
    0.00 :	  423bf0:       mov    %rdx,%rsi
    0.00 :	  423bf3:       mov    %rax,%rdi
    0.00 :	  423bf6:       callq  423dee <std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int>*)>
         :	      if (__comp)
    0.00 :	  423bfb:       cmpb   $0x0,-0x1(%rbp)
    0.00 :	  423bff:       je     423c58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x100>
         :	        {
         :	          if (__j == begin())
    0.00 :	  423c01:       mov    -0x78(%rbp),%rax
    0.00 :	  423c05:       mov    %rax,%rdi
    0.00 :	  423c08:       callq  426028 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::begin()>
    0.00 :	  423c0d:       mov    %rax,-0x50(%rbp)
    0.00 :	  423c11:       lea    -0x50(%rbp),%rdx
    0.00 :	  423c15:       lea    -0x70(%rbp),%rax
    0.00 :	  423c19:       mov    %rdx,%rsi
    0.00 :	  423c1c:       mov    %rax,%rdi
    0.00 :	  423c1f:       callq  426052 <std::_Rb_tree_iterator<int>::operator==(std::_Rb_tree_iterator<int> const&) const>
    0.00 :	  423c24:       test   %al,%al
    0.00 :	  423c26:       je     423c4c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0xf4>
         :	            return _Res(__x, __y);
    0.00 :	  423c28:       lea    -0x60(%rbp),%rdx
    0.00 :	  423c2c:       lea    -0x58(%rbp),%rcx
    0.00 :	  423c30:       lea    -0x40(%rbp),%rax
    0.00 :	  423c34:       mov    %rcx,%rsi
    0.00 :	  423c37:       mov    %rax,%rdi
    0.00 :	  423c3a:       callq  423aca <std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<int>*&, std::_Rb_tree_node<int>*&, void>(std::_Rb_tree_node<int>*&, std::_Rb_tree_node<int>*&)>
    0.00 :	  423c3f:       mov    -0x40(%rbp),%rax
    0.00 :	  423c43:       mov    -0x38(%rbp),%rdx
    0.00 :	  423c47:       jmpq   423cd0 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x178>
         :	          else
         :	            --__j;
    0.00 :	  423c4c:       lea    -0x70(%rbp),%rax
    0.00 :	  423c50:       mov    %rax,%rdi
    0.00 :	  423c53:       callq  426074 <std::_Rb_tree_iterator<int>::operator--()>
         :	        }
         :	      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
    0.00 :	  423c58:       mov    -0x70(%rbp),%rax
    0.00 :	  423c5c:       mov    %rax,%rdi
    0.00 :	  423c5f:       callq  4241fb <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node_base const*)>
    0.00 :	  423c64:       mov    %rax,%rcx
    0.00 :	  423c67:       mov    -0x78(%rbp),%rax
    0.00 :	  423c6b:       mov    -0x80(%rbp),%rdx
    0.00 :	  423c6f:       mov    %rcx,%rsi
    0.00 :	  423c72:       mov    %rax,%rdi
    0.00 :	  423c75:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
    0.00 :	  423c7a:       test   %al,%al
    0.00 :	  423c7c:       je     423c9f <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x147>
         :	        return _Res(__x, __y);
    0.00 :	  423c7e:       lea    -0x60(%rbp),%rdx
    0.00 :	  423c82:       lea    -0x58(%rbp),%rcx
    0.00 :	  423c86:       lea    -0x30(%rbp),%rax
    0.00 :	  423c8a:       mov    %rcx,%rsi
    0.00 :	  423c8d:       mov    %rax,%rdi
    0.00 :	  423c90:       callq  423aca <std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<int>*&, std::_Rb_tree_node<int>*&, void>(std::_Rb_tree_node<int>*&, std::_Rb_tree_node<int>*&)>
    0.00 :	  423c95:       mov    -0x30(%rbp),%rax
    0.00 :	  423c99:       mov    -0x28(%rbp),%rdx
    0.00 :	  423c9d:       jmp    423cd0 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x178>
         :	      return _Res(__j._M_node, 0);
    0.00 :	  423c9f:       movq   $0x0,-0x10(%rbp)
    0.00 :	  423ca7:       lea    -0x10(%rbp),%rdx
    0.00 :	  423cab:       lea    -0x70(%rbp),%rcx
    0.00 :	  423caf:       lea    -0x20(%rbp),%rax
    0.00 :	  423cb3:       mov    %rcx,%rsi
    0.00 :	  423cb6:       mov    %rax,%rdi
    0.00 :	  423cb9:       callq  423b1c <std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, void>(std::_Rb_tree_node_base*&, std::_Rb_tree_node_base* const&)>
    0.00 :	  423cbe:       mov    -0x20(%rbp),%rax
    0.00 :	  423cc2:       mov    -0x18(%rbp),%rdx
    0.00 :	  423cc6:       jmp    423cd0 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)+0x178>
    0.00 :	  423cc8:       mov    %rax,%rdi
    0.00 :	  423ccb:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  423cd0:       leaveq
    0.00 :	  423cd1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421c46 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const>:
         :	_ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE4findERKi():
         :
         :	  template<typename _Key, typename _Val, typename _KeyOfValue,
         :	           typename _Compare, typename _Alloc>
         :	    typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                      _Compare, _Alloc>::const_iterator
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  421c46:       push   %rbp
    0.00 :	  421c47:       mov    %rsp,%rbp
   20.00 :	  421c4a:       push   %rbx
    0.00 :	  421c4b:       sub    $0x38,%rsp
    0.00 :	  421c4f:       mov    %rdi,-0x38(%rbp)
    0.00 :	  421c53:       mov    %rsi,-0x40(%rbp)
         :	    find(const _Key& __k) const
         :	    {
         :	      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
    0.00 :	  421c57:       mov    -0x38(%rbp),%rax
   20.00 :	  421c5b:       mov    %rax,%rdi
    0.00 :	  421c5e:       callq  42415c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_end() const>
    0.00 :	  421c63:       mov    %rax,%rbx
    0.00 :	  421c66:       mov    -0x38(%rbp),%rax
    0.00 :	  421c6a:       mov    %rax,%rdi
    0.00 :	  421c6d:       callq  42414a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_begin() const>
    0.00 :	  421c72:       mov    %rax,%rsi
    0.00 :	  421c75:       mov    -0x40(%rbp),%rdx
    0.00 :	  421c79:       mov    -0x38(%rbp),%rax
    0.00 :	  421c7d:       mov    %rdx,%rcx
    0.00 :	  421c80:       mov    %rbx,%rdx
    0.00 :	  421c83:       mov    %rax,%rdi
    0.00 :	  421c86:       callq  42416e <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int> const*, int const&) const>
    0.00 :	  421c8b:       mov    %rax,-0x30(%rbp)
         :	      return (__j == end()
    0.00 :	  421c8f:       mov    -0x38(%rbp),%rax
    0.00 :	  421c93:       mov    %rax,%rdi
    0.00 :	  421c96:       callq  421c1c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::end() const>
    0.00 :	  421c9b:       mov    %rax,-0x20(%rbp)
         :	              || _M_impl._M_key_compare(__k,
         :	                                        _S_key(__j._M_node))) ? end() : __j;
   20.00 :	  421c9f:       mov    $0x1,%ebx
         :	      return (__j == end()
    0.00 :	  421ca4:       lea    -0x20(%rbp),%rdx
    0.00 :	  421ca8:       lea    -0x30(%rbp),%rax
    0.00 :	  421cac:       mov    %rdx,%rsi
    0.00 :	  421caf:       mov    %rax,%rdi
    0.00 :	  421cb2:       callq  421d0c <std::_Rb_tree_const_iterator<int>::operator==(std::_Rb_tree_const_iterator<int> const&) const>
         :	                                        _S_key(__j._M_node))) ? end() : __j;
    0.00 :	  421cb7:       test   %al,%al
    0.00 :	  421cb9:       jne    421ce1 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const+0x9b>
    0.00 :	  421cbb:       mov    -0x30(%rbp),%rax
    0.00 :	  421cbf:       mov    %rax,%rdi
    0.00 :	  421cc2:       callq  4241fb <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node_base const*)>
    0.00 :	  421cc7:       mov    %rax,%rdx
         :	              || _M_impl._M_key_compare(__k,
    0.00 :	  421cca:       mov    -0x38(%rbp),%rax
   20.00 :	  421cce:       mov    -0x40(%rbp),%rcx
    0.00 :	  421cd2:       mov    %rcx,%rsi
    0.00 :	  421cd5:       mov    %rax,%rdi
    0.00 :	  421cd8:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
         :	                                        _S_key(__j._M_node))) ? end() : __j;
    0.00 :	  421cdd:       test   %al,%al
    0.00 :	  421cdf:       je     421cef <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const+0xa9>
    0.00 :	  421ce1:       mov    -0x38(%rbp),%rax
    0.00 :	  421ce5:       mov    %rax,%rdi
    0.00 :	  421ce8:       callq  421c1c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::end() const>
    0.00 :	  421ced:       jmp    421cf3 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const+0xad>
    0.00 :	  421cef:       mov    -0x30(%rbp),%rax
         :	      return (__j == end()
    0.00 :	  421cf3:       test   %bl,%bl
    0.00 :	  421cf5:       jmp    421d04 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const+0xbe>
    0.00 :	  421cf7:       test   %bl,%bl
         :	                                        _S_key(__j._M_node))) ? end() : __j;
    0.00 :	  421cf9:       nop
    0.00 :	  421cfa:       jmp    421cfc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const+0xb6>
    0.00 :	  421cfc:       mov    %rax,%rdi
    0.00 :	  421cff:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  421d04:       add    $0x38,%rsp
    0.00 :	  421d08:       pop    %rbx
    0.00 :	  421d09:       pop    %rbp
   20.00 :	  421d0a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041ef92 <SparseMatrix::SparseMatrix(int, int, int)>:
         :	_ZN12SparseMatrixC2Eiii():
         :	        new (this)SparseMatrix(edges, m);//placement new
         :	        // std::cout << "in\n" << this->colnum << ' ' << this->elems;
         :	    }
         :
         :	    //random walk https://stackoverflow.com/a/14618505
         :	    SparseMatrix(int n, int m, int eqaul_weights=1)//randomly generate a n nodes m edges connected sparse graph
    0.00 :	  41ef92:       push   %rbp
    0.00 :	  41ef93:       mov    %rsp,%rbp
    0.00 :	  41ef96:       push   %r13
    0.00 :	  41ef98:       push   %r12
    0.00 :	  41ef9a:       push   %rbx
    0.00 :	  41ef9b:       sub    $0x1a8,%rsp
    0.00 :	  41efa2:       mov    %rdi,-0x1a8(%rbp)
    0.00 :	  41efa9:       mov    %esi,-0x1ac(%rbp)
    0.00 :	  41efaf:       mov    %edx,-0x1b0(%rbp)
    0.00 :	  41efb5:       mov    %ecx,-0x1b4(%rbp)
         :	    {
    0.00 :	  41efbb:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41efc2:       mov    %rax,%rdi
    0.00 :	  41efc5:       callq  41fa12 <std::vector<double, std::allocator<double> >::vector()>
    0.00 :	  41efca:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41efd1:       add    $0x18,%rax
    0.00 :	  41efd5:       mov    %rax,%rdi
    0.00 :	  41efd8:       callq  41fa70 <std::vector<int, std::allocator<int> >::vector()>
    0.00 :	  41efdd:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41efe4:       add    $0x30,%rax
    0.00 :	  41efe8:       mov    %rax,%rdi
    0.00 :	  41efeb:       callq  41fa70 <std::vector<int, std::allocator<int> >::vector()>
    0.00 :	  41eff0:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41eff7:       add    $0x48,%rax
    0.00 :	  41effb:       mov    %rax,%rdi
    0.00 :	  41effe:       callq  41fa12 <std::vector<double, std::allocator<double> >::vector()>
         :	        double w = 1;
    0.00 :	  41f003:       movabs $0x3ff0000000000000,%rax
    0.00 :	  41f00d:       mov    %rax,-0x28(%rbp)
         :	        if (m < n)
    0.00 :	  41f011:       mov    -0x1b0(%rbp),%eax
    0.00 :	  41f017:       cmp    -0x1ac(%rbp),%eax
    0.00 :	  41f01d:       jge    41f02e <SparseMatrix::SparseMatrix(int, int, int)+0x9c>
         :	            m = n-1;
    0.00 :	  41f01f:       mov    -0x1ac(%rbp),%eax
    0.00 :	  41f025:       sub    $0x1,%eax
    0.00 :	  41f028:       mov    %eax,-0x1b0(%rbp)
         :	        std::set<int> S, T, nodes;
    0.00 :	  41f02e:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f035:       mov    %rax,%rdi
    0.00 :	  41f038:       callq  41ff7e <std::set<int, std::less<int>, std::allocator<int> >::set()>
    0.00 :	  41f03d:       lea    -0x170(%rbp),%rax
    0.00 :	  41f044:       mov    %rax,%rdi
    0.00 :	  41f047:       callq  41ff7e <std::set<int, std::less<int>, std::allocator<int> >::set()>
    0.00 :	  41f04c:       lea    -0x140(%rbp),%rax
    0.00 :	  41f053:       mov    %rax,%rdi
    0.00 :	  41f056:       callq  41ff7e <std::set<int, std::less<int>, std::allocator<int> >::set()>
         :	        for (int i = 0; i < n; i++)
    0.00 :	  41f05b:       movl   $0x0,-0xd4(%rbp)
    0.00 :	  41f065:       jmp    41f0a9 <SparseMatrix::SparseMatrix(int, int, int)+0x117>
         :	            S.insert(i);
    0.00 :	  41f067:       lea    -0xd4(%rbp),%rdx
    0.00 :	  41f06e:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f075:       mov    %rdx,%rsi
    0.00 :	  41f078:       mov    %rax,%rdi
    0.00 :	  41f07b:       callq  420050 <std::set<int, std::less<int>, std::allocator<int> >::insert(int const&)>
    0.00 :	  41f080:       mov    %edx,%ecx
    0.00 :	  41f082:       mov    %ecx,%ecx
    0.00 :	  41f084:       mov    %rdx,%rdi
    0.00 :	  41f087:       movabs $0xffffffff00000000,%rsi
    0.00 :	  41f091:       and    %rdi,%rsi
    0.00 :	  41f094:       or     %rsi,%rcx
    0.00 :	  41f097:       mov    %rcx,%rdx
         :	        for (int i = 0; i < n; i++)
    0.00 :	  41f09a:       mov    -0xd4(%rbp),%eax
    0.00 :	  41f0a0:       add    $0x1,%eax
    0.00 :	  41f0a3:       mov    %eax,-0xd4(%rbp)
    0.00 :	  41f0a9:       mov    -0xd4(%rbp),%eax
    0.00 :	  41f0af:       cmp    -0x1ac(%rbp),%eax
    0.00 :	  41f0b5:       jl     41f067 <SparseMatrix::SparseMatrix(int, int, int)+0xd5>
         :	        int current_node = rand() % n;
    0.00 :	  41f0b7:       callq  41dd50 <rand@plt>
    0.00 :	  41f0bc:       cltd
    0.00 :	  41f0bd:       idivl  -0x1ac(%rbp)
    0.00 :	  41f0c3:       mov    %edx,%eax
    0.00 :	  41f0c5:       mov    %eax,-0xb4(%rbp)
         :	        S.erase(current_node);
    0.00 :	  41f0cb:       lea    -0xb4(%rbp),%rdx
    0.00 :	  41f0d2:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f0d9:       mov    %rdx,%rsi
    0.00 :	  41f0dc:       mov    %rax,%rdi
    0.00 :	  41f0df:       callq  4200be <std::set<int, std::less<int>, std::allocator<int> >::erase(int const&)>
         :	        T.insert(current_node);
    0.00 :	  41f0e4:       lea    -0xb4(%rbp),%rdx
    0.00 :	  41f0eb:       lea    -0x170(%rbp),%rax
    0.00 :	  41f0f2:       mov    %rdx,%rsi
    0.00 :	  41f0f5:       mov    %rax,%rdi
    0.00 :	  41f0f8:       callq  420050 <std::set<int, std::less<int>, std::allocator<int> >::insert(int const&)>
    0.00 :	  41f0fd:       mov    %edx,%ecx
    0.00 :	  41f0ff:       mov    %ecx,%ecx
    0.00 :	  41f101:       mov    %rdx,%rdi
    0.00 :	  41f104:       movabs $0xffffffff00000000,%rsi
    0.00 :	  41f10e:       and    %rdi,%rsi
    0.00 :	  41f111:       or     %rsi,%rcx
    0.00 :	  41f114:       mov    %rcx,%rdx
         :	        std::set<Edge> edges;
    0.00 :	  41f117:       lea    -0x110(%rbp),%rax
    0.00 :	  41f11e:       mov    %rax,%rdi
    0.00 :	  41f121:       callq  4200e4 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::set()>
         :	        //create random connected MST
         :	        while (!S.empty())
    0.00 :	  41f126:       jmpq   41f2a3 <SparseMatrix::SparseMatrix(int, int, int)+0x311>
         :	        {
         :	            int new_node = rand() % n;
    0.00 :	  41f12b:       callq  41dd50 <rand@plt>
    0.00 :	  41f130:       cltd
    0.00 :	  41f131:       idivl  -0x1ac(%rbp)
  100.00 :	  41f137:       mov    %edx,%eax
    0.00 :	  41f139:       mov    %eax,-0xd8(%rbp)
         :	            if (S.count(new_node))
    0.00 :	  41f13f:       lea    -0xd8(%rbp),%rdx
    0.00 :	  41f146:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f14d:       mov    %rdx,%rsi
    0.00 :	  41f150:       mov    %rax,%rdi
    0.00 :	  41f153:       callq  42016a <std::set<int, std::less<int>, std::allocator<int> >::count(int const&) const>
    0.00 :	  41f158:       test   %rax,%rax
    0.00 :	  41f15b:       setne  %al
    0.00 :	  41f15e:       test   %al,%al
    0.00 :	  41f160:       je     41f297 <SparseMatrix::SparseMatrix(int, int, int)+0x305>
         :	            {
         :	                if (!eqaul_weights)
    0.00 :	  41f166:       cmpl   $0x0,-0x1b4(%rbp)
    0.00 :	  41f16d:       jne    41f189 <SparseMatrix::SparseMatrix(int, int, int)+0x1f7>
         :	                    w = rand() / double(RAND_MAX);
    0.00 :	  41f16f:       callq  41dd50 <rand@plt>
    0.00 :	  41f174:       vcvtsi2sd %eax,%xmm0,%xmm0
    0.00 :	  41f178:       vmovsd 0x14930(%rip),%xmm1        # 433ab0 <__gthread_active_p()::__gthread_active_ptr+0x10>
    0.00 :	  41f180:       vdivsd %xmm1,%xmm0,%xmm0
    0.00 :	  41f184:       vmovsd %xmm0,-0x28(%rbp)
         :	                edges.insert(Edge(current_node, new_node, w));
    0.00 :	  41f189:       mov    -0xd8(%rbp),%edx
    0.00 :	  41f18f:       mov    -0xb4(%rbp),%esi
    0.00 :	  41f195:       mov    -0x28(%rbp),%rax
    0.00 :	  41f199:       lea    -0xb0(%rbp),%rcx
    0.00 :	  41f1a0:       mov    %rax,-0x1c0(%rbp)
    0.00 :	  41f1a7:       vmovsd -0x1c0(%rbp),%xmm0
    0.00 :	  41f1af:       mov    %rcx,%rdi
    0.00 :	  41f1b2:       callq  41ebee <Edge::Edge(int, int, double)>
    0.00 :	  41f1b7:       lea    -0xb0(%rbp),%rdx
    0.00 :	  41f1be:       lea    -0x110(%rbp),%rax
    0.00 :	  41f1c5:       mov    %rdx,%rsi
    0.00 :	  41f1c8:       mov    %rax,%rdi
    0.00 :	  41f1cb:       callq  420228 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::insert(Edge&&)>
    0.00 :	  41f1d0:       mov    %edx,%ecx
    0.00 :	  41f1d2:       mov    %ecx,%ecx
    0.00 :	  41f1d4:       mov    %rdx,%rdi
    0.00 :	  41f1d7:       movabs $0xffffffff00000000,%rsi
    0.00 :	  41f1e1:       and    %rdi,%rsi
    0.00 :	  41f1e4:       or     %rsi,%rcx
    0.00 :	  41f1e7:       mov    %rcx,%rdx
         :	                edges.insert(Edge(new_node, current_node, w));
    0.00 :	  41f1ea:       mov    -0xb4(%rbp),%edx
    0.00 :	  41f1f0:       mov    -0xd8(%rbp),%esi
    0.00 :	  41f1f6:       mov    -0x28(%rbp),%rax
    0.00 :	  41f1fa:       lea    -0xa0(%rbp),%rcx
    0.00 :	  41f201:       mov    %rax,-0x1c0(%rbp)
    0.00 :	  41f208:       vmovsd -0x1c0(%rbp),%xmm0
    0.00 :	  41f210:       mov    %rcx,%rdi
    0.00 :	  41f213:       callq  41ebee <Edge::Edge(int, int, double)>
    0.00 :	  41f218:       lea    -0xa0(%rbp),%rdx
    0.00 :	  41f21f:       lea    -0x110(%rbp),%rax
    0.00 :	  41f226:       mov    %rdx,%rsi
    0.00 :	  41f229:       mov    %rax,%rdi
    0.00 :	  41f22c:       callq  420228 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::insert(Edge&&)>
    0.00 :	  41f231:       mov    %edx,%ecx
    0.00 :	  41f233:       mov    %ecx,%ecx
    0.00 :	  41f235:       mov    %rdx,%rdi
    0.00 :	  41f238:       movabs $0xffffffff00000000,%rsi
    0.00 :	  41f242:       and    %rdi,%rsi
    0.00 :	  41f245:       or     %rsi,%rcx
    0.00 :	  41f248:       mov    %rcx,%rdx
         :	                S.erase(new_node);
    0.00 :	  41f24b:       lea    -0xd8(%rbp),%rdx
    0.00 :	  41f252:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f259:       mov    %rdx,%rsi
    0.00 :	  41f25c:       mov    %rax,%rdi
    0.00 :	  41f25f:       callq  4200be <std::set<int, std::less<int>, std::allocator<int> >::erase(int const&)>
         :	                T.insert(new_node);
    0.00 :	  41f264:       lea    -0xd8(%rbp),%rdx
    0.00 :	  41f26b:       lea    -0x170(%rbp),%rax
    0.00 :	  41f272:       mov    %rdx,%rsi
    0.00 :	  41f275:       mov    %rax,%rdi
    0.00 :	  41f278:       callq  420050 <std::set<int, std::less<int>, std::allocator<int> >::insert(int const&)>
    0.00 :	  41f27d:       mov    %edx,%ecx
    0.00 :	  41f27f:       mov    %ecx,%ecx
    0.00 :	  41f281:       mov    %rdx,%rdi
    0.00 :	  41f284:       movabs $0xffffffff00000000,%rsi
    0.00 :	  41f28e:       and    %rdi,%rsi
    0.00 :	  41f291:       or     %rsi,%rcx
    0.00 :	  41f294:       mov    %rcx,%rdx
         :	            }
         :	            current_node = new_node;
    0.00 :	  41f297:       mov    -0xd8(%rbp),%eax
    0.00 :	  41f29d:       mov    %eax,-0xb4(%rbp)
         :	        while (!S.empty())
    0.00 :	  41f2a3:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f2aa:       mov    %rax,%rdi
    0.00 :	  41f2ad:       callq  420150 <std::set<int, std::less<int>, std::allocator<int> >::empty() const>
    0.00 :	  41f2b2:       xor    $0x1,%eax
    0.00 :	  41f2b5:       test   %al,%al
    0.00 :	  41f2b7:       jne    41f12b <SparseMatrix::SparseMatrix(int, int, int)+0x199>
         :	        }
         :	        // std::cout << edges.size() << std::endl;
         :	        m -= n - 1;
    0.00 :	  41f2bd:       mov    $0x1,%eax
    0.00 :	  41f2c2:       sub    -0x1ac(%rbp),%eax
    0.00 :	  41f2c8:       add    %eax,-0x1b0(%rbp)
         :	        //randomly add rest edges
         :	        for (int i = 0; i < m; i++)
    0.00 :	  41f2ce:       movl   $0x0,-0x2c(%rbp)
    0.00 :	  41f2d5:       jmpq   41f472 <SparseMatrix::SparseMatrix(int, int, int)+0x4e0>
         :	        {
         :	            int a = rand() % n;
    0.00 :	  41f2da:       callq  41dd50 <rand@plt>
    0.00 :	  41f2df:       cltd
    0.00 :	  41f2e0:       idivl  -0x1ac(%rbp)
    0.00 :	  41f2e6:       mov    %edx,-0x30(%rbp)
         :	            int b = rand() % n;
    0.00 :	  41f2e9:       callq  41dd50 <rand@plt>
    0.00 :	  41f2ee:       cltd
    0.00 :	  41f2ef:       idivl  -0x1ac(%rbp)
    0.00 :	  41f2f5:       mov    %edx,-0x34(%rbp)
         :	            while (true)
         :	            {
         :	                if (a != b)
    0.00 :	  41f2f8:       mov    -0x30(%rbp),%eax
    0.00 :	  41f2fb:       cmp    -0x34(%rbp),%eax
    0.00 :	  41f2fe:       je     41f387 <SparseMatrix::SparseMatrix(int, int, int)+0x3f5>
         :	                {
         :	                    auto iter = edges.lower_bound(Edge(a, b, 0));
    0.00 :	  41f304:       mov    -0x34(%rbp),%edx
    0.00 :	  41f307:       mov    -0x30(%rbp),%ecx
    0.00 :	  41f30a:       lea    -0x90(%rbp),%rax
    0.00 :	  41f311:       vxorpd %xmm0,%xmm0,%xmm0
    0.00 :	  41f315:       mov    %ecx,%esi
    0.00 :	  41f317:       mov    %rax,%rdi
    0.00 :	  41f31a:       callq  41ebee <Edge::Edge(int, int, double)>
    0.00 :	  41f31f:       lea    -0x90(%rbp),%rdx
    0.00 :	  41f326:       lea    -0x110(%rbp),%rax
    0.00 :	  41f32d:       mov    %rdx,%rsi
    0.00 :	  41f330:       mov    %rax,%rdi
    0.00 :	  41f333:       callq  4202a0 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::lower_bound(Edge const&)>
    0.00 :	  41f338:       mov    %rax,-0xe0(%rbp)
         :	                    if (iter->r != a || iter->c != b)
    0.00 :	  41f33f:       lea    -0xe0(%rbp),%rax
    0.00 :	  41f346:       mov    %rax,%rdi
    0.00 :	  41f349:       callq  4202e0 <std::_Rb_tree_const_iterator<Edge>::operator->() const>
    0.00 :	  41f34e:       mov    (%rax),%eax
    0.00 :	  41f350:       cmp    -0x30(%rbp),%eax
    0.00 :	  41f353:       jne    41f36c <SparseMatrix::SparseMatrix(int, int, int)+0x3da>
    0.00 :	  41f355:       lea    -0xe0(%rbp),%rax
    0.00 :	  41f35c:       mov    %rax,%rdi
    0.00 :	  41f35f:       callq  4202e0 <std::_Rb_tree_const_iterator<Edge>::operator->() const>
    0.00 :	  41f364:       mov    0x4(%rax),%eax
    0.00 :	  41f367:       cmp    -0x34(%rbp),%eax
    0.00 :	  41f36a:       je     41f373 <SparseMatrix::SparseMatrix(int, int, int)+0x3e1>
    0.00 :	  41f36c:       mov    $0x1,%eax
    0.00 :	  41f371:       jmp    41f378 <SparseMatrix::SparseMatrix(int, int, int)+0x3e6>
    0.00 :	  41f373:       mov    $0x0,%eax
    0.00 :	  41f378:       test   %al,%al
    0.00 :	  41f37a:       je     41f387 <SparseMatrix::SparseMatrix(int, int, int)+0x3f5>
         :	                        break;
         :	                }
         :	                a = rand() % n;
         :	                b = rand() % n;
         :	            }
         :	            if (!eqaul_weights)
    0.00 :	  41f37c:       cmpl   $0x0,-0x1b4(%rbp)
    0.00 :	  41f383:       je     41f3aa <SparseMatrix::SparseMatrix(int, int, int)+0x418>
    0.00 :	  41f385:       jmp    41f3c4 <SparseMatrix::SparseMatrix(int, int, int)+0x432>
         :	                a = rand() % n;
    0.00 :	  41f387:       callq  41dd50 <rand@plt>
    0.00 :	  41f38c:       cltd
    0.00 :	  41f38d:       idivl  -0x1ac(%rbp)
    0.00 :	  41f393:       mov    %edx,-0x30(%rbp)
         :	                b = rand() % n;
    0.00 :	  41f396:       callq  41dd50 <rand@plt>
    0.00 :	  41f39b:       cltd
    0.00 :	  41f39c:       idivl  -0x1ac(%rbp)
    0.00 :	  41f3a2:       mov    %edx,-0x34(%rbp)
         :	            // auto iter = edges.lower_bound(Edge(a, b, 0));
         :	            // std::cout << iter->r << " " << iter->c << std::endl;
         :	            // std::cout << "new edge:" << a << " " << b << " "  << w << " "  <<  std::endl;
         :	            edges.insert(Edge(a, b, w));
         :	            edges.insert(Edge(b, a, w));
         :	        }
    0.00 :	  41f3a5:       jmpq   41f2f8 <SparseMatrix::SparseMatrix(int, int, int)+0x366>
         :	                w = rand() / double(RAND_MAX);
    0.00 :	  41f3aa:       callq  41dd50 <rand@plt>
    0.00 :	  41f3af:       vcvtsi2sd %eax,%xmm0,%xmm0
    0.00 :	  41f3b3:       vmovsd 0x146f5(%rip),%xmm1        # 433ab0 <__gthread_active_p()::__gthread_active_ptr+0x10>
    0.00 :	  41f3bb:       vdivsd %xmm1,%xmm0,%xmm0
    0.00 :	  41f3bf:       vmovsd %xmm0,-0x28(%rbp)
         :	            edges.insert(Edge(a, b, w));
    0.00 :	  41f3c4:       mov    -0x28(%rbp),%rax
    0.00 :	  41f3c8:       mov    -0x34(%rbp),%edx
    0.00 :	  41f3cb:       mov    -0x30(%rbp),%esi
    0.00 :	  41f3ce:       lea    -0x80(%rbp),%rcx
    0.00 :	  41f3d2:       mov    %rax,-0x1c0(%rbp)
    0.00 :	  41f3d9:       vmovsd -0x1c0(%rbp),%xmm0
    0.00 :	  41f3e1:       mov    %rcx,%rdi
    0.00 :	  41f3e4:       callq  41ebee <Edge::Edge(int, int, double)>
    0.00 :	  41f3e9:       lea    -0x80(%rbp),%rdx
    0.00 :	  41f3ed:       lea    -0x110(%rbp),%rax
    0.00 :	  41f3f4:       mov    %rdx,%rsi
    0.00 :	  41f3f7:       mov    %rax,%rdi
    0.00 :	  41f3fa:       callq  420228 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::insert(Edge&&)>
    0.00 :	  41f3ff:       mov    %edx,%ecx
    0.00 :	  41f401:       mov    %ecx,%ecx
    0.00 :	  41f403:       mov    %rdx,%rdi
    0.00 :	  41f406:       movabs $0xffffffff00000000,%rsi
    0.00 :	  41f410:       and    %rdi,%rsi
    0.00 :	  41f413:       or     %rsi,%rcx
    0.00 :	  41f416:       mov    %rcx,%rdx
         :	            edges.insert(Edge(b, a, w));
    0.00 :	  41f419:       mov    -0x28(%rbp),%rax
    0.00 :	  41f41d:       mov    -0x30(%rbp),%edx
    0.00 :	  41f420:       mov    -0x34(%rbp),%esi
    0.00 :	  41f423:       lea    -0x70(%rbp),%rcx
    0.00 :	  41f427:       mov    %rax,-0x1c0(%rbp)
    0.00 :	  41f42e:       vmovsd -0x1c0(%rbp),%xmm0
    0.00 :	  41f436:       mov    %rcx,%rdi
    0.00 :	  41f439:       callq  41ebee <Edge::Edge(int, int, double)>
    0.00 :	  41f43e:       lea    -0x70(%rbp),%rdx
    0.00 :	  41f442:       lea    -0x110(%rbp),%rax
    0.00 :	  41f449:       mov    %rdx,%rsi
    0.00 :	  41f44c:       mov    %rax,%rdi
    0.00 :	  41f44f:       callq  420228 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::insert(Edge&&)>
    0.00 :	  41f454:       mov    %edx,%ecx
    0.00 :	  41f456:       mov    %ecx,%ecx
    0.00 :	  41f458:       mov    %rdx,%rdi
    0.00 :	  41f45b:       movabs $0xffffffff00000000,%rsi
    0.00 :	  41f465:       and    %rdi,%rsi
    0.00 :	  41f468:       or     %rsi,%rcx
    0.00 :	  41f46b:       mov    %rcx,%rdx
         :	        for (int i = 0; i < m; i++)
    0.00 :	  41f46e:       addl   $0x1,-0x2c(%rbp)
    0.00 :	  41f472:       mov    -0x2c(%rbp),%eax
    0.00 :	  41f475:       cmp    -0x1b0(%rbp),%eax
    0.00 :	  41f47b:       jl     41f2da <SparseMatrix::SparseMatrix(int, int, int)+0x348>
         :	        // std::cout << edges.size() << std::endl;
         :	        std::vector<Edge> edges_list(edges.begin(), edges.end());
    0.00 :	  41f481:       lea    -0x51(%rbp),%rax
    0.00 :	  41f485:       mov    %rax,%rdi
    0.00 :	  41f488:       callq  420336 <std::allocator<Edge>::allocator()>
    0.00 :	  41f48d:       lea    -0x110(%rbp),%rax
    0.00 :	  41f494:       mov    %rax,%rdi
    0.00 :	  41f497:       callq  42031c <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::end() const>
    0.00 :	  41f49c:       mov    %rax,%rbx
    0.00 :	  41f49f:       lea    -0x110(%rbp),%rax
    0.00 :	  41f4a6:       mov    %rax,%rdi
    0.00 :	  41f4a9:       callq  420302 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::begin() const>
    0.00 :	  41f4ae:       mov    %rax,%rsi
    0.00 :	  41f4b1:       lea    -0x51(%rbp),%rdx
    0.00 :	  41f4b5:       lea    -0xd0(%rbp),%rax
    0.00 :	  41f4bc:       mov    %rdx,%rcx
    0.00 :	  41f4bf:       mov    %rbx,%rdx
    0.00 :	  41f4c2:       mov    %rax,%rdi
    0.00 :	  41f4c5:       callq  42036a <std::vector<Edge, std::allocator<Edge> >::vector<std::_Rb_tree_const_iterator<Edge>, void>(std::_Rb_tree_const_iterator<Edge>, std::_Rb_tree_const_iterator<Edge>, std::allocator<Edge> const&)>
    0.00 :	  41f4ca:       lea    -0x51(%rbp),%rax
    0.00 :	  41f4ce:       mov    %rax,%rdi
    0.00 :	  41f4d1:       callq  420350 <std::allocator<Edge>::~allocator()>
         :	        new (this)SparseMatrix(edges_list, n);//placement new
    0.00 :	  41f4d6:       lea    -0xd0(%rbp),%rdx
    0.00 :	  41f4dd:       lea    -0x50(%rbp),%rax
    0.00 :	  41f4e1:       mov    %rdx,%rsi
    0.00 :	  41f4e4:       mov    %rax,%rdi
    0.00 :	  41f4e7:       callq  41fe92 <std::vector<Edge, std::allocator<Edge> >::vector(std::vector<Edge, std::allocator<Edge> > const&)>
    0.00 :	  41f4ec:       lea    -0x50(%rbp),%r13
    0.00 :	  41f4f0:       mov    -0x1a8(%rbp),%r12
    0.00 :	  41f4f7:       mov    %r12,%rsi
    0.00 :	  41f4fa:       mov    $0x70,%edi
    0.00 :	  41f4ff:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  41f504:       mov    %rax,%rbx
    0.00 :	  41f507:       test   %rbx,%rbx
    0.00 :	  41f50a:       je     41f522 <SparseMatrix::SparseMatrix(int, int, int)+0x590>
    0.00 :	  41f50c:       mov    -0x1ac(%rbp),%eax
    0.00 :	  41f512:       cltq
    0.00 :	  41f514:       mov    %rax,%rdx
    0.00 :	  41f517:       mov    %r13,%rsi
    0.00 :	  41f51a:       mov    %rbx,%rdi
    0.00 :	  41f51d:       callq  41ec7c <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)>
    0.00 :	  41f522:       lea    -0x50(%rbp),%rax
    0.00 :	  41f526:       mov    %rax,%rdi
    0.00 :	  41f529:       callq  41fe1a <std::vector<Edge, std::allocator<Edge> >::~vector()>
         :	        std::vector<Edge> edges_list(edges.begin(), edges.end());
    0.00 :	  41f52e:       lea    -0xd0(%rbp),%rax
    0.00 :	  41f535:       mov    %rax,%rdi
    0.00 :	  41f538:       callq  41fe1a <std::vector<Edge, std::allocator<Edge> >::~vector()>
         :	        std::set<Edge> edges;
    0.00 :	  41f53d:       lea    -0x110(%rbp),%rax
    0.00 :	  41f544:       mov    %rax,%rdi
    0.00 :	  41f547:       callq  41ef78 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::~set()>
         :	        std::set<int> S, T, nodes;
    0.00 :	  41f54c:       lea    -0x140(%rbp),%rax
    0.00 :	  41f553:       mov    %rax,%rdi
    0.00 :	  41f556:       callq  41ef5e <std::set<int, std::less<int>, std::allocator<int> >::~set()>
    0.00 :	  41f55b:       lea    -0x170(%rbp),%rax
    0.00 :	  41f562:       mov    %rax,%rdi
    0.00 :	  41f565:       callq  41ef5e <std::set<int, std::less<int>, std::allocator<int> >::~set()>
         :	        new (this)SparseMatrix(edges_list, n);//placement new
    0.00 :	  41f56a:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f571:       mov    %rax,%rdi
    0.00 :	  41f574:       callq  41ef5e <std::set<int, std::less<int>, std::allocator<int> >::~set()>
    0.00 :	  41f579:       jmpq   41f692 <SparseMatrix::SparseMatrix(int, int, int)+0x700>
    0.00 :	  41f57e:       mov    %rax,%rbx
    0.00 :	  41f581:       jmp    41f5f1 <SparseMatrix::SparseMatrix(int, int, int)+0x65f>
    0.00 :	  41f583:       jmp    41f587 <SparseMatrix::SparseMatrix(int, int, int)+0x5f5>
    0.00 :	  41f585:       jmp    41f587 <SparseMatrix::SparseMatrix(int, int, int)+0x5f5>
    0.00 :	  41f587:       mov    %rax,%rbx
    0.00 :	  41f58a:       jmp    41f5dd <SparseMatrix::SparseMatrix(int, int, int)+0x64b>
    0.00 :	  41f58c:       mov    %rax,%rbx
    0.00 :	  41f58f:       jmp    41f5dd <SparseMatrix::SparseMatrix(int, int, int)+0x64b>
    0.00 :	  41f591:       mov    %rax,%rbx
    0.00 :	  41f594:       jmp    41f5dd <SparseMatrix::SparseMatrix(int, int, int)+0x64b>
    0.00 :	  41f596:       mov    %rax,%rbx
    0.00 :	  41f599:       jmp    41f5dd <SparseMatrix::SparseMatrix(int, int, int)+0x64b>
    0.00 :	  41f59b:       mov    %rax,%rbx
    0.00 :	  41f59e:       lea    -0x51(%rbp),%rax
    0.00 :	  41f5a2:       mov    %rax,%rdi
    0.00 :	  41f5a5:       callq  420350 <std::allocator<Edge>::~allocator()>
    0.00 :	  41f5aa:       jmp    41f5dd <SparseMatrix::SparseMatrix(int, int, int)+0x64b>
    0.00 :	  41f5ac:       mov    %rax,%r13
    0.00 :	  41f5af:       mov    %r12,%rsi
    0.00 :	  41f5b2:       mov    %rbx,%rdi
    0.00 :	  41f5b5:       callq  41eb3c <operator delete(void*, void*)>
    0.00 :	  41f5ba:       mov    %r13,%rbx
    0.00 :	  41f5bd:       lea    -0x50(%rbp),%rax
    0.00 :	  41f5c1:       mov    %rax,%rdi
    0.00 :	  41f5c4:       callq  41fe1a <std::vector<Edge, std::allocator<Edge> >::~vector()>
    0.00 :	  41f5c9:       jmp    41f5ce <SparseMatrix::SparseMatrix(int, int, int)+0x63c>
    0.00 :	  41f5cb:       mov    %rax,%rbx
         :	        std::vector<Edge> edges_list(edges.begin(), edges.end());
    0.00 :	  41f5ce:       lea    -0xd0(%rbp),%rax
    0.00 :	  41f5d5:       mov    %rax,%rdi
    0.00 :	  41f5d8:       callq  41fe1a <std::vector<Edge, std::allocator<Edge> >::~vector()>
         :	        std::set<Edge> edges;
    0.00 :	  41f5dd:       lea    -0x110(%rbp),%rax
    0.00 :	  41f5e4:       mov    %rax,%rdi
    0.00 :	  41f5e7:       callq  41ef78 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::~set()>
    0.00 :	  41f5ec:       jmp    41f5f1 <SparseMatrix::SparseMatrix(int, int, int)+0x65f>
    0.00 :	  41f5ee:       mov    %rax,%rbx
         :	        std::set<int> S, T, nodes;
    0.00 :	  41f5f1:       lea    -0x140(%rbp),%rax
    0.00 :	  41f5f8:       mov    %rax,%rdi
    0.00 :	  41f5fb:       callq  41ef5e <std::set<int, std::less<int>, std::allocator<int> >::~set()>
    0.00 :	  41f600:       jmp    41f605 <SparseMatrix::SparseMatrix(int, int, int)+0x673>
    0.00 :	  41f602:       mov    %rax,%rbx
    0.00 :	  41f605:       lea    -0x170(%rbp),%rax
    0.00 :	  41f60c:       mov    %rax,%rdi
    0.00 :	  41f60f:       callq  41ef5e <std::set<int, std::less<int>, std::allocator<int> >::~set()>
    0.00 :	  41f614:       jmp    41f619 <SparseMatrix::SparseMatrix(int, int, int)+0x687>
    0.00 :	  41f616:       mov    %rax,%rbx
         :	        new (this)SparseMatrix(edges_list, n);//placement new
    0.00 :	  41f619:       lea    -0x1a0(%rbp),%rax
    0.00 :	  41f620:       mov    %rax,%rdi
    0.00 :	  41f623:       callq  41ef5e <std::set<int, std::less<int>, std::allocator<int> >::~set()>
    0.00 :	  41f628:       mov    %rbx,%rax
    0.00 :	  41f62b:       jmp    41f62d <SparseMatrix::SparseMatrix(int, int, int)+0x69b>
    0.00 :	  41f62d:       mov    %rax,%rbx
         :	    {
    0.00 :	  41f630:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41f637:       add    $0x48,%rax
    0.00 :	  41f63b:       mov    %rax,%rdi
    0.00 :	  41f63e:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  41f643:       jmp    41f648 <SparseMatrix::SparseMatrix(int, int, int)+0x6b6>
    0.00 :	  41f645:       mov    %rax,%rbx
    0.00 :	  41f648:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41f64f:       add    $0x30,%rax
    0.00 :	  41f653:       mov    %rax,%rdi
    0.00 :	  41f656:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41f65b:       jmp    41f660 <SparseMatrix::SparseMatrix(int, int, int)+0x6ce>
    0.00 :	  41f65d:       mov    %rax,%rbx
    0.00 :	  41f660:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41f667:       add    $0x18,%rax
    0.00 :	  41f66b:       mov    %rax,%rdi
    0.00 :	  41f66e:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41f673:       jmp    41f678 <SparseMatrix::SparseMatrix(int, int, int)+0x6e6>
    0.00 :	  41f675:       mov    %rax,%rbx
    0.00 :	  41f678:       mov    -0x1a8(%rbp),%rax
    0.00 :	  41f67f:       mov    %rax,%rdi
    0.00 :	  41f682:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  41f687:       mov    %rbx,%rax
    0.00 :	  41f68a:       mov    %rax,%rdi
    0.00 :	  41f68d:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  41f692:       add    $0x1a8,%rsp
    0.00 :	  41f699:       pop    %rbx
    0.00 :	  41f69a:       pop    %r12
    0.00 :	  41f69c:       pop    %r13
    0.00 :	  41f69e:       pop    %rbp
    0.00 :	  41f69f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423a58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base*)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base():
         :	      static _Const_Link_type
         :	      _S_left(_Const_Base_ptr __x)
         :	      { return static_cast<_Const_Link_type>(__x->_M_left); }
         :
         :	      static _Link_type
         :	      _S_right(_Base_ptr __x)
   25.00 :	  423a58:       push   %rbp
    0.00 :	  423a59:       mov    %rsp,%rbp
    0.00 :	  423a5c:       mov    %rdi,-0x8(%rbp)
         :	      { return static_cast<_Link_type>(__x->_M_right); }
   25.00 :	  423a60:       mov    -0x8(%rbp),%rax
   25.00 :	  423a64:       mov    0x18(%rax),%rax
   25.00 :	  423a68:       pop    %rbp
    0.00 :	  423a69:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423e4c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11equal_rangeERKi():
         :	           typename _Compare, typename _Alloc>
         :	    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::iterator,
         :	         typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::iterator>
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  423e4c:       push   %rbp
    0.00 :	  423e4d:       mov    %rsp,%rbp
    0.00 :	  423e50:       sub    $0x90,%rsp
    0.00 :	  423e57:       mov    %rdi,-0x88(%rbp)
    0.00 :	  423e5e:       mov    %rsi,-0x90(%rbp)
         :	    equal_range(const _Key& __k)
         :	    {
         :	      _Link_type __x = _M_begin();
    0.00 :	  423e65:       mov    -0x88(%rbp),%rax
    0.00 :	  423e6c:       mov    %rax,%rdi
    0.00 :	  423e6f:       callq  42191e <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_begin()>
    0.00 :	  423e74:       mov    %rax,-0x8(%rbp)
         :	      _Link_type __y = _M_end();
    0.00 :	  423e78:       mov    -0x88(%rbp),%rax
    0.00 :	  423e7f:       mov    %rax,%rdi
    0.00 :	  423e82:       callq  425fea <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_end()>
    0.00 :	  423e87:       mov    %rax,-0x10(%rbp)
         :	      while (__x != 0)
    0.00 :	  423e8b:       jmpq   423fb7 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0x16b>
         :	        {
         :	          if (_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :	  423e90:       mov    -0x8(%rbp),%rax
    0.00 :	  423e94:       mov    %rax,%rdi
    0.00 :	  423e97:       callq  425ffc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node<int> const*)>
    0.00 :	  423e9c:       mov    %rax,%rcx
    0.00 :	  423e9f:       mov    -0x88(%rbp),%rax
    0.00 :	  423ea6:       mov    -0x90(%rbp),%rdx
    0.00 :	  423ead:       mov    %rcx,%rsi
    0.00 :	  423eb0:       mov    %rax,%rdi
    0.00 :	  423eb3:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
    0.00 :	  423eb8:       test   %al,%al
    0.00 :	  423eba:       je     423ed1 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0x85>
         :	            __x = _S_right(__x);
    0.00 :	  423ebc:       mov    -0x8(%rbp),%rax
    0.00 :	  423ec0:       mov    %rax,%rdi
    0.00 :	  423ec3:       callq  423a58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base*)>
    0.00 :	  423ec8:       mov    %rax,-0x8(%rbp)
   25.00 :	  423ecc:       jmpq   423fb7 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0x16b>
         :	          else if (_M_impl._M_key_compare(__k, _S_key(__x)))
   25.00 :	  423ed1:       mov    -0x8(%rbp),%rax
    0.00 :	  423ed5:       mov    %rax,%rdi
    0.00 :	  423ed8:       callq  425ffc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node<int> const*)>
    0.00 :	  423edd:       mov    %rax,%rdx
    0.00 :	  423ee0:       mov    -0x88(%rbp),%rax
    0.00 :	  423ee7:       mov    -0x90(%rbp),%rcx
    0.00 :	  423eee:       mov    %rcx,%rsi
    0.00 :	  423ef1:       mov    %rax,%rdi
    0.00 :	  423ef4:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
    0.00 :	  423ef9:       test   %al,%al
    0.00 :	  423efb:       je     423f1a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0xce>
         :	            __y = __x, __x = _S_left(__x);
    0.00 :	  423efd:       mov    -0x8(%rbp),%rax
    0.00 :	  423f01:       mov    %rax,-0x10(%rbp)
    0.00 :	  423f05:       mov    -0x8(%rbp),%rax
    0.00 :	  423f09:       mov    %rax,%rdi
    0.00 :	  423f0c:       callq  423a6a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_left(std::_Rb_tree_node_base*)>
    0.00 :	  423f11:       mov    %rax,-0x8(%rbp)
    0.00 :	  423f15:       jmpq   423fb7 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0x16b>
         :	          else
         :	            {
         :	              _Link_type __xu(__x), __yu(__y);
    0.00 :	  423f1a:       mov    -0x8(%rbp),%rax
    0.00 :	  423f1e:       mov    %rax,-0x18(%rbp)
    0.00 :	  423f22:       mov    -0x10(%rbp),%rax
   25.00 :	  423f26:       mov    %rax,-0x20(%rbp)
         :	              __y = __x, __x = _S_left(__x);
    0.00 :	  423f2a:       mov    -0x8(%rbp),%rax
    0.00 :	  423f2e:       mov    %rax,-0x10(%rbp)
    0.00 :	  423f32:       mov    -0x8(%rbp),%rax
    0.00 :	  423f36:       mov    %rax,%rdi
    0.00 :	  423f39:       callq  423a6a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_left(std::_Rb_tree_node_base*)>
    0.00 :	  423f3e:       mov    %rax,-0x8(%rbp)
         :	              __xu = _S_right(__xu);
    0.00 :	  423f42:       mov    -0x18(%rbp),%rax
    0.00 :	  423f46:       mov    %rax,%rdi
    0.00 :	  423f49:       callq  423a58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base*)>
    0.00 :	  423f4e:       mov    %rax,-0x18(%rbp)
         :	              return pair<iterator,
         :	                          iterator>(_M_lower_bound(__x, __y, __k),
         :	                                    _M_upper_bound(__xu, __yu, __k));
    0.00 :	  423f52:       mov    -0x90(%rbp),%rcx
    0.00 :	  423f59:       mov    -0x20(%rbp),%rdx
    0.00 :	  423f5d:       mov    -0x18(%rbp),%rsi
    0.00 :	  423f61:       mov    -0x88(%rbp),%rax
    0.00 :	  423f68:       mov    %rax,%rdi
    0.00 :	  423f6b:       callq  4261b8 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_upper_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)>
    0.00 :	  423f70:       mov    %rax,-0x70(%rbp)
    0.00 :	  423f74:       mov    -0x90(%rbp),%rcx
    0.00 :	  423f7b:       mov    -0x10(%rbp),%rdx
    0.00 :	  423f7f:       mov    -0x8(%rbp),%rsi
    0.00 :	  423f83:       mov    -0x88(%rbp),%rax
    0.00 :	  423f8a:       mov    %rax,%rdi
    0.00 :	  423f8d:       callq  42612a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)>
    0.00 :	  423f92:       mov    %rax,-0x60(%rbp)
    0.00 :	  423f96:       lea    -0x70(%rbp),%rdx
    0.00 :	  423f9a:       lea    -0x60(%rbp),%rcx
    0.00 :	  423f9e:       lea    -0x80(%rbp),%rax
    0.00 :	  423fa2:       mov    %rcx,%rsi
    0.00 :	  423fa5:       mov    %rax,%rdi
    0.00 :	  423fa8:       callq  423e08 <std::pair<std::_Rb_tree_iterator<int>, std::_Rb_tree_iterator<int> >::pair<std::_Rb_tree_iterator<int>, std::_Rb_tree_iterator<int>, void>(std::_Rb_tree_iterator<int>&&, std::_Rb_tree_iterator<int>&&)>
    0.00 :	  423fad:       mov    -0x80(%rbp),%rax
    0.00 :	  423fb1:       mov    -0x78(%rbp),%rdx
    0.00 :	  423fb5:       jmp    424011 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0x1c5>
         :	      while (__x != 0)
    0.00 :	  423fb7:       cmpq   $0x0,-0x8(%rbp)
   25.00 :	  423fbc:       jne    423e90 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0x44>
         :	            }
         :	        }
         :	      return pair<iterator, iterator>(iterator(__y),
         :	                                      iterator(__y));
    0.00 :	  423fc2:       mov    -0x10(%rbp),%rdx
    0.00 :	  423fc6:       lea    -0x40(%rbp),%rax
    0.00 :	  423fca:       mov    %rdx,%rsi
    0.00 :	  423fcd:       mov    %rax,%rdi
    0.00 :	  423fd0:       callq  423dee <std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int>*)>
    0.00 :	  423fd5:       mov    -0x10(%rbp),%rdx
    0.00 :	  423fd9:       lea    -0x30(%rbp),%rax
    0.00 :	  423fdd:       mov    %rdx,%rsi
    0.00 :	  423fe0:       mov    %rax,%rdi
    0.00 :	  423fe3:       callq  423dee <std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int>*)>
    0.00 :	  423fe8:       lea    -0x40(%rbp),%rdx
    0.00 :	  423fec:       lea    -0x30(%rbp),%rcx
    0.00 :	  423ff0:       lea    -0x50(%rbp),%rax
    0.00 :	  423ff4:       mov    %rcx,%rsi
    0.00 :	  423ff7:       mov    %rax,%rdi
    0.00 :	  423ffa:       callq  423e08 <std::pair<std::_Rb_tree_iterator<int>, std::_Rb_tree_iterator<int> >::pair<std::_Rb_tree_iterator<int>, std::_Rb_tree_iterator<int>, void>(std::_Rb_tree_iterator<int>&&, std::_Rb_tree_iterator<int>&&)>
    0.00 :	  423fff:       mov    -0x50(%rbp),%rax
    0.00 :	  424003:       mov    -0x48(%rbp),%rdx
    0.00 :	  424007:       jmp    424011 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::equal_range(int const&)+0x1c5>
    0.00 :	  424009:       mov    %rax,%rdi
    0.00 :	  42400c:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  424011:       leaveq
    0.00 :	  424012:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004268e4 <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)>:
         :	_ZSt18generate_canonicalIdLm53ESt13random_deviceET_RT1_():
         :	    }
         :
         :	  template<typename _RealType, size_t __bits,
         :	           typename _UniformRandomNumberGenerator>
         :	    _RealType
         :	    generate_canonical(_UniformRandomNumberGenerator& __urng)
    0.00 :	  4268e4:       push   %rbp
    0.00 :	  4268e5:       mov    %rsp,%rbp
    0.00 :	  4268e8:       push   %rbx
    0.00 :	  4268e9:       sub    $0xa8,%rsp
    0.00 :	  4268f0:       mov    %rdi,-0x78(%rbp)
         :	    {
         :	      const size_t __b
         :	        = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
         :	                   __bits);
    0.00 :	  4268f4:       movq   $0x35,-0x68(%rbp)
    0.00 :	  4268fc:       movq   $0x35,-0x60(%rbp)
    0.00 :	  426904:       lea    -0x68(%rbp),%rdx
    0.00 :	  426908:       lea    -0x60(%rbp),%rax
    0.00 :	  42690c:       mov    %rdx,%rsi
    0.00 :	  42690f:       mov    %rax,%rdi
    0.00 :	  426912:       callq  427ae8 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :	  426917:       mov    (%rax),%rax
    0.00 :	  42691a:       mov    %rax,-0x30(%rbp)
         :	      const long double __r = static_cast<long double>(__urng.max())
         :	                            - static_cast<long double>(__urng.min()) + 1.0L;
    0.00 :	  42691e:       callq  41ebc9 <std::random_device::max()>
    0.00 :	  426923:       mov    %eax,%eax
    0.00 :	  426925:       mov    %rax,-0x88(%rbp)
    0.00 :	  42692c:       fildll -0x88(%rbp)
   25.00 :	  426932:       fstpt  -0xa0(%rbp)
    0.00 :	  426938:       callq  41ebbe <std::random_device::min()>
    0.00 :	  42693d:       mov    %eax,%eax
    0.00 :	  42693f:       mov    %rax,-0x88(%rbp)
    0.00 :	  426946:       fildll -0x88(%rbp)
    0.00 :	  42694c:       fldt   -0xa0(%rbp)
    0.00 :	  426952:       fsubp  %st,%st(1)
    0.00 :	  426954:       fld1
    0.00 :	  426956:       faddp  %st,%st(1)
    0.00 :	  426958:       fstpt  -0x40(%rbp)
         :	      const size_t __log2r = std::log(__r) / std::log(2.0L);
    0.00 :	  42695b:       mov    -0x40(%rbp),%rax
    0.00 :	  42695f:       mov    -0x38(%rbp),%edx
    0.00 :	  426962:       mov    %rax,(%rsp)
    0.00 :	  426966:       mov    %edx,0x8(%rsp)
    0.00 :	  42696a:       callq  41eb4a <std::log(long double)>
    0.00 :	  42696f:       fstpt  -0xa0(%rbp)
    0.00 :	  426975:       movabs $0x8000000000000000,%rax
    0.00 :	  42697f:       mov    $0x4000,%edx
    0.00 :	  426984:       mov    %rax,(%rsp)
    0.00 :	  426988:       mov    %edx,0x8(%rsp)
    0.00 :	  42698c:       callq  41eb4a <std::log(long double)>
    0.00 :	  426991:       fldt   -0xa0(%rbp)
    0.00 :	  426997:       fdivp  %st,%st(1)
   50.00 :	  426999:       fldt   0xd131(%rip)        # 433ad0 <__gthread_active_p()::__gthread_active_ptr+0x30>
    0.00 :	  42699f:       fxch   %st(1)
    0.00 :	  4269a1:       fucomi %st(1),%st
    0.00 :	  4269a3:       fstp   %st(1)
    0.00 :	  4269a5:       jae    4269ac <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)+0xc8>
    0.00 :	  4269a7:       fisttpll -0x48(%rbp)
    0.00 :	  4269aa:       jmp    4269c5 <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)+0xe1>
    0.00 :	  4269ac:       fldt   0xd11e(%rip)        # 433ad0 <__gthread_active_p()::__gthread_active_ptr+0x30>
    0.00 :	  4269b2:       fsubrp %st,%st(1)
    0.00 :	  4269b4:       fisttpll -0x48(%rbp)
    0.00 :	  4269b7:       movabs $0x8000000000000000,%rax
    0.00 :	  4269c1:       xor    %rax,-0x48(%rbp)
    0.00 :	  4269c5:       mov    -0x48(%rbp),%rax
    0.00 :	  4269c9:       mov    %rax,-0x48(%rbp)
         :	      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
    0.00 :	  4269cd:       mov    -0x48(%rbp),%rax
    0.00 :	  4269d1:       mov    -0x30(%rbp),%rdx
    0.00 :	  4269d5:       add    %rdx,%rax
    0.00 :	  4269d8:       sub    $0x1,%rax
    0.00 :	  4269dc:       mov    $0x0,%edx
    0.00 :	  4269e1:       divq   -0x48(%rbp)
    0.00 :	  4269e5:       mov    %rax,-0x58(%rbp)
    0.00 :	  4269e9:       movq   $0x1,-0x50(%rbp)
    0.00 :	  4269f1:       lea    -0x58(%rbp),%rdx
    0.00 :	  4269f5:       lea    -0x50(%rbp),%rax
    0.00 :	  4269f9:       mov    %rdx,%rsi
    0.00 :	  4269fc:       mov    %rax,%rdi
    0.00 :	  4269ff:       callq  425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :	  426a04:       mov    (%rax),%rax
    0.00 :	  426a07:       mov    %rax,-0x18(%rbp)
         :	      _RealType __sum = _RealType(0);
    0.00 :	  426a0b:       mov    $0x0,%eax
    0.00 :	  426a10:       mov    %rax,-0x20(%rbp)
         :	      _RealType __tmp = _RealType(1);
    0.00 :	  426a14:       movabs $0x3ff0000000000000,%rax
    0.00 :	  426a1e:       mov    %rax,-0x28(%rbp)
         :	      for (; __k != 0; --__k)
    0.00 :	  426a22:       jmp    426a81 <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)+0x19d>
         :	        {
         :	          __sum += _RealType(__urng() - __urng.min()) * __tmp;
    0.00 :	  426a24:       mov    -0x78(%rbp),%rax
    0.00 :	  426a28:       mov    %rax,%rdi
    0.00 :	  426a2b:       callq  41ebd4 <std::random_device::operator()()>
    0.00 :	  426a30:       mov    %eax,%ebx
    0.00 :	  426a32:       callq  41ebbe <std::random_device::min()>
    0.00 :	  426a37:       sub    %eax,%ebx
    0.00 :	  426a39:       mov    %ebx,%eax
    0.00 :	  426a3b:       mov    %eax,%eax
    0.00 :	  426a3d:       test   %rax,%rax
    0.00 :	  426a40:       js     426a49 <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)+0x165>
    0.00 :	  426a42:       vcvtsi2sd %rax,%xmm0,%xmm0
    0.00 :	  426a47:       jmp    426a5e <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)+0x17a>
    0.00 :	  426a49:       mov    %rax,%rdx
    0.00 :	  426a4c:       shr    %rdx
    0.00 :	  426a4f:       and    $0x1,%eax
    0.00 :	  426a52:       or     %rax,%rdx
    0.00 :	  426a55:       vcvtsi2sd %rdx,%xmm0,%xmm0
    0.00 :	  426a5a:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  426a5e:       vmulsd -0x28(%rbp),%xmm0,%xmm0
    0.00 :	  426a63:       vmovsd -0x20(%rbp),%xmm1
    0.00 :	  426a68:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  426a6c:       vmovsd %xmm0,-0x20(%rbp)
         :	          __tmp *= __r;
   25.00 :	  426a71:       fldl   -0x28(%rbp)
    0.00 :	  426a74:       fldt   -0x40(%rbp)
    0.00 :	  426a77:       fmulp  %st,%st(1)
    0.00 :	  426a79:       fstpl  -0x28(%rbp)
         :	      for (; __k != 0; --__k)
    0.00 :	  426a7c:       subq   $0x1,-0x18(%rbp)
    0.00 :	  426a81:       cmpq   $0x0,-0x18(%rbp)
    0.00 :	  426a86:       jne    426a24 <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)+0x140>
         :	        }
         :	      return __sum / __tmp;
    0.00 :	  426a88:       vmovsd -0x20(%rbp),%xmm0
    0.00 :	  426a8d:       vdivsd -0x28(%rbp),%xmm0,%xmm0
    0.00 :	  426a92:       vmovsd %xmm0,-0xa0(%rbp)
    0.00 :	  426a9a:       mov    -0xa0(%rbp),%rax
         :	    }
    0.00 :	  426aa1:       mov    %rax,-0xa0(%rbp)
    0.00 :	  426aa8:       vmovsd -0xa0(%rbp),%xmm0
    0.00 :	  426ab0:       add    $0xa8,%rsp
    0.00 :	  426ab7:       pop    %rbx
    0.00 :	  426ab8:       pop    %rbp
    0.00 :	  426ab9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004240de <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_left(std::_Rb_tree_node_base*)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE7_S_leftEPSt18_Rb_tree_node_base():
         :	      static const _Key&
         :	      _S_key(_Const_Link_type __x)
         :	      { return _KeyOfValue()(_S_value(__x)); }
         :
         :	      static _Link_type
         :	      _S_left(_Base_ptr __x)
    0.00 :	  4240de:       push   %rbp
    0.00 :	  4240df:       mov    %rsp,%rbp
    0.00 :	  4240e2:       mov    %rdi,-0x8(%rbp)
         :	      { return static_cast<_Link_type>(__x->_M_left); }
    0.00 :	  4240e6:       mov    -0x8(%rbp),%rax
   33.33 :	  4240ea:       mov    0x10(%rax),%rax
   66.67 :	  4240ee:       pop    %rbp
    0.00 :	  4240ef:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426454 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_value(std::_Rb_tree_node_base const*)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_valueEPKSt18_Rb_tree_node_base():
         :	      static _Const_Link_type
         :	      _S_right(_Const_Base_ptr __x)
         :	      { return static_cast<_Const_Link_type>(__x->_M_right); }
         :
         :	      static const_reference
         :	      _S_value(_Const_Base_ptr __x)
    0.00 :	  426454:       push   %rbp
   33.33 :	  426455:       mov    %rsp,%rbp
   33.33 :	  426458:       mov    %rdi,-0x8(%rbp)
         :	      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }
    0.00 :	  42645c:       mov    -0x8(%rbp),%rax
   33.33 :	  426460:       add    $0x20,%rax
    0.00 :	  426464:       pop    %rbp
    0.00 :	  426465:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425a52 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&)>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&))>:
         :	_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP4EdgeSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __unguarded_linear_insert(_RandomAccessIterator __last,
    0.00 :	  425a52:       push   %rbp
    0.00 :	  425a53:       mov    %rsp,%rbp
    0.00 :	  425a56:       push   %rbx
    0.00 :	  425a57:       sub    $0x38,%rsp
    0.00 :	  425a5b:       mov    %rdi,-0x40(%rbp)
    0.00 :	  425a5f:       mov    %rsi,-0x38(%rbp)
         :	                              _Compare __comp)
         :	    {
         :	      typename iterator_traits<_RandomAccessIterator>::value_type
         :	        __val = _GLIBCXX_MOVE(*__last);
    0.00 :	  425a63:       lea    -0x40(%rbp),%rax
    0.00 :	  425a67:       mov    %rax,%rdi
    0.00 :	  425a6a:       callq  4258d2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const>
    0.00 :	  425a6f:       mov    %rax,%rdi
    0.00 :	  425a72:       callq  41fe84 <std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&)>
    0.00 :	  425a77:       mov    0x8(%rax),%rdx
    0.00 :	  425a7b:       mov    (%rax),%rax
    0.00 :	  425a7e:       mov    %rax,-0x20(%rbp)
    0.00 :	  425a82:       mov    %rdx,-0x18(%rbp)
         :	      _RandomAccessIterator __next = __last;
    0.00 :	  425a86:       mov    -0x40(%rbp),%rax
    0.00 :	  425a8a:       mov    %rax,-0x30(%rbp)
         :	      --__next;
    0.00 :	  425a8e:       lea    -0x30(%rbp),%rax
   33.33 :	  425a92:       mov    %rax,%rdi
    0.00 :	  425a95:       callq  4272b2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator--()>
         :	      while (__comp(__val, *__next))
    0.00 :	  425a9a:       jmp    425ae1 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&)>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&))+0x8f>
         :	        {
         :	          *__last = _GLIBCXX_MOVE(*__next);
    0.00 :	  425a9c:       lea    -0x40(%rbp),%rax
    0.00 :	  425aa0:       mov    %rax,%rdi
    0.00 :	  425aa3:       callq  4258d2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const>
    0.00 :	  425aa8:       mov    %rax,%rbx
    0.00 :	  425aab:       lea    -0x30(%rbp),%rax
    0.00 :	  425aaf:       mov    %rax,%rdi
    0.00 :	  425ab2:       callq  4258d2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const>
    0.00 :	  425ab7:       mov    %rax,%rdi
    0.00 :	  425aba:       callq  41fe84 <std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&)>
    0.00 :	  425abf:       mov    0x8(%rax),%rdx
   33.33 :	  425ac3:       mov    (%rax),%rax
    0.00 :	  425ac6:       mov    %rax,(%rbx)
    0.00 :	  425ac9:       mov    %rdx,0x8(%rbx)
         :	          __last = __next;
    0.00 :	  425acd:       mov    -0x30(%rbp),%rax
    0.00 :	  425ad1:       mov    %rax,-0x40(%rbp)
         :	          --__next;
    0.00 :	  425ad5:       lea    -0x30(%rbp),%rax
    0.00 :	  425ad9:       mov    %rax,%rdi
    0.00 :	  425adc:       callq  4272b2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator--()>
         :	      while (__comp(__val, *__next))
    0.00 :	  425ae1:       lea    -0x30(%rbp),%rax
    0.00 :	  425ae5:       mov    %rax,%rdi
    0.00 :	  425ae8:       callq  4258d2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const>
    0.00 :	  425aed:       mov    %rax,%rcx
    0.00 :	  425af0:       lea    -0x20(%rbp),%rdx
    0.00 :	  425af4:       mov    -0x38(%rbp),%rax
    0.00 :	  425af8:       mov    %rcx,%rsi
    0.00 :	  425afb:       mov    %rdx,%rdi
    0.00 :	  425afe:       callq  *%rax
    0.00 :	  425b00:       test   %al,%al
    0.00 :	  425b02:       jne    425a9c <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&)>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&))+0x4a>
         :	        }
         :	      *__last = _GLIBCXX_MOVE(__val);
    0.00 :	  425b04:       lea    -0x40(%rbp),%rax
    0.00 :	  425b08:       mov    %rax,%rdi
    0.00 :	  425b0b:       callq  4258d2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const>
    0.00 :	  425b10:       mov    %rax,%rbx
    0.00 :	  425b13:       lea    -0x20(%rbp),%rax
    0.00 :	  425b17:       mov    %rax,%rdi
    0.00 :	  425b1a:       callq  41fe84 <std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&)>
    0.00 :	  425b1f:       mov    0x8(%rax),%rdx
    0.00 :	  425b23:       mov    (%rax),%rax
    0.00 :	  425b26:       mov    %rax,(%rbx)
    0.00 :	  425b29:       mov    %rdx,0x8(%rbx)
   33.33 :	  425b2d:       jmp    425b37 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&)>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&))+0xe5>
    0.00 :	  425b2f:       mov    %rax,%rdi
    0.00 :	  425b32:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  425b37:       add    $0x38,%rsp
    0.00 :	  425b3b:       pop    %rbx
    0.00 :	  425b3c:       pop    %rbp
    0.00 :	  425b3d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004258d2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP4EdgeSt6vectorIS1_SaIS1_EEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
    0.00 :	  4258d2:       push   %rbp
   50.00 :	  4258d3:       mov    %rsp,%rbp
    0.00 :	  4258d6:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
   50.00 :	  4258da:       mov    -0x8(%rbp),%rax
    0.00 :	  4258de:       mov    (%rax),%rax
    0.00 :	  4258e1:       pop    %rbp
    0.00 :	  4258e2:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428452 <__gnu_cxx::new_allocator<std::_Rb_tree_node<Edge> >::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI4EdgeEE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  428452:       push   %rbp
    0.00 :	  428453:       mov    %rsp,%rbp
    0.00 :	  428456:       sub    $0x20,%rsp
    0.00 :	  42845a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42845e:       mov    %rsi,-0x10(%rbp)
    0.00 :	  428462:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.00 :	  428466:       mov    -0x8(%rbp),%rax
   50.00 :	  42846a:       mov    %rax,%rdi
    0.00 :	  42846d:       callq  428bb6 <__gnu_cxx::new_allocator<std::_Rb_tree_node<Edge> >::max_size() const>
    0.00 :	  428472:       cmp    -0x10(%rbp),%rax
    0.00 :	  428476:       setb   %al
    0.00 :	  428479:       test   %al,%al
    0.00 :	  42847b:       je     428482 <__gnu_cxx::new_allocator<std::_Rb_tree_node<Edge> >::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  42847d:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :	  428482:       mov    -0x10(%rbp),%rdx
    0.00 :	  428486:       mov    %rdx,%rax
    0.00 :	  428489:       add    %rax,%rax
    0.00 :	  42848c:       add    %rdx,%rax
    0.00 :	  42848f:       shl    $0x4,%rax
    0.00 :	  428493:       mov    %rax,%rdi
    0.00 :	  428496:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.00 :	  42849b:       leaveq
   50.00 :	  42849c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042a609 <sort_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)>:
         :	_Z8sort_rowRSt6vectorI5LLcolSaIS0_EEiiRiS4_():
         :	    intcomp++;
         :	    nums[low] = keyVal;
         :	    return low;
         :	}
         :
         :	void sort_row(std::vector<LLcol> &c, int low, int high, int &intops, int &intcomp) {
    0.00 :	  42a609:       push   %rbp
    0.00 :	  42a60a:       mov    %rsp,%rbp
    0.00 :	  42a60d:       sub    $0x30,%rsp
    0.00 :	  42a611:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42a615:       mov    %esi,-0x1c(%rbp)
    0.00 :	  42a618:       mov    %edx,-0x20(%rbp)
    0.00 :	  42a61b:       mov    %rcx,-0x28(%rbp)
    0.00 :	  42a61f:       mov    %r8,-0x30(%rbp)
         :
         :	    if (low < high)
    0.00 :	  42a623:       mov    -0x1c(%rbp),%eax
    0.00 :	  42a626:       cmp    -0x20(%rbp),%eax
    0.00 :	  42a629:       jge    42a690 <sort_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)+0x87>
         :	    {
         :	        int mid = getPartition_row(c, low, high, intops, intcomp);
    0.00 :	  42a62b:       mov    -0x30(%rbp),%rdi
    0.00 :	  42a62f:       mov    -0x28(%rbp),%rcx
   50.00 :	  42a633:       mov    -0x20(%rbp),%edx
    0.00 :	  42a636:       mov    -0x1c(%rbp),%esi
    0.00 :	  42a639:       mov    -0x18(%rbp),%rax
    0.00 :	  42a63d:       mov    %rdi,%r8
    0.00 :	  42a640:       mov    %rax,%rdi
    0.00 :	  42a643:       callq  42a422 <getPartition_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)>
    0.00 :	  42a648:       mov    %eax,-0x4(%rbp)
         :	        sort_row(c, low, mid-1, intops, intcomp);
   50.00 :	  42a64b:       mov    -0x4(%rbp),%eax
    0.00 :	  42a64e:       lea    -0x1(%rax),%edi
    0.00 :	  42a651:       mov    -0x30(%rbp),%rcx
    0.00 :	  42a655:       mov    -0x28(%rbp),%rdx
    0.00 :	  42a659:       mov    -0x1c(%rbp),%esi
    0.00 :	  42a65c:       mov    -0x18(%rbp),%rax
    0.00 :	  42a660:       mov    %rcx,%r8
    0.00 :	  42a663:       mov    %rdx,%rcx
    0.00 :	  42a666:       mov    %edi,%edx
    0.00 :	  42a668:       mov    %rax,%rdi
    0.00 :	  42a66b:       callq  42a609 <sort_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)>
         :	        sort_row(c, mid + 1, high, intops, intcomp);
    0.00 :	  42a670:       mov    -0x4(%rbp),%eax
    0.00 :	  42a673:       lea    0x1(%rax),%esi
    0.00 :	  42a676:       mov    -0x30(%rbp),%rdi
    0.00 :	  42a67a:       mov    -0x28(%rbp),%rcx
    0.00 :	  42a67e:       mov    -0x20(%rbp),%edx
    0.00 :	  42a681:       mov    -0x18(%rbp),%rax
    0.00 :	  42a685:       mov    %rdi,%r8
    0.00 :	  42a688:       mov    %rax,%rdi
    0.00 :	  42a68b:       callq  42a609 <sort_row(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&)>
         :	    }
         :	    intcomp++;
    0.00 :	  42a690:       mov    -0x30(%rbp),%rax
    0.00 :	  42a694:       mov    (%rax),%eax
    0.00 :	  42a696:       lea    0x1(%rax),%edx
    0.00 :	  42a699:       mov    -0x30(%rbp),%rax
    0.00 :	  42a69d:       mov    %edx,(%rax)
         :	}
    0.00 :	  42a69f:       leaveq
    0.00 :	  42a6a0:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042a8d6 <sort_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)>:
         :	_Z8sort_valRSt6vectorI5LLcolSaIS0_EEiiRiS4_S4_S4_():
         :	    intcomp++;
         :	    nums[low] = keyVal;
         :	    return low;
         :	}
         :
         :	void sort_val(std::vector<LLcol> &c, int low, int high, int &intops, int &intcomp, int &flcomp, int &flops) {
    0.00 :	  42a8d6:       push   %rbp
    0.00 :	  42a8d7:       mov    %rsp,%rbp
    0.00 :	  42a8da:       sub    $0x40,%rsp
    0.00 :	  42a8de:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42a8e2:       mov    %esi,-0x1c(%rbp)
    0.00 :	  42a8e5:       mov    %edx,-0x20(%rbp)
    0.00 :	  42a8e8:       mov    %rcx,-0x28(%rbp)
    0.00 :	  42a8ec:       mov    %r8,-0x30(%rbp)
    0.00 :	  42a8f0:       mov    %r9,-0x38(%rbp)
         :
         :	    if (low < high)
    0.00 :	  42a8f4:       mov    -0x1c(%rbp),%eax
    0.00 :	  42a8f7:       cmp    -0x20(%rbp),%eax
    0.00 :	  42a8fa:       jge    42a982 <sort_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)+0xac>
         :	    {
         :	        int mid = getPartition_val(c, low, high, intops, intcomp, flcomp, flops);
    0.00 :	  42a900:       mov    -0x38(%rbp),%r9
    0.00 :	  42a904:       mov    -0x30(%rbp),%r8
    0.00 :	  42a908:       mov    -0x28(%rbp),%rcx
    0.00 :	  42a90c:       mov    -0x20(%rbp),%edx
    0.00 :	  42a90f:       mov    -0x1c(%rbp),%esi
    0.00 :	  42a912:       mov    -0x18(%rbp),%rax
    0.00 :	  42a916:       mov    0x10(%rbp),%rdi
    0.00 :	  42a91a:       mov    %rdi,(%rsp)
    0.00 :	  42a91e:       mov    %rax,%rdi
    0.00 :	  42a921:       callq  42a6a1 <getPartition_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)>
    0.00 :	  42a926:       mov    %eax,-0x4(%rbp)
         :	        sort_val(c, low, mid-1, intops, intcomp, flcomp, flops);
    0.00 :	  42a929:       mov    -0x4(%rbp),%eax
    0.00 :	  42a92c:       lea    -0x1(%rax),%edi
    0.00 :	  42a92f:       mov    -0x38(%rbp),%r9
    0.00 :	  42a933:       mov    -0x30(%rbp),%r8
    0.00 :	  42a937:       mov    -0x28(%rbp),%rdx
    0.00 :	  42a93b:       mov    -0x1c(%rbp),%esi
    0.00 :	  42a93e:       mov    -0x18(%rbp),%rax
    0.00 :	  42a942:       mov    0x10(%rbp),%rcx
    0.00 :	  42a946:       mov    %rcx,(%rsp)
    0.00 :	  42a94a:       mov    %rdx,%rcx
    0.00 :	  42a94d:       mov    %edi,%edx
    0.00 :	  42a94f:       mov    %rax,%rdi
    0.00 :	  42a952:       callq  42a8d6 <sort_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)>
         :	        sort_val(c, mid + 1, high, intops, intcomp, flcomp, flops);
    0.00 :	  42a957:       mov    -0x4(%rbp),%eax
    0.00 :	  42a95a:       lea    0x1(%rax),%edi
    0.00 :	  42a95d:       mov    -0x38(%rbp),%r9
    0.00 :	  42a961:       mov    -0x30(%rbp),%r8
   50.00 :	  42a965:       mov    -0x28(%rbp),%rcx
    0.00 :	  42a969:       mov    -0x20(%rbp),%edx
    0.00 :	  42a96c:       mov    -0x18(%rbp),%rax
    0.00 :	  42a970:       mov    0x10(%rbp),%rsi
    0.00 :	  42a974:       mov    %rsi,(%rsp)
    0.00 :	  42a978:       mov    %edi,%esi
    0.00 :	  42a97a:       mov    %rax,%rdi
    0.00 :	  42a97d:       callq  42a8d6 <sort_val(std::vector<LLcol, std::allocator<LLcol> >&, int, int, int&, int&, int&, int&)>
         :	    }
         :	    intcomp++;
    0.00 :	  42a982:       mov    -0x30(%rbp),%rax
    0.00 :	  42a986:       mov    (%rax),%eax
   50.00 :	  42a988:       lea    0x1(%rax),%edx
    0.00 :	  42a98b:       mov    -0x30(%rbp),%rax
    0.00 :	  42a98f:       mov    %edx,(%rax)
         :	}
    0.00 :	  42a991:       leaveq
    0.00 :	  42a992:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429075 <_ZSt10_ConstructI5LLordIS0_EEvPT_DpOT0_>:
         :	_ZSt10_ConstructI5LLordIS0_EEvPT_DpOT0_():
         :	   * object's constructor with an initializer.
         :	   */
         :	#if __cplusplus >= 201103L
         :	  template<typename _T1, typename... _Args>
         :	    inline void
         :	    _Construct(_T1* __p, _Args&&... __args)
    0.00 :	  429075:       push   %rbp
    0.00 :	  429076:       mov    %rsp,%rbp
    0.00 :	  429079:       push   %rbx
    0.00 :	  42907a:       sub    $0x18,%rsp
    0.00 :	  42907e:       mov    %rdi,-0x18(%rbp)
    0.00 :	  429082:       mov    %rsi,-0x20(%rbp)
         :	    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
    0.00 :	  429086:       mov    -0x20(%rbp),%rax
    0.00 :	  42908a:       mov    %rax,%rdi
    0.00 :	  42908d:       callq  422089 <LLord&& std::forward<LLord>(std::remove_reference<LLord>::type&)>
    0.00 :	  429092:       mov    %rax,%rbx
    0.00 :	  429095:       mov    -0x18(%rbp),%rax
    0.00 :	  429099:       mov    %rax,%rsi
    0.00 :	  42909c:       mov    $0x10,%edi
    0.00 :	  4290a1:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  4290a6:       mov    %rax,%rcx
    0.00 :	  4290a9:       test   %rcx,%rcx
    0.00 :	  4290ac:       je     4290bc <_ZSt10_ConstructI5LLordIS0_EEvPT_DpOT0_+0x47>
   50.00 :	  4290ae:       mov    (%rbx),%rax
    0.00 :	  4290b1:       mov    0x8(%rbx),%rdx
    0.00 :	  4290b5:       mov    %rax,(%rcx)
   50.00 :	  4290b8:       mov    %rdx,0x8(%rcx)
    0.00 :	  4290bc:       add    $0x18,%rsp
    0.00 :	  4290c0:       pop    %rbx
    0.00 :	  4290c1:       pop    %rbp
    0.00 :	  4290c2:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424560 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_lower_bound(std::_Rb_tree_node<Edge>*, std::_Rb_tree_node<Edge>*, Edge const&)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS0_ES9_RKS0_():
         :
         :	  template<typename _Key, typename _Val, typename _KeyOfValue,
         :	           typename _Compare, typename _Alloc>
         :	    typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                      _Compare, _Alloc>::iterator
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  424560:       push   %rbp
    0.00 :	  424561:       mov    %rsp,%rbp
    0.00 :	  424564:       sub    $0x30,%rsp
    0.00 :	  424568:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42456c:       mov    %rsi,-0x20(%rbp)
    0.00 :	  424570:       mov    %rdx,-0x28(%rbp)
    0.00 :	  424574:       mov    %rcx,-0x30(%rbp)
         :	    _M_lower_bound(_Link_type __x, _Link_type __y,
         :	                   const _Key& __k)
         :	    {
         :	      while (__x != 0)
    0.00 :	  424578:       jmp    4245cd <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_lower_bound(std::_Rb_tree_node<Edge>*, std::_Rb_tree_node<Edge>*, Edge const&)+0x6d>
         :	        if (!_M_impl._M_key_compare(_S_key(__x), __k))
    0.00 :	  42457a:       mov    -0x20(%rbp),%rax
    0.00 :	  42457e:       mov    %rax,%rdi
    0.00 :	  424581:       callq  426466 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_key(std::_Rb_tree_node<Edge> const*)>
    0.00 :	  424586:       mov    %rax,%rcx
    0.00 :	  424589:       mov    -0x18(%rbp),%rax
    0.00 :	  42458d:       mov    -0x30(%rbp),%rdx
    0.00 :	  424591:       mov    %rcx,%rsi
    0.00 :	  424594:       mov    %rax,%rdi
    0.00 :	  424597:       callq  426492 <std::less<Edge>::operator()(Edge const&, Edge const&) const>
    0.00 :	  42459c:       xor    $0x1,%eax
    0.00 :	  42459f:       test   %al,%al
    0.00 :	  4245a1:       je     4245bd <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_lower_bound(std::_Rb_tree_node<Edge>*, std::_Rb_tree_node<Edge>*, Edge const&)+0x5d>
         :	          __y = __x, __x = _S_left(__x);
    0.00 :	  4245a3:       mov    -0x20(%rbp),%rax
    0.00 :	  4245a7:       mov    %rax,-0x28(%rbp)
    0.00 :	  4245ab:       mov    -0x20(%rbp),%rax
    0.00 :	  4245af:       mov    %rax,%rdi
    0.00 :	  4245b2:       callq  4240de <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_left(std::_Rb_tree_node_base*)>
    0.00 :	  4245b7:       mov    %rax,-0x20(%rbp)
    0.00 :	  4245bb:       jmp    4245cd <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_lower_bound(std::_Rb_tree_node<Edge>*, std::_Rb_tree_node<Edge>*, Edge const&)+0x6d>
         :	        else
         :	          __x = _S_right(__x);
    0.00 :	  4245bd:       mov    -0x20(%rbp),%rax
   50.00 :	  4245c1:       mov    %rax,%rdi
    0.00 :	  4245c4:       callq  4240cc <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_right(std::_Rb_tree_node_base*)>
    0.00 :	  4245c9:       mov    %rax,-0x20(%rbp)
         :	      while (__x != 0)
    0.00 :	  4245cd:       cmpq   $0x0,-0x20(%rbp)
   50.00 :	  4245d2:       jne    42457a <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_lower_bound(std::_Rb_tree_node<Edge>*, std::_Rb_tree_node<Edge>*, Edge const&)+0x1a>
         :	      return iterator(__y);
    0.00 :	  4245d4:       mov    -0x28(%rbp),%rdx
    0.00 :	  4245d8:       lea    -0x10(%rbp),%rax
    0.00 :	  4245dc:       mov    %rdx,%rsi
    0.00 :	  4245df:       mov    %rax,%rdi
    0.00 :	  4245e2:       callq  424534 <std::_Rb_tree_iterator<Edge>::_Rb_tree_iterator(std::_Rb_tree_node<Edge>*)>
    0.00 :	  4245e7:       mov    -0x10(%rbp),%rax
         :	    }
    0.00 :	  4245eb:       leaveq
    0.00 :	  4245ec:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421a9e <std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<int> const&)>:
         :	_ZNSt23_Rb_tree_const_iteratorIiEC2ERKSt17_Rb_tree_iteratorIiE():
         :
         :	      explicit
         :	      _Rb_tree_const_iterator(_Link_type __x)
         :	      : _M_node(__x) { }
         :
         :	      _Rb_tree_const_iterator(const iterator& __it)
    0.00 :	  421a9e:       push   %rbp
    0.00 :	  421a9f:       mov    %rsp,%rbp
    0.00 :	  421aa2:       mov    %rdi,-0x8(%rbp)
    0.00 :	  421aa6:       mov    %rsi,-0x10(%rbp)
         :	      : _M_node(__it._M_node) { }
    0.00 :	  421aaa:       mov    -0x10(%rbp),%rax
    0.00 :	  421aae:       mov    (%rax),%rdx
  100.00 :	  421ab1:       mov    -0x8(%rbp),%rax
    0.00 :	  421ab5:       mov    %rdx,(%rax)
    0.00 :	  421ab8:       pop    %rbp
    0.00 :	  421ab9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424130 <std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_node<int> const*)>:
         :	_ZNSt23_Rb_tree_const_iteratorIiEC2EPKSt13_Rb_tree_nodeIiE():
         :
         :	      _Rb_tree_const_iterator()
         :	      : _M_node() { }
         :
         :	      explicit
         :	      _Rb_tree_const_iterator(_Link_type __x)
   50.00 :	  424130:       push   %rbp
    0.00 :	  424131:       mov    %rsp,%rbp
    0.00 :	  424134:       mov    %rdi,-0x8(%rbp)
    0.00 :	  424138:       mov    %rsi,-0x10(%rbp)
         :	      : _M_node(__x) { }
    0.00 :	  42413c:       mov    -0x8(%rbp),%rax
    0.00 :	  424140:       mov    -0x10(%rbp),%rdx
    0.00 :	  424144:       mov    %rdx,(%rax)
   50.00 :	  424147:       pop    %rbp
    0.00 :	  424148:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421d0c <std::_Rb_tree_const_iterator<int>::operator==(std::_Rb_tree_const_iterator<int> const&) const>:
         :	_ZNKSt23_Rb_tree_const_iteratorIiEeqERKS0_():
         :	        _M_node = _Rb_tree_decrement(_M_node);
         :	        return __tmp;
         :	      }
         :
         :	      bool
         :	      operator==(const _Self& __x) const
    0.00 :	  421d0c:       push   %rbp
    0.00 :	  421d0d:       mov    %rsp,%rbp
    0.00 :	  421d10:       mov    %rdi,-0x8(%rbp)
    0.00 :	  421d14:       mov    %rsi,-0x10(%rbp)
         :	      { return _M_node == __x._M_node; }
    0.00 :	  421d18:       mov    -0x8(%rbp),%rax
    0.00 :	  421d1c:       mov    (%rax),%rdx
  100.00 :	  421d1f:       mov    -0x10(%rbp),%rax
    0.00 :	  421d23:       mov    (%rax),%rax
    0.00 :	  421d26:       cmp    %rax,%rdx
    0.00 :	  421d29:       sete   %al
    0.00 :	  421d2c:       pop    %rbp
    0.00 :	  421d2d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004275e4 <Edge* std::__addressof<Edge>(Edge&)>:
         :	_ZSt11__addressofI4EdgeEPT_RS1_():
         :	   *  @brief Same as C++11 std::addressof
         :	   *  @ingroup utilities
         :	   */
         :	  template<typename _Tp>
         :	    inline _Tp*
         :	    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    0.00 :	  4275e4:       push   %rbp
    0.00 :	  4275e5:       mov    %rsp,%rbp
  100.00 :	  4275e8:       mov    %rdi,-0x8(%rbp)
         :	    {
         :	      return reinterpret_cast<_Tp*>
         :	        (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    0.00 :	  4275ec:       mov    -0x8(%rbp),%rax
         :	    }
    0.00 :	  4275f0:       pop    %rbp
    0.00 :	  4275f1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428250 <double* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<double*>, double*>(std::move_iterator<double*>, std::move_iterator<double*>, double*)>:
         :	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_():
         :	  template<>
         :	    struct __uninitialized_copy<true>
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  428250:       push   %rbp
    0.00 :	  428251:       mov    %rsp,%rbp
   50.00 :	  428254:       sub    $0x20,%rsp
    0.00 :	  428258:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42825c:       mov    %rsi,-0x20(%rbp)
    0.00 :	  428260:       mov    %rdx,-0x18(%rbp)
         :	                      _ForwardIterator __result)
         :	        { return std::copy(__first, __last, __result); }
    0.00 :	  428264:       mov    -0x18(%rbp),%rdx
    0.00 :	  428268:       mov    -0x20(%rbp),%rcx
    0.00 :	  42826c:       mov    -0x10(%rbp),%rax
    0.00 :	  428270:       mov    %rcx,%rsi
    0.00 :	  428273:       mov    %rax,%rdi
    0.00 :	  428276:       callq  428a6c <double* std::copy<std::move_iterator<double*>, double*>(std::move_iterator<double*>, std::move_iterator<double*>, double*)>
    0.00 :	  42827b:       leaveq
   50.00 :	  42827c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421751 <Edge&& std::forward<Edge>(std::remove_reference<Edge>::type&)>:
         :	_ZSt7forwardI4EdgeEOT_RNSt16remove_referenceIS1_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    0.00 :	  421751:       push   %rbp
  100.00 :	  421752:       mov    %rsp,%rbp
    0.00 :	  421755:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
    0.00 :	  421759:       mov    -0x8(%rbp),%rax
    0.00 :	  42175d:       pop    %rbp
    0.00 :	  42175e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420228 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::insert(Edge&&)>:
         :	_ZNSt3setI4EdgeSt4lessIS0_ESaIS0_EE6insertEOS0_():
         :	        return std::pair<iterator, bool>(__p.first, __p.second);
         :	      }
         :
         :	#if __cplusplus >= 201103L
         :	      std::pair<iterator, bool>
         :	      insert(value_type&& __x)
   50.00 :	  420228:       push   %rbp
    0.00 :	  420229:       mov    %rsp,%rbp
    0.00 :	  42022c:       push   %rbx
    0.00 :	  42022d:       sub    $0x38,%rsp
    0.00 :	  420231:       mov    %rdi,-0x38(%rbp)
    0.00 :	  420235:       mov    %rsi,-0x40(%rbp)
         :	      {
         :	        std::pair<typename _Rep_type::iterator, bool> __p =
         :	          _M_t._M_insert_unique(std::move(__x));
    0.00 :	  420239:       mov    -0x40(%rbp),%rax
    0.00 :	  42023d:       mov    %rax,%rdi
    0.00 :	  420240:       callq  41fe84 <std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&)>
    0.00 :	  420245:       mov    %rax,%rdx
    0.00 :	  420248:       mov    -0x38(%rbp),%rax
    0.00 :	  42024c:       mov    %rdx,%rsi
    0.00 :	  42024f:       mov    %rax,%rdi
    0.00 :	  420252:       callq  421d7e <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)>
    0.00 :	  420257:       mov    %rax,%rcx
    0.00 :	  42025a:       mov    %edx,%eax
    0.00 :	  42025c:       mov    %rcx,-0x30(%rbp)
    0.00 :	  420260:       mov    %eax,-0x28(%rbp)
         :	        return std::pair<iterator, bool>(__p.first, __p.second);
    0.00 :	  420263:       lea    -0x30(%rbp),%rax
    0.00 :	  420267:       lea    0x8(%rax),%rdx
    0.00 :	  42026b:       lea    -0x30(%rbp),%rcx
    0.00 :	  42026f:       lea    -0x20(%rbp),%rax
    0.00 :	  420273:       mov    %rcx,%rsi
    0.00 :	  420276:       mov    %rax,%rdi
    0.00 :	  420279:       callq  4201de <std::pair<std::_Rb_tree_const_iterator<Edge>, bool>::pair<std::_Rb_tree_iterator<Edge>&, bool&, void>(std::_Rb_tree_iterator<Edge>&, bool&)>
    0.00 :	  42027e:       mov    -0x20(%rbp),%rax
    0.00 :	  420282:       mov    -0x18(%rbp),%rdx
   50.00 :	  420286:       mov    %rax,%rcx
    0.00 :	  420289:       mov    %rdx,%rbx
    0.00 :	  42028c:       jmp    420296 <std::set<Edge, std::less<Edge>, std::allocator<Edge> >::insert(Edge&&)+0x6e>
    0.00 :	  42028e:       mov    %rax,%rdi
    0.00 :	  420291:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  420296:       mov    %rcx,%rax
    0.00 :	  420299:       add    $0x38,%rsp
    0.00 :	  42029d:       pop    %rbx
    0.00 :	  42029e:       pop    %rbp
    0.00 :	  42029f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042016a <std::set<int, std::less<int>, std::allocator<int> >::count(int const&) const>:
         :	_ZNKSt3setIiSt4lessIiESaIiEE5countERKi():
         :	       *
         :	       *  This function only makes sense for multisets; for set the result will
         :	       *  either be 0 (not present) or 1 (present).
         :	       */
         :	      size_type
         :	      count(const key_type& __x) const
    0.00 :	  42016a:       push   %rbp
    0.00 :	  42016b:       mov    %rsp,%rbp
   50.00 :	  42016e:       sub    $0x30,%rsp
    0.00 :	  420172:       mov    %rdi,-0x28(%rbp)
    0.00 :	  420176:       mov    %rsi,-0x30(%rbp)
         :	      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
    0.00 :	  42017a:       mov    -0x28(%rbp),%rax
    0.00 :	  42017e:       mov    %rax,%rdi
    0.00 :	  420181:       callq  421c1c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::end() const>
    0.00 :	  420186:       mov    %rax,-0x20(%rbp)
    0.00 :	  42018a:       mov    -0x28(%rbp),%rax
    0.00 :	  42018e:       mov    -0x30(%rbp),%rdx
    0.00 :	  420192:       mov    %rdx,%rsi
    0.00 :	  420195:       mov    %rax,%rdi
    0.00 :	  420198:       callq  421c46 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const>
    0.00 :	  42019d:       mov    %rax,-0x10(%rbp)
    0.00 :	  4201a1:       lea    -0x20(%rbp),%rdx
    0.00 :	  4201a5:       lea    -0x10(%rbp),%rax
    0.00 :	  4201a9:       mov    %rdx,%rsi
    0.00 :	  4201ac:       mov    %rax,%rdi
    0.00 :	  4201af:       callq  421d0c <std::_Rb_tree_const_iterator<int>::operator==(std::_Rb_tree_const_iterator<int> const&) const>
    0.00 :	  4201b4:       test   %al,%al
    0.00 :	  4201b6:       je     4201bf <std::set<int, std::less<int>, std::allocator<int> >::count(int const&) const+0x55>
    0.00 :	  4201b8:       mov    $0x0,%eax
    0.00 :	  4201bd:       jmp    4201ce <std::set<int, std::less<int>, std::allocator<int> >::count(int const&) const+0x64>
    0.00 :	  4201bf:       mov    $0x1,%eax
    0.00 :	  4201c4:       jmp    4201ce <std::set<int, std::less<int>, std::allocator<int> >::count(int const&) const+0x64>
    0.00 :	  4201c6:       mov    %rax,%rdi
    0.00 :	  4201c9:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  4201ce:       leaveq
   50.00 :	  4201cf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fe5e <std::vector<double, std::allocator<double> >::size() const>:
         :	_ZNKSt6vectorIdSaIdEE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.00 :	  41fe5e:       push   %rbp
    0.00 :	  41fe5f:       mov    %rsp,%rbp
    0.00 :	  41fe62:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   50.00 :	  41fe66:       mov    -0x8(%rbp),%rax
    0.00 :	  41fe6a:       mov    0x8(%rax),%rax
   50.00 :	  41fe6e:       mov    %rax,%rdx
    0.00 :	  41fe71:       mov    -0x8(%rbp),%rax
    0.00 :	  41fe75:       mov    (%rax),%rax
    0.00 :	  41fe78:       sub    %rax,%rdx
    0.00 :	  41fe7b:       mov    %rdx,%rax
    0.00 :	  41fe7e:       sar    $0x3,%rax
    0.00 :	  41fe82:       pop    %rbp
    0.00 :	  41fe83:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042293c <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)>:
         :	_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    0.00 :	  42293c:       push   %rbp
    0.00 :	  42293d:       mov    %rsp,%rbp
    0.00 :	  422940:       push   %rbx
    0.00 :	  422941:       sub    $0x38,%rsp
    0.00 :	  422945:       mov    %rdi,-0x38(%rbp)
    0.00 :	  422949:       mov    %rsi,-0x40(%rbp)
         :	      _M_emplace_back_aux(_Args&&... __args)
         :	      {
         :	        const size_type __len =
         :	          _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
    0.00 :	  42294d:       mov    -0x38(%rbp),%rax
    0.00 :	  422951:       mov    $0x433a5f,%edx
    0.00 :	  422956:       mov    $0x1,%esi
    0.00 :	  42295b:       mov    %rax,%rdi
    0.00 :	  42295e:       callq  4235ba <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const>
    0.00 :	  422963:       mov    %rax,-0x20(%rbp)
         :	        pointer __new_start(this->_M_allocate(__len));
    0.00 :	  422967:       mov    -0x38(%rbp),%rax
    0.00 :	  42296b:       mov    -0x20(%rbp),%rdx
    0.00 :	  42296f:       mov    %rdx,%rsi
    0.00 :	  422972:       mov    %rax,%rdi
    0.00 :	  422975:       callq  423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    0.00 :	  42297a:       mov    %rax,-0x28(%rbp)
         :	        pointer __new_finish(__new_start);
    0.00 :	  42297e:       mov    -0x28(%rbp),%rax
    0.00 :	  422982:       mov    %rax,-0x18(%rbp)
         :	        __try
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  422986:       mov    -0x40(%rbp),%rax
    0.00 :	  42298a:       mov    %rax,%rdi
    0.00 :	  42298d:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  422992:       mov    %rax,%rbx
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  422995:       mov    -0x38(%rbp),%rax
    0.00 :	  422999:       mov    %rax,%rdi
    0.00 :	  42299c:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  4229a1:       lea    0x0(,%rax,4),%rdx
    0.00 :	  4229a9:       mov    -0x28(%rbp),%rax
    0.00 :	  4229ad:       lea    (%rdx,%rax,1),%rcx
    0.00 :	  4229b1:       mov    -0x38(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  4229b5:       mov    %rbx,%rdx
    0.00 :	  4229b8:       mov    %rcx,%rsi
    0.00 :	  4229bb:       mov    %rax,%rdi
    0.00 :	  4229be:       callq  422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
         :	            __new_finish = 0;
    0.00 :	  4229c3:       movq   $0x0,-0x18(%rbp)
         :
         :	            __new_finish
         :	              = std::__uninitialized_move_if_noexcept_a
         :	              (this->_M_impl._M_start, this->_M_impl._M_finish,
         :	               __new_start, _M_get_Tp_allocator());
    0.00 :	  4229cb:       mov    -0x38(%rbp),%rax
    0.00 :	  4229cf:       mov    %rax,%rdi
    0.00 :	  4229d2:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  4229d7:       mov    %rax,%rcx
    0.00 :	  4229da:       mov    -0x38(%rbp),%rax
    0.00 :	  4229de:       mov    0x8(%rax),%rsi
    0.00 :	  4229e2:       mov    -0x38(%rbp),%rax
    0.00 :	  4229e6:       mov    (%rax),%rax
         :	            __new_finish
    0.00 :	  4229e9:       mov    -0x28(%rbp),%rdx
    0.00 :	  4229ed:       mov    %rax,%rdi
    0.00 :	  4229f0:       callq  4236bc <int* std::__uninitialized_move_if_noexcept_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&)>
    0.00 :	  4229f5:       mov    %rax,-0x18(%rbp)
         :
         :	            ++__new_finish;
    0.00 :	  4229f9:       addq   $0x4,-0x18(%rbp)
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
         :	            _M_deallocate(__new_start, __len);
         :	            __throw_exception_again;
         :	          }
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator());
   50.00 :	  4229fe:       mov    -0x38(%rbp),%rax
    0.00 :	  422a02:       mov    %rax,%rdi
    0.00 :	  422a05:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  422a0a:       mov    %rax,%rdx
    0.00 :	  422a0d:       mov    -0x38(%rbp),%rax
    0.00 :	  422a11:       mov    0x8(%rax),%rcx
    0.00 :	  422a15:       mov    -0x38(%rbp),%rax
    0.00 :	  422a19:       mov    (%rax),%rax
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  422a1c:       mov    %rcx,%rsi
    0.00 :	  422a1f:       mov    %rax,%rdi
    0.00 :	  422a22:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	        _M_deallocate(this->_M_impl._M_start,
         :	                      this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start);
    0.00 :	  422a27:       mov    -0x38(%rbp),%rax
    0.00 :	  422a2b:       mov    0x10(%rax),%rax
    0.00 :	  422a2f:       mov    %rax,%rdx
    0.00 :	  422a32:       mov    -0x38(%rbp),%rax
    0.00 :	  422a36:       mov    (%rax),%rax
    0.00 :	  422a39:       sub    %rax,%rdx
   50.00 :	  422a3c:       mov    %rdx,%rax
    0.00 :	  422a3f:       sar    $0x2,%rax
    0.00 :	  422a43:       mov    %rax,%rdx
    0.00 :	  422a46:       mov    -0x38(%rbp),%rax
    0.00 :	  422a4a:       mov    (%rax),%rcx
    0.00 :	  422a4d:       mov    -0x38(%rbp),%rax
         :	        _M_deallocate(this->_M_impl._M_start,
    0.00 :	  422a51:       mov    %rcx,%rsi
    0.00 :	  422a54:       mov    %rax,%rdi
    0.00 :	  422a57:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	        this->_M_impl._M_start = __new_start;
    0.00 :	  422a5c:       mov    -0x38(%rbp),%rax
    0.00 :	  422a60:       mov    -0x28(%rbp),%rdx
    0.00 :	  422a64:       mov    %rdx,(%rax)
         :	        this->_M_impl._M_finish = __new_finish;
    0.00 :	  422a67:       mov    -0x38(%rbp),%rax
    0.00 :	  422a6b:       mov    -0x18(%rbp),%rdx
    0.00 :	  422a6f:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :	  422a73:       mov    -0x20(%rbp),%rax
    0.00 :	  422a77:       lea    0x0(,%rax,4),%rdx
    0.00 :	  422a7f:       mov    -0x28(%rbp),%rax
    0.00 :	  422a83:       add    %rax,%rdx
    0.00 :	  422a86:       mov    -0x38(%rbp),%rax
    0.00 :	  422a8a:       mov    %rdx,0x10(%rax)
    0.00 :	  422a8e:       jmpq   422b1f <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1e3>
    0.00 :	  422a93:       mov    %rax,%rbx
         :	        __catch(...)
    0.00 :	  422a96:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  422a9b:       mov    %rbx,%rax
    0.00 :	  422a9e:       mov    %rax,%rdi
    0.00 :	  422aa1:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  422aa6:       mov    %rax,%rdi
    0.00 :	  422aa9:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            if (!__new_finish)
    0.00 :	  422aae:       cmpq   $0x0,-0x18(%rbp)
    0.00 :	  422ab3:       jne    422ae1 <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1a5>
         :	              _Alloc_traits::destroy(this->_M_impl, __new_start + size());
    0.00 :	  422ab5:       mov    -0x38(%rbp),%rax
    0.00 :	  422ab9:       mov    %rax,%rdi
    0.00 :	  422abc:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  422ac1:       lea    0x0(,%rax,4),%rdx
    0.00 :	  422ac9:       mov    -0x28(%rbp),%rax
    0.00 :	  422acd:       add    %rax,%rdx
    0.00 :	  422ad0:       mov    -0x38(%rbp),%rax
    0.00 :	  422ad4:       mov    %rdx,%rsi
    0.00 :	  422ad7:       mov    %rax,%rdi
    0.00 :	  422ada:       callq  425026 <void std::allocator_traits<std::allocator<int> >::destroy<int>(std::allocator<int>&, int*)>
    0.00 :	  422adf:       jmp    422b03 <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1c7>
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
    0.00 :	  422ae1:       mov    -0x38(%rbp),%rax
    0.00 :	  422ae5:       mov    %rax,%rdi
    0.00 :	  422ae8:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  422aed:       mov    %rax,%rdx
    0.00 :	  422af0:       mov    -0x18(%rbp),%rcx
    0.00 :	  422af4:       mov    -0x28(%rbp),%rax
    0.00 :	  422af8:       mov    %rcx,%rsi
    0.00 :	  422afb:       mov    %rax,%rdi
    0.00 :	  422afe:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	            _M_deallocate(__new_start, __len);
    0.00 :	  422b03:       mov    -0x38(%rbp),%rax
    0.00 :	  422b07:       mov    -0x20(%rbp),%rdx
    0.00 :	  422b0b:       mov    -0x28(%rbp),%rcx
    0.00 :	  422b0f:       mov    %rcx,%rsi
    0.00 :	  422b12:       mov    %rax,%rdi
    0.00 :	  422b15:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	            __throw_exception_again;
    0.00 :	  422b1a:       callq  41db40 <__cxa_rethrow@plt>
         :	      }
    0.00 :	  422b1f:       add    $0x38,%rsp
    0.00 :	  422b23:       pop    %rbx
    0.00 :	  422b24:       pop    %rbp
    0.00 :	  422b25:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041ebee <Edge::Edge(int, int, double)>:
         :	_ZN4EdgeC2Eiid():
         :	typedef double Tval;
         :
         :	struct Edge{
         :	    Tind r, c;
         :	    Tval w;
         :	    Edge(Tind r, Tind c, Tval w = 1):r(r), c(c), w(w)
    0.00 :	  41ebee:       push   %rbp
    0.00 :	  41ebef:       mov    %rsp,%rbp
    0.00 :	  41ebf2:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41ebf6:       mov    %esi,-0xc(%rbp)
    0.00 :	  41ebf9:       mov    %edx,-0x10(%rbp)
    0.00 :	  41ebfc:       vmovsd %xmm0,-0x18(%rbp)
    0.00 :	  41ec01:       mov    -0x8(%rbp),%rax
    0.00 :	  41ec05:       mov    -0xc(%rbp),%edx
    0.00 :	  41ec08:       mov    %edx,(%rax)
    0.00 :	  41ec0a:       mov    -0x8(%rbp),%rax
    0.00 :	  41ec0e:       mov    -0x10(%rbp),%edx
    0.00 :	  41ec11:       mov    %edx,0x4(%rax)
    0.00 :	  41ec14:       mov    -0x8(%rbp),%rdx
    0.00 :	  41ec18:       mov    -0x18(%rbp),%rax
    0.00 :	  41ec1c:       mov    %rax,0x8(%rdx)
         :	        // {
         :	        //     int tmp = r;
         :	        //     r = c;
         :	        //     c = tmp;
         :	        // }
         :	    }
  100.00 :	  41ec20:       pop    %rbp
    0.00 :	  41ec21:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041f6a0 <LLord::LLord(int, int, double)>:
         :	_ZN5LLordC2Eiid():
         :	struct LLord{
         :	    Tind row;
         :	    Tind next;
         :	    Tval val;
         :	    LLord(){}
         :	    LLord(Tind row, Tind next, Tval val):row(row), next(next), val(val){}
    0.00 :	  41f6a0:       push   %rbp
    0.00 :	  41f6a1:       mov    %rsp,%rbp
    0.00 :	  41f6a4:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41f6a8:       mov    %esi,-0xc(%rbp)
    0.00 :	  41f6ab:       mov    %edx,-0x10(%rbp)
    0.00 :	  41f6ae:       vmovsd %xmm0,-0x18(%rbp)
    0.00 :	  41f6b3:       mov    -0x8(%rbp),%rax
    0.00 :	  41f6b7:       mov    -0xc(%rbp),%edx
    0.00 :	  41f6ba:       mov    %edx,(%rax)
    0.00 :	  41f6bc:       mov    -0x8(%rbp),%rax
    0.00 :	  41f6c0:       mov    -0x10(%rbp),%edx
    0.00 :	  41f6c3:       mov    %edx,0x4(%rax)
    0.00 :	  41f6c6:       mov    -0x8(%rbp),%rdx
    0.00 :	  41f6ca:       mov    -0x18(%rbp),%rax
    0.00 :	  41f6ce:       mov    %rax,0x8(%rdx)
    0.00 :	  41f6d2:       pop    %rbp
  100.00 :	  41f6d3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041ec7c <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)>:
         :	_ZN12SparseMatrixC2ESt6vectorI4EdgeSaIS1_EEl():
         :	    long colnum;
         :	    long elems;
         :	    // long cols;
         :	    // long rows;
         :	    SparseMatrix (){}
         :	    SparseMatrix(std::vector<Edge> edges, long colnum)//suppose input edges to be sorted and x > y
    0.00 :	  41ec7c:       push   %rbp
    0.00 :	  41ec7d:       mov    %rsp,%rbp
    0.00 :	  41ec80:       push   %rbx
    0.00 :	  41ec81:       sub    $0x78,%rsp
    0.00 :	  41ec85:       mov    %rdi,-0x68(%rbp)
    0.00 :	  41ec89:       mov    %rsi,-0x70(%rbp)
    0.00 :	  41ec8d:       mov    %rdx,-0x78(%rbp)
         :	    {
    0.00 :	  41ec91:       mov    -0x68(%rbp),%rax
    0.00 :	  41ec95:       mov    %rax,%rdi
    0.00 :	  41ec98:       callq  41fa12 <std::vector<double, std::allocator<double> >::vector()>
    0.00 :	  41ec9d:       mov    -0x68(%rbp),%rax
    0.00 :	  41eca1:       add    $0x18,%rax
    0.00 :	  41eca5:       mov    %rax,%rdi
    0.00 :	  41eca8:       callq  41fa70 <std::vector<int, std::allocator<int> >::vector()>
    0.00 :	  41ecad:       mov    -0x68(%rbp),%rax
    0.00 :	  41ecb1:       add    $0x30,%rax
    0.00 :	  41ecb5:       mov    %rax,%rdi
    0.00 :	  41ecb8:       callq  41fa70 <std::vector<int, std::allocator<int> >::vector()>
    0.00 :	  41ecbd:       mov    -0x68(%rbp),%rax
    0.00 :	  41ecc1:       add    $0x48,%rax
    0.00 :	  41ecc5:       mov    %rax,%rdi
    0.00 :	  41ecc8:       callq  41fa12 <std::vector<double, std::allocator<double> >::vector()>
         :	        this->colnum = colnum;
    0.00 :	  41eccd:       mov    -0x68(%rbp),%rax
    0.00 :	  41ecd1:       mov    -0x78(%rbp),%rdx
    0.00 :	  41ecd5:       mov    %rdx,0x60(%rax)
         :	        std::sort(edges.begin(), edges.end(), cmp_edge);
    0.00 :	  41ecd9:       mov    -0x70(%rbp),%rax
    0.00 :	  41ecdd:       mov    %rax,%rdi
    0.00 :	  41ece0:       callq  41faf4 <std::vector<Edge, std::allocator<Edge> >::end()>
    0.00 :	  41ece5:       mov    %rax,%rbx
    0.00 :	  41ece8:       mov    -0x70(%rbp),%rax
    0.00 :	  41ecec:       mov    %rax,%rdi
    0.00 :	  41ecef:       callq  41face <std::vector<Edge, std::allocator<Edge> >::begin()>
    0.00 :	  41ecf4:       mov    $0x431a36,%edx
    0.00 :	  41ecf9:       mov    %rbx,%rsi
    0.00 :	  41ecfc:       mov    %rax,%rdi
    0.00 :	  41ecff:       callq  41fb1d <void std::sort<__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&)>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, bool (*)(Edge const&, Edge const&))>
         :	        long len = edges.size();
    0.00 :	  41ed04:       mov    -0x70(%rbp),%rax
    0.00 :	  41ed08:       mov    %rax,%rdi
    0.00 :	  41ed0b:       callq  41fb9a <std::vector<Edge, std::allocator<Edge> >::size() const>
    0.00 :	  41ed10:       mov    %rax,-0x30(%rbp)
         :	        vals.resize(len + colnum);
    0.00 :	  41ed14:       mov    -0x78(%rbp),%rax
    0.00 :	  41ed18:       mov    -0x30(%rbp),%rdx
    0.00 :	  41ed1c:       add    %rdx,%rax
    0.00 :	  41ed1f:       mov    %rax,%rdx
    0.00 :	  41ed22:       mov    -0x68(%rbp),%rax
    0.00 :	  41ed26:       mov    %rdx,%rsi
    0.00 :	  41ed29:       mov    %rax,%rdi
    0.00 :	  41ed2c:       callq  41fbc0 <std::vector<double, std::allocator<double> >::resize(unsigned long)>
         :	        rows.resize(len + colnum);
    0.00 :	  41ed31:       mov    -0x78(%rbp),%rax
    0.00 :	  41ed35:       mov    -0x30(%rbp),%rdx
    0.00 :	  41ed39:       add    %rdx,%rax
    0.00 :	  41ed3c:       mov    -0x68(%rbp),%rdx
    0.00 :	  41ed40:       add    $0x18,%rdx
    0.00 :	  41ed44:       mov    %rax,%rsi
    0.00 :	  41ed47:       mov    %rdx,%rdi
    0.00 :	  41ed4a:       callq  41fc46 <std::vector<int, std::allocator<int> >::resize(unsigned long)>
         :	        colptrs.resize(colnum + 1);
    0.00 :	  41ed4f:       mov    -0x78(%rbp),%rax
    0.00 :	  41ed53:       add    $0x1,%rax
    0.00 :	  41ed57:       mov    -0x68(%rbp),%rdx
    0.00 :	  41ed5b:       add    $0x30,%rdx
    0.00 :	  41ed5f:       mov    %rax,%rsi
    0.00 :	  41ed62:       mov    %rdx,%rdi
    0.00 :	  41ed65:       callq  41fc46 <std::vector<int, std::allocator<int> >::resize(unsigned long)>
         :	        degs = std::vector<Tval>(colnum, 0);
    0.00 :	  41ed6a:       lea    -0x39(%rbp),%rax
    0.00 :	  41ed6e:       mov    %rax,%rdi
    0.00 :	  41ed71:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  41ed76:       mov    $0x0,%eax
    0.00 :	  41ed7b:       mov    %rax,-0x38(%rbp)
    0.00 :	  41ed7f:       mov    -0x78(%rbp),%rsi
    0.00 :	  41ed83:       lea    -0x39(%rbp),%rcx
    0.00 :	  41ed87:       lea    -0x38(%rbp),%rdx
    0.00 :	  41ed8b:       lea    -0x60(%rbp),%rax
    0.00 :	  41ed8f:       mov    %rax,%rdi
    0.00 :	  41ed92:       callq  41fd00 <std::vector<double, std::allocator<double> >::vector(unsigned long, double const&, std::allocator<double> const&)>
    0.00 :	  41ed97:       mov    -0x68(%rbp),%rax
    0.00 :	  41ed9b:       lea    0x48(%rax),%rdx
    0.00 :	  41ed9f:       lea    -0x60(%rbp),%rax
    0.00 :	  41eda3:       mov    %rax,%rsi
    0.00 :	  41eda6:       mov    %rdx,%rdi
    0.00 :	  41eda9:       callq  41fd78 <std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> >&&)>
    0.00 :	  41edae:       lea    -0x60(%rbp),%rax
    0.00 :	  41edb2:       mov    %rax,%rdi
    0.00 :	  41edb5:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  41edba:       lea    -0x39(%rbp),%rax
    0.00 :	  41edbe:       mov    %rax,%rdi
    0.00 :	  41edc1:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	        long idx = 0;
    0.00 :	  41edc6:       movq   $0x0,-0x18(%rbp)
         :	        //     {
         :	        //         degs[i] += edges[idx++].w;
         :	        //     }
         :	        // }
         :
         :	        idx = 0;
    0.00 :	  41edce:       movq   $0x0,-0x18(%rbp)
         :	        long idx_elem = 0;
    0.00 :	  41edd6:       movq   $0x0,-0x20(%rbp)
         :	        for (int i = 0; i < colnum; i++)
    0.00 :	  41edde:       movl   $0x0,-0x24(%rbp)
    0.00 :	  41ede5:       jmpq   41eeb2 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x236>
         :	        {
         :	            colptrs[i] = idx_elem;
    0.00 :	  41edea:       mov    -0x24(%rbp),%eax
    0.00 :	  41eded:       cltq
    0.00 :	  41edef:       mov    -0x68(%rbp),%rdx
    0.00 :	  41edf3:       add    $0x30,%rdx
    0.00 :	  41edf7:       mov    %rax,%rsi
    0.00 :	  41edfa:       mov    %rdx,%rdi
    0.00 :	  41edfd:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  41ee02:       mov    -0x20(%rbp),%rdx
    0.00 :	  41ee06:       mov    %edx,(%rax)
         :	            while (idx < len && edges[idx].c == i)
    0.00 :	  41ee08:       jmp    41ee75 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x1f9>
         :	            {
         :	                vals[idx_elem] = edges[idx].w;
    0.00 :	  41ee0a:       mov    -0x20(%rbp),%rdx
    0.00 :	  41ee0e:       mov    -0x68(%rbp),%rax
    0.00 :	  41ee12:       mov    %rdx,%rsi
    0.00 :	  41ee15:       mov    %rax,%rdi
  100.00 :	  41ee18:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  41ee1d:       mov    %rax,%rbx
    0.00 :	  41ee20:       mov    -0x18(%rbp),%rdx
    0.00 :	  41ee24:       mov    -0x70(%rbp),%rax
    0.00 :	  41ee28:       mov    %rdx,%rsi
    0.00 :	  41ee2b:       mov    %rax,%rdi
    0.00 :	  41ee2e:       callq  41fdda <std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long)>
    0.00 :	  41ee33:       mov    0x8(%rax),%rax
    0.00 :	  41ee37:       mov    %rax,(%rbx)
         :	                rows[idx_elem] = edges[idx].r;
    0.00 :	  41ee3a:       mov    -0x20(%rbp),%rax
    0.00 :	  41ee3e:       mov    -0x68(%rbp),%rdx
    0.00 :	  41ee42:       add    $0x18,%rdx
    0.00 :	  41ee46:       mov    %rax,%rsi
    0.00 :	  41ee49:       mov    %rdx,%rdi
    0.00 :	  41ee4c:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  41ee51:       mov    %rax,%rbx
    0.00 :	  41ee54:       mov    -0x18(%rbp),%rdx
    0.00 :	  41ee58:       mov    -0x70(%rbp),%rax
    0.00 :	  41ee5c:       mov    %rdx,%rsi
    0.00 :	  41ee5f:       mov    %rax,%rdi
    0.00 :	  41ee62:       callq  41fdda <std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long)>
    0.00 :	  41ee67:       mov    (%rax),%eax
    0.00 :	  41ee69:       mov    %eax,(%rbx)
         :	                idx++;
    0.00 :	  41ee6b:       addq   $0x1,-0x18(%rbp)
         :	                idx_elem++;
    0.00 :	  41ee70:       addq   $0x1,-0x20(%rbp)
         :	            while (idx < len && edges[idx].c == i)
    0.00 :	  41ee75:       mov    -0x18(%rbp),%rax
    0.00 :	  41ee79:       cmp    -0x30(%rbp),%rax
    0.00 :	  41ee7d:       jge    41eea1 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x225>
    0.00 :	  41ee7f:       mov    -0x18(%rbp),%rdx
    0.00 :	  41ee83:       mov    -0x70(%rbp),%rax
    0.00 :	  41ee87:       mov    %rdx,%rsi
    0.00 :	  41ee8a:       mov    %rax,%rdi
    0.00 :	  41ee8d:       callq  41fdda <std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long)>
    0.00 :	  41ee92:       mov    0x4(%rax),%eax
    0.00 :	  41ee95:       cmp    -0x24(%rbp),%eax
    0.00 :	  41ee98:       jne    41eea1 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x225>
    0.00 :	  41ee9a:       mov    $0x1,%eax
    0.00 :	  41ee9f:       jmp    41eea6 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x22a>
    0.00 :	  41eea1:       mov    $0x0,%eax
    0.00 :	  41eea6:       test   %al,%al
    0.00 :	  41eea8:       jne    41ee0a <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x18e>
         :	        for (int i = 0; i < colnum; i++)
    0.00 :	  41eeae:       addl   $0x1,-0x24(%rbp)
    0.00 :	  41eeb2:       mov    -0x24(%rbp),%eax
    0.00 :	  41eeb5:       cltq
    0.00 :	  41eeb7:       cmp    -0x78(%rbp),%rax
    0.00 :	  41eebb:       jl     41edea <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x16e>
         :	            //     vals[idx_elem] = degs[i];
         :	            //     rows[idx_elem] = i;
         :	            //     idx_elem++;
         :	            // }
         :	        }
         :	        colptrs[colnum] = idx_elem;
    0.00 :	  41eec1:       mov    -0x78(%rbp),%rax
    0.00 :	  41eec5:       mov    -0x68(%rbp),%rdx
    0.00 :	  41eec9:       add    $0x30,%rdx
    0.00 :	  41eecd:       mov    %rax,%rsi
    0.00 :	  41eed0:       mov    %rdx,%rdi
    0.00 :	  41eed3:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  41eed8:       mov    -0x20(%rbp),%rdx
    0.00 :	  41eedc:       mov    %edx,(%rax)
         :	        this->elems = idx_elem;
    0.00 :	  41eede:       mov    -0x68(%rbp),%rax
    0.00 :	  41eee2:       mov    -0x20(%rbp),%rdx
    0.00 :	  41eee6:       mov    %rdx,0x68(%rax)
    0.00 :	  41eeea:       jmp    41ef56 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x2da>
    0.00 :	  41eeec:       mov    %rax,%rbx
         :	        degs = std::vector<Tval>(colnum, 0);
    0.00 :	  41eeef:       lea    -0x39(%rbp),%rax
    0.00 :	  41eef3:       mov    %rax,%rdi
    0.00 :	  41eef6:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  41eefb:       jmp    41ef00 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x284>
    0.00 :	  41eefd:       mov    %rax,%rbx
         :	    {
    0.00 :	  41ef00:       mov    -0x68(%rbp),%rax
    0.00 :	  41ef04:       add    $0x48,%rax
    0.00 :	  41ef08:       mov    %rax,%rdi
    0.00 :	  41ef0b:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  41ef10:       jmp    41ef15 <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x299>
    0.00 :	  41ef12:       mov    %rax,%rbx
    0.00 :	  41ef15:       mov    -0x68(%rbp),%rax
    0.00 :	  41ef19:       add    $0x30,%rax
    0.00 :	  41ef1d:       mov    %rax,%rdi
    0.00 :	  41ef20:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41ef25:       jmp    41ef2a <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x2ae>
    0.00 :	  41ef27:       mov    %rax,%rbx
    0.00 :	  41ef2a:       mov    -0x68(%rbp),%rax
    0.00 :	  41ef2e:       add    $0x18,%rax
    0.00 :	  41ef32:       mov    %rax,%rdi
    0.00 :	  41ef35:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41ef3a:       jmp    41ef3f <SparseMatrix::SparseMatrix(std::vector<Edge, std::allocator<Edge> >, long)+0x2c3>
    0.00 :	  41ef3c:       mov    %rax,%rbx
    0.00 :	  41ef3f:       mov    -0x68(%rbp),%rax
    0.00 :	  41ef43:       mov    %rax,%rdi
    0.00 :	  41ef46:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  41ef4b:       mov    %rbx,%rax
    0.00 :	  41ef4e:       mov    %rax,%rdi
    0.00 :	  41ef51:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  41ef56:       add    $0x78,%rsp
    0.00 :	  41ef5a:       pop    %rbx
    0.00 :	  41ef5b:       pop    %rbp
    0.00 :	  41ef5c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004275c4 <__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPK4EdgeSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
    0.00 :	  4275c4:       push   %rbp
    0.00 :	  4275c5:       mov    %rsp,%rbp
    0.00 :	  4275c8:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    0.00 :	  4275cc:       mov    -0x8(%rbp),%rax
    0.00 :	  4275d0:       mov    (%rax),%rax
    0.00 :	  4275d3:       lea    0x10(%rax),%rdx
    0.00 :	  4275d7:       mov    -0x8(%rbp),%rax
    0.00 :	  4275db:       mov    %rdx,(%rax)
         :	        return *this;
    0.00 :	  4275de:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  4275e2:       pop    %rbp
  100.00 :	  4275e3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423226 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator+(long const&) const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP4EdgeSt6vectorIS1_SaIS1_EEEplERKl():
         :	      __normal_iterator&
         :	      operator+=(const difference_type& __n)
         :	      { _M_current += __n; return *this; }
         :
         :	      __normal_iterator
         :	      operator+(const difference_type& __n) const
    0.00 :	  423226:       push   %rbp
    0.00 :	  423227:       mov    %rsp,%rbp
    0.00 :	  42322a:       sub    $0x20,%rsp
    0.00 :	  42322e:       mov    %rdi,-0x18(%rbp)
    0.00 :	  423232:       mov    %rsi,-0x20(%rbp)
         :	      { return __normal_iterator(_M_current + __n); }
    0.00 :	  423236:       mov    -0x18(%rbp),%rax
    0.00 :	  42323a:       mov    (%rax),%rdx
    0.00 :	  42323d:       mov    -0x20(%rbp),%rax
    0.00 :	  423241:       mov    (%rax),%rax
    0.00 :	  423244:       shl    $0x4,%rax
    0.00 :	  423248:       add    %rdx,%rax
    0.00 :	  42324b:       mov    %rax,-0x8(%rbp)
    0.00 :	  42324f:       lea    -0x8(%rbp),%rdx
    0.00 :	  423253:       lea    -0x10(%rbp),%rax
    0.00 :	  423257:       mov    %rdx,%rsi
    0.00 :	  42325a:       mov    %rax,%rdi
    0.00 :	  42325d:       callq  420e86 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge* const&)>
    0.00 :	  423262:       mov    -0x10(%rbp),%rax
  100.00 :	  423266:       leaveq
    0.00 :	  423267:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004259ec <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP4EdgeSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
    0.00 :	  4259ec:       push   %rbp
    0.00 :	  4259ed:       mov    %rsp,%rbp
    0.00 :	  4259f0:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
  100.00 :	  4259f4:       mov    -0x8(%rbp),%rax
    0.00 :	  4259f8:       mov    (%rax),%rax
    0.00 :	  4259fb:       lea    0x10(%rax),%rdx
    0.00 :	  4259ff:       mov    -0x8(%rbp),%rax
    0.00 :	  425a03:       mov    %rdx,(%rax)
         :	        return *this;
    0.00 :	  425a06:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  425a0a:       pop    %rbp
    0.00 :	  425a0b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004272b2 <__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator--()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP4EdgeSt6vectorIS1_SaIS1_EEEmmEv():
         :	      operator++(int)
         :	      { return __normal_iterator(_M_current++); }
         :
         :	      // Bidirectional iterator requirements
         :	      __normal_iterator&
         :	      operator--()
    0.00 :	  4272b2:       push   %rbp
    0.00 :	  4272b3:       mov    %rsp,%rbp
    0.00 :	  4272b6:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        --_M_current;
    0.00 :	  4272ba:       mov    -0x8(%rbp),%rax
    0.00 :	  4272be:       mov    (%rax),%rax
    0.00 :	  4272c1:       lea    -0x10(%rax),%rdx
  100.00 :	  4272c5:       mov    -0x8(%rbp),%rax
    0.00 :	  4272c9:       mov    %rdx,(%rax)
         :	        return *this;
    0.00 :	  4272cc:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  4272d0:       pop    %rbp
    0.00 :	  4272d1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004279a2 <_ZN9__gnu_cxx13new_allocatorI5LLordE9constructIS1_IS1_EEEvPT_DpOT0_>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordE9constructIS1_IS1_EEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    0.00 :	  4279a2:       push   %rbp
    0.00 :	  4279a3:       mov    %rsp,%rbp
    0.00 :	  4279a6:       push   %rbx
    0.00 :	  4279a7:       sub    $0x28,%rsp
    0.00 :	  4279ab:       mov    %rdi,-0x18(%rbp)
  100.00 :	  4279af:       mov    %rsi,-0x20(%rbp)
    0.00 :	  4279b3:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  4279b7:       mov    -0x28(%rbp),%rax
    0.00 :	  4279bb:       mov    %rax,%rdi
    0.00 :	  4279be:       callq  422089 <LLord&& std::forward<LLord>(std::remove_reference<LLord>::type&)>
    0.00 :	  4279c3:       mov    %rax,%rbx
    0.00 :	  4279c6:       mov    -0x20(%rbp),%rax
    0.00 :	  4279ca:       mov    %rax,%rsi
    0.00 :	  4279cd:       mov    $0x10,%edi
    0.00 :	  4279d2:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  4279d7:       mov    %rax,%rcx
    0.00 :	  4279da:       test   %rcx,%rcx
    0.00 :	  4279dd:       je     4279ed <_ZN9__gnu_cxx13new_allocatorI5LLordE9constructIS1_IS1_EEEvPT_DpOT0_+0x4b>
    0.00 :	  4279df:       mov    (%rbx),%rax
    0.00 :	  4279e2:       mov    0x8(%rbx),%rdx
    0.00 :	  4279e6:       mov    %rax,(%rcx)
    0.00 :	  4279e9:       mov    %rdx,0x8(%rcx)
    0.00 :	  4279ed:       add    $0x28,%rsp
    0.00 :	  4279f1:       pop    %rbx
    0.00 :	  4279f2:       pop    %rbp
    0.00 :	  4279f3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425bb2 <__gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  425bb2:       push   %rbp
    0.00 :	  425bb3:       mov    %rsp,%rbp
    0.00 :	  425bb6:       sub    $0x20,%rsp
    0.00 :	  425bba:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425bbe:       mov    %rsi,-0x10(%rbp)
    0.00 :	  425bc2:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.00 :	  425bc6:       mov    -0x8(%rbp),%rax
    0.00 :	  425bca:       mov    %rax,%rdi
    0.00 :	  425bcd:       callq  427402 <__gnu_cxx::new_allocator<double>::max_size() const>
    0.00 :	  425bd2:       cmp    -0x10(%rbp),%rax
  100.00 :	  425bd6:       setb   %al
    0.00 :	  425bd9:       test   %al,%al
    0.00 :	  425bdb:       je     425be2 <__gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  425bdd:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :	  425be2:       mov    -0x10(%rbp),%rax
    0.00 :	  425be6:       shl    $0x3,%rax
    0.00 :	  425bea:       mov    %rax,%rdi
    0.00 :	  425bed:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.00 :	  425bf2:       leaveq
    0.00 :	  425bf3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427402 <__gnu_cxx::new_allocator<double>::max_size() const>:
         :	_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv():
         :	      void
         :	      deallocate(pointer __p, size_type)
         :	      { ::operator delete(__p); }
         :
         :	      size_type
         :	      max_size() const _GLIBCXX_USE_NOEXCEPT
  100.00 :	  427402:       push   %rbp
    0.00 :	  427403:       mov    %rsp,%rbp
    0.00 :	  427406:       mov    %rdi,-0x8(%rbp)
         :	      { return size_t(-1) / sizeof(_Tp); }
    0.00 :	  42740a:       movabs $0x1fffffffffffffff,%rax
    0.00 :	  427414:       pop    %rbp
    0.00 :	  427415:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430ff3 <std::_Iter_base<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, true>::_S_base(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEELb1EE7_S_baseES6_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  430ff3:       push   %rbp
    0.00 :	  430ff4:       mov    %rsp,%rbp
    0.00 :	  430ff7:       sub    $0x10,%rsp
    0.00 :	  430ffb:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
  100.00 :	  430fff:       lea    -0x10(%rbp),%rax
    0.00 :	  431003:       mov    %rax,%rdi
    0.00 :	  431006:       callq  4224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>
    0.00 :	  43100b:       mov    (%rax),%rax
    0.00 :	  43100e:       leaveq
    0.00 :	  43100f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004240f0 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_destroy_node(std::_Rb_tree_node<Edge>*)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS0_E():
         :	            }
         :	          return __tmp;
         :	        }
         :
         :	      void
         :	      _M_destroy_node(_Link_type __p)
    0.00 :	  4240f0:       push   %rbp
    0.00 :	  4240f1:       mov    %rsp,%rbp
    0.00 :	  4240f4:       sub    $0x10,%rsp
    0.00 :	  4240f8:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4240fc:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        _M_get_Node_allocator().destroy(__p);
    0.00 :	  424100:       mov    -0x8(%rbp),%rax
    0.00 :	  424104:       mov    %rax,%rdi
    0.00 :	  424107:       callq  4263ea <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_Node_allocator()>
    0.00 :	  42410c:       mov    -0x10(%rbp),%rdx
    0.00 :	  424110:       mov    %rdx,%rsi
    0.00 :	  424113:       mov    %rax,%rdi
    0.00 :	  424116:       callq  4263f8 <void __gnu_cxx::new_allocator<std::_Rb_tree_node<Edge> >::destroy<std::_Rb_tree_node<Edge> >(std::_Rb_tree_node<Edge>*)>
         :	        _M_put_node(__p);
    0.00 :	  42411b:       mov    -0x10(%rbp),%rdx
    0.00 :	  42411f:       mov    -0x8(%rbp),%rax
    0.00 :	  424123:       mov    %rdx,%rsi
    0.00 :	  424126:       mov    %rax,%rdi
    0.00 :	  424129:       callq  426406 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_put_node(std::_Rb_tree_node<Edge>*)>
         :	      }
  100.00 :	  42412e:       leaveq
    0.00 :	  42412f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004278bc <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_node()>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE11_M_get_nodeEv():
         :	      get_allocator() const _GLIBCXX_NOEXCEPT
         :	      { return allocator_type(_M_get_Node_allocator()); }
         :
         :	    protected:
         :	      _Link_type
         :	      _M_get_node()
    0.00 :	  4278bc:       push   %rbp
    0.00 :	  4278bd:       mov    %rsp,%rbp
    0.00 :	  4278c0:       sub    $0x10,%rsp
    0.00 :	  4278c4:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_impl._Node_allocator::allocate(1); }
    0.00 :	  4278c8:       mov    -0x8(%rbp),%rax
    0.00 :	  4278cc:       mov    $0x0,%edx
    0.00 :	  4278d1:       mov    $0x1,%esi
    0.00 :	  4278d6:       mov    %rax,%rdi
    0.00 :	  4278d9:       callq  428452 <__gnu_cxx::new_allocator<std::_Rb_tree_node<Edge> >::allocate(unsigned long, void const*)>
    0.00 :	  4278de:       leaveq
  100.00 :	  4278df:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042442a <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE10_M_insert_IS0_EESt17_Rb_tree_iteratorIS0_EPSt18_Rb_tree_node_baseSB_OT_():
         :	           typename _Compare, typename _Alloc>
         :	#if __cplusplus >= 201103L
         :	    template<typename _Arg>
         :	#endif
         :	    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  42442a:       push   %rbp
    0.00 :	  42442b:       mov    %rsp,%rbp
    0.00 :	  42442e:       push   %r12
    0.00 :	  424430:       push   %rbx
    0.00 :	  424431:       sub    $0x50,%rsp
    0.00 :	  424435:       mov    %rdi,-0x48(%rbp)
    0.00 :	  424439:       mov    %rsi,-0x50(%rbp)
    0.00 :	  42443d:       mov    %rdx,-0x58(%rbp)
    0.00 :	  424441:       mov    %rcx,-0x60(%rbp)
         :	    _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
         :	#endif
         :	    {
         :	      bool __insert_left = (__x != 0 || __p == _M_end()
         :	                            || _M_impl._M_key_compare(_KeyOfValue()(__v),
         :	                                                      _S_key(__p)));
    0.00 :	  424445:       mov    $0x0,%ebx
    0.00 :	  42444a:       cmpq   $0x0,-0x50(%rbp)
    0.00 :	  42444f:       jne    4244a3 <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)+0x79>
         :	      bool __insert_left = (__x != 0 || __p == _M_end()
    0.00 :	  424451:       mov    -0x48(%rbp),%rax
    0.00 :	  424455:       mov    %rax,%rdi
    0.00 :	  424458:       callq  42454e <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_end()>
         :	                                                      _S_key(__p)));
    0.00 :	  42445d:       cmp    -0x58(%rbp),%rax
    0.00 :	  424461:       je     4244a3 <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)+0x79>
    0.00 :	  424463:       mov    -0x58(%rbp),%rax
    0.00 :	  424467:       mov    %rax,%rdi
    0.00 :	  42446a:       callq  426530 <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_key(std::_Rb_tree_node_base const*)>
    0.00 :	  42446f:       mov    %rax,%r12
    0.00 :	  424472:       mov    $0x1,%ebx
         :	                            || _M_impl._M_key_compare(_KeyOfValue()(__v),
    0.00 :	  424477:       mov    -0x60(%rbp),%rdx
    0.00 :	  42447b:       lea    -0x31(%rbp),%rax
    0.00 :	  42447f:       mov    %rdx,%rsi
    0.00 :	  424482:       mov    %rax,%rdi
    0.00 :	  424485:       callq  424418 <std::_Identity<Edge>::operator()(Edge&) const>
    0.00 :	  42448a:       mov    %rax,%rcx
    0.00 :	  42448d:       mov    -0x48(%rbp),%rax
    0.00 :	  424491:       mov    %r12,%rdx
    0.00 :	  424494:       mov    %rcx,%rsi
    0.00 :	  424497:       mov    %rax,%rdi
    0.00 :	  42449a:       callq  426492 <std::less<Edge>::operator()(Edge const&, Edge const&) const>
         :	                                                      _S_key(__p)));
    0.00 :	  42449f:       test   %al,%al
    0.00 :	  4244a1:       je     4244aa <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)+0x80>
    0.00 :	  4244a3:       mov    $0x1,%eax
    0.00 :	  4244a8:       jmp    4244af <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)+0x85>
    0.00 :	  4244aa:       mov    $0x0,%eax
    0.00 :	  4244af:       mov    %al,-0x11(%rbp)
         :	                            || _M_impl._M_key_compare(_KeyOfValue()(__v),
    0.00 :	  4244b2:       test   %bl,%bl
         :	                                                      _S_key(__p)));
    0.00 :	  4244b4:       nop
         :
         :	      _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));
    0.00 :	  4244b5:       mov    -0x60(%rbp),%rax
    0.00 :	  4244b9:       mov    %rax,%rdi
    0.00 :	  4244bc:       callq  421751 <Edge&& std::forward<Edge>(std::remove_reference<Edge>::type&)>
    0.00 :	  4244c1:       mov    %rax,%rdx
    0.00 :	  4244c4:       mov    -0x48(%rbp),%rax
    0.00 :	  4244c8:       mov    %rdx,%rsi
    0.00 :	  4244cb:       mov    %rax,%rdi
    0.00 :	  4244ce:       callq  42655c <std::_Rb_tree_node<Edge>* std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_create_node<Edge>(Edge&&)>
    0.00 :	  4244d3:       mov    %rax,-0x20(%rbp)
         :
         :	      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
         :	                                    this->_M_impl._M_header);
    0.00 :	  4244d7:       mov    -0x48(%rbp),%rax
    0.00 :	  4244db:       lea    0x8(%rax),%rcx
    0.00 :	  4244df:       movzbl -0x11(%rbp),%eax
         :	      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
    0.00 :	  4244e3:       mov    -0x58(%rbp),%rdx
    0.00 :	  4244e7:       mov    -0x20(%rbp),%rsi
    0.00 :	  4244eb:       mov    %eax,%edi
    0.00 :	  4244ed:       callq  41dc80 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
         :	      ++_M_impl._M_node_count;
    0.00 :	  4244f2:       mov    -0x48(%rbp),%rax
    0.00 :	  4244f6:       mov    0x28(%rax),%rax
  100.00 :	  4244fa:       lea    0x1(%rax),%rdx
    0.00 :	  4244fe:       mov    -0x48(%rbp),%rax
    0.00 :	  424502:       mov    %rdx,0x28(%rax)
         :	      return iterator(__z);
    0.00 :	  424506:       mov    -0x20(%rbp),%rdx
    0.00 :	  42450a:       lea    -0x30(%rbp),%rax
    0.00 :	  42450e:       mov    %rdx,%rsi
    0.00 :	  424511:       mov    %rax,%rdi
    0.00 :	  424514:       callq  424534 <std::_Rb_tree_iterator<Edge>::_Rb_tree_iterator(std::_Rb_tree_node<Edge>*)>
    0.00 :	  424519:       mov    -0x30(%rbp),%rax
    0.00 :	  42451d:       jmp    42452a <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)+0x100>
         :	                            || _M_impl._M_key_compare(_KeyOfValue()(__v),
    0.00 :	  42451f:       test   %bl,%bl
         :	                                                      _S_key(__p)));
    0.00 :	  424521:       nop
    0.00 :	  424522:       mov    %rax,%rdi
    0.00 :	  424525:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  42452a:       add    $0x50,%rsp
    0.00 :	  42452e:       pop    %rbx
    0.00 :	  42452f:       pop    %r12
    0.00 :	  424531:       pop    %rbp
    0.00 :	  424532:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421d7e <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE16_M_insert_uniqueIS0_EESt4pairISt17_Rb_tree_iteratorIS0_EbEOT_():
         :	#if __cplusplus >= 201103L
         :	    template<typename _Arg>
         :	#endif
         :	    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::iterator, bool>
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  421d7e:       push   %rbp
    0.00 :	  421d7f:       mov    %rsp,%rbp
    0.00 :	  421d82:       push   %rbx
    0.00 :	  421d83:       sub    $0x98,%rsp
    0.00 :	  421d8a:       mov    %rdi,-0x98(%rbp)
    0.00 :	  421d91:       mov    %rsi,-0xa0(%rbp)
         :	    _M_insert_unique(const _Val& __v)
         :	#endif
         :	    {
         :	      typedef pair<iterator, bool> _Res;
         :	      pair<_Base_ptr, _Base_ptr> __res
         :	        = _M_get_insert_unique_pos(_KeyOfValue()(__v));
    0.00 :	  421d98:       mov    -0xa0(%rbp),%rdx
    0.00 :	  421d9f:       lea    -0x71(%rbp),%rax
    0.00 :	  421da3:       mov    %rdx,%rsi
    0.00 :	  421da6:       mov    %rax,%rdi
    0.00 :	  421da9:       callq  424418 <std::_Identity<Edge>::operator()(Edge&) const>
    0.00 :	  421dae:       mov    %rax,%rdx
    0.00 :	  421db1:       mov    -0x98(%rbp),%rax
    0.00 :	  421db8:       mov    %rdx,%rsi
    0.00 :	  421dbb:       mov    %rax,%rdi
    0.00 :	  421dbe:       callq  42429e <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_get_insert_unique_pos(Edge const&)>
    0.00 :	  421dc3:       mov    %rax,-0x90(%rbp)
    0.00 :	  421dca:       mov    %rdx,-0x88(%rbp)
         :
         :	      if (__res.second)
    0.00 :	  421dd1:       mov    -0x88(%rbp),%rax
    0.00 :	  421dd8:       test   %rax,%rax
    0.00 :	  421ddb:       je     421e35 <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0xb7>
         :	        return _Res(_M_insert_(__res.first, __res.second,
         :	                               _GLIBCXX_FORWARD(_Arg, __v)),
         :	                    true);
    0.00 :	  421ddd:       movb   $0x1,-0x51(%rbp)
         :	                               _GLIBCXX_FORWARD(_Arg, __v)),
    0.00 :	  421de1:       mov    -0xa0(%rbp),%rax
    0.00 :	  421de8:       mov    %rax,%rdi
    0.00 :	  421deb:       callq  421751 <Edge&& std::forward<Edge>(std::remove_reference<Edge>::type&)>
    0.00 :	  421df0:       mov    %rax,%rcx
    0.00 :	  421df3:       mov    -0x88(%rbp),%rdx
    0.00 :	  421dfa:       mov    -0x90(%rbp),%rsi
         :	                    true);
    0.00 :	  421e01:       mov    -0x98(%rbp),%rax
    0.00 :	  421e08:       mov    %rax,%rdi
    0.00 :	  421e0b:       callq  42442a <std::_Rb_tree_iterator<Edge> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_<Edge>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Edge&&)>
    0.00 :	  421e10:       mov    %rax,-0x50(%rbp)
    0.00 :	  421e14:       lea    -0x51(%rbp),%rdx
    0.00 :	  421e18:       lea    -0x50(%rbp),%rcx
    0.00 :	  421e1c:       lea    -0x70(%rbp),%rax
    0.00 :	  421e20:       mov    %rcx,%rsi
    0.00 :	  421e23:       mov    %rax,%rdi
    0.00 :	  421e26:       callq  421d3c <std::pair<std::_Rb_tree_iterator<Edge>, bool>::pair<std::_Rb_tree_iterator<Edge>, bool, void>(std::_Rb_tree_iterator<Edge>&&, bool&&)>
  100.00 :	  421e2b:       mov    -0x70(%rbp),%rax
    0.00 :	  421e2f:       mov    -0x68(%rbp),%rdx
    0.00 :	  421e33:       jmp    421e6e <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0xf0>
         :
         :	      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    0.00 :	  421e35:       movb   $0x0,-0x21(%rbp)
    0.00 :	  421e39:       mov    -0x90(%rbp),%rdx
    0.00 :	  421e40:       lea    -0x20(%rbp),%rax
    0.00 :	  421e44:       mov    %rdx,%rsi
    0.00 :	  421e47:       mov    %rax,%rdi
    0.00 :	  421e4a:       callq  424534 <std::_Rb_tree_iterator<Edge>::_Rb_tree_iterator(std::_Rb_tree_node<Edge>*)>
    0.00 :	  421e4f:       lea    -0x21(%rbp),%rdx
    0.00 :	  421e53:       lea    -0x20(%rbp),%rcx
    0.00 :	  421e57:       lea    -0x40(%rbp),%rax
    0.00 :	  421e5b:       mov    %rcx,%rsi
    0.00 :	  421e5e:       mov    %rax,%rdi
    0.00 :	  421e61:       callq  421d3c <std::pair<std::_Rb_tree_iterator<Edge>, bool>::pair<std::_Rb_tree_iterator<Edge>, bool, void>(std::_Rb_tree_iterator<Edge>&&, bool&&)>
    0.00 :	  421e66:       mov    -0x40(%rbp),%rax
    0.00 :	  421e6a:       mov    -0x38(%rbp),%rdx
    0.00 :	  421e6e:       mov    %rax,%rcx
    0.00 :	  421e71:       mov    %rdx,%rbx
    0.00 :	  421e74:       jmp    421e80 <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0x102>
    0.00 :	  421e76:       jmp    421e78 <std::pair<std::_Rb_tree_iterator<Edge>, bool> std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_M_insert_unique<Edge>(Edge&&)+0xfa>
    0.00 :	  421e78:       mov    %rax,%rdi
    0.00 :	  421e7b:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  421e80:       mov    %rcx,%rax
    0.00 :	  421e83:       add    $0x98,%rsp
    0.00 :	  421e8a:       pop    %rbx
    0.00 :	  421e8b:       pop    %rbp
    0.00 :	  421e8c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004278aa <std::_Rb_tree<Edge, Edge, std::_Identity<Edge>, std::less<Edge>, std::allocator<Edge> >::_S_value(std::_Rb_tree_node_base const*)>:
         :	_ZNSt8_Rb_treeI4EdgeS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_S_valueEPKSt18_Rb_tree_node_base():
         :	      static _Const_Link_type
         :	      _S_right(_Const_Base_ptr __x)
         :	      { return static_cast<_Const_Link_type>(__x->_M_right); }
         :
         :	      static const_reference
         :	      _S_value(_Const_Base_ptr __x)
  100.00 :	  4278aa:       push   %rbp
    0.00 :	  4278ab:       mov    %rsp,%rbp
    0.00 :	  4278ae:       mov    %rdi,-0x8(%rbp)
         :	      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }
    0.00 :	  4278b2:       mov    -0x8(%rbp),%rax
    0.00 :	  4278b6:       add    $0x20,%rax
    0.00 :	  4278ba:       pop    %rbp
    0.00 :	  4278bb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423a7c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_destroy_node(std::_Rb_tree_node<int>*)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIiE():
         :	            }
         :	          return __tmp;
         :	        }
         :
         :	      void
         :	      _M_destroy_node(_Link_type __p)
    0.00 :	  423a7c:       push   %rbp
    0.00 :	  423a7d:       mov    %rsp,%rbp
    0.00 :	  423a80:       sub    $0x10,%rsp
    0.00 :	  423a84:       mov    %rdi,-0x8(%rbp)
    0.00 :	  423a88:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        _M_get_Node_allocator().destroy(__p);
    0.00 :	  423a8c:       mov    -0x8(%rbp),%rax
    0.00 :	  423a90:       mov    %rax,%rdi
    0.00 :	  423a93:       callq  425fa4 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_Node_allocator()>
    0.00 :	  423a98:       mov    -0x10(%rbp),%rdx
    0.00 :	  423a9c:       mov    %rdx,%rsi
    0.00 :	  423a9f:       mov    %rax,%rdi
    0.00 :	  423aa2:       callq  425fb2 <void __gnu_cxx::new_allocator<std::_Rb_tree_node<int> >::destroy<std::_Rb_tree_node<int> >(std::_Rb_tree_node<int>*)>
         :	        _M_put_node(__p);
    0.00 :	  423aa7:       mov    -0x10(%rbp),%rdx
  100.00 :	  423aab:       mov    -0x8(%rbp),%rax
    0.00 :	  423aaf:       mov    %rdx,%rsi
    0.00 :	  423ab2:       mov    %rax,%rdi
    0.00 :	  423ab5:       callq  425fc0 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_put_node(std::_Rb_tree_node<int>*)>
         :	      }
    0.00 :	  423aba:       leaveq
    0.00 :	  423abb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042198e <std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_():
         :	#if __cplusplus >= 201103L
         :	    template<typename _Arg>
         :	#endif
         :	    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                           _Compare, _Alloc>::iterator, bool>
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  42198e:       push   %rbp
    0.00 :	  42198f:       mov    %rsp,%rbp
    0.00 :	  421992:       push   %rbx
    0.00 :	  421993:       sub    $0x98,%rsp
    0.00 :	  42199a:       mov    %rdi,-0x98(%rbp)
    0.00 :	  4219a1:       mov    %rsi,-0xa0(%rbp)
         :	    _M_insert_unique(const _Val& __v)
         :	#endif
         :	    {
         :	      typedef pair<iterator, bool> _Res;
         :	      pair<_Base_ptr, _Base_ptr> __res
         :	        = _M_get_insert_unique_pos(_KeyOfValue()(__v));
    0.00 :	  4219a8:       mov    -0xa0(%rbp),%rdx
    0.00 :	  4219af:       lea    -0x71(%rbp),%rax
    0.00 :	  4219b3:       mov    %rdx,%rsi
    0.00 :	  4219b6:       mov    %rax,%rdi
    0.00 :	  4219b9:       callq  423cd2 <std::_Identity<int>::operator()(int const&) const>
    0.00 :	  4219be:       mov    %rax,%rdx
    0.00 :	  4219c1:       mov    -0x98(%rbp),%rax
    0.00 :	  4219c8:       mov    %rdx,%rsi
    0.00 :	  4219cb:       mov    %rax,%rdi
    0.00 :	  4219ce:       callq  423b58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)>
    0.00 :	  4219d3:       mov    %rax,-0x90(%rbp)
    0.00 :	  4219da:       mov    %rdx,-0x88(%rbp)
         :
         :	      if (__res.second)
  100.00 :	  4219e1:       mov    -0x88(%rbp),%rax
    0.00 :	  4219e8:       test   %rax,%rax
    0.00 :	  4219eb:       je     421a45 <std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)+0xb7>
         :	        return _Res(_M_insert_(__res.first, __res.second,
         :	                               _GLIBCXX_FORWARD(_Arg, __v)),
         :	                    true);
    0.00 :	  4219ed:       movb   $0x1,-0x51(%rbp)
         :	                               _GLIBCXX_FORWARD(_Arg, __v)),
    0.00 :	  4219f1:       mov    -0xa0(%rbp),%rax
    0.00 :	  4219f8:       mov    %rax,%rdi
    0.00 :	  4219fb:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  421a00:       mov    %rax,%rcx
    0.00 :	  421a03:       mov    -0x88(%rbp),%rdx
    0.00 :	  421a0a:       mov    -0x90(%rbp),%rsi
         :	                    true);
    0.00 :	  421a11:       mov    -0x98(%rbp),%rax
    0.00 :	  421a18:       mov    %rax,%rdi
    0.00 :	  421a1b:       callq  423ce4 <std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&)>
    0.00 :	  421a20:       mov    %rax,-0x50(%rbp)
    0.00 :	  421a24:       lea    -0x51(%rbp),%rdx
    0.00 :	  421a28:       lea    -0x50(%rbp),%rcx
    0.00 :	  421a2c:       lea    -0x70(%rbp),%rax
    0.00 :	  421a30:       mov    %rcx,%rsi
    0.00 :	  421a33:       mov    %rax,%rdi
    0.00 :	  421a36:       callq  42194c <std::pair<std::_Rb_tree_iterator<int>, bool>::pair<std::_Rb_tree_iterator<int>, bool, void>(std::_Rb_tree_iterator<int>&&, bool&&)>
    0.00 :	  421a3b:       mov    -0x70(%rbp),%rax
    0.00 :	  421a3f:       mov    -0x68(%rbp),%rdx
    0.00 :	  421a43:       jmp    421a7e <std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)+0xf0>
         :
         :	      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    0.00 :	  421a45:       movb   $0x0,-0x21(%rbp)
    0.00 :	  421a49:       mov    -0x90(%rbp),%rdx
    0.00 :	  421a50:       lea    -0x20(%rbp),%rax
    0.00 :	  421a54:       mov    %rdx,%rsi
    0.00 :	  421a57:       mov    %rax,%rdi
    0.00 :	  421a5a:       callq  423dee <std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int>*)>
    0.00 :	  421a5f:       lea    -0x21(%rbp),%rdx
    0.00 :	  421a63:       lea    -0x20(%rbp),%rcx
    0.00 :	  421a67:       lea    -0x40(%rbp),%rax
    0.00 :	  421a6b:       mov    %rcx,%rsi
    0.00 :	  421a6e:       mov    %rax,%rdi
    0.00 :	  421a71:       callq  42194c <std::pair<std::_Rb_tree_iterator<int>, bool>::pair<std::_Rb_tree_iterator<int>, bool, void>(std::_Rb_tree_iterator<int>&&, bool&&)>
    0.00 :	  421a76:       mov    -0x40(%rbp),%rax
    0.00 :	  421a7a:       mov    -0x38(%rbp),%rdx
    0.00 :	  421a7e:       mov    %rax,%rcx
    0.00 :	  421a81:       mov    %rdx,%rbx
    0.00 :	  421a84:       jmp    421a90 <std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)+0x102>
    0.00 :	  421a86:       jmp    421a88 <std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)+0xfa>
    0.00 :	  421a88:       mov    %rax,%rdi
    0.00 :	  421a8b:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  421a90:       mov    %rcx,%rax
    0.00 :	  421a93:       add    $0x98,%rsp
    0.00 :	  421a9a:       pop    %rbx
    0.00 :	  421a9b:       pop    %rbp
    0.00 :	  421a9c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042612a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiES8_RKi():
         :
         :	  template<typename _Key, typename _Val, typename _KeyOfValue,
         :	           typename _Compare, typename _Alloc>
         :	    typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                      _Compare, _Alloc>::iterator
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  42612a:       push   %rbp
    0.00 :	  42612b:       mov    %rsp,%rbp
    0.00 :	  42612e:       sub    $0x30,%rsp
    0.00 :	  426132:       mov    %rdi,-0x18(%rbp)
    0.00 :	  426136:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42613a:       mov    %rdx,-0x28(%rbp)
    0.00 :	  42613e:       mov    %rcx,-0x30(%rbp)
         :	    _M_lower_bound(_Link_type __x, _Link_type __y,
         :	                   const _Key& __k)
         :	    {
         :	      while (__x != 0)
    0.00 :	  426142:       jmp    426197 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x6d>
         :	        if (!_M_impl._M_key_compare(_S_key(__x), __k))
  100.00 :	  426144:       mov    -0x20(%rbp),%rax
    0.00 :	  426148:       mov    %rax,%rdi
    0.00 :	  42614b:       callq  425ffc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node<int> const*)>
    0.00 :	  426150:       mov    %rax,%rcx
    0.00 :	  426153:       mov    -0x18(%rbp),%rax
    0.00 :	  426157:       mov    -0x30(%rbp),%rdx
    0.00 :	  42615b:       mov    %rcx,%rsi
    0.00 :	  42615e:       mov    %rax,%rdi
    0.00 :	  426161:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
    0.00 :	  426166:       xor    $0x1,%eax
    0.00 :	  426169:       test   %al,%al
    0.00 :	  42616b:       je     426187 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x5d>
         :	          __y = __x, __x = _S_left(__x);
    0.00 :	  42616d:       mov    -0x20(%rbp),%rax
    0.00 :	  426171:       mov    %rax,-0x28(%rbp)
    0.00 :	  426175:       mov    -0x20(%rbp),%rax
    0.00 :	  426179:       mov    %rax,%rdi
    0.00 :	  42617c:       callq  423a6a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_left(std::_Rb_tree_node_base*)>
    0.00 :	  426181:       mov    %rax,-0x20(%rbp)
    0.00 :	  426185:       jmp    426197 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x6d>
         :	        else
         :	          __x = _S_right(__x);
    0.00 :	  426187:       mov    -0x20(%rbp),%rax
    0.00 :	  42618b:       mov    %rax,%rdi
    0.00 :	  42618e:       callq  423a58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base*)>
    0.00 :	  426193:       mov    %rax,-0x20(%rbp)
         :	      while (__x != 0)
    0.00 :	  426197:       cmpq   $0x0,-0x20(%rbp)
    0.00 :	  42619c:       jne    426144 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_lower_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x1a>
         :	      return iterator(__y);
    0.00 :	  42619e:       mov    -0x28(%rbp),%rdx
    0.00 :	  4261a2:       lea    -0x10(%rbp),%rax
    0.00 :	  4261a6:       mov    %rdx,%rsi
    0.00 :	  4261a9:       mov    %rax,%rdi
    0.00 :	  4261ac:       callq  423dee <std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int>*)>
    0.00 :	  4261b1:       mov    -0x10(%rbp),%rax
         :	    }
    0.00 :	  4261b5:       leaveq
    0.00 :	  4261b6:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004261b8 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_upper_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_upper_boundEPSt13_Rb_tree_nodeIiES8_RKi():
         :
         :	  template<typename _Key, typename _Val, typename _KeyOfValue,
         :	           typename _Compare, typename _Alloc>
         :	    typename _Rb_tree<_Key, _Val, _KeyOfValue,
         :	                      _Compare, _Alloc>::iterator
         :	    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    0.00 :	  4261b8:       push   %rbp
    0.00 :	  4261b9:       mov    %rsp,%rbp
    0.00 :	  4261bc:       sub    $0x30,%rsp
    0.00 :	  4261c0:       mov    %rdi,-0x18(%rbp)
    0.00 :	  4261c4:       mov    %rsi,-0x20(%rbp)
    0.00 :	  4261c8:       mov    %rdx,-0x28(%rbp)
    0.00 :	  4261cc:       mov    %rcx,-0x30(%rbp)
         :	    _M_upper_bound(_Link_type __x, _Link_type __y,
         :	                   const _Key& __k)
         :	    {
         :	      while (__x != 0)
    0.00 :	  4261d0:       jmp    426222 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_upper_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x6a>
         :	        if (_M_impl._M_key_compare(__k, _S_key(__x)))
    0.00 :	  4261d2:       mov    -0x20(%rbp),%rax
    0.00 :	  4261d6:       mov    %rax,%rdi
    0.00 :	  4261d9:       callq  425ffc <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_key(std::_Rb_tree_node<int> const*)>
    0.00 :	  4261de:       mov    %rax,%rdx
    0.00 :	  4261e1:       mov    -0x18(%rbp),%rax
  100.00 :	  4261e5:       mov    -0x30(%rbp),%rcx
    0.00 :	  4261e9:       mov    %rcx,%rsi
    0.00 :	  4261ec:       mov    %rax,%rdi
    0.00 :	  4261ef:       callq  424228 <std::less<int>::operator()(int const&, int const&) const>
    0.00 :	  4261f4:       test   %al,%al
    0.00 :	  4261f6:       je     426212 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_upper_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x5a>
         :	          __y = __x, __x = _S_left(__x);
    0.00 :	  4261f8:       mov    -0x20(%rbp),%rax
    0.00 :	  4261fc:       mov    %rax,-0x28(%rbp)
    0.00 :	  426200:       mov    -0x20(%rbp),%rax
    0.00 :	  426204:       mov    %rax,%rdi
    0.00 :	  426207:       callq  423a6a <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_left(std::_Rb_tree_node_base*)>
    0.00 :	  42620c:       mov    %rax,-0x20(%rbp)
    0.00 :	  426210:       jmp    426222 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_upper_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x6a>
         :	        else
         :	          __x = _S_right(__x);
    0.00 :	  426212:       mov    -0x20(%rbp),%rax
    0.00 :	  426216:       mov    %rax,%rdi
    0.00 :	  426219:       callq  423a58 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base*)>
    0.00 :	  42621e:       mov    %rax,-0x20(%rbp)
         :	      while (__x != 0)
    0.00 :	  426222:       cmpq   $0x0,-0x20(%rbp)
    0.00 :	  426227:       jne    4261d2 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_upper_bound(std::_Rb_tree_node<int>*, std::_Rb_tree_node<int>*, int const&)+0x1a>
         :	      return iterator(__y);
    0.00 :	  426229:       mov    -0x28(%rbp),%rdx
    0.00 :	  42622d:       lea    -0x10(%rbp),%rax
    0.00 :	  426231:       mov    %rdx,%rsi
    0.00 :	  426234:       mov    %rax,%rdi
    0.00 :	  426237:       callq  423dee <std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int>*)>
    0.00 :	  42623c:       mov    -0x10(%rbp),%rax
         :	    }
    0.00 :	  426240:       leaveq
    0.00 :	  426241:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426430 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_left(std::_Rb_tree_node_base const*)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPKSt18_Rb_tree_node_base():
         :	      static _Link_type
         :	      _S_left(_Base_ptr __x)
         :	      { return static_cast<_Link_type>(__x->_M_left); }
         :
         :	      static _Const_Link_type
         :	      _S_left(_Const_Base_ptr __x)
    0.00 :	  426430:       push   %rbp
    0.00 :	  426431:       mov    %rsp,%rbp
    0.00 :	  426434:       mov    %rdi,-0x8(%rbp)
         :	      { return static_cast<_Const_Link_type>(__x->_M_left); }
    0.00 :	  426438:       mov    -0x8(%rbp),%rax
    0.00 :	  42643c:       mov    0x10(%rax),%rax
  100.00 :	  426440:       pop    %rbp
    0.00 :	  426441:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426442 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_S_right(std::_Rb_tree_node_base const*)>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPKSt18_Rb_tree_node_base():
         :	      static _Link_type
         :	      _S_right(_Base_ptr __x)
         :	      { return static_cast<_Link_type>(__x->_M_right); }
         :
         :	      static _Const_Link_type
         :	      _S_right(_Const_Base_ptr __x)
    0.00 :	  426442:       push   %rbp
    0.00 :	  426443:       mov    %rsp,%rbp
    0.00 :	  426446:       mov    %rdi,-0x8(%rbp)
         :	      { return static_cast<_Const_Link_type>(__x->_M_right); }
    0.00 :	  42644a:       mov    -0x8(%rbp),%rax
    0.00 :	  42644e:       mov    0x18(%rax),%rax
  100.00 :	  426452:       pop    %rbp
    0.00 :	  426453:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426028 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::begin()>:
         :	_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv():
         :	      _Compare
         :	      key_comp() const
         :	      { return _M_impl._M_key_compare; }
         :
         :	      iterator
         :	      begin() _GLIBCXX_NOEXCEPT
    0.00 :	  426028:       push   %rbp
    0.00 :	  426029:       mov    %rsp,%rbp
    0.00 :	  42602c:       sub    $0x20,%rsp
    0.00 :	  426030:       mov    %rdi,-0x18(%rbp)
         :	      {
         :	        return iterator(static_cast<_Link_type>
         :	                        (this->_M_impl._M_header._M_left));
    0.00 :	  426034:       mov    -0x18(%rbp),%rax
    0.00 :	  426038:       mov    0x18(%rax),%rdx
    0.00 :	  42603c:       lea    -0x10(%rbp),%rax
    0.00 :	  426040:       mov    %rdx,%rsi
    0.00 :	  426043:       mov    %rax,%rdi
    0.00 :	  426046:       callq  423dee <std::_Rb_tree_iterator<int>::_Rb_tree_iterator(std::_Rb_tree_node<int>*)>
    0.00 :	  42604b:       mov    -0x10(%rbp),%rax
         :	      }
  100.00 :	  42604f:       leaveq
    0.00 :	  426050:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421c04 <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::empty() const>:
         :	_ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5emptyEv():
         :	      const_reverse_iterator
         :	      rend() const _GLIBCXX_NOEXCEPT
         :	      { return const_reverse_iterator(begin()); }
         :
         :	      bool
         :	      empty() const _GLIBCXX_NOEXCEPT
    0.00 :	  421c04:       push   %rbp
    0.00 :	  421c05:       mov    %rsp,%rbp
    0.00 :	  421c08:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_impl._M_node_count == 0; }
    0.00 :	  421c0c:       mov    -0x8(%rbp),%rax
    0.00 :	  421c10:       mov    0x28(%rax),%rax
  100.00 :	  421c14:       test   %rax,%rax
    0.00 :	  421c17:       sete   %al
    0.00 :	  421c1a:       pop    %rbp
    0.00 :	  421c1b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421c1c <std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::end() const>:
         :	_ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv():
         :	      iterator
         :	      end() _GLIBCXX_NOEXCEPT
         :	      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }
         :
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
    0.00 :	  421c1c:       push   %rbp
    0.00 :	  421c1d:       mov    %rsp,%rbp
    0.00 :	  421c20:       sub    $0x20,%rsp
    0.00 :	  421c24:       mov    %rdi,-0x18(%rbp)
         :	      {
         :	        return const_iterator(static_cast<_Const_Link_type>
         :	                              (&this->_M_impl._M_header));
  100.00 :	  421c28:       mov    -0x18(%rbp),%rax
    0.00 :	  421c2c:       lea    0x8(%rax),%rdx
    0.00 :	  421c30:       lea    -0x10(%rbp),%rax
    0.00 :	  421c34:       mov    %rdx,%rsi
    0.00 :	  421c37:       mov    %rax,%rdi
    0.00 :	  421c3a:       callq  424130 <std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(std::_Rb_tree_node<int> const*)>
    0.00 :	  421c3f:       mov    -0x10(%rbp),%rax
         :	      }
    0.00 :	  421c43:       leaveq
    0.00 :	  421c44:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004277b2 <std::_Rb_tree_const_iterator<int>::operator!=(std::_Rb_tree_const_iterator<int> const&) const>:
         :	_ZNKSt23_Rb_tree_const_iteratorIiEneERKS0_():
         :	      bool
         :	      operator==(const _Self& __x) const
         :	      { return _M_node == __x._M_node; }
         :
         :	      bool
         :	      operator!=(const _Self& __x) const
    0.00 :	  4277b2:       push   %rbp
    0.00 :	  4277b3:       mov    %rsp,%rbp
    0.00 :	  4277b6:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4277ba:       mov    %rsi,-0x10(%rbp)
         :	      { return _M_node != __x._M_node; }
    0.00 :	  4277be:       mov    -0x8(%rbp),%rax
    0.00 :	  4277c2:       mov    (%rax),%rdx
  100.00 :	  4277c5:       mov    -0x10(%rbp),%rax
    0.00 :	  4277c9:       mov    (%rax),%rax
    0.00 :	  4277cc:       cmp    %rax,%rdx
    0.00 :	  4277cf:       setne  %al
    0.00 :	  4277d2:       pop    %rbp
    0.00 :	  4277d3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004283d6 <std::_Rb_tree_const_iterator<int>::operator++()>:
         :	_ZNSt23_Rb_tree_const_iteratorIiEppEv():
         :	      operator->() const
         :	      { return std::__addressof(static_cast<_Link_type>
         :	                                (_M_node)->_M_value_field); }
         :
         :	      _Self&
         :	      operator++()
    0.00 :	  4283d6:       push   %rbp
    0.00 :	  4283d7:       mov    %rsp,%rbp
  100.00 :	  4283da:       sub    $0x10,%rsp
    0.00 :	  4283de:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        _M_node = _Rb_tree_increment(_M_node);
    0.00 :	  4283e2:       mov    -0x8(%rbp),%rax
    0.00 :	  4283e6:       mov    (%rax),%rax
    0.00 :	  4283e9:       mov    %rax,%rdi
    0.00 :	  4283ec:       callq  41dc10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
    0.00 :	  4283f1:       mov    -0x8(%rbp),%rdx
    0.00 :	  4283f5:       mov    %rax,(%rdx)
         :	        return *this;
    0.00 :	  4283f8:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  4283fc:       leaveq
    0.00 :	  4283fd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426508 <std::_Rb_tree_iterator<Edge>::operator--()>:
         :	_ZNSt17_Rb_tree_iteratorI4EdgeEmmEv():
         :	        _M_node = _Rb_tree_increment(_M_node);
         :	        return __tmp;
         :	      }
         :
         :	      _Self&
         :	      operator--()
    0.00 :	  426508:       push   %rbp
    0.00 :	  426509:       mov    %rsp,%rbp
    0.00 :	  42650c:       sub    $0x10,%rsp
    0.00 :	  426510:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        _M_node = _Rb_tree_decrement(_M_node);
    0.00 :	  426514:       mov    -0x8(%rbp),%rax
    0.00 :	  426518:       mov    (%rax),%rax
    0.00 :	  42651b:       mov    %rax,%rdi
    0.00 :	  42651e:       callq  41db70 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
    0.00 :	  426523:       mov    -0x8(%rbp),%rdx
  100.00 :	  426527:       mov    %rax,(%rdx)
         :	        return *this;
    0.00 :	  42652a:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  42652e:       leaveq
    0.00 :	  42652f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428fb0 <std::_Rb_tree_node<Edge>::_Rb_tree_node<Edge>(Edge&&)>:
         :	_ZNSt13_Rb_tree_nodeI4EdgeEC2IIS0_EEEDpOT_():
         :	      typedef _Rb_tree_node<_Val>* _Link_type;
         :	      _Val _M_value_field;
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename... _Args>
         :	        _Rb_tree_node(_Args&&... __args)
    0.00 :	  428fb0:       push   %rbp
    0.00 :	  428fb1:       mov    %rsp,%rbp
    0.00 :	  428fb4:       sub    $0x10,%rsp
    0.00 :	  428fb8:       mov    %rdi,-0x8(%rbp)
    0.00 :	  428fbc:       mov    %rsi,-0x10(%rbp)
         :	        : _Rb_tree_node_base(),
         :	          _M_value_field(std::forward<_Args>(__args)...) { }
    0.00 :	  428fc0:       mov    -0x8(%rbp),%rax
  100.00 :	  428fc4:       movl   $0x0,(%rax)
    0.00 :	  428fca:       mov    -0x8(%rbp),%rax
    0.00 :	  428fce:       movq   $0x0,0x8(%rax)
    0.00 :	  428fd6:       mov    -0x8(%rbp),%rax
    0.00 :	  428fda:       movq   $0x0,0x10(%rax)
    0.00 :	  428fe2:       mov    -0x8(%rbp),%rax
    0.00 :	  428fe6:       movq   $0x0,0x18(%rax)
    0.00 :	  428fee:       mov    -0x10(%rbp),%rax
    0.00 :	  428ff2:       mov    %rax,%rdi
    0.00 :	  428ff5:       callq  421751 <Edge&& std::forward<Edge>(std::remove_reference<Edge>::type&)>
    0.00 :	  428ffa:       mov    -0x8(%rbp),%rcx
    0.00 :	  428ffe:       mov    0x8(%rax),%rdx
    0.00 :	  429002:       mov    (%rax),%rax
    0.00 :	  429005:       mov    %rax,0x20(%rcx)
    0.00 :	  429009:       mov    %rdx,0x28(%rcx)
    0.00 :	  42900d:       leaveq
    0.00 :	  42900e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428f5a <std::_Rb_tree_node<int>::_Rb_tree_node<int const&>(int const&)>:
         :	_ZNSt13_Rb_tree_nodeIiEC2IIRKiEEEDpOT_():
         :	      typedef _Rb_tree_node<_Val>* _Link_type;
         :	      _Val _M_value_field;
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename... _Args>
         :	        _Rb_tree_node(_Args&&... __args)
    0.00 :	  428f5a:       push   %rbp
    0.00 :	  428f5b:       mov    %rsp,%rbp
    0.00 :	  428f5e:       sub    $0x10,%rsp
    0.00 :	  428f62:       mov    %rdi,-0x8(%rbp)
    0.00 :	  428f66:       mov    %rsi,-0x10(%rbp)
         :	        : _Rb_tree_node_base(),
         :	          _M_value_field(std::forward<_Args>(__args)...) { }
    0.00 :	  428f6a:       mov    -0x8(%rbp),%rax
    0.00 :	  428f6e:       movl   $0x0,(%rax)
    0.00 :	  428f74:       mov    -0x8(%rbp),%rax
    0.00 :	  428f78:       movq   $0x0,0x8(%rax)
  100.00 :	  428f80:       mov    -0x8(%rbp),%rax
    0.00 :	  428f84:       movq   $0x0,0x10(%rax)
    0.00 :	  428f8c:       mov    -0x8(%rbp),%rax
    0.00 :	  428f90:       movq   $0x0,0x18(%rax)
    0.00 :	  428f98:       mov    -0x10(%rbp),%rax
    0.00 :	  428f9c:       mov    %rax,%rdi
    0.00 :	  428f9f:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  428fa4:       mov    (%rax),%edx
    0.00 :	  428fa6:       mov    -0x8(%rbp),%rax
    0.00 :	  428faa:       mov    %edx,0x20(%rax)
    0.00 :	  428fad:       leaveq
    0.00 :	  428fae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042350a <std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long)>:
         :	_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm():
         :
         :	    public:
         :	      _Vector_impl _M_impl;
         :
         :	      pointer
         :	      _M_allocate(size_t __n)
  100.00 :	  42350a:       push   %rbp
    0.00 :	  42350b:       mov    %rsp,%rbp
    0.00 :	  42350e:       sub    $0x10,%rsp
    0.00 :	  423512:       mov    %rdi,-0x8(%rbp)
    0.00 :	  423516:       mov    %rsi,-0x10(%rbp)
         :	      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
    0.00 :	  42351a:       cmpq   $0x0,-0x10(%rbp)
    0.00 :	  42351f:       je     42353b <std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long)+0x31>
    0.00 :	  423521:       mov    -0x8(%rbp),%rax
    0.00 :	  423525:       mov    -0x10(%rbp),%rcx
    0.00 :	  423529:       mov    $0x0,%edx
    0.00 :	  42352e:       mov    %rcx,%rsi
    0.00 :	  423531:       mov    %rax,%rdi
    0.00 :	  423534:       callq  425bb2 <__gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*)>
    0.00 :	  423539:       jmp    423540 <std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long)+0x36>
    0.00 :	  42353b:       mov    $0x0,%eax
    0.00 :	  423540:       leaveq
    0.00 :	  423541:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424b5a <std::__detail::_Adaptor<std::random_device, double>::_Adaptor(std::random_device&)>:
         :	_ZNSt8__detail8_AdaptorISt13random_devicedEC2ERS1_():
         :	    template<typename _Engine, typename _DInputType>
         :	      struct _Adaptor
         :	      {
         :
         :	      public:
         :	        _Adaptor(_Engine& __g)
    0.00 :	  424b5a:       push   %rbp
    0.00 :	  424b5b:       mov    %rsp,%rbp
    0.00 :	  424b5e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  424b62:       mov    %rsi,-0x10(%rbp)
         :	        : _M_g(__g) { }
  100.00 :	  424b66:       mov    -0x8(%rbp),%rax
    0.00 :	  424b6a:       mov    -0x10(%rbp),%rdx
    0.00 :	  424b6e:       mov    %rdx,(%rax)
    0.00 :	  424b71:       pop    %rbp
    0.00 :	  424b72:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424b74 <std::__detail::_Adaptor<std::random_device, double>::operator()()>:
         :	_ZNSt8__detail8_AdaptorISt13random_devicedEclEv():
         :	         * Converts a value generated by the adapted random number generator
         :	         * into a value in the input domain for the dependent random number
         :	         * distribution.
         :	         */
         :	        _DInputType
         :	        operator()()
    0.00 :	  424b74:       push   %rbp
    0.00 :	  424b75:       mov    %rsp,%rbp
    0.00 :	  424b78:       sub    $0x10,%rsp
    0.00 :	  424b7c:       mov    %rdi,-0x8(%rbp)
         :	        {
         :	          return std::generate_canonical<_DInputType,
         :	                                    std::numeric_limits<_DInputType>::digits,
         :	                                    _Engine>(_M_g);
    0.00 :	  424b80:       mov    -0x8(%rbp),%rax
    0.00 :	  424b84:       mov    (%rax),%rax
    0.00 :	  424b87:       mov    %rax,%rdi
    0.00 :	  424b8a:       callq  4268e4 <double std::generate_canonical<double, 53ul, std::random_device>(std::random_device&)>
    0.00 :	  424b8f:       vmovsd %xmm0,-0x10(%rbp)
    0.00 :	  424b94:       mov    -0x10(%rbp),%rax
         :	        }
    0.00 :	  424b98:       mov    %rax,-0x10(%rbp)
    0.00 :	  424b9c:       vmovsd -0x10(%rbp),%xmm0
  100.00 :	  424ba1:       leaveq
    0.00 :	  424ba2:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428a0b <std::_Niter_base<double*>::iterator_type std::__niter_base<double*>(double*)>:
         :	_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
  100.00 :	  428a0b:       push   %rbp
    0.00 :	  428a0c:       mov    %rsp,%rbp
    0.00 :	  428a0f:       sub    $0x10,%rsp
    0.00 :	  428a13:       mov    %rdi,-0x8(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  428a17:       mov    -0x8(%rbp),%rax
    0.00 :	  428a1b:       mov    %rax,%rdi
    0.00 :	  428a1e:       callq  428e5a <std::_Iter_base<double*, false>::_S_base(double*)>
    0.00 :	  428a23:       leaveq
    0.00 :	  428a24:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425e9a <Edge* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*)>:
         :	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK4EdgeSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_():
         :	  template<bool _TrivialValueTypes>
         :	    struct __uninitialized_copy
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  425e9a:       push   %rbp
    0.00 :	  425e9b:       mov    %rsp,%rbp
    0.00 :	  425e9e:       push   %rbx
    0.00 :	  425e9f:       sub    $0x38,%rsp
    0.00 :	  425ea3:       mov    %rdi,-0x30(%rbp)
    0.00 :	  425ea7:       mov    %rsi,-0x40(%rbp)
    0.00 :	  425eab:       mov    %rdx,-0x38(%rbp)
         :	                      _ForwardIterator __result)
         :	        {
         :	          _ForwardIterator __cur = __result;
    0.00 :	  425eaf:       mov    -0x38(%rbp),%rax
    0.00 :	  425eb3:       mov    %rax,-0x18(%rbp)
         :	          __try
         :	            {
         :	              for (; __first != __last; ++__first, ++__cur)
    0.00 :	  425eb7:       jmp    425ef0 <Edge* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*)+0x56>
         :	                std::_Construct(std::__addressof(*__cur), *__first);
    0.00 :	  425eb9:       lea    -0x30(%rbp),%rax
    0.00 :	  425ebd:       mov    %rax,%rdi
    0.00 :	  425ec0:       callq  4275f2 <__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator*() const>
    0.00 :	  425ec5:       mov    %rax,%rbx
    0.00 :	  425ec8:       mov    -0x18(%rbp),%rax
    0.00 :	  425ecc:       mov    %rax,%rdi
    0.00 :	  425ecf:       callq  4275e4 <Edge* std::__addressof<Edge>(Edge&)>
    0.00 :	  425ed4:       mov    %rbx,%rsi
    0.00 :	  425ed7:       mov    %rax,%rdi
    0.00 :	  425eda:       callq  427611 <_ZSt10_ConstructI4EdgeIRKS0_EEvPT_DpOT0_>
         :	              for (; __first != __last; ++__first, ++__cur)
    0.00 :	  425edf:       lea    -0x30(%rbp),%rax
    0.00 :	  425ee3:       mov    %rax,%rdi
    0.00 :	  425ee6:       callq  4275c4 <__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator++()>
    0.00 :	  425eeb:       addq   $0x10,-0x18(%rbp)
    0.00 :	  425ef0:       lea    -0x40(%rbp),%rdx
    0.00 :	  425ef4:       lea    -0x30(%rbp),%rax
    0.00 :	  425ef8:       mov    %rdx,%rsi
  100.00 :	  425efb:       mov    %rax,%rdi
    0.00 :	  425efe:       callq  427588 <bool __gnu_cxx::operator!=<Edge const*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&)>
    0.00 :	  425f03:       test   %al,%al
    0.00 :	  425f05:       jne    425eb9 <Edge* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*)+0x1f>
         :	              return __cur;
    0.00 :	  425f07:       mov    -0x18(%rbp),%rax
    0.00 :	  425f0b:       jmp    425f40 <Edge* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*)+0xa6>
    0.00 :	  425f0d:       mov    %rax,%rbx
         :	            }
         :	          __catch(...)
    0.00 :	  425f10:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  425f15:       mov    %rbx,%rax
    0.00 :	  425f18:       mov    %rax,%rdi
    0.00 :	  425f1b:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  425f20:       mov    %rax,%rdi
    0.00 :	  425f23:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            {
         :	              std::_Destroy(__result, __cur);
    0.00 :	  425f28:       mov    -0x18(%rbp),%rdx
    0.00 :	  425f2c:       mov    -0x38(%rbp),%rax
    0.00 :	  425f30:       mov    %rdx,%rsi
    0.00 :	  425f33:       mov    %rax,%rdi
    0.00 :	  425f36:       callq  423890 <void std::_Destroy<Edge*>(Edge*, Edge*)>
         :	              __throw_exception_again;
    0.00 :	  425f3b:       callq  41db40 <__cxa_rethrow@plt>
         :	            }
         :	        }
    0.00 :	  425f40:       add    $0x38,%rsp
    0.00 :	  425f44:       pop    %rbx
    0.00 :	  425f45:       pop    %rbp
    0.00 :	  425f46:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428520 <Edge* std::__uninitialized_copy<false>::__uninit_copy<std::_Rb_tree_const_iterator<Edge>, Edge*>(std::_Rb_tree_const_iterator<Edge>, std::_Rb_tree_const_iterator<Edge>, Edge*)>:
         :	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt23_Rb_tree_const_iteratorI4EdgeEPS3_EET0_T_S7_S6_():
         :	  template<bool _TrivialValueTypes>
         :	    struct __uninitialized_copy
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  428520:       push   %rbp
    0.00 :	  428521:       mov    %rsp,%rbp
    0.00 :	  428524:       push   %rbx
    0.00 :	  428525:       sub    $0x38,%rsp
    0.00 :	  428529:       mov    %rdi,-0x30(%rbp)
    0.00 :	  42852d:       mov    %rsi,-0x40(%rbp)
    0.00 :	  428531:       mov    %rdx,-0x38(%rbp)
         :	                      _ForwardIterator __result)
         :	        {
         :	          _ForwardIterator __cur = __result;
    0.00 :	  428535:       mov    -0x38(%rbp),%rax
    0.00 :	  428539:       mov    %rax,-0x18(%rbp)
         :	          __try
         :	            {
         :	              for (; __first != __last; ++__first, ++__cur)
    0.00 :	  42853d:       jmp    428576 <Edge* std::__uninitialized_copy<false>::__uninit_copy<std::_Rb_tree_const_iterator<Edge>, Edge*>(std::_Rb_tree_const_iterator<Edge>, std::_Rb_tree_const_iterator<Edge>, Edge*)+0x56>
         :	                std::_Construct(std::__addressof(*__cur), *__first);
    0.00 :	  42853f:       lea    -0x30(%rbp),%rax
    0.00 :	  428543:       mov    %rax,%rdi
    0.00 :	  428546:       callq  428c16 <std::_Rb_tree_const_iterator<Edge>::operator*() const>
    0.00 :	  42854b:       mov    %rax,%rbx
    0.00 :	  42854e:       mov    -0x18(%rbp),%rax
    0.00 :	  428552:       mov    %rax,%rdi
    0.00 :	  428555:       callq  4275e4 <Edge* std::__addressof<Edge>(Edge&)>
    0.00 :	  42855a:       mov    %rbx,%rsi
    0.00 :	  42855d:       mov    %rax,%rdi
    0.00 :	  428560:       callq  427611 <_ZSt10_ConstructI4EdgeIRKS0_EEvPT_DpOT0_>
         :	              for (; __first != __last; ++__first, ++__cur)
    0.00 :	  428565:       lea    -0x30(%rbp),%rax
    0.00 :	  428569:       mov    %rax,%rdi
    0.00 :	  42856c:       callq  4284f8 <std::_Rb_tree_const_iterator<Edge>::operator++()>
    0.00 :	  428571:       addq   $0x10,-0x18(%rbp)
  100.00 :	  428576:       lea    -0x40(%rbp),%rdx
    0.00 :	  42857a:       lea    -0x30(%rbp),%rax
    0.00 :	  42857e:       mov    %rdx,%rsi
    0.00 :	  428581:       mov    %rax,%rdi
    0.00 :	  428584:       callq  4284d6 <std::_Rb_tree_const_iterator<Edge>::operator!=(std::_Rb_tree_const_iterator<Edge> const&) const>
    0.00 :	  428589:       test   %al,%al
    0.00 :	  42858b:       jne    42853f <Edge* std::__uninitialized_copy<false>::__uninit_copy<std::_Rb_tree_const_iterator<Edge>, Edge*>(std::_Rb_tree_const_iterator<Edge>, std::_Rb_tree_const_iterator<Edge>, Edge*)+0x1f>
         :	              return __cur;
    0.00 :	  42858d:       mov    -0x18(%rbp),%rax
         :	          __catch(...)
         :	            {
         :	              std::_Destroy(__result, __cur);
         :	              __throw_exception_again;
         :	            }
         :	        }
    0.00 :	  428591:       add    $0x38,%rsp
    0.00 :	  428595:       pop    %rbx
    0.00 :	  428596:       pop    %rbp
    0.00 :	  428597:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004282cc <int* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<int*>, int*>(std::move_iterator<int*>, std::move_iterator<int*>, int*)>:
         :	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_():
         :	  template<>
         :	    struct __uninitialized_copy<true>
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  4282cc:       push   %rbp
    0.00 :	  4282cd:       mov    %rsp,%rbp
  100.00 :	  4282d0:       sub    $0x20,%rsp
    0.00 :	  4282d4:       mov    %rdi,-0x10(%rbp)
    0.00 :	  4282d8:       mov    %rsi,-0x20(%rbp)
    0.00 :	  4282dc:       mov    %rdx,-0x18(%rbp)
         :	                      _ForwardIterator __result)
         :	        { return std::copy(__first, __last, __result); }
    0.00 :	  4282e0:       mov    -0x18(%rbp),%rdx
    0.00 :	  4282e4:       mov    -0x20(%rbp),%rcx
    0.00 :	  4282e8:       mov    -0x10(%rbp),%rax
    0.00 :	  4282ec:       mov    %rcx,%rsi
    0.00 :	  4282ef:       mov    %rax,%rdi
    0.00 :	  4282f2:       callq  428b0f <int* std::copy<std::move_iterator<int*>, int*>(std::move_iterator<int*>, std::move_iterator<int*>, int*)>
    0.00 :	  4282f7:       leaveq
    0.00 :	  4282f8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000425b3e <void std::__uninitialized_default_n<double*, unsigned long>(double*, unsigned long)>:
         :	_ZSt25__uninitialized_default_nIPdmEvT_T0_():
         :
         :	  // __uninitialized_default_n
         :	  // Fills [first, first + n) with n default constructed value_type(s).
         :	  template<typename _ForwardIterator, typename _Size>
         :	    inline void
         :	    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
  100.00 :	  425b3e:       push   %rbp
    0.00 :	  425b3f:       mov    %rsp,%rbp
    0.00 :	  425b42:       sub    $0x10,%rsp
    0.00 :	  425b46:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425b4a:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType;
         :
         :	      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
    0.00 :	  425b4e:       mov    -0x10(%rbp),%rdx
    0.00 :	  425b52:       mov    -0x8(%rbp),%rax
    0.00 :	  425b56:       mov    %rdx,%rsi
    0.00 :	  425b59:       mov    %rax,%rdi
    0.00 :	  425b5c:       callq  42739d <void std::__uninitialized_default_n_1<true>::__uninit_default_n<double*, unsigned long>(double*, unsigned long)>
         :	        __uninit_default_n(__first, __n);
         :	    }
    0.00 :	  425b61:       leaveq
    0.00 :	  425b62:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430f0e <void std::__uninitialized_default_n_1<true>::__uninit_default_n<LLcol*, unsigned long>(LLcol*, unsigned long)>:
         :	_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP5LLcolmEEvT_T0_():
         :	  template<>
         :	    struct __uninitialized_default_n_1<true>
         :	    {
         :	      template<typename _ForwardIterator, typename _Size>
         :	        static void
         :	        __uninit_default_n(_ForwardIterator __first, _Size __n)
  100.00 :	  430f0e:       push   %rbp
    0.00 :	  430f0f:       mov    %rsp,%rbp
    0.00 :	  430f12:       sub    $0x20,%rsp
    0.00 :	  430f16:       mov    %rdi,-0x18(%rbp)
    0.00 :	  430f1a:       mov    %rsi,-0x20(%rbp)
         :	        {
         :	          typedef typename iterator_traits<_ForwardIterator>::value_type
         :	            _ValueType;
         :
         :	          std::fill_n(__first, __n, _ValueType());
    0.00 :	  430f1e:       movl   $0x0,-0x10(%rbp)
    0.00 :	  430f25:       movl   $0x0,-0xc(%rbp)
    0.00 :	  430f2c:       mov    $0x0,%eax
    0.00 :	  430f31:       mov    %rax,-0x8(%rbp)
    0.00 :	  430f35:       lea    -0x10(%rbp),%rdx
    0.00 :	  430f39:       mov    -0x20(%rbp),%rcx
    0.00 :	  430f3d:       mov    -0x18(%rbp),%rax
    0.00 :	  430f41:       mov    %rcx,%rsi
    0.00 :	  430f44:       mov    %rax,%rdi
    0.00 :	  430f47:       callq  431520 <LLcol* std::fill_n<LLcol*, unsigned long, LLcol>(LLcol*, unsigned long, LLcol const&)>
         :	        }
    0.00 :	  430f4c:       jmp    430f56 <void std::__uninitialized_default_n_1<true>::__uninit_default_n<LLcol*, unsigned long>(LLcol*, unsigned long)+0x48>
    0.00 :	  430f4e:       mov    %rax,%rdi
    0.00 :	  430f51:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  430f56:       leaveq
    0.00 :	  430f57:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004236bc <int* std::__uninitialized_move_if_noexcept_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&)>:
         :	_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_():
         :	    }
         :
         :	  template<typename _InputIterator, typename _ForwardIterator,
         :	           typename _Allocator>
         :	    inline _ForwardIterator
         :	    __uninitialized_move_if_noexcept_a(_InputIterator __first,
    0.00 :	  4236bc:       push   %rbp
    0.00 :	  4236bd:       mov    %rsp,%rbp
    0.00 :	  4236c0:       push   %rbx
    0.00 :	  4236c1:       sub    $0x28,%rsp
    0.00 :	  4236c5:       mov    %rdi,-0x18(%rbp)
    0.00 :	  4236c9:       mov    %rsi,-0x20(%rbp)
    0.00 :	  4236cd:       mov    %rdx,-0x28(%rbp)
    0.00 :	  4236d1:       mov    %rcx,-0x30(%rbp)
         :	                                       _ForwardIterator __result,
         :	                                       _Allocator& __alloc)
         :	    {
         :	      return std::__uninitialized_copy_a
         :	        (_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
         :	         _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    0.00 :	  4236d5:       mov    -0x20(%rbp),%rax
    0.00 :	  4236d9:       mov    %rax,%rdi
    0.00 :	  4236dc:       callq  425cd4 <std::move_iterator<int*> std::__make_move_if_noexcept_iterator<int*, std::move_iterator<int*> >(int*)>
    0.00 :	  4236e1:       mov    %rax,%rbx
    0.00 :	  4236e4:       mov    -0x18(%rbp),%rax
    0.00 :	  4236e8:       mov    %rax,%rdi
    0.00 :	  4236eb:       callq  425cd4 <std::move_iterator<int*> std::__make_move_if_noexcept_iterator<int*, std::move_iterator<int*> >(int*)>
    0.00 :	  4236f0:       mov    -0x30(%rbp),%rcx
    0.00 :	  4236f4:       mov    -0x28(%rbp),%rdx
    0.00 :	  4236f8:       mov    %rbx,%rsi
    0.00 :	  4236fb:       mov    %rax,%rdi
    0.00 :	  4236fe:       callq  425cf9 <int* std::__uninitialized_copy_a<std::move_iterator<int*>, int*, int>(std::move_iterator<int*>, std::move_iterator<int*>, int*, std::allocator<int>&)>
         :	    }
  100.00 :	  423703:       add    $0x28,%rsp
    0.00 :	  423707:       pop    %rbx
    0.00 :	  423708:       pop    %rbp
    0.00 :	  423709:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420470 <std::allocator<int>::allocator()>:
         :	_ZNSaIiEC2Ev():
         :	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
         :	      // 2103. std::allocator propagate_on_container_move_assignment
         :	      typedef true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      allocator() throw() { }
    0.00 :	  420470:       push   %rbp
    0.00 :	  420471:       mov    %rsp,%rbp
    0.00 :	  420474:       sub    $0x10,%rsp
    0.00 :	  420478:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42047c:       mov    -0x8(%rbp),%rax
    0.00 :	  420480:       mov    %rax,%rdi
  100.00 :	  420483:       callq  42211a <__gnu_cxx::new_allocator<int>::new_allocator()>
    0.00 :	  420488:       leaveq
    0.00 :	  420489:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004282b2 <std::enable_if<std::allocator_traits<std::allocator<int> >::__maxsize_helper<std::allocator<int> const>::value, unsigned long>::type std::allocator_traits<std::allocator<int> >::_S_max_size<std::allocator<int> const>(std::allocator<int> const&)>:
         :	_ZNSt16allocator_traitsISaIiEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_():
         :	        };
         :
         :	      template<typename _Alloc2>
         :	        static typename
         :	        enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
         :	        _S_max_size(_Alloc2& __a)
    0.00 :	  4282b2:       push   %rbp
    0.00 :	  4282b3:       mov    %rsp,%rbp
    0.00 :	  4282b6:       sub    $0x10,%rsp
    0.00 :	  4282ba:       mov    %rdi,-0x8(%rbp)
         :	        { return __a.max_size(); }
  100.00 :	  4282be:       mov    -0x8(%rbp),%rax
    0.00 :	  4282c2:       mov    %rax,%rdi
    0.00 :	  4282c5:       callq  4274b0 <__gnu_cxx::new_allocator<int>::max_size() const>
    0.00 :	  4282ca:       leaveq
    0.00 :	  4282cb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428b0f <int* std::copy<std::move_iterator<int*>, int*>(std::move_iterator<int*>, std::move_iterator<int*>, int*)>:
         :	_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_():
         :	   *  Note that the end of the output range is permitted to be contained
         :	   *  within [first,last).
         :	  */
         :	  template<typename _II, typename _OI>
         :	    inline _OI
         :	    copy(_II __first, _II __last, _OI __result)
  100.00 :	  428b0f:       push   %rbp
    0.00 :	  428b10:       mov    %rsp,%rbp
    0.00 :	  428b13:       push   %rbx
    0.00 :	  428b14:       sub    $0x28,%rsp
    0.00 :	  428b18:       mov    %rdi,-0x20(%rbp)
    0.00 :	  428b1c:       mov    %rsi,-0x30(%rbp)
    0.00 :	  428b20:       mov    %rdx,-0x28(%rbp)
         :	            typename iterator_traits<_II>::value_type>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
         :	              (std::__miter_base(__first), std::__miter_base(__last),
         :	               __result));
    0.00 :	  428b24:       mov    -0x30(%rbp),%rax
    0.00 :	  428b28:       mov    %rax,%rdi
    0.00 :	  428b2b:       callq  428ee8 <std::_Miter_base<std::move_iterator<int*> >::iterator_type std::__miter_base<std::move_iterator<int*> >(std::move_iterator<int*>)>
    0.00 :	  428b30:       mov    %rax,%rbx
    0.00 :	  428b33:       mov    -0x20(%rbp),%rax
    0.00 :	  428b37:       mov    %rax,%rdi
    0.00 :	  428b3a:       callq  428ee8 <std::_Miter_base<std::move_iterator<int*> >::iterator_type std::__miter_base<std::move_iterator<int*> >(std::move_iterator<int*>)>
    0.00 :	  428b3f:       mov    -0x28(%rbp),%rdx
    0.00 :	  428b43:       mov    %rbx,%rsi
    0.00 :	  428b46:       mov    %rax,%rdi
    0.00 :	  428b49:       callq  428f02 <int* std::__copy_move_a2<true, int*, int*>(int*, int*, int*)>
         :	    }
    0.00 :	  428b4e:       add    $0x28,%rsp
    0.00 :	  428b52:       pop    %rbx
    0.00 :	  428b53:       pop    %rbp
    0.00 :	  428b54:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fe84 <std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&)>:
         :	_ZSt4moveIR4EdgeEONSt16remove_referenceIT_E4typeEOS3_():
         :	   *  @param  __t  A thing of arbitrary type.
         :	   *  @return The parameter cast to an rvalue-reference to allow moving it.
         :	  */
         :	  template<typename _Tp>
         :	    constexpr typename std::remove_reference<_Tp>::type&&
         :	    move(_Tp&& __t) noexcept
  100.00 :	  41fe84:       push   %rbp
    0.00 :	  41fe85:       mov    %rsp,%rbp
    0.00 :	  41fe88:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    0.00 :	  41fe8c:       mov    -0x8(%rbp),%rax
    0.00 :	  41fe90:       pop    %rbp
    0.00 :	  41fe91:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429038 <std::move_iterator<LLord*>::operator++()>:
         :	_ZNSt13move_iteratorIP5LLordEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      move_iterator&
         :	      operator++()
  100.00 :	  429038:       push   %rbp
    0.00 :	  429039:       mov    %rsp,%rbp
    0.00 :	  42903c:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    0.00 :	  429040:       mov    -0x8(%rbp),%rax
    0.00 :	  429044:       mov    (%rax),%rax
    0.00 :	  429047:       lea    0x10(%rax),%rdx
    0.00 :	  42904b:       mov    -0x8(%rbp),%rax
    0.00 :	  42904f:       mov    %rdx,(%rax)
         :	        return *this;
    0.00 :	  429052:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  429056:       pop    %rbp
    0.00 :	  429057:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004293ba <std::move_iterator<int*>::base() const>:
         :	_ZNKSt13move_iteratorIPiE4baseEv():
         :	      template<typename _Iter>
         :	        move_iterator(const move_iterator<_Iter>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      iterator_type
         :	      base() const
  100.00 :	  4293ba:       push   %rbp
    0.00 :	  4293bb:       mov    %rsp,%rbp
    0.00 :	  4293be:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
    0.00 :	  4293c2:       mov    -0x8(%rbp),%rax
    0.00 :	  4293c6:       mov    (%rax),%rax
    0.00 :	  4293c9:       pop    %rbp
    0.00 :	  4293ca:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042054e <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&)>:
         :	_ZNSt19normal_distributionIdEclISt13random_deviceEEdRT_():
         :	      /**
         :	       * @brief Generating functions.
         :	       */
         :	      template<typename _UniformRandomNumberGenerator>
         :	        result_type
         :	        operator()(_UniformRandomNumberGenerator& __urng)
    0.00 :	  42054e:       push   %rbp
    0.00 :	  42054f:       mov    %rsp,%rbp
    0.00 :	  420552:       sub    $0x20,%rsp
    0.00 :	  420556:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42055a:       mov    %rsi,-0x10(%rbp)
         :	        { return this->operator()(__urng, _M_param); }
    0.00 :	  42055e:       mov    -0x8(%rbp),%rdx
    0.00 :	  420562:       mov    -0x10(%rbp),%rcx
    0.00 :	  420566:       mov    -0x8(%rbp),%rax
    0.00 :	  42056a:       mov    %rcx,%rsi
    0.00 :	  42056d:       mov    %rax,%rdi
    0.00 :	  420570:       callq  42231a <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)>
    0.00 :	  420575:       vmovsd %xmm0,-0x18(%rbp)
    0.00 :	  42057a:       mov    -0x18(%rbp),%rax
  100.00 :	  42057e:       mov    %rax,-0x18(%rbp)
    0.00 :	  420582:       vmovsd -0x18(%rbp),%xmm0
    0.00 :	  420587:       leaveq
    0.00 :	  420588:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042231a <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)>:
         :	_ZNSt19normal_distributionIdEclISt13random_deviceEEdRT_RKNS0_10param_typeE():
         :	   * New York, 1986, Ch. V, Sect. 4.4.
         :	   */
         :	  template<typename _RealType>
         :	    template<typename _UniformRandomNumberGenerator>
         :	      typename normal_distribution<_RealType>::result_type
         :	      normal_distribution<_RealType>::
    0.00 :	  42231a:       push   %rbp
    0.00 :	  42231b:       mov    %rsp,%rbp
    0.00 :	  42231e:       sub    $0x50,%rsp
    0.00 :	  422322:       mov    %rdi,-0x38(%rbp)
    0.00 :	  422326:       mov    %rsi,-0x40(%rbp)
    0.00 :	  42232a:       mov    %rdx,-0x48(%rbp)
         :	      operator()(_UniformRandomNumberGenerator& __urng,
         :	                 const param_type& __param)
         :	      {
         :	        result_type __ret;
         :	        __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
         :	          __aurng(__urng);
    0.00 :	  42232e:       mov    -0x40(%rbp),%rdx
    0.00 :	  422332:       lea    -0x30(%rbp),%rax
    0.00 :	  422336:       mov    %rdx,%rsi
    0.00 :	  422339:       mov    %rax,%rdi
    0.00 :	  42233c:       callq  424b5a <std::__detail::_Adaptor<std::random_device, double>::_Adaptor(std::random_device&)>
         :
         :	        if (_M_saved_available)
    0.00 :	  422341:       mov    -0x38(%rbp),%rax
    0.00 :	  422345:       movzbl 0x18(%rax),%eax
    0.00 :	  422349:       test   %al,%al
    0.00 :	  42234b:       je     422366 <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)+0x4c>
         :	          {
         :	            _M_saved_available = false;
    0.00 :	  42234d:       mov    -0x38(%rbp),%rax
    0.00 :	  422351:       movb   $0x0,0x18(%rax)
         :	            __ret = _M_saved;
    0.00 :	  422355:       mov    -0x38(%rbp),%rax
    0.00 :	  422359:       mov    0x10(%rax),%rax
    0.00 :	  42235d:       mov    %rax,-0x8(%rbp)
    0.00 :	  422361:       jmpq   422451 <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)+0x137>
         :	        else
         :	          {
         :	            result_type __x, __y, __r2;
         :	            do
         :	              {
         :	                __x = result_type(2.0) * __aurng() - 1.0;
    0.00 :	  422366:       lea    -0x30(%rbp),%rax
    0.00 :	  42236a:       mov    %rax,%rdi
    0.00 :	  42236d:       callq  424b74 <std::__detail::_Adaptor<std::random_device, double>::operator()()>
    0.00 :	  422372:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  422376:       vmovsd 0x1172a(%rip),%xmm1        # 433aa8 <__gthread_active_p()::__gthread_active_ptr+0x8>
    0.00 :	  42237e:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  422382:       vmovsd %xmm0,-0x10(%rbp)
         :	                __y = result_type(2.0) * __aurng() - 1.0;
    0.00 :	  422387:       lea    -0x30(%rbp),%rax
    0.00 :	  42238b:       mov    %rax,%rdi
    0.00 :	  42238e:       callq  424b74 <std::__detail::_Adaptor<std::random_device, double>::operator()()>
    0.00 :	  422393:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  422397:       vmovsd 0x11709(%rip),%xmm1        # 433aa8 <__gthread_active_p()::__gthread_active_ptr+0x8>
    0.00 :	  42239f:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  4223a3:       vmovsd %xmm0,-0x18(%rbp)
         :	                __r2 = __x * __x + __y * __y;
    0.00 :	  4223a8:       vmovsd -0x10(%rbp),%xmm0
    0.00 :	  4223ad:       vmulsd -0x10(%rbp),%xmm0,%xmm1
    0.00 :	  4223b2:       vmovsd -0x18(%rbp),%xmm0
    0.00 :	  4223b7:       vmulsd -0x18(%rbp),%xmm0,%xmm0
    0.00 :	  4223bc:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  4223c0:       vmovsd %xmm0,-0x20(%rbp)
         :	            do
    0.00 :	  4223c5:       vmovsd -0x20(%rbp),%xmm0
    0.00 :	  4223ca:       vmovsd 0x116d6(%rip),%xmm1        # 433aa8 <__gthread_active_p()::__gthread_active_ptr+0x8>
    0.00 :	  4223d2:       vucomisd %xmm1,%xmm0
    0.00 :	  4223d6:       ja     422366 <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)+0x4c>
    0.00 :	  4223d8:       vxorpd %xmm0,%xmm0,%xmm0
    0.00 :	  4223dc:       vucomisd -0x20(%rbp),%xmm0
    0.00 :	  4223e1:       jp     4223f2 <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)+0xd8>
    0.00 :	  4223e3:       vxorpd %xmm0,%xmm0,%xmm0
    0.00 :	  4223e7:       vucomisd -0x20(%rbp),%xmm0
    0.00 :	  4223ec:       je     422366 <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)+0x4c>
         :	              }
         :	            while (__r2 > 1.0 || __r2 == 0.0);
         :
         :	            const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
    0.00 :	  4223f2:       mov    -0x20(%rbp),%rax
    0.00 :	  4223f6:       mov    %rax,-0x50(%rbp)
    0.00 :	  4223fa:       vmovsd -0x50(%rbp),%xmm0
    0.00 :	  4223ff:       callq  41ddd0 <log@plt>
    0.00 :	  422404:       vmovsd 0x116b4(%rip),%xmm1        # 433ac0 <__gthread_active_p()::__gthread_active_ptr+0x20>
    0.00 :	  42240c:       vmulsd %xmm1,%xmm0,%xmm0
    0.00 :	  422410:       vdivsd -0x20(%rbp),%xmm0,%xmm0
  100.00 :	  422415:       callq  41ddb0 <sqrt@plt>
    0.00 :	  42241a:       vmovsd %xmm0,-0x50(%rbp)
    0.00 :	  42241f:       mov    -0x50(%rbp),%rax
    0.00 :	  422423:       mov    %rax,-0x28(%rbp)
         :	            _M_saved = __x * __mult;
    0.00 :	  422427:       vmovsd -0x10(%rbp),%xmm0
    0.00 :	  42242c:       vmulsd -0x28(%rbp),%xmm0,%xmm0
    0.00 :	  422431:       mov    -0x38(%rbp),%rax
    0.00 :	  422435:       vmovsd %xmm0,0x10(%rax)
         :	            _M_saved_available = true;
    0.00 :	  42243a:       mov    -0x38(%rbp),%rax
    0.00 :	  42243e:       movb   $0x1,0x18(%rax)
         :	            __ret = __y * __mult;
    0.00 :	  422442:       vmovsd -0x18(%rbp),%xmm0
    0.00 :	  422447:       vmulsd -0x28(%rbp),%xmm0,%xmm0
    0.00 :	  42244c:       vmovsd %xmm0,-0x8(%rbp)
         :	          }
         :
         :	        __ret = __ret * __param.stddev() + __param.mean();
    0.00 :	  422451:       mov    -0x48(%rbp),%rax
    0.00 :	  422455:       mov    %rax,%rdi
    0.00 :	  422458:       callq  424bbe <std::normal_distribution<double>::param_type::stddev() const>
    0.00 :	  42245d:       vmulsd -0x8(%rbp),%xmm0,%xmm2
    0.00 :	  422462:       vmovsd %xmm2,-0x50(%rbp)
    0.00 :	  422467:       mov    -0x48(%rbp),%rax
    0.00 :	  42246b:       mov    %rax,%rdi
    0.00 :	  42246e:       callq  424ba4 <std::normal_distribution<double>::param_type::mean() const>
    0.00 :	  422473:       vaddsd -0x50(%rbp),%xmm0,%xmm0
    0.00 :	  422478:       vmovsd %xmm0,-0x8(%rbp)
         :	        return __ret;
    0.00 :	  42247d:       mov    -0x8(%rbp),%rax
    0.00 :	  422481:       jmp    42248b <double std::normal_distribution<double>::operator()<std::random_device>(std::random_device&, std::normal_distribution<double>::param_type const&)+0x171>
    0.00 :	  422483:       mov    %rax,%rdi
    0.00 :	  422486:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  42248b:       mov    %rax,-0x50(%rbp)
    0.00 :	  42248f:       vmovsd -0x50(%rbp),%xmm0
    0.00 :	  422494:       leaveq
    0.00 :	  422495:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041ebbe <std::random_device::min()>:
         :	_ZNSt13random_device3minEv():
         :	  public:
         :
         :	#endif
         :
         :	    static constexpr result_type
         :	    min()
  100.00 :	  41ebbe:       push   %rbp
    0.00 :	  41ebbf:       mov    %rsp,%rbp
         :	    { return std::numeric_limits<result_type>::min(); }
    0.00 :	  41ebc2:       callq  41eb68 <std::numeric_limits<unsigned int>::min()>
    0.00 :	  41ebc7:       pop    %rbp
    0.00 :	  41ebc8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004274dd <int* std::uninitialized_copy<std::move_iterator<int*>, int*>(std::move_iterator<int*>, std::move_iterator<int*>, int*)>:
         :	_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_():
         :	   *
         :	   *  Like copy(), but does not require an initialized output range.
         :	  */
         :	  template<typename _InputIterator, typename _ForwardIterator>
         :	    inline _ForwardIterator
         :	    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  4274dd:       push   %rbp
    0.00 :	  4274de:       mov    %rsp,%rbp
    0.00 :	  4274e1:       sub    $0x20,%rsp
    0.00 :	  4274e5:       mov    %rdi,-0x10(%rbp)
  100.00 :	  4274e9:       mov    %rsi,-0x20(%rbp)
    0.00 :	  4274ed:       mov    %rdx,-0x18(%rbp)
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType2;
         :
         :	      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
         :	                                        && __is_trivial(_ValueType2))>::
         :	        __uninit_copy(__first, __last, __result);
    0.00 :	  4274f1:       mov    -0x18(%rbp),%rdx
    0.00 :	  4274f5:       mov    -0x20(%rbp),%rcx
    0.00 :	  4274f9:       mov    -0x10(%rbp),%rax
    0.00 :	  4274fd:       mov    %rcx,%rsi
    0.00 :	  427500:       mov    %rax,%rdi
    0.00 :	  427503:       callq  4282cc <int* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<int*>, int*>(std::move_iterator<int*>, std::move_iterator<int*>, int*)>
         :	    }
    0.00 :	  427508:       leaveq
    0.00 :	  427509:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422098 <void std::vector<LLord, std::allocator<LLord> >::emplace_back<LLord>(LLord&&)>:
         :	_ZNSt6vectorI5LLordSaIS0_EE12emplace_backIIS0_EEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    0.00 :	  422098:       push   %rbp
    0.00 :	  422099:       mov    %rsp,%rbp
    0.00 :	  42209c:       sub    $0x10,%rsp
    0.00 :	  4220a0:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4220a4:       mov    %rsi,-0x10(%rbp)
         :	      emplace_back(_Args&&... __args)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  4220a8:       mov    -0x8(%rbp),%rax
    0.00 :	  4220ac:       mov    0x8(%rax),%rdx
    0.00 :	  4220b0:       mov    -0x8(%rbp),%rax
    0.00 :	  4220b4:       mov    0x10(%rax),%rax
  100.00 :	  4220b8:       cmp    %rax,%rdx
    0.00 :	  4220bb:       je     4220f9 <void std::vector<LLord, std::allocator<LLord> >::emplace_back<LLord>(LLord&&)+0x61>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  4220bd:       mov    -0x10(%rbp),%rax
    0.00 :	  4220c1:       mov    %rax,%rdi
    0.00 :	  4220c4:       callq  422089 <LLord&& std::forward<LLord>(std::remove_reference<LLord>::type&)>
    0.00 :	  4220c9:       mov    %rax,%rdx
    0.00 :	  4220cc:       mov    -0x8(%rbp),%rax
    0.00 :	  4220d0:       mov    0x8(%rax),%rcx
    0.00 :	  4220d4:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  4220d8:       mov    %rcx,%rsi
    0.00 :	  4220db:       mov    %rax,%rdi
    0.00 :	  4220de:       callq  42472f <_ZNSt16allocator_traitsISaI5LLordEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_>
         :	            ++this->_M_impl._M_finish;
    0.00 :	  4220e3:       mov    -0x8(%rbp),%rax
    0.00 :	  4220e7:       mov    0x8(%rax),%rax
    0.00 :	  4220eb:       lea    0x10(%rax),%rdx
    0.00 :	  4220ef:       mov    -0x8(%rbp),%rax
    0.00 :	  4220f3:       mov    %rdx,0x8(%rax)
    0.00 :	  4220f7:       jmp    422117 <void std::vector<LLord, std::allocator<LLord> >::emplace_back<LLord>(LLord&&)+0x7f>
         :	          }
         :	        else
         :	          _M_emplace_back_aux(std::forward<_Args>(__args)...);
    0.00 :	  4220f9:       mov    -0x10(%rbp),%rax
    0.00 :	  4220fd:       mov    %rax,%rdi
    0.00 :	  422100:       callq  422089 <LLord&& std::forward<LLord>(std::remove_reference<LLord>::type&)>
    0.00 :	  422105:       mov    %rax,%rdx
    0.00 :	  422108:       mov    -0x8(%rbp),%rax
    0.00 :	  42210c:       mov    %rdx,%rsi
    0.00 :	  42210f:       mov    %rax,%rdi
    0.00 :	  422112:       callq  424768 <void std::vector<LLord, std::allocator<LLord> >::_M_emplace_back_aux<LLord>(LLord&&)>
         :	      }
    0.00 :	  422117:       leaveq
    0.00 :	  422118:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000423440 <std::vector<double, std::allocator<double> >::_M_check_len(unsigned long, char const*) const>:
         :	_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc():
         :	        _M_emplace_back_aux(_Args&&... __args);
         :	#endif
         :
         :	      // Called by the latter.
         :	      size_type
         :	      _M_check_len(size_type __n, const char* __s) const
    0.00 :	  423440:       push   %rbp
    0.00 :	  423441:       mov    %rsp,%rbp
    0.00 :	  423444:       push   %rbx
    0.00 :	  423445:       sub    $0x38,%rsp
    0.00 :	  423449:       mov    %rdi,-0x28(%rbp)
  100.00 :	  42344d:       mov    %rsi,-0x30(%rbp)
    0.00 :	  423451:       mov    %rdx,-0x38(%rbp)
         :	      {
         :	        if (max_size() - size() < __n)
    0.00 :	  423455:       mov    -0x28(%rbp),%rax
    0.00 :	  423459:       mov    %rax,%rdi
    0.00 :	  42345c:       callq  425b64 <std::vector<double, std::allocator<double> >::max_size() const>
    0.00 :	  423461:       mov    %rax,%rbx
    0.00 :	  423464:       mov    -0x28(%rbp),%rax
    0.00 :	  423468:       mov    %rax,%rdi
    0.00 :	  42346b:       callq  41fe5e <std::vector<double, std::allocator<double> >::size() const>
    0.00 :	  423470:       sub    %rax,%rbx
    0.00 :	  423473:       mov    %rbx,%rdx
    0.00 :	  423476:       mov    -0x30(%rbp),%rax
    0.00 :	  42347a:       cmp    %rax,%rdx
    0.00 :	  42347d:       setb   %al
    0.00 :	  423480:       test   %al,%al
    0.00 :	  423482:       je     423490 <std::vector<double, std::allocator<double> >::_M_check_len(unsigned long, char const*) const+0x50>
         :	          __throw_length_error(__N(__s));
    0.00 :	  423484:       mov    -0x38(%rbp),%rax
    0.00 :	  423488:       mov    %rax,%rdi
    0.00 :	  42348b:       callq  41dac0 <std::__throw_length_error(char const*)@plt>
         :
         :	        const size_type __len = size() + std::max(size(), __n);
    0.00 :	  423490:       mov    -0x28(%rbp),%rax
    0.00 :	  423494:       mov    %rax,%rdi
    0.00 :	  423497:       callq  41fe5e <std::vector<double, std::allocator<double> >::size() const>
    0.00 :	  42349c:       mov    %rax,%rbx
    0.00 :	  42349f:       mov    -0x28(%rbp),%rax
    0.00 :	  4234a3:       mov    %rax,%rdi
    0.00 :	  4234a6:       callq  41fe5e <std::vector<double, std::allocator<double> >::size() const>
    0.00 :	  4234ab:       mov    %rax,-0x20(%rbp)
    0.00 :	  4234af:       lea    -0x30(%rbp),%rdx
    0.00 :	  4234b3:       lea    -0x20(%rbp),%rax
    0.00 :	  4234b7:       mov    %rdx,%rsi
    0.00 :	  4234ba:       mov    %rax,%rdi
    0.00 :	  4234bd:       callq  425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :	  4234c2:       mov    (%rax),%rax
    0.00 :	  4234c5:       add    %rbx,%rax
    0.00 :	  4234c8:       mov    %rax,-0x18(%rbp)
         :	        return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :	  4234cc:       mov    -0x28(%rbp),%rax
    0.00 :	  4234d0:       mov    %rax,%rdi
    0.00 :	  4234d3:       callq  41fe5e <std::vector<double, std::allocator<double> >::size() const>
    0.00 :	  4234d8:       cmp    -0x18(%rbp),%rax
    0.00 :	  4234dc:       ja     4234f0 <std::vector<double, std::allocator<double> >::_M_check_len(unsigned long, char const*) const+0xb0>
    0.00 :	  4234de:       mov    -0x28(%rbp),%rax
    0.00 :	  4234e2:       mov    %rax,%rdi
    0.00 :	  4234e5:       callq  425b64 <std::vector<double, std::allocator<double> >::max_size() const>
    0.00 :	  4234ea:       cmp    -0x18(%rbp),%rax
    0.00 :	  4234ee:       jae    4234fe <std::vector<double, std::allocator<double> >::_M_check_len(unsigned long, char const*) const+0xbe>
    0.00 :	  4234f0:       mov    -0x28(%rbp),%rax
    0.00 :	  4234f4:       mov    %rax,%rdi
    0.00 :	  4234f7:       callq  425b64 <std::vector<double, std::allocator<double> >::max_size() const>
    0.00 :	  4234fc:       jmp    423502 <std::vector<double, std::allocator<double> >::_M_check_len(unsigned long, char const*) const+0xc2>
    0.00 :	  4234fe:       mov    -0x18(%rbp),%rax
         :	      }
    0.00 :	  423502:       add    $0x38,%rsp
    0.00 :	  423506:       pop    %rbx
    0.00 :	  423507:       pop    %rbp
    0.00 :	  423508:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004235ba <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const>:
         :	_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc():
         :	        _M_emplace_back_aux(_Args&&... __args);
         :	#endif
         :
         :	      // Called by the latter.
         :	      size_type
         :	      _M_check_len(size_type __n, const char* __s) const
    0.00 :	  4235ba:       push   %rbp
  100.00 :	  4235bb:       mov    %rsp,%rbp
    0.00 :	  4235be:       push   %rbx
    0.00 :	  4235bf:       sub    $0x38,%rsp
    0.00 :	  4235c3:       mov    %rdi,-0x28(%rbp)
    0.00 :	  4235c7:       mov    %rsi,-0x30(%rbp)
    0.00 :	  4235cb:       mov    %rdx,-0x38(%rbp)
         :	      {
         :	        if (max_size() - size() < __n)
    0.00 :	  4235cf:       mov    -0x28(%rbp),%rax
    0.00 :	  4235d3:       mov    %rax,%rdi
    0.00 :	  4235d6:       callq  425c70 <std::vector<int, std::allocator<int> >::max_size() const>
    0.00 :	  4235db:       mov    %rax,%rbx
    0.00 :	  4235de:       mov    -0x28(%rbp),%rax
    0.00 :	  4235e2:       mov    %rax,%rdi
    0.00 :	  4235e5:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  4235ea:       sub    %rax,%rbx
    0.00 :	  4235ed:       mov    %rbx,%rdx
    0.00 :	  4235f0:       mov    -0x30(%rbp),%rax
    0.00 :	  4235f4:       cmp    %rax,%rdx
    0.00 :	  4235f7:       setb   %al
    0.00 :	  4235fa:       test   %al,%al
    0.00 :	  4235fc:       je     42360a <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0x50>
         :	          __throw_length_error(__N(__s));
    0.00 :	  4235fe:       mov    -0x38(%rbp),%rax
    0.00 :	  423602:       mov    %rax,%rdi
    0.00 :	  423605:       callq  41dac0 <std::__throw_length_error(char const*)@plt>
         :
         :	        const size_type __len = size() + std::max(size(), __n);
    0.00 :	  42360a:       mov    -0x28(%rbp),%rax
    0.00 :	  42360e:       mov    %rax,%rdi
    0.00 :	  423611:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  423616:       mov    %rax,%rbx
    0.00 :	  423619:       mov    -0x28(%rbp),%rax
    0.00 :	  42361d:       mov    %rax,%rdi
    0.00 :	  423620:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  423625:       mov    %rax,-0x20(%rbp)
    0.00 :	  423629:       lea    -0x30(%rbp),%rdx
    0.00 :	  42362d:       lea    -0x20(%rbp),%rax
    0.00 :	  423631:       mov    %rdx,%rsi
    0.00 :	  423634:       mov    %rax,%rdi
    0.00 :	  423637:       callq  425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :	  42363c:       mov    (%rax),%rax
    0.00 :	  42363f:       add    %rbx,%rax
    0.00 :	  423642:       mov    %rax,-0x18(%rbp)
         :	        return (__len < size() || __len > max_size()) ? max_size() : __len;
    0.00 :	  423646:       mov    -0x28(%rbp),%rax
    0.00 :	  42364a:       mov    %rax,%rdi
    0.00 :	  42364d:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  423652:       cmp    -0x18(%rbp),%rax
    0.00 :	  423656:       ja     42366a <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0xb0>
    0.00 :	  423658:       mov    -0x28(%rbp),%rax
    0.00 :	  42365c:       mov    %rax,%rdi
    0.00 :	  42365f:       callq  425c70 <std::vector<int, std::allocator<int> >::max_size() const>
    0.00 :	  423664:       cmp    -0x18(%rbp),%rax
    0.00 :	  423668:       jae    423678 <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0xbe>
    0.00 :	  42366a:       mov    -0x28(%rbp),%rax
    0.00 :	  42366e:       mov    %rax,%rdi
    0.00 :	  423671:       callq  425c70 <std::vector<int, std::allocator<int> >::max_size() const>
    0.00 :	  423676:       jmp    42367c <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const+0xc2>
    0.00 :	  423678:       mov    -0x18(%rbp),%rax
         :	      }
    0.00 :	  42367c:       add    $0x38,%rsp
    0.00 :	  423680:       pop    %rbx
    0.00 :	  423681:       pop    %rbp
    0.00 :	  423682:       retq
