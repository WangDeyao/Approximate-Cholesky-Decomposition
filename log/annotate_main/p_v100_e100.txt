 Percent |	Source code & Disassembly of main for cycles:u (70 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d67 <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_>:
         :	_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_():
         :	   * object's constructor with an initializer.
         :	   */
         :	#if __cplusplus >= 201103L
         :	  template<typename _T1, typename... _Args>
         :	    inline void
         :	    _Construct(_T1* __p, _Args&&... __args)
    4.29 :	  427d67:       push   %rbp
    0.00 :	  427d68:       mov    %rsp,%rbp
    1.43 :	  427d6b:       push   %rbx
   10.00 :	  427d6c:       sub    $0x18,%rsp
    0.00 :	  427d70:       mov    %rdi,-0x18(%rbp)
    0.00 :	  427d74:       mov    %rsi,-0x20(%rbp)
         :	    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   15.71 :	  427d78:       mov    -0x20(%rbp),%rax
    0.00 :	  427d7c:       mov    %rax,%rdi
    0.00 :	  427d7f:       callq  427d59 <LLord const& std::forward<LLord const&>(std::remove_reference<LLord const&>::type&)>
    0.00 :	  427d84:       mov    %rax,%rbx
    4.29 :	  427d87:       mov    -0x18(%rbp),%rax
    4.29 :	  427d8b:       mov    %rax,%rsi
    0.00 :	  427d8e:       mov    $0x10,%edi
    0.00 :	  427d93:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  427d98:       mov    %rax,%rcx
    0.00 :	  427d9b:       test   %rcx,%rcx
    0.00 :	  427d9e:       je     427dae <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_+0x47>
    1.43 :	  427da0:       mov    (%rbx),%rax
    4.29 :	  427da3:       mov    0x8(%rbx),%rdx
    4.29 :	  427da7:       mov    %rax,(%rcx)
   38.57 :	  427daa:       mov    %rdx,0x8(%rcx)
    8.57 :	  427dae:       add    $0x18,%rsp
    0.00 :	  427db2:       pop    %rbx
    2.86 :	  427db3:       pop    %rbp
    0.00 :	  427db4:       retq
 Percent |	Source code & Disassembly of main for cycles:u (52 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427cde <bool __gnu_cxx::operator!=<LLord const*, std::vector<LLord, std::allocator<LLord> > >(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&)>:
         :	_ZN9__gnu_cxxneIPK5LLordSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    5.77 :	  427cde:       push   %rbp
    0.00 :	  427cdf:       mov    %rsp,%rbp
    9.62 :	  427ce2:       push   %rbx
    0.00 :	  427ce3:       sub    $0x18,%rsp
    7.69 :	  427ce7:       mov    %rdi,-0x18(%rbp)
    1.92 :	  427ceb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
    1.92 :	  427cef:       mov    -0x18(%rbp),%rax
    0.00 :	  427cf3:       mov    %rax,%rdi
    1.92 :	  427cf6:       callq  4287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>
    3.85 :	  427cfb:       mov    (%rax),%rbx
    5.77 :	  427cfe:       mov    -0x20(%rbp),%rax
    0.00 :	  427d02:       mov    %rax,%rdi
    1.92 :	  427d05:       callq  4287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>
    5.77 :	  427d0a:       mov    (%rax),%rax
   26.92 :	  427d0d:       cmp    %rax,%rbx
    9.62 :	  427d10:       setne  %al
    9.62 :	  427d13:       add    $0x18,%rsp
    3.85 :	  427d17:       pop    %rbx
    0.00 :	  427d18:       pop    %rbp
    3.85 :	  427d19:       retq
 Percent |	Source code & Disassembly of main for cycles:u (33 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426e7c <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)>:
         :	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_():
         :	  template<bool _TrivialValueTypes>
         :	    struct __uninitialized_copy
         :	    {
         :	      template<typename _InputIterator, typename _ForwardIterator>
         :	        static _ForwardIterator
         :	        __uninit_copy(_InputIterator __first, _InputIterator __last,
    0.00 :	  426e7c:       push   %rbp
    0.00 :	  426e7d:       mov    %rsp,%rbp
    0.00 :	  426e80:       push   %rbx
    0.00 :	  426e81:       sub    $0x38,%rsp
    0.00 :	  426e85:       mov    %rdi,-0x30(%rbp)
    0.00 :	  426e89:       mov    %rsi,-0x40(%rbp)
    0.00 :	  426e8d:       mov    %rdx,-0x38(%rbp)
         :	                      _ForwardIterator __result)
         :	        {
         :	          _ForwardIterator __cur = __result;
    0.00 :	  426e91:       mov    -0x38(%rbp),%rax
    0.00 :	  426e95:       mov    %rax,-0x18(%rbp)
         :	          __try
         :	            {
         :	              for (; __first != __last; ++__first, ++__cur)
    0.00 :	  426e99:       jmp    426ed2 <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0x56>
         :	                std::_Construct(std::__addressof(*__cur), *__first);
   21.21 :	  426e9b:       lea    -0x30(%rbp),%rax
    0.00 :	  426e9f:       mov    %rax,%rdi
    0.00 :	  426ea2:       callq  427d48 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator*() const>
   18.18 :	  426ea7:       mov    %rax,%rbx
    0.00 :	  426eaa:       mov    -0x18(%rbp),%rax
    0.00 :	  426eae:       mov    %rax,%rdi
    0.00 :	  426eb1:       callq  427d3a <LLord* std::__addressof<LLord>(LLord&)>
   21.21 :	  426eb6:       mov    %rbx,%rsi
    0.00 :	  426eb9:       mov    %rax,%rdi
    3.03 :	  426ebc:       callq  427d67 <_ZSt10_ConstructI5LLordIRKS0_EEvPT_DpOT0_>
         :	              for (; __first != __last; ++__first, ++__cur)
    3.03 :	  426ec1:       lea    -0x30(%rbp),%rax
    0.00 :	  426ec5:       mov    %rax,%rdi
    0.00 :	  426ec8:       callq  427d1a <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator++()>
    3.03 :	  426ecd:       addq   $0x10,-0x18(%rbp)
    9.09 :	  426ed2:       lea    -0x40(%rbp),%rdx
    6.06 :	  426ed6:       lea    -0x30(%rbp),%rax
    0.00 :	  426eda:       mov    %rdx,%rsi
    3.03 :	  426edd:       mov    %rax,%rdi
    6.06 :	  426ee0:       callq  427cde <bool __gnu_cxx::operator!=<LLord const*, std::vector<LLord, std::allocator<LLord> > >(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > > const&)>
    0.00 :	  426ee5:       test   %al,%al
    0.00 :	  426ee7:       jne    426e9b <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0x1f>
         :	              return __cur;
    0.00 :	  426ee9:       mov    -0x18(%rbp),%rax
    3.03 :	  426eed:       jmp    426f22 <LLord* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*>(__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, __gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >, LLord*)+0xa6>
    0.00 :	  426eef:       mov    %rax,%rbx
         :	            }
         :	          __catch(...)
    0.00 :	  426ef2:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  426ef7:       mov    %rbx,%rax
    0.00 :	  426efa:       mov    %rax,%rdi
    0.00 :	  426efd:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  426f02:       mov    %rax,%rdi
    0.00 :	  426f05:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            {
         :	              std::_Destroy(__result, __cur);
    0.00 :	  426f0a:       mov    -0x18(%rbp),%rdx
    0.00 :	  426f0e:       mov    -0x38(%rbp),%rax
    0.00 :	  426f12:       mov    %rdx,%rsi
    0.00 :	  426f15:       mov    %rax,%rdi
    0.00 :	  426f18:       callq  42470a <void std::_Destroy<LLord*>(LLord*, LLord*)>
         :	              __throw_exception_again;
    0.00 :	  426f1d:       callq  41db40 <__cxa_rethrow@plt>
         :	            }
         :	        }
    0.00 :	  426f22:       add    $0x38,%rsp
    0.00 :	  426f26:       pop    %rbx
    3.03 :	  426f27:       pop    %rbp
    0.00 :	  426f28:       retq
 Percent |	Source code & Disassembly of main for cycles:u (20 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041eb2a <operator new(unsigned long, void*)>:
         :	_ZnwmPv():
         :	void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
         :	  __attribute__((__externally_visible__));
         :
         :	// Default placement versions of operator new.
         :	inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         :	{ return __p; }
   25.00 :	  41eb2a:       push   %rbp
    0.00 :	  41eb2b:       mov    %rsp,%rbp
   50.00 :	  41eb2e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41eb32:       mov    %rsi,-0x10(%rbp)
    0.00 :	  41eb36:       mov    -0x10(%rbp),%rax
   15.00 :	  41eb3a:       pop    %rbp
   10.00 :	  41eb3b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (19 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004287c2 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   26.32 :	  4287c2:       push   %rbp
    0.00 :	  4287c3:       mov    %rsp,%rbp
   42.11 :	  4287c6:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
    5.26 :	  4287ca:       mov    -0x8(%rbp),%rax
   15.79 :	  4287ce:       pop    %rbp
   10.53 :	  4287cf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (17 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d1a <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
   17.65 :	  427d1a:       push   %rbp
    0.00 :	  427d1b:       mov    %rsp,%rbp
   23.53 :	  427d1e:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    0.00 :	  427d22:       mov    -0x8(%rbp),%rax
    0.00 :	  427d26:       mov    (%rax),%rax
    5.88 :	  427d29:       lea    0x10(%rax),%rdx
   17.65 :	  427d2d:       mov    -0x8(%rbp),%rax
   11.76 :	  427d31:       mov    %rdx,(%rax)
         :	        return *this;
   11.76 :	  427d34:       mov    -0x8(%rbp),%rax
         :	      }
   11.76 :	  427d38:       pop    %rbp
    0.00 :	  427d39:       retq
 Percent |	Source code & Disassembly of main for cycles:u (15 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d59 <LLord const& std::forward<LLord const&>(std::remove_reference<LLord const&>::type&)>:
         :	_ZSt7forwardIRK5LLordEOT_RNSt16remove_referenceIS3_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   26.67 :	  427d59:       push   %rbp
    0.00 :	  427d5a:       mov    %rsp,%rbp
    0.00 :	  427d5d:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
   33.33 :	  427d61:       mov    -0x8(%rbp),%rax
   33.33 :	  427d65:       pop    %rbp
    6.67 :	  427d66:       retq
 Percent |	Source code & Disassembly of main for cycles:u (14 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429632 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)>:
         :	_Z10get_ll_col8LLMatOrdiRSt6vectorI5LLcolSaIS1_EE():
         :
         :	        ptr = ll.next;
         :	    }
         :	}
         :
         :	int get_ll_col(LLMatOrd llmat, int i, std::vector<LLcol> &colspace) {
    0.00 :	  429632:       push   %rbp
    0.00 :	  429633:       mov    %rsp,%rbp
    0.00 :	  429636:       push   %rbx
    0.00 :	  429637:       sub    $0x48,%rsp
    0.00 :	  42963b:       mov    %rdi,-0x38(%rbp)
    0.00 :	  42963f:       mov    %esi,-0x3c(%rbp)
    0.00 :	  429642:       mov    %rdx,-0x48(%rbp)
         :
         :	    Tind ptr = llmat.cols[i];
    0.00 :	  429646:       mov    -0x3c(%rbp),%eax
    0.00 :	  429649:       cltq
    0.00 :	  42964b:       mov    -0x38(%rbp),%rdx
    0.00 :	  42964f:       add    $0x8,%rdx
    0.00 :	  429653:       mov    %rax,%rsi
    0.00 :	  429656:       mov    %rdx,%rdi
    0.00 :	  429659:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42965e:       mov    (%rax),%eax
    7.14 :	  429660:       mov    %eax,-0x14(%rbp)
         :	    int len = 0;
    0.00 :	  429663:       movl   $0x0,-0x18(%rbp)
         :
         :	    while (ptr != -1) {
    0.00 :	  42966a:       jmpq   42972c <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xfa>
         :	        LLcol item = {llmat.lles[ptr].row, ptr, llmat.lles[ptr].val};
    7.14 :	  42966f:       mov    -0x14(%rbp),%eax
    7.14 :	  429672:       cltq
    0.00 :	  429674:       mov    -0x38(%rbp),%rdx
    0.00 :	  429678:       add    $0x20,%rdx
   14.29 :	  42967c:       mov    %rax,%rsi
    0.00 :	  42967f:       mov    %rdx,%rdi
    0.00 :	  429682:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429687:       mov    (%rax),%eax
   28.57 :	  429689:       mov    %eax,-0x30(%rbp)
    7.14 :	  42968c:       mov    -0x14(%rbp),%eax
    0.00 :	  42968f:       mov    %eax,-0x2c(%rbp)
    0.00 :	  429692:       mov    -0x14(%rbp),%eax
    0.00 :	  429695:       cltq
    0.00 :	  429697:       mov    -0x38(%rbp),%rdx
    0.00 :	  42969b:       add    $0x20,%rdx
    0.00 :	  42969f:       mov    %rax,%rsi
    0.00 :	  4296a2:       mov    %rdx,%rdi
    0.00 :	  4296a5:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  4296aa:       mov    0x8(%rax),%rax
    0.00 :	  4296ae:       mov    %rax,-0x28(%rbp)
         :
         :	        if (len >= colspace.size()) {
    0.00 :	  4296b2:       mov    -0x18(%rbp),%eax
    0.00 :	  4296b5:       movslq %eax,%rbx
    0.00 :	  4296b8:       mov    -0x48(%rbp),%rax
    0.00 :	  4296bc:       mov    %rax,%rdi
    0.00 :	  4296bf:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  4296c4:       cmp    %rax,%rbx
    0.00 :	  4296c7:       setae  %al
    0.00 :	  4296ca:       test   %al,%al
    0.00 :	  4296cc:       je     4296e3 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xb1>
         :	            colspace.push_back(item);
    0.00 :	  4296ce:       lea    -0x30(%rbp),%rdx
    0.00 :	  4296d2:       mov    -0x48(%rbp),%rax
    0.00 :	  4296d6:       mov    %rdx,%rsi
    0.00 :	  4296d9:       mov    %rax,%rdi
    0.00 :	  4296dc:       callq  42d04a <std::vector<LLcol, std::allocator<LLcol> >::push_back(LLcol const&)>
    0.00 :	  4296e1:       jmp    42970a <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0xd8>
         :	        } else {
         :	            colspace[len] = item;
    0.00 :	  4296e3:       mov    -0x18(%rbp),%eax
    0.00 :	  4296e6:       movslq %eax,%rdx
    0.00 :	  4296e9:       mov    -0x48(%rbp),%rax
    0.00 :	  4296ed:       mov    %rdx,%rsi
    7.14 :	  4296f0:       mov    %rax,%rdi
    0.00 :	  4296f3:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4296f8:       mov    %rax,%rcx
    7.14 :	  4296fb:       mov    -0x30(%rbp),%rax
    0.00 :	  4296ff:       mov    -0x28(%rbp),%rdx
    0.00 :	  429703:       mov    %rax,(%rcx)
    0.00 :	  429706:       mov    %rdx,0x8(%rcx)
         :	        }
         :
         :	        len += 1;
    0.00 :	  42970a:       addl   $0x1,-0x18(%rbp)
         :	        ptr = llmat.lles[ptr].next;
    0.00 :	  42970e:       mov    -0x14(%rbp),%eax
    0.00 :	  429711:       cltq
    0.00 :	  429713:       mov    -0x38(%rbp),%rdx
    0.00 :	  429717:       add    $0x20,%rdx
    0.00 :	  42971b:       mov    %rax,%rsi
    0.00 :	  42971e:       mov    %rdx,%rdi
    0.00 :	  429721:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429726:       mov    0x4(%rax),%eax
    0.00 :	  429729:       mov    %eax,-0x14(%rbp)
         :	    while (ptr != -1) {
    0.00 :	  42972c:       cmpl   $0xffffffff,-0x14(%rbp)
    7.14 :	  429730:       jne    42966f <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0x3d>
         :	    }
         :
         :	    return len;
    7.14 :	  429736:       mov    -0x18(%rbp),%eax
    0.00 :	  429739:       jmp    429743 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)+0x111>
    0.00 :	  42973b:       mov    %rax,%rdi
    0.00 :	  42973e:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  429743:       add    $0x48,%rsp
    0.00 :	  429747:       pop    %rbx
    0.00 :	  429748:       pop    %rbp
    0.00 :	  429749:       retq
 Percent |	Source code & Disassembly of main for cycles:u (14 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d3a <LLord* std::__addressof<LLord>(LLord&)>:
         :	_ZSt11__addressofI5LLordEPT_RS1_():
         :	   *  @brief Same as C++11 std::addressof
         :	   *  @ingroup utilities
         :	   */
         :	  template<typename _Tp>
         :	    inline _Tp*
         :	    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   35.71 :	  427d3a:       push   %rbp
    0.00 :	  427d3b:       mov    %rsp,%rbp
   57.14 :	  427d3e:       mov    %rdi,-0x8(%rbp)
         :	    {
         :	      return reinterpret_cast<_Tp*>
         :	        (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    0.00 :	  427d42:       mov    -0x8(%rbp),%rax
         :	    }
    7.14 :	  427d46:       pop    %rbp
    0.00 :	  427d47:       retq
 Percent |	Source code & Disassembly of main for cycles:u (13 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __insertion_sort(_RandomAccessIterator __first,
    0.00 :	  42f304:       push   %rbp
    0.00 :	  42f305:       mov    %rsp,%rbp
    0.00 :	  42f308:       push   %rbx
    0.00 :	  42f309:       sub    $0x58,%rsp
    0.00 :	  42f30d:       mov    %rdi,-0x50(%rbp)
    0.00 :	  42f311:       mov    %rsi,-0x60(%rbp)
    0.00 :	  42f315:       mov    %rdx,-0x58(%rbp)
         :	                     _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      if (__first == __last) return;
    0.00 :	  42f319:       lea    -0x60(%rbp),%rdx
    0.00 :	  42f31d:       lea    -0x50(%rbp),%rax
    0.00 :	  42f321:       mov    %rdx,%rsi
    0.00 :	  42f324:       mov    %rax,%rdi
    7.69 :	  42f327:       callq  4302ee <bool __gnu_cxx::operator==<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42f32c:       test   %al,%al
    0.00 :	  42f32e:       je     42f335 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x31>
    0.00 :	  42f330:       jmpq   42f44c <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x148>
         :
         :	      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    0.00 :	  42f335:       movq   $0x1,-0x20(%rbp)
    0.00 :	  42f33d:       lea    -0x20(%rbp),%rdx
    0.00 :	  42f341:       lea    -0x50(%rbp),%rax
    0.00 :	  42f345:       mov    %rdx,%rsi
    0.00 :	  42f348:       mov    %rax,%rdi
    0.00 :	  42f34b:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42f350:       mov    %rax,-0x30(%rbp)
    0.00 :	  42f354:       jmpq   42f425 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x121>
         :	        {
         :	          if (__comp(*__i, *__first))
    0.00 :	  42f359:       lea    -0x50(%rbp),%rax
    0.00 :	  42f35d:       mov    %rax,%rdi
    0.00 :	  42f360:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f365:       mov    %rax,%rbx
    0.00 :	  42f368:       lea    -0x30(%rbp),%rax
    0.00 :	  42f36c:       mov    %rax,%rdi
    0.00 :	  42f36f:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f374:       mov    %rax,%rdx
    0.00 :	  42f377:       mov    -0x58(%rbp),%rax
    0.00 :	  42f37b:       mov    %rbx,%rsi
    7.69 :	  42f37e:       mov    %rdx,%rdi
    0.00 :	  42f381:       callq  *%rax
    0.00 :	  42f383:       test   %al,%al
    0.00 :	  42f385:       je     42f406 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x102>
         :	            {
         :	              typename iterator_traits<_RandomAccessIterator>::value_type
         :	                __val = _GLIBCXX_MOVE(*__i);
    0.00 :	  42f387:       lea    -0x30(%rbp),%rax
    0.00 :	  42f38b:       mov    %rax,%rdi
    0.00 :	  42f38e:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f393:       mov    %rax,%rdi
    0.00 :	  42f396:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  42f39b:       mov    0x8(%rax),%rdx
   15.38 :	  42f39f:       mov    (%rax),%rax
    0.00 :	  42f3a2:       mov    %rax,-0x40(%rbp)
    0.00 :	  42f3a6:       mov    %rdx,-0x38(%rbp)
         :	              _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
    0.00 :	  42f3aa:       movq   $0x1,-0x18(%rbp)
    0.00 :	  42f3b2:       lea    -0x18(%rbp),%rdx
    0.00 :	  42f3b6:       lea    -0x30(%rbp),%rax
    0.00 :	  42f3ba:       mov    %rdx,%rsi
    0.00 :	  42f3bd:       mov    %rax,%rdi
    0.00 :	  42f3c0:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42f3c5:       mov    %rax,%rdx
    0.00 :	  42f3c8:       mov    -0x30(%rbp),%rcx
    0.00 :	  42f3cc:       mov    -0x50(%rbp),%rax
    0.00 :	  42f3d0:       mov    %rcx,%rsi
    0.00 :	  42f3d3:       mov    %rax,%rdi
    0.00 :	  42f3d6:       callq  43034a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::move_backward<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	              *__first = _GLIBCXX_MOVE(__val);
    0.00 :	  42f3db:       lea    -0x50(%rbp),%rax
    0.00 :	  42f3df:       mov    %rax,%rdi
    0.00 :	  42f3e2:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  42f3e7:       mov    %rax,%rbx
    0.00 :	  42f3ea:       lea    -0x40(%rbp),%rax
    0.00 :	  42f3ee:       mov    %rax,%rdi
    0.00 :	  42f3f1:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  42f3f6:       mov    0x8(%rax),%rdx
    7.69 :	  42f3fa:       mov    (%rax),%rax
    0.00 :	  42f3fd:       mov    %rax,(%rbx)
    7.69 :	  42f400:       mov    %rdx,0x8(%rbx)
    0.00 :	  42f404:       jmp    42f419 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x115>
         :	            }
         :	          else
         :	            std::__unguarded_linear_insert(__i, __comp);
    0.00 :	  42f406:       mov    -0x58(%rbp),%rdx
    7.69 :	  42f40a:       mov    -0x30(%rbp),%rax
    0.00 :	  42f40e:       mov    %rdx,%rsi
    0.00 :	  42f411:       mov    %rax,%rdi
    0.00 :	  42f414:       callq  430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    0.00 :	  42f419:       lea    -0x30(%rbp),%rax
    0.00 :	  42f41d:       mov    %rax,%rdi
    0.00 :	  42f420:       callq  43032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>
    0.00 :	  42f425:       lea    -0x60(%rbp),%rdx
    0.00 :	  42f429:       lea    -0x30(%rbp),%rax
    0.00 :	  42f42d:       mov    %rdx,%rsi
    7.69 :	  42f430:       mov    %rax,%rdi
    0.00 :	  42f433:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    7.69 :	  42f438:       test   %al,%al
    0.00 :	  42f43a:       jne    42f359 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x55>
    0.00 :	  42f440:       jmp    42f44c <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x148>
    0.00 :	  42f442:       jmp    42f444 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x140>
    0.00 :	  42f444:       mov    %rax,%rdi
    0.00 :	  42f447:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
         :	    }
    0.00 :	  42f44c:       add    $0x58,%rsp
   15.38 :	  42f450:       pop    %rbx
   15.38 :	  42f451:       pop    %rbp
    0.00 :	  42f452:       retq
 Percent |	Source code & Disassembly of main for cycles:u (13 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430682 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
         :	_ZSt18generate_canonicalIdLm53ESt26linear_congruential_engineImLm16807ELm0ELm2147483647EEET_RT1_():
         :	    }
         :
         :	  template<typename _RealType, size_t __bits,
         :	           typename _UniformRandomNumberGenerator>
         :	    _RealType
         :	    generate_canonical(_UniformRandomNumberGenerator& __urng)
    0.00 :	  430682:       push   %rbp
    0.00 :	  430683:       mov    %rsp,%rbp
    0.00 :	  430686:       push   %rbx
    0.00 :	  430687:       sub    $0xa8,%rsp
    0.00 :	  43068e:       mov    %rdi,-0x78(%rbp)
         :	    {
         :	      const size_t __b
         :	        = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
         :	                   __bits);
    0.00 :	  430692:       movq   $0x35,-0x68(%rbp)
    0.00 :	  43069a:       movq   $0x35,-0x60(%rbp)
    0.00 :	  4306a2:       lea    -0x68(%rbp),%rdx
    0.00 :	  4306a6:       lea    -0x60(%rbp),%rax
    0.00 :	  4306aa:       mov    %rdx,%rsi
    0.00 :	  4306ad:       mov    %rax,%rdi
    0.00 :	  4306b0:       callq  427ae8 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :	  4306b5:       mov    (%rax),%rax
    0.00 :	  4306b8:       mov    %rax,-0x30(%rbp)
         :	      const long double __r = static_cast<long double>(__urng.max())
         :	                            - static_cast<long double>(__urng.min()) + 1.0L;
    0.00 :	  4306bc:       callq  430677 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::max()>
    0.00 :	  4306c1:       mov    %rax,-0x88(%rbp)
    0.00 :	  4306c8:       fildll -0x88(%rbp)
    0.00 :	  4306ce:       fstpt  -0xa0(%rbp)
    0.00 :	  4306d4:       test   %rax,%rax
    0.00 :	  4306d7:       jns    4306ed <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x6b>
    0.00 :	  4306d9:       fldt   0x35c1(%rip)        # 433ca0 <std::ignore+0x1be>
    0.00 :	  4306df:       fldt   -0xa0(%rbp)
    0.00 :	  4306e5:       faddp  %st,%st(1)
    0.00 :	  4306e7:       fstpt  -0xa0(%rbp)
    0.00 :	  4306ed:       callq  43066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>
    0.00 :	  4306f2:       mov    %rax,-0x88(%rbp)
    0.00 :	  4306f9:       fildll -0x88(%rbp)
    0.00 :	  4306ff:       test   %rax,%rax
    0.00 :	  430702:       jns    43070c <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x8a>
    0.00 :	  430704:       fldt   0x3596(%rip)        # 433ca0 <std::ignore+0x1be>
    0.00 :	  43070a:       faddp  %st,%st(1)
    0.00 :	  43070c:       fldt   -0xa0(%rbp)
    0.00 :	  430712:       fsubp  %st,%st(1)
    0.00 :	  430714:       fld1
    0.00 :	  430716:       faddp  %st,%st(1)
    7.69 :	  430718:       fstpt  -0x40(%rbp)
         :	      const size_t __log2r = std::log(__r) / std::log(2.0L);
    0.00 :	  43071b:       mov    -0x40(%rbp),%rax
    0.00 :	  43071f:       mov    -0x38(%rbp),%edx
    7.69 :	  430722:       mov    %rax,(%rsp)
    0.00 :	  430726:       mov    %edx,0x8(%rsp)
    0.00 :	  43072a:       callq  41eb4a <std::log(long double)>
    0.00 :	  43072f:       fstpt  -0xa0(%rbp)
    0.00 :	  430735:       movabs $0x8000000000000000,%rax
    0.00 :	  43073f:       mov    $0x4000,%edx
    0.00 :	  430744:       mov    %rax,(%rsp)
    0.00 :	  430748:       mov    %edx,0x8(%rsp)
    0.00 :	  43074c:       callq  41eb4a <std::log(long double)>
    0.00 :	  430751:       fldt   -0xa0(%rbp)
    7.69 :	  430757:       fdivp  %st,%st(1)
    7.69 :	  430759:       fldt   0x3551(%rip)        # 433cb0 <std::ignore+0x1ce>
    0.00 :	  43075f:       fxch   %st(1)
    0.00 :	  430761:       fucomi %st(1),%st
    7.69 :	  430763:       fstp   %st(1)
    0.00 :	  430765:       jae    43076c <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0xea>
    0.00 :	  430767:       fisttpll -0x48(%rbp)
    0.00 :	  43076a:       jmp    430785 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x103>
    0.00 :	  43076c:       fldt   0x353e(%rip)        # 433cb0 <std::ignore+0x1ce>
    0.00 :	  430772:       fsubrp %st,%st(1)
    0.00 :	  430774:       fisttpll -0x48(%rbp)
    0.00 :	  430777:       movabs $0x8000000000000000,%rax
    0.00 :	  430781:       xor    %rax,-0x48(%rbp)
    0.00 :	  430785:       mov    -0x48(%rbp),%rax
    0.00 :	  430789:       mov    %rax,-0x48(%rbp)
         :	      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
    0.00 :	  43078d:       mov    -0x48(%rbp),%rax
    7.69 :	  430791:       mov    -0x30(%rbp),%rdx
    0.00 :	  430795:       add    %rdx,%rax
    0.00 :	  430798:       sub    $0x1,%rax
    0.00 :	  43079c:       mov    $0x0,%edx
    0.00 :	  4307a1:       divq   -0x48(%rbp)
    7.69 :	  4307a5:       mov    %rax,-0x58(%rbp)
    0.00 :	  4307a9:       movq   $0x1,-0x50(%rbp)
    0.00 :	  4307b1:       lea    -0x58(%rbp),%rdx
    0.00 :	  4307b5:       lea    -0x50(%rbp),%rax
    0.00 :	  4307b9:       mov    %rdx,%rsi
    0.00 :	  4307bc:       mov    %rax,%rdi
    0.00 :	  4307bf:       callq  425b86 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    7.69 :	  4307c4:       mov    (%rax),%rax
    0.00 :	  4307c7:       mov    %rax,-0x18(%rbp)
         :	      _RealType __sum = _RealType(0);
    0.00 :	  4307cb:       mov    $0x0,%eax
    0.00 :	  4307d0:       mov    %rax,-0x20(%rbp)
         :	      _RealType __tmp = _RealType(1);
    0.00 :	  4307d4:       movabs $0x3ff0000000000000,%rax
    0.00 :	  4307de:       mov    %rax,-0x28(%rbp)
         :	      for (; __k != 0; --__k)
    0.00 :	  4307e2:       jmp    430842 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x1c0>
         :	        {
         :	          __sum += _RealType(__urng() - __urng.min()) * __tmp;
    0.00 :	  4307e4:       mov    -0x78(%rbp),%rax
    0.00 :	  4307e8:       mov    %rax,%rdi
    0.00 :	  4307eb:       callq  430f58 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>
    0.00 :	  4307f0:       mov    %rax,%rbx
    0.00 :	  4307f3:       callq  43066c <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::min()>
    0.00 :	  4307f8:       sub    %rax,%rbx
    0.00 :	  4307fb:       mov    %rbx,%rax
    0.00 :	  4307fe:       test   %rax,%rax
    0.00 :	  430801:       js     43080a <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x188>
    0.00 :	  430803:       vcvtsi2sd %rax,%xmm0,%xmm0
    0.00 :	  430808:       jmp    43081f <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x19d>
    0.00 :	  43080a:       mov    %rax,%rdx
    0.00 :	  43080d:       shr    %rdx
    0.00 :	  430810:       and    $0x1,%eax
    0.00 :	  430813:       or     %rax,%rdx
    0.00 :	  430816:       vcvtsi2sd %rdx,%xmm0,%xmm0
    0.00 :	  43081b:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  43081f:       vmulsd -0x28(%rbp),%xmm0,%xmm0
    0.00 :	  430824:       vmovsd -0x20(%rbp),%xmm1
    0.00 :	  430829:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  43082d:       vmovsd %xmm0,-0x20(%rbp)
         :	          __tmp *= __r;
    0.00 :	  430832:       fldl   -0x28(%rbp)
    0.00 :	  430835:       fldt   -0x40(%rbp)
    0.00 :	  430838:       fmulp  %st,%st(1)
    0.00 :	  43083a:       fstpl  -0x28(%rbp)
         :	      for (; __k != 0; --__k)
    0.00 :	  43083d:       subq   $0x1,-0x18(%rbp)
    7.69 :	  430842:       cmpq   $0x0,-0x18(%rbp)
    0.00 :	  430847:       jne    4307e4 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)+0x162>
         :	        }
         :	      return __sum / __tmp;
    0.00 :	  430849:       vmovsd -0x20(%rbp),%xmm0
    7.69 :	  43084e:       vdivsd -0x28(%rbp),%xmm0,%xmm0
   15.38 :	  430853:       vmovsd %xmm0,-0xa0(%rbp)
    0.00 :	  43085b:       mov    -0xa0(%rbp),%rax
         :	    }
    0.00 :	  430862:       mov    %rax,-0xa0(%rbp)
    0.00 :	  430869:       vmovsd -0xa0(%rbp),%xmm0
    7.69 :	  430871:       add    $0xa8,%rsp
    0.00 :	  430878:       pop    %rbx
    0.00 :	  430879:       pop    %rbp
    0.00 :	  43087a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (10 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxneIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   10.00 :	  42e1be:       push   %rbp
    0.00 :	  42e1bf:       mov    %rsp,%rbp
    0.00 :	  42e1c2:       push   %rbx
    0.00 :	  42e1c3:       sub    $0x18,%rsp
   20.00 :	  42e1c7:       mov    %rdi,-0x18(%rbp)
   10.00 :	  42e1cb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() != __rhs.base(); }
    0.00 :	  42e1cf:       mov    -0x18(%rbp),%rax
    0.00 :	  42e1d3:       mov    %rax,%rdi
    0.00 :	  42e1d6:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  42e1db:       mov    (%rax),%rbx
   20.00 :	  42e1de:       mov    -0x20(%rbp),%rax
    0.00 :	  42e1e2:       mov    %rax,%rdi
    0.00 :	  42e1e5:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  42e1ea:       mov    (%rax),%rax
   20.00 :	  42e1ed:       cmp    %rax,%rbx
   10.00 :	  42e1f0:       setne  %al
    0.00 :	  42e1f3:       add    $0x18,%rsp
    0.00 :	  42e1f7:       pop    %rbx
    0.00 :	  42e1f8:       pop    %rbp
   10.00 :	  42e1f9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (9 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429a79 <approxChol(LLMatOrd)>:
         :	_Z10approxChol8LLMatOrd():
         :
         :	    colspace = c;
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
         :	}
         :
         :	LDLinv approxChol(LLMatOrd a) {
    0.00 :	  429a79:       push   %rbp
    0.00 :	  429a7a:       mov    %rsp,%rbp
    0.00 :	  429a7d:       push   %rbx
    0.00 :	  429a7e:       sub    $0x1f8,%rsp
    0.00 :	  429a85:       mov    %rdi,-0x1e8(%rbp)
    0.00 :	  429a8c:       mov    %rsi,-0x1f0(%rbp)
         :	    auto n = a.n;
    0.00 :	  429a93:       mov    -0x1f0(%rbp),%rax
    0.00 :	  429a9a:       mov    (%rax),%rax
    0.00 :	  429a9d:       mov    %rax,-0x50(%rbp)
         :
         :	    // need to make custom one without col info later
         :	    LDLinv ldli(a);
    0.00 :	  429aa1:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429aa8:       lea    -0x110(%rbp),%rax
    0.00 :	  429aaf:       mov    %rdx,%rsi
    0.00 :	  429ab2:       mov    %rax,%rdi
    0.00 :	  429ab5:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.00 :	  429aba:       lea    -0x110(%rbp),%rdx
    0.00 :	  429ac1:       mov    -0x1e8(%rbp),%rax
    0.00 :	  429ac8:       mov    %rdx,%rsi
    0.00 :	  429acb:       mov    %rax,%rdi
    0.00 :	  429ace:       callq  42cdda <LDLinv::LDLinv(LLMatOrd)>
    0.00 :	  429ad3:       lea    -0x110(%rbp),%rax
    0.00 :	  429ada:       mov    %rax,%rdi
    0.00 :	  429add:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	    Tind ldli_row_ptr = 0;
    0.00 :	  429ae2:       movl   $0x0,-0x14(%rbp)
         :
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  429ae9:       lea    -0xd1(%rbp),%rax
    0.00 :	  429af0:       mov    %rax,%rdi
    0.00 :	  429af3:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  429af8:       mov    $0x0,%eax
    0.00 :	  429afd:       mov    %rax,-0xd0(%rbp)
    0.00 :	  429b04:       mov    -0x50(%rbp),%rsi
    0.00 :	  429b08:       lea    -0xd1(%rbp),%rcx
    0.00 :	  429b0f:       lea    -0xd0(%rbp),%rdx
    0.00 :	  429b16:       lea    -0x130(%rbp),%rax
    0.00 :	  429b1d:       mov    %rax,%rdi
    0.00 :	  429b20:       callq  41fd00 <std::vector<double, std::allocator<double> >::vector(unsigned long, double const&, std::allocator<double> const&)>
    0.00 :	  429b25:       lea    -0xd1(%rbp),%rax
    0.00 :	  429b2c:       mov    %rax,%rdi
    0.00 :	  429b2f:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  429b34:       lea    -0xc2(%rbp),%rax
    0.00 :	  429b3b:       mov    %rax,%rdi
    0.00 :	  429b3e:       callq  42d618 <std::allocator<LLcol>::allocator()>
    0.00 :	  429b43:       mov    -0x50(%rbp),%rcx
    0.00 :	  429b47:       lea    -0xc2(%rbp),%rdx
    0.00 :	  429b4e:       lea    -0x150(%rbp),%rax
    0.00 :	  429b55:       mov    %rcx,%rsi
    0.00 :	  429b58:       mov    %rax,%rdi
    0.00 :	  429b5b:       callq  42d64c <std::vector<LLcol, std::allocator<LLcol> >::vector(unsigned long, std::allocator<LLcol> const&)>
    0.00 :	  429b60:       lea    -0xc2(%rbp),%rax
    0.00 :	  429b67:       mov    %rax,%rdi
    0.00 :	  429b6a:       callq  42d632 <std::allocator<LLcol>::~allocator()>
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  429b6f:       lea    -0xc1(%rbp),%rax
    0.00 :	  429b76:       mov    %rax,%rdi
    0.00 :	  429b79:       callq  41fccc <std::allocator<double>::allocator()>
    0.00 :	  429b7e:       mov    -0x50(%rbp),%rcx
    0.00 :	  429b82:       lea    -0xc1(%rbp),%rdx
    0.00 :	  429b89:       lea    -0x170(%rbp),%rax
    0.00 :	  429b90:       mov    %rcx,%rsi
    0.00 :	  429b93:       mov    %rax,%rdi
    0.00 :	  429b96:       callq  42d6ae <std::vector<double, std::allocator<double> >::vector(unsigned long, std::allocator<double> const&)>
    0.00 :	  429b9b:       lea    -0xc1(%rbp),%rax
    0.00 :	  429ba2:       mov    %rax,%rdi
    0.00 :	  429ba5:       callq  41fce6 <std::allocator<double>::~allocator()>
         :
         :	    // random engine and distribution
         :	    std::default_random_engine engine;
    0.00 :	  429baa:       lea    -0x180(%rbp),%rax
    0.00 :	  429bb1:       mov    $0x1,%esi
    0.00 :	  429bb6:       mov    %rax,%rdi
    0.00 :	  429bb9:       callq  42d710 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
         :	    std::uniform_real_distribution<Tval> u(0.0, 1.0);
    0.00 :	  429bbe:       lea    -0x190(%rbp),%rax
    0.00 :	  429bc5:       vmovsd 0xa0ab(%rip),%xmm1        # 433c78 <std::ignore+0x196>
    0.00 :	  429bcd:       vxorpd %xmm0,%xmm0,%xmm0
    0.00 :	  429bd1:       mov    %rax,%rdi
    0.00 :	  429bd4:       callq  42d736 <std::uniform_real_distribution<double>::uniform_real_distribution(double, double)>
         :
         :
         :	    for (long i = 0; i <= n-2; i++) {
    0.00 :	  429bd9:       movq   $0x0,-0x20(%rbp)
    0.00 :	  429be1:       jmpq   42a18c <approxChol(LLMatOrd)+0x713>
         :
         :	        ldli.col[i] = i;
    0.00 :	  429be6:       mov    -0x20(%rbp),%rdx
    0.00 :	  429bea:       mov    -0x1e8(%rbp),%rax
    0.00 :	  429bf1:       mov    %rdx,%rsi
    0.00 :	  429bf4:       mov    %rax,%rdi
    0.00 :	  429bf7:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429bfc:       mov    -0x20(%rbp),%rdx
    0.00 :	  429c00:       mov    %edx,(%rax)
         :	        ldli.colptr[i] = ldli_row_ptr;
    0.00 :	  429c02:       mov    -0x20(%rbp),%rax
    0.00 :	  429c06:       mov    -0x1e8(%rbp),%rdx
    0.00 :	  429c0d:       add    $0x18,%rdx
    0.00 :	  429c11:       mov    %rax,%rsi
    0.00 :	  429c14:       mov    %rdx,%rdi
    0.00 :	  429c17:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429c1c:       mov    -0x14(%rbp),%edx
    0.00 :	  429c1f:       mov    %edx,(%rax)
         :
         :	        int len = get_ll_col(a, i, colspace);
    0.00 :	  429c21:       mov    -0x20(%rbp),%rax
    0.00 :	  429c25:       mov    %eax,%ebx
    0.00 :	  429c27:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429c2e:       lea    -0xc0(%rbp),%rax
    0.00 :	  429c35:       mov    %rdx,%rsi
    0.00 :	  429c38:       mov    %rax,%rdi
    0.00 :	  429c3b:       callq  41f922 <LLMatOrd::LLMatOrd(LLMatOrd const&)>
    0.00 :	  429c40:       lea    -0x150(%rbp),%rdx
    0.00 :	  429c47:       lea    -0xc0(%rbp),%rax
    0.00 :	  429c4e:       mov    %ebx,%esi
    0.00 :	  429c50:       mov    %rax,%rdi
    0.00 :	  429c53:       callq  429632 <get_ll_col(LLMatOrd, int, std::vector<LLcol, std::allocator<LLcol> >&)>
    0.00 :	  429c58:       mov    %eax,-0x54(%rbp)
    0.00 :	  429c5b:       lea    -0xc0(%rbp),%rax
    0.00 :	  429c62:       mov    %rax,%rdi
    0.00 :	  429c65:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
         :	        len = compressCol(colspace, len);
    0.00 :	  429c6a:       mov    -0x54(%rbp),%edx
    0.00 :	  429c6d:       lea    -0x150(%rbp),%rax
    0.00 :	  429c74:       mov    %edx,%esi
    0.00 :	  429c76:       mov    %rax,%rdi
    0.00 :	  429c79:       callq  429790 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)>
    0.00 :	  429c7e:       mov    %eax,-0x54(%rbp)
         :	        // flop count: sort LLcol len*log(len)?
         :
         :	        Tval csum = 0;
    0.00 :	  429c81:       mov    $0x0,%eax
    0.00 :	  429c86:       mov    %rax,-0x28(%rbp)
         :	        for (int ii = 0; ii < len; ii++) {
    0.00 :	  429c8a:       movl   $0x0,-0x2c(%rbp)
    0.00 :	  429c91:       jmp    429ce4 <approxChol(LLMatOrd)+0x26b>
         :	            csum += colspace[ii].cval;
    0.00 :	  429c93:       mov    -0x2c(%rbp),%eax
    0.00 :	  429c96:       movslq %eax,%rdx
    0.00 :	  429c99:       lea    -0x150(%rbp),%rax
    0.00 :	  429ca0:       mov    %rdx,%rsi
    0.00 :	  429ca3:       mov    %rax,%rdi
    0.00 :	  429ca6:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429cab:       vmovsd 0x8(%rax),%xmm0
    0.00 :	  429cb0:       vmovsd -0x28(%rbp),%xmm1
    0.00 :	  429cb5:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  429cb9:       vmovsd %xmm0,-0x28(%rbp)
         :	            // flop count: 1 add
         :	            cumspace[ii] = csum;
    0.00 :	  429cbe:       mov    -0x2c(%rbp),%eax
    0.00 :	  429cc1:       movslq %eax,%rdx
    0.00 :	  429cc4:       lea    -0x170(%rbp),%rax
    0.00 :	  429ccb:       mov    %rdx,%rsi
    0.00 :	  429cce:       mov    %rax,%rdi
    0.00 :	  429cd1:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  429cd6:       mov    %rax,%rdx
    0.00 :	  429cd9:       mov    -0x28(%rbp),%rax
    0.00 :	  429cdd:       mov    %rax,(%rdx)
         :	        for (int ii = 0; ii < len; ii++) {
    0.00 :	  429ce0:       addl   $0x1,-0x2c(%rbp)
    0.00 :	  429ce4:       mov    -0x2c(%rbp),%eax
    0.00 :	  429ce7:       cmp    -0x54(%rbp),%eax
    0.00 :	  429cea:       jl     429c93 <approxChol(LLMatOrd)+0x21a>
         :	        }
         :	        Tval wdeg = csum;
    0.00 :	  429cec:       mov    -0x28(%rbp),%rax
    0.00 :	  429cf0:       mov    %rax,-0x38(%rbp)
         :
         :	        Tval colScale = 1;
    0.00 :	  429cf4:       movabs $0x3ff0000000000000,%rax
    0.00 :	  429cfe:       mov    %rax,-0x40(%rbp)
         :
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    0.00 :	  429d02:       movl   $0x0,-0x44(%rbp)
    0.00 :	  429d09:       jmpq   42a0bb <approxChol(LLMatOrd)+0x642>
         :
         :	            LLcol llcol = colspace[joffset];
   11.11 :	  429d0e:       mov    -0x44(%rbp),%eax
    0.00 :	  429d11:       movslq %eax,%rdx
    0.00 :	  429d14:       lea    -0x150(%rbp),%rax
    0.00 :	  429d1b:       mov    %rdx,%rsi
    0.00 :	  429d1e:       mov    %rax,%rdi
    0.00 :	  429d21:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429d26:       mov    0x8(%rax),%rdx
    0.00 :	  429d2a:       mov    (%rax),%rax
    0.00 :	  429d2d:       mov    %rax,-0x1c0(%rbp)
    0.00 :	  429d34:       mov    %rdx,-0x1b8(%rbp)
         :	            Tval w = llcol.cval * colScale;
    0.00 :	  429d3b:       vmovsd -0x1b8(%rbp),%xmm0
    0.00 :	  429d43:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    0.00 :	  429d48:       vmovsd %xmm0,-0x60(%rbp)
         :	            Tind j = llcol.row;
    0.00 :	  429d4d:       mov    -0x1c0(%rbp),%eax
    0.00 :	  429d53:       mov    %eax,-0x1c4(%rbp)
         :
         :	            Tval f = w/wdeg;
    0.00 :	  429d59:       vmovsd -0x60(%rbp),%xmm0
    0.00 :	  429d5e:       vdivsd -0x38(%rbp),%xmm0,%xmm0
    0.00 :	  429d63:       vmovsd %xmm0,-0x1d0(%rbp)
         :	            // flop count: 1 mul
         :
         :	            Tval r = u(engine);
    0.00 :	  429d6b:       lea    -0x180(%rbp),%rdx
    0.00 :	  429d72:       lea    -0x190(%rbp),%rax
    0.00 :	  429d79:       mov    %rdx,%rsi
    0.00 :	  429d7c:       mov    %rax,%rdi
    0.00 :	  429d7f:       callq  42d774 <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    0.00 :	  429d84:       vmovsd %xmm0,-0x1f8(%rbp)
    0.00 :	  429d8c:       mov    -0x1f8(%rbp),%rax
    0.00 :	  429d93:       mov    %rax,-0x1d8(%rbp)
         :	            r = r * (csum - cumspace[joffset]) + cumspace[joffset];
    0.00 :	  429d9a:       mov    -0x44(%rbp),%eax
    0.00 :	  429d9d:       movslq %eax,%rdx
    0.00 :	  429da0:       lea    -0x170(%rbp),%rax
    0.00 :	  429da7:       mov    %rdx,%rsi
    0.00 :	  429daa:       mov    %rax,%rdi
    0.00 :	  429dad:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  429db2:       vmovsd (%rax),%xmm1
    0.00 :	  429db6:       vmovsd -0x28(%rbp),%xmm0
    0.00 :	  429dbb:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  429dbf:       vmovsd -0x1d8(%rbp),%xmm1
    0.00 :	  429dc7:       vmulsd %xmm1,%xmm0,%xmm2
    0.00 :	  429dcb:       vmovsd %xmm2,-0x1f8(%rbp)
    0.00 :	  429dd3:       mov    -0x44(%rbp),%eax
    0.00 :	  429dd6:       movslq %eax,%rdx
    0.00 :	  429dd9:       lea    -0x170(%rbp),%rax
    0.00 :	  429de0:       mov    %rdx,%rsi
    0.00 :	  429de3:       mov    %rax,%rdi
    0.00 :	  429de6:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  429deb:       vmovsd (%rax),%xmm0
    0.00 :	  429def:       vaddsd -0x1f8(%rbp),%xmm0,%xmm0
    0.00 :	  429df7:       vmovsd %xmm0,-0x1d8(%rbp)
         :	            // flop count: 1 mul 2 add
         :
         :	            auto cumspace_last = cumspace.begin();
    0.00 :	  429dff:       lea    -0x170(%rbp),%rax
    0.00 :	  429e06:       mov    %rax,%rdi
    0.00 :	  429e09:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.00 :	  429e0e:       mov    %rax,-0x1e0(%rbp)
         :	            std::advance(cumspace_last, len);
    0.00 :	  429e15:       mov    -0x54(%rbp),%edx
    0.00 :	  429e18:       lea    -0x1e0(%rbp),%rax
    0.00 :	  429e1f:       mov    %edx,%esi
    0.00 :	  429e21:       mov    %rax,%rdi
    0.00 :	  429e24:       callq  42d7af <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)>
         :	            int koff = std::distance(cumspace.begin(), std::lower_bound(cumspace.begin(), cumspace_last, r));
    0.00 :	  429e29:       lea    -0x170(%rbp),%rax
    0.00 :	  429e30:       mov    %rax,%rdi
    0.00 :	  429e33:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
    0.00 :	  429e38:       lea    -0x1d8(%rbp),%rdx
    0.00 :	  429e3f:       mov    -0x1e0(%rbp),%rcx
    0.00 :	  429e46:       mov    %rcx,%rsi
    0.00 :	  429e49:       mov    %rax,%rdi
    0.00 :	  429e4c:       callq  42d7fb <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)>
    0.00 :	  429e51:       mov    %rax,%rbx
    0.00 :	  429e54:       lea    -0x170(%rbp),%rax
    0.00 :	  429e5b:       mov    %rax,%rdi
    0.00 :	  429e5e:       callq  42058a <std::vector<double, std::allocator<double> >::begin()>
   11.11 :	  429e63:       mov    %rbx,%rsi
    0.00 :	  429e66:       mov    %rax,%rdi
    0.00 :	  429e69:       callq  42d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>
    0.00 :	  429e6e:       mov    %eax,-0x64(%rbp)
         :	            // flop count: len?
         :
         :	            Tind k = colspace[koff].row;
    0.00 :	  429e71:       mov    -0x64(%rbp),%eax
   11.11 :	  429e74:       movslq %eax,%rdx
    0.00 :	  429e77:       lea    -0x150(%rbp),%rax
    0.00 :	  429e7e:       mov    %rdx,%rsi
    0.00 :	  429e81:       mov    %rax,%rdi
    0.00 :	  429e84:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429e89:       mov    (%rax),%eax
    0.00 :	  429e8b:       mov    %eax,-0x68(%rbp)
         :
         :	            Tval newEdgeVal = w*(1-f);
    0.00 :	  429e8e:       vmovsd -0x1d0(%rbp),%xmm1
    0.00 :	  429e96:       vmovsd 0x9dda(%rip),%xmm0        # 433c78 <std::ignore+0x196>
    0.00 :	  429e9e:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  429ea2:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.00 :	  429ea7:       vmovsd %xmm0,-0x70(%rbp)
         :	            // flop count: 1 mul 1 add
         :
         :
         :	            // create edge (j,k) with newEdgeVal
         :	            // do it by reassigning ll
         :	            if (j < k) {    // put it in col j
    0.00 :	  429eac:       mov    -0x1c4(%rbp),%eax
    0.00 :	  429eb2:       cmp    -0x68(%rbp),%eax
    0.00 :	  429eb5:       jge    429f79 <approxChol(LLMatOrd)+0x500>
         :	                Tind jhead = a.cols[j];
    0.00 :	  429ebb:       mov    -0x1c4(%rbp),%eax
    0.00 :	  429ec1:       cltq
    0.00 :	  429ec3:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429eca:       add    $0x8,%rdx
    0.00 :	  429ece:       mov    %rax,%rsi
    0.00 :	  429ed1:       mov    %rdx,%rdi
    0.00 :	  429ed4:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429ed9:       mov    (%rax),%eax
    0.00 :	  429edb:       mov    %eax,-0x74(%rbp)
         :	                a.lles[llcol.ptr].row = k;
    0.00 :	  429ede:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429ee4:       cltq
    0.00 :	  429ee6:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429eed:       add    $0x20,%rdx
   11.11 :	  429ef1:       mov    %rax,%rsi
    0.00 :	  429ef4:       mov    %rdx,%rdi
    0.00 :	  429ef7:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429efc:       mov    -0x68(%rbp),%edx
    0.00 :	  429eff:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = jhead;
    0.00 :	  429f01:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f07:       cltq
    0.00 :	  429f09:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f10:       add    $0x20,%rdx
    0.00 :	  429f14:       mov    %rax,%rsi
    0.00 :	  429f17:       mov    %rdx,%rdi
    0.00 :	  429f1a:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429f1f:       mov    -0x74(%rbp),%edx
    0.00 :	  429f22:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    0.00 :	  429f25:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f2b:       cltq
    0.00 :	  429f2d:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f34:       add    $0x20,%rdx
   11.11 :	  429f38:       mov    %rax,%rsi
    0.00 :	  429f3b:       mov    %rdx,%rdi
    0.00 :	  429f3e:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429f43:       mov    %rax,%rdx
    0.00 :	  429f46:       mov    -0x70(%rbp),%rax
    0.00 :	  429f4a:       mov    %rax,0x8(%rdx)
         :	                a.cols[j] = llcol.ptr;
    0.00 :	  429f4e:       mov    -0x1c4(%rbp),%eax
    0.00 :	  429f54:       cltq
    0.00 :	  429f56:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f5d:       add    $0x8,%rdx
    0.00 :	  429f61:       mov    %rax,%rsi
    0.00 :	  429f64:       mov    %rdx,%rdi
    0.00 :	  429f67:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429f6c:       mov    -0x1bc(%rbp),%edx
    0.00 :	  429f72:       mov    %edx,(%rax)
   11.11 :	  429f74:       jmpq   42a02f <approxChol(LLMatOrd)+0x5b6>
         :	            } else {        // put it in col k
         :	                Tind khead = a.cols[k];
    0.00 :	  429f79:       mov    -0x68(%rbp),%eax
    0.00 :	  429f7c:       cltq
    0.00 :	  429f7e:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429f85:       add    $0x8,%rdx
    0.00 :	  429f89:       mov    %rax,%rsi
    0.00 :	  429f8c:       mov    %rdx,%rdi
    0.00 :	  429f8f:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  429f94:       mov    (%rax),%eax
    0.00 :	  429f96:       mov    %eax,-0x78(%rbp)
         :	                a.lles[llcol.ptr].row = j;
    0.00 :	  429f99:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429f9f:       cltq
    0.00 :	  429fa1:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429fa8:       add    $0x20,%rdx
    0.00 :	  429fac:       mov    %rax,%rsi
    0.00 :	  429faf:       mov    %rdx,%rdi
    0.00 :	  429fb2:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429fb7:       mov    -0x1c4(%rbp),%edx
    0.00 :	  429fbd:       mov    %edx,(%rax)
         :	                a.lles[llcol.ptr].next = khead;
    0.00 :	  429fbf:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429fc5:       cltq
    0.00 :	  429fc7:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429fce:       add    $0x20,%rdx
    0.00 :	  429fd2:       mov    %rax,%rsi
    0.00 :	  429fd5:       mov    %rdx,%rdi
    0.00 :	  429fd8:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  429fdd:       mov    -0x78(%rbp),%edx
    0.00 :	  429fe0:       mov    %edx,0x4(%rax)
         :	                a.lles[llcol.ptr].val = newEdgeVal;
    0.00 :	  429fe3:       mov    -0x1bc(%rbp),%eax
    0.00 :	  429fe9:       cltq
    0.00 :	  429feb:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  429ff2:       add    $0x20,%rdx
    0.00 :	  429ff6:       mov    %rax,%rsi
    0.00 :	  429ff9:       mov    %rdx,%rdi
    0.00 :	  429ffc:       callq  42cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>
    0.00 :	  42a001:       mov    %rax,%rdx
    0.00 :	  42a004:       mov    -0x70(%rbp),%rax
    0.00 :	  42a008:       mov    %rax,0x8(%rdx)
         :	                a.cols[k] = llcol.ptr;
    0.00 :	  42a00c:       mov    -0x68(%rbp),%eax
    0.00 :	  42a00f:       cltq
    0.00 :	  42a011:       mov    -0x1f0(%rbp),%rdx
    0.00 :	  42a018:       add    $0x8,%rdx
    0.00 :	  42a01c:       mov    %rax,%rsi
    0.00 :	  42a01f:       mov    %rdx,%rdi
    0.00 :	  42a022:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42a027:       mov    -0x1bc(%rbp),%edx
    0.00 :	  42a02d:       mov    %edx,(%rax)
         :	            }
         :
         :	            colScale *= 1 - f;
    0.00 :	  42a02f:       vmovsd -0x1d0(%rbp),%xmm1
    0.00 :	  42a037:       vmovsd 0x9c39(%rip),%xmm0        # 433c78 <std::ignore+0x196>
    0.00 :	  42a03f:       vsubsd %xmm1,%xmm0,%xmm0
    0.00 :	  42a043:       vmovsd -0x40(%rbp),%xmm1
    0.00 :	  42a048:       vmulsd %xmm0,%xmm1,%xmm0
    0.00 :	  42a04c:       vmovsd %xmm0,-0x40(%rbp)
         :	            wdeg = wdeg - 2*w + w*f;
    0.00 :	  42a051:       vmovsd -0x60(%rbp),%xmm0
    0.00 :	  42a056:       vaddsd %xmm0,%xmm0,%xmm0
    0.00 :	  42a05a:       vmovsd -0x38(%rbp),%xmm1
    0.00 :	  42a05f:       vsubsd %xmm0,%xmm1,%xmm1
    0.00 :	  42a063:       vmovsd -0x1d0(%rbp),%xmm0
    0.00 :	  42a06b:       vmulsd -0x60(%rbp),%xmm0,%xmm0
    0.00 :	  42a070:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  42a074:       vmovsd %xmm0,-0x38(%rbp)
         :	            // flop count: 3 mul 3 add
         :
         :	            ldli.rowval.push_back(j);
    0.00 :	  42a079:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a080:       lea    0x30(%rax),%rdx
    0.00 :	  42a084:       lea    -0x1c4(%rbp),%rax
    0.00 :	  42a08b:       mov    %rax,%rsi
    0.00 :	  42a08e:       mov    %rdx,%rdi
    0.00 :	  42a091:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	            ldli.fval.push_back(f);
    0.00 :	  42a096:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a09d:       lea    0x48(%rax),%rdx
    0.00 :	  42a0a1:       lea    -0x1d0(%rbp),%rax
    0.00 :	  42a0a8:       mov    %rax,%rsi
    0.00 :	  42a0ab:       mov    %rdx,%rdi
    0.00 :	  42a0ae:       callq  42d904 <std::vector<double, std::allocator<double> >::push_back(double const&)>
         :	            ldli_row_ptr += 1;
    0.00 :	  42a0b3:       addl   $0x1,-0x14(%rbp)
         :	        for (int joffset = 0; joffset <= len-2; joffset++) {
    0.00 :	  42a0b7:       addl   $0x1,-0x44(%rbp)
    0.00 :	  42a0bb:       mov    -0x54(%rbp),%eax
    0.00 :	  42a0be:       sub    $0x2,%eax
    0.00 :	  42a0c1:       cmp    -0x44(%rbp),%eax
    0.00 :	  42a0c4:       jge    429d0e <approxChol(LLMatOrd)+0x295>
         :	        }
         :
         :	        LLcol llcol = colspace[len-1];
    0.00 :	  42a0ca:       mov    -0x54(%rbp),%eax
    0.00 :	  42a0cd:       sub    $0x1,%eax
    0.00 :	  42a0d0:       movslq %eax,%rdx
    0.00 :	  42a0d3:       lea    -0x150(%rbp),%rax
    0.00 :	  42a0da:       mov    %rdx,%rsi
    0.00 :	  42a0dd:       mov    %rax,%rdi
    0.00 :	  42a0e0:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42a0e5:       mov    0x8(%rax),%rdx
   11.11 :	  42a0e9:       mov    (%rax),%rax
    0.00 :	  42a0ec:       mov    %rax,-0x1a0(%rbp)
    0.00 :	  42a0f3:       mov    %rdx,-0x198(%rbp)
         :	        Tval w = llcol.cval * colScale;
    0.00 :	  42a0fa:       vmovsd -0x198(%rbp),%xmm0
   11.11 :	  42a102:       vmulsd -0x40(%rbp),%xmm0,%xmm0
    0.00 :	  42a107:       vmovsd %xmm0,-0x80(%rbp)
         :	        // flop count: 1 mul
         :	        Tind j = llcol.row;
   11.11 :	  42a10c:       mov    -0x1a0(%rbp),%eax
    0.00 :	  42a112:       mov    %eax,-0x1a4(%rbp)
         :
         :	        ldli.rowval.push_back(j);
    0.00 :	  42a118:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a11f:       lea    0x30(%rax),%rdx
    0.00 :	  42a123:       lea    -0x1a4(%rbp),%rax
    0.00 :	  42a12a:       mov    %rax,%rsi
    0.00 :	  42a12d:       mov    %rdx,%rdi
    0.00 :	  42a130:       callq  420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>
         :	        ldli.fval.push_back(1);
    0.00 :	  42a135:       movabs $0x3ff0000000000000,%rax
    0.00 :	  42a13f:       mov    %rax,-0x88(%rbp)
    0.00 :	  42a146:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a14d:       lea    0x48(%rax),%rdx
    0.00 :	  42a151:       lea    -0x88(%rbp),%rax
    0.00 :	  42a158:       mov    %rax,%rsi
    0.00 :	  42a15b:       mov    %rdx,%rdi
    0.00 :	  42a15e:       callq  42d97e <std::vector<double, std::allocator<double> >::push_back(double&&)>
         :	        ldli_row_ptr += 1;
    0.00 :	  42a163:       addl   $0x1,-0x14(%rbp)
         :
         :	        d[i] = w;
    0.00 :	  42a167:       mov    -0x20(%rbp),%rdx
    0.00 :	  42a16b:       lea    -0x130(%rbp),%rax
    0.00 :	  42a172:       mov    %rdx,%rsi
    0.00 :	  42a175:       mov    %rax,%rdi
    0.00 :	  42a178:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  42a17d:       mov    %rax,%rdx
    0.00 :	  42a180:       mov    -0x80(%rbp),%rax
    0.00 :	  42a184:       mov    %rax,(%rdx)
         :	    for (long i = 0; i <= n-2; i++) {
    0.00 :	  42a187:       addq   $0x1,-0x20(%rbp)
    0.00 :	  42a18c:       mov    -0x50(%rbp),%rax
    0.00 :	  42a190:       sub    $0x2,%rax
    0.00 :	  42a194:       cmp    -0x20(%rbp),%rax
    0.00 :	  42a198:       jge    429be6 <approxChol(LLMatOrd)+0x16d>
         :	    }
         :
         :	    ldli.colptr[n-1] = ldli_row_ptr;
    0.00 :	  42a19e:       mov    -0x50(%rbp),%rax
    0.00 :	  42a1a2:       sub    $0x1,%rax
    0.00 :	  42a1a6:       mov    -0x1e8(%rbp),%rdx
    0.00 :	  42a1ad:       add    $0x18,%rdx
    0.00 :	  42a1b1:       mov    %rax,%rsi
    0.00 :	  42a1b4:       mov    %rdx,%rdi
    0.00 :	  42a1b7:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  42a1bc:       mov    -0x14(%rbp),%edx
    0.00 :	  42a1bf:       mov    %edx,(%rax)
         :	    ldli.d = d;
    0.00 :	  42a1c1:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a1c8:       lea    0x60(%rax),%rdx
    0.00 :	  42a1cc:       lea    -0x130(%rbp),%rax
    0.00 :	  42a1d3:       mov    %rax,%rsi
    0.00 :	  42a1d6:       mov    %rdx,%rdi
    0.00 :	  42a1d9:       callq  42d9ba <std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> > const&)>
         :
         :	    return ldli;
    0.00 :	  42a1de:       nop
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42a1df:       lea    -0x170(%rbp),%rax
    0.00 :	  42a1e6:       mov    %rax,%rdi
    0.00 :	  42a1e9:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42a1ee:       lea    -0x150(%rbp),%rax
    0.00 :	  42a1f5:       mov    %rax,%rdi
    0.00 :	  42a1f8:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42a1fd:       lea    -0x130(%rbp),%rax
    0.00 :	  42a204:       mov    %rax,%rdi
    0.00 :	  42a207:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  42a20c:       jmpq   42a2d3 <approxChol(LLMatOrd)+0x85a>
    0.00 :	  42a211:       mov    %rax,%rbx
    0.00 :	  42a214:       lea    -0x110(%rbp),%rax
    0.00 :	  42a21b:       mov    %rax,%rdi
    0.00 :	  42a21e:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42a223:       mov    %rbx,%rax
    0.00 :	  42a226:       jmpq   42a2cb <approxChol(LLMatOrd)+0x852>
    0.00 :	  42a22b:       mov    %rax,%rbx
    0.00 :	  42a22e:       lea    -0xd1(%rbp),%rax
    0.00 :	  42a235:       mov    %rax,%rdi
    0.00 :	  42a238:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42a23d:       jmp    42a2b7 <approxChol(LLMatOrd)+0x83e>
    0.00 :	  42a23f:       mov    %rax,%rbx
    0.00 :	  42a242:       lea    -0xc2(%rbp),%rax
    0.00 :	  42a249:       mov    %rax,%rdi
    0.00 :	  42a24c:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42a251:       jmp    42a2a8 <approxChol(LLMatOrd)+0x82f>
    0.00 :	  42a253:       mov    %rax,%rbx
    0.00 :	  42a256:       lea    -0xc1(%rbp),%rax
    0.00 :	  42a25d:       mov    %rax,%rdi
    0.00 :	  42a260:       callq  41fce6 <std::allocator<double>::~allocator()>
    0.00 :	  42a265:       jmp    42a299 <approxChol(LLMatOrd)+0x820>
    0.00 :	  42a267:       mov    %rax,%rbx
         :	        int len = get_ll_col(a, i, colspace);
    0.00 :	  42a26a:       lea    -0xc0(%rbp),%rax
    0.00 :	  42a271:       mov    %rax,%rdi
    0.00 :	  42a274:       callq  41f8f4 <LLMatOrd::~LLMatOrd()>
    0.00 :	  42a279:       mov    %rbx,%rax
    0.00 :	  42a27c:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a27e:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a280:       jmp    42a282 <approxChol(LLMatOrd)+0x809>
    0.00 :	  42a282:       mov    %rax,%rbx
    0.00 :	  42a285:       jmp    42a28a <approxChol(LLMatOrd)+0x811>
    0.00 :	  42a287:       mov    %rax,%rbx
         :	    std::vector<Tval> cumspace(n);
    0.00 :	  42a28a:       lea    -0x170(%rbp),%rax
    0.00 :	  42a291:       mov    %rax,%rdi
    0.00 :	  42a294:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
         :	    std::vector<LLcol> colspace(n);
    0.00 :	  42a299:       lea    -0x150(%rbp),%rax
    0.00 :	  42a2a0:       mov    %rax,%rdi
    0.00 :	  42a2a3:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
         :	    std::vector<Tval> d(n, 0);
    0.00 :	  42a2a8:       lea    -0x130(%rbp),%rax
    0.00 :	  42a2af:       mov    %rax,%rdi
    0.00 :	  42a2b2:       callq  41fa2c <std::vector<double, std::allocator<double> >::~vector()>
    0.00 :	  42a2b7:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a2be:       mov    %rax,%rdi
    0.00 :	  42a2c1:       callq  41f9b8 <LDLinv::~LDLinv()>
    0.00 :	  42a2c6:       mov    %rbx,%rax
    0.00 :	  42a2c9:       jmp    42a2cb <approxChol(LLMatOrd)+0x852>
    0.00 :	  42a2cb:       mov    %rax,%rdi
    0.00 :	  42a2ce:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  42a2d3:       mov    -0x1e8(%rbp),%rax
    0.00 :	  42a2da:       add    $0x1f8,%rsp
    0.00 :	  42a2e1:       pop    %rbx
    0.00 :	  42a2e2:       pop    %rbp
    0.00 :	  42a2e3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (6 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427d48 <__gnu_cxx::__normal_iterator<LLord const*, std::vector<LLord, std::allocator<LLord> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPK5LLordSt6vectorIS1_SaIS1_EEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
   50.00 :	  427d48:       push   %rbp
    0.00 :	  427d49:       mov    %rsp,%rbp
    0.00 :	  427d4c:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
   33.33 :	  427d50:       mov    -0x8(%rbp),%rax
    0.00 :	  427d54:       mov    (%rax),%rax
   16.67 :	  427d57:       pop    %rbp
    0.00 :	  427d58:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEplERKl():
         :	      __normal_iterator&
         :	      operator+=(const difference_type& __n)
         :	      { _M_current += __n; return *this; }
         :
         :	      __normal_iterator
         :	      operator+(const difference_type& __n) const
    0.00 :	  42d0fc:       push   %rbp
    0.00 :	  42d0fd:       mov    %rsp,%rbp
    0.00 :	  42d100:       sub    $0x20,%rsp
    0.00 :	  42d104:       mov    %rdi,-0x18(%rbp)
   20.00 :	  42d108:       mov    %rsi,-0x20(%rbp)
         :	      { return __normal_iterator(_M_current + __n); }
   20.00 :	  42d10c:       mov    -0x18(%rbp),%rax
    0.00 :	  42d110:       mov    (%rax),%rdx
   20.00 :	  42d113:       mov    -0x20(%rbp),%rax
    0.00 :	  42d117:       mov    (%rax),%rax
    0.00 :	  42d11a:       shl    $0x4,%rax
    0.00 :	  42d11e:       add    %rdx,%rax
    0.00 :	  42d121:       mov    %rax,-0x8(%rbp)
    0.00 :	  42d125:       lea    -0x8(%rbp),%rdx
    0.00 :	  42d129:       lea    -0x10(%rbp),%rax
    0.00 :	  42d12d:       mov    %rdx,%rsi
    0.00 :	  42d130:       mov    %rax,%rdi
    0.00 :	  42d133:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  42d138:       mov    -0x10(%rbp),%rax
   20.00 :	  42d13c:       leaveq
   20.00 :	  42d13d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429790 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)>:
         :	_Z11compressColRSt6vectorI5LLcolSaIS0_EEi():
         :
         :	bool cmp_val(const LLcol &a, const LLcol &b) {
         :	    return a.cval < b.cval;
         :	}
         :
         :	Tind compressCol(std::vector<LLcol> &colspace, int len) {
    0.00 :	  429790:       push   %rbp
    0.00 :	  429791:       mov    %rsp,%rbp
    0.00 :	  429794:       push   %rbx
    0.00 :	  429795:       sub    $0x78,%rsp
    0.00 :	  429799:       mov    %rdi,-0x78(%rbp)
    0.00 :	  42979d:       mov    %esi,-0x7c(%rbp)
         :
         :	    // sort colspace ? DY: just checked, yes!
         :	    std::sort(colspace.begin(), colspace.begin() + len, cmp_row);
    0.00 :	  4297a0:       mov    -0x7c(%rbp),%eax
    0.00 :	  4297a3:       cltq
    0.00 :	  4297a5:       mov    %rax,-0x58(%rbp)
    0.00 :	  4297a9:       mov    -0x78(%rbp),%rax
    0.00 :	  4297ad:       mov    %rax,%rdi
    0.00 :	  4297b0:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  4297b5:       mov    %rax,-0x50(%rbp)
    0.00 :	  4297b9:       lea    -0x58(%rbp),%rdx
    0.00 :	  4297bd:       lea    -0x50(%rbp),%rax
    0.00 :	  4297c1:       mov    %rdx,%rsi
    0.00 :	  4297c4:       mov    %rax,%rdi
    0.00 :	  4297c7:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  4297cc:       mov    %rax,%rbx
    0.00 :	  4297cf:       mov    -0x78(%rbp),%rax
    0.00 :	  4297d3:       mov    %rax,%rdi
    0.00 :	  4297d6:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  4297db:       mov    $0x42974a,%edx
    0.00 :	  4297e0:       mov    %rbx,%rsi
    0.00 :	  4297e3:       mov    %rax,%rdi
    0.00 :	  4297e6:       callq  42d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :
         :	    std::vector<LLcol> c = colspace;
    0.00 :	  4297eb:       mov    -0x78(%rbp),%rdx
    0.00 :	  4297ef:       lea    -0x70(%rbp),%rax
    0.00 :	  4297f3:       mov    %rdx,%rsi
    0.00 :	  4297f6:       mov    %rax,%rdi
    0.00 :	  4297f9:       callq  42d1bc <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :
         :	    Tind ptr = -1;
    0.00 :	  4297fe:       movl   $0xffffffff,-0x14(%rbp)
         :	    Tind currow = c[0].row;     // julia index start from 1?
    0.00 :	  429805:       lea    -0x70(%rbp),%rax
    0.00 :	  429809:       mov    $0x0,%esi
    0.00 :	  42980e:       mov    %rax,%rdi
    0.00 :	  429811:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429816:       mov    (%rax),%eax
    0.00 :	  429818:       mov    %eax,-0x18(%rbp)
         :	    Tval curval = c[0].cval;
    0.00 :	  42981b:       lea    -0x70(%rbp),%rax
    0.00 :	  42981f:       mov    $0x0,%esi
    0.00 :	  429824:       mov    %rax,%rdi
    0.00 :	  429827:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42982c:       mov    0x8(%rax),%rax
    0.00 :	  429830:       mov    %rax,-0x20(%rbp)
         :	    Tind curptr = c[0].ptr;
    0.00 :	  429834:       lea    -0x70(%rbp),%rax
    0.00 :	  429838:       mov    $0x0,%esi
    0.00 :	  42983d:       mov    %rax,%rdi
    0.00 :	  429840:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429845:       mov    0x4(%rax),%eax
    0.00 :	  429848:       mov    %eax,-0x24(%rbp)
         :
         :	    // not consider inbounds
         :	    for (int i = 1; i < len; i++) {
    0.00 :	  42984b:       movl   $0x1,-0x28(%rbp)
    0.00 :	  429852:       jmpq   429955 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x1c5>
         :
         :	        if (c[i].row != currow) {
    0.00 :	  429857:       mov    -0x28(%rbp),%eax
    0.00 :	  42985a:       movslq %eax,%rdx
    0.00 :	  42985d:       lea    -0x70(%rbp),%rax
    0.00 :	  429861:       mov    %rdx,%rsi
    0.00 :	  429864:       mov    %rax,%rdi
    0.00 :	  429867:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42986c:       mov    (%rax),%eax
    0.00 :	  42986e:       cmp    -0x18(%rbp),%eax
    0.00 :	  429871:       setne  %al
    0.00 :	  429874:       test   %al,%al
    0.00 :	  429876:       je     429929 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x199>
         :
         :	            ptr += 1;
    0.00 :	  42987c:       addl   $0x1,-0x14(%rbp)
         :	            c[ptr].row = currow;
    0.00 :	  429880:       mov    -0x14(%rbp),%eax
    0.00 :	  429883:       movslq %eax,%rdx
    0.00 :	  429886:       lea    -0x70(%rbp),%rax
    0.00 :	  42988a:       mov    %rdx,%rsi
    0.00 :	  42988d:       mov    %rax,%rdi
    0.00 :	  429890:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429895:       mov    -0x18(%rbp),%edx
    0.00 :	  429898:       mov    %edx,(%rax)
         :	            c[ptr].cval = curval;
    0.00 :	  42989a:       mov    -0x14(%rbp),%eax
    0.00 :	  42989d:       movslq %eax,%rdx
    0.00 :	  4298a0:       lea    -0x70(%rbp),%rax
    0.00 :	  4298a4:       mov    %rdx,%rsi
    0.00 :	  4298a7:       mov    %rax,%rdi
    0.00 :	  4298aa:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4298af:       mov    %rax,%rdx
    0.00 :	  4298b2:       mov    -0x20(%rbp),%rax
    0.00 :	  4298b6:       mov    %rax,0x8(%rdx)
         :	            c[ptr].ptr = curptr;
   20.00 :	  4298ba:       mov    -0x14(%rbp),%eax
    0.00 :	  4298bd:       movslq %eax,%rdx
    0.00 :	  4298c0:       lea    -0x70(%rbp),%rax
    0.00 :	  4298c4:       mov    %rdx,%rsi
    0.00 :	  4298c7:       mov    %rax,%rdi
    0.00 :	  4298ca:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4298cf:       mov    -0x24(%rbp),%edx
    0.00 :	  4298d2:       mov    %edx,0x4(%rax)
         :
         :	            currow = c[i].row;
    0.00 :	  4298d5:       mov    -0x28(%rbp),%eax
    0.00 :	  4298d8:       movslq %eax,%rdx
    0.00 :	  4298db:       lea    -0x70(%rbp),%rax
    0.00 :	  4298df:       mov    %rdx,%rsi
    0.00 :	  4298e2:       mov    %rax,%rdi
    0.00 :	  4298e5:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4298ea:       mov    (%rax),%eax
    0.00 :	  4298ec:       mov    %eax,-0x18(%rbp)
         :	            curval = c[i].cval;
    0.00 :	  4298ef:       mov    -0x28(%rbp),%eax
    0.00 :	  4298f2:       movslq %eax,%rdx
    0.00 :	  4298f5:       lea    -0x70(%rbp),%rax
    0.00 :	  4298f9:       mov    %rdx,%rsi
    0.00 :	  4298fc:       mov    %rax,%rdi
    0.00 :	  4298ff:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429904:       mov    0x8(%rax),%rax
    0.00 :	  429908:       mov    %rax,-0x20(%rbp)
         :	            curptr = c[i].ptr;
    0.00 :	  42990c:       mov    -0x28(%rbp),%eax
    0.00 :	  42990f:       movslq %eax,%rdx
    0.00 :	  429912:       lea    -0x70(%rbp),%rax
    0.00 :	  429916:       mov    %rdx,%rsi
    0.00 :	  429919:       mov    %rax,%rdi
    0.00 :	  42991c:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429921:       mov    0x4(%rax),%eax
    0.00 :	  429924:       mov    %eax,-0x24(%rbp)
    0.00 :	  429927:       jmp    429951 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x1c1>
         :
         :	        } else {
         :
         :	            curval += c[i].cval;
    0.00 :	  429929:       mov    -0x28(%rbp),%eax
    0.00 :	  42992c:       movslq %eax,%rdx
    0.00 :	  42992f:       lea    -0x70(%rbp),%rax
    0.00 :	  429933:       mov    %rdx,%rsi
    0.00 :	  429936:       mov    %rax,%rdi
    0.00 :	  429939:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42993e:       vmovsd 0x8(%rax),%xmm0
    0.00 :	  429943:       vmovsd -0x20(%rbp),%xmm1
    0.00 :	  429948:       vaddsd %xmm0,%xmm1,%xmm0
    0.00 :	  42994c:       vmovsd %xmm0,-0x20(%rbp)
         :	    for (int i = 1; i < len; i++) {
    0.00 :	  429951:       addl   $0x1,-0x28(%rbp)
    0.00 :	  429955:       mov    -0x28(%rbp),%eax
    0.00 :	  429958:       cmp    -0x7c(%rbp),%eax
    0.00 :	  42995b:       jl     429857 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0xc7>
         :
         :	        }
         :	    }
         :
         :	    // emit the last row
         :	    ptr += 1;
    0.00 :	  429961:       addl   $0x1,-0x14(%rbp)
         :	    c[ptr].row = currow;
    0.00 :	  429965:       mov    -0x14(%rbp),%eax
   20.00 :	  429968:       movslq %eax,%rdx
    0.00 :	  42996b:       lea    -0x70(%rbp),%rax
    0.00 :	  42996f:       mov    %rdx,%rsi
    0.00 :	  429972:       mov    %rax,%rdi
    0.00 :	  429975:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  42997a:       mov    -0x18(%rbp),%edx
    0.00 :	  42997d:       mov    %edx,(%rax)
         :	    c[ptr].cval = curval;
    0.00 :	  42997f:       mov    -0x14(%rbp),%eax
    0.00 :	  429982:       movslq %eax,%rdx
    0.00 :	  429985:       lea    -0x70(%rbp),%rax
    0.00 :	  429989:       mov    %rdx,%rsi
    0.00 :	  42998c:       mov    %rax,%rdi
    0.00 :	  42998f:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  429994:       mov    %rax,%rdx
    0.00 :	  429997:       mov    -0x20(%rbp),%rax
   20.00 :	  42999b:       mov    %rax,0x8(%rdx)
         :	    c[ptr].ptr = curptr;
    0.00 :	  42999f:       mov    -0x14(%rbp),%eax
    0.00 :	  4299a2:       movslq %eax,%rdx
    0.00 :	  4299a5:       lea    -0x70(%rbp),%rax
    0.00 :	  4299a9:       mov    %rdx,%rsi
    0.00 :	  4299ac:       mov    %rax,%rdi
    0.00 :	  4299af:       callq  42d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>
    0.00 :	  4299b4:       mov    -0x24(%rbp),%edx
    0.00 :	  4299b7:       mov    %edx,0x4(%rax)
         :
         :	    std::sort(c.begin(), c.begin() + ptr + 1, cmp_val);
    0.00 :	  4299ba:       movq   $0x1,-0x48(%rbp)
    0.00 :	  4299c2:       mov    -0x14(%rbp),%eax
    0.00 :	  4299c5:       cltq
    0.00 :	  4299c7:       mov    %rax,-0x38(%rbp)
    0.00 :	  4299cb:       lea    -0x70(%rbp),%rax
    0.00 :	  4299cf:       mov    %rax,%rdi
    0.00 :	  4299d2:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  4299d7:       mov    %rax,-0x30(%rbp)
    0.00 :	  4299db:       lea    -0x38(%rbp),%rdx
    0.00 :	  4299df:       lea    -0x30(%rbp),%rax
    0.00 :	  4299e3:       mov    %rdx,%rsi
    0.00 :	  4299e6:       mov    %rax,%rdi
    0.00 :	  4299e9:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  4299ee:       mov    %rax,-0x40(%rbp)
    0.00 :	  4299f2:       lea    -0x48(%rbp),%rdx
    0.00 :	  4299f6:       lea    -0x40(%rbp),%rax
    0.00 :	  4299fa:       mov    %rdx,%rsi
    0.00 :	  4299fd:       mov    %rax,%rdi
   20.00 :	  429a00:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  429a05:       mov    %rax,%rbx
    0.00 :	  429a08:       lea    -0x70(%rbp),%rax
    0.00 :	  429a0c:       mov    %rax,%rdi
    0.00 :	  429a0f:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  429a14:       mov    $0x429769,%edx
    0.00 :	  429a19:       mov    %rbx,%rsi
    0.00 :	  429a1c:       mov    %rax,%rdi
    0.00 :	  429a1f:       callq  42d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :
         :	    colspace = c;
    0.00 :	  429a24:       lea    -0x70(%rbp),%rdx
    0.00 :	  429a28:       mov    -0x78(%rbp),%rax
   20.00 :	  429a2c:       mov    %rdx,%rsi
    0.00 :	  429a2f:       mov    %rax,%rdi
    0.00 :	  429a32:       callq  42d302 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)>
         :	    return ptr+1; // if the returned value is used for vector length, then it should return ptr+1
    0.00 :	  429a37:       mov    -0x14(%rbp),%eax
    0.00 :	  429a3a:       lea    0x1(%rax),%ebx
    0.00 :	  429a3d:       lea    -0x70(%rbp),%rax
    0.00 :	  429a41:       mov    %rax,%rdi
    0.00 :	  429a44:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    0.00 :	  429a49:       mov    %ebx,%eax
    0.00 :	  429a4b:       jmp    429a72 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2e2>
    0.00 :	  429a4d:       jmp    429a6a <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2da>
    0.00 :	  429a4f:       jmp    429a51 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2c1>
    0.00 :	  429a51:       mov    %rax,%rbx
    0.00 :	  429a54:       jmp    429a59 <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2c9>
    0.00 :	  429a56:       mov    %rax,%rbx
    0.00 :	  429a59:       lea    -0x70(%rbp),%rax
    0.00 :	  429a5d:       mov    %rax,%rdi
    0.00 :	  429a60:       callq  42d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>
    0.00 :	  429a65:       mov    %rbx,%rax
    0.00 :	  429a68:       jmp    429a6a <compressCol(std::vector<LLcol, std::allocator<LLcol> >&, int)+0x2da>
    0.00 :	  429a6a:       mov    %rax,%rdi
    0.00 :	  429a6d:       callq  41dda0 <_Unwind_Resume@plt>
         :	}
    0.00 :	  429a72:       add    $0x78,%rsp
    0.00 :	  429a76:       pop    %rbx
    0.00 :	  429a77:       pop    %rbp
    0.00 :	  429a78:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430eab <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)>:
         :	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5LLcolEEPT_PKS4_S7_S5_():
         :	  template<bool _IsMove>
         :	    struct __copy_move<_IsMove, true, random_access_iterator_tag>
         :	    {
         :	      template<typename _Tp>
         :	        static _Tp*
         :	        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   20.00 :	  430eab:       push   %rbp
    0.00 :	  430eac:       mov    %rsp,%rbp
    0.00 :	  430eaf:       sub    $0x30,%rsp
    0.00 :	  430eb3:       mov    %rdi,-0x18(%rbp)
   20.00 :	  430eb7:       mov    %rsi,-0x20(%rbp)
    0.00 :	  430ebb:       mov    %rdx,-0x28(%rbp)
         :	        {
         :	          const ptrdiff_t _Num = __last - __first;
    0.00 :	  430ebf:       mov    -0x20(%rbp),%rdx
    0.00 :	  430ec3:       mov    -0x18(%rbp),%rax
    0.00 :	  430ec7:       sub    %rax,%rdx
    0.00 :	  430eca:       mov    %rdx,%rax
    0.00 :	  430ecd:       sar    $0x4,%rax
   20.00 :	  430ed1:       mov    %rax,-0x8(%rbp)
         :	          if (_Num)
   20.00 :	  430ed5:       cmpq   $0x0,-0x8(%rbp)
    0.00 :	  430eda:       je     430efa <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)+0x4f>
         :	            __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   20.00 :	  430edc:       mov    -0x8(%rbp),%rax
    0.00 :	  430ee0:       shl    $0x4,%rax
    0.00 :	  430ee4:       mov    %rax,%rdx
    0.00 :	  430ee7:       mov    -0x18(%rbp),%rcx
    0.00 :	  430eeb:       mov    -0x28(%rbp),%rax
    0.00 :	  430eef:       mov    %rcx,%rsi
    0.00 :	  430ef2:       mov    %rax,%rdi
    0.00 :	  430ef5:       callq  41dc60 <memmove@plt>
         :	          return __result + _Num;
    0.00 :	  430efa:       mov    -0x8(%rbp),%rax
    0.00 :	  430efe:       shl    $0x4,%rax
    0.00 :	  430f02:       mov    %rax,%rdx
    0.00 :	  430f05:       mov    -0x28(%rbp),%rax
    0.00 :	  430f09:       add    %rdx,%rax
         :	        }
    0.00 :	  430f0c:       leaveq
    0.00 :	  430f0d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e8fe <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)>:
         :	_ZNSt25uniform_real_distributionIdEclISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEEdRT_RKNS0_10param_typeE():
         :	        operator()(_UniformRandomNumberGenerator& __urng)
         :	        { return this->operator()(__urng, _M_param); }
         :
         :	      template<typename _UniformRandomNumberGenerator>
         :	        result_type
         :	        operator()(_UniformRandomNumberGenerator& __urng,
    0.00 :	  42e8fe:       push   %rbp
    0.00 :	  42e8ff:       mov    %rsp,%rbp
    0.00 :	  42e902:       sub    $0x40,%rsp
    0.00 :	  42e906:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42e90a:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42e90e:       mov    %rdx,-0x28(%rbp)
         :	                   const param_type& __p)
         :	        {
         :	          __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
         :	            __aurng(__urng);
    0.00 :	  42e912:       mov    -0x20(%rbp),%rdx
    0.00 :	  42e916:       lea    -0x10(%rbp),%rax
    0.00 :	  42e91a:       mov    %rdx,%rsi
    0.00 :	  42e91d:       mov    %rax,%rdi
    0.00 :	  42e920:       callq  42f816 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::_Adaptor(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
         :	          return (__aurng() * (__p.b() - __p.a())) + __p.a();
    0.00 :	  42e925:       lea    -0x10(%rbp),%rax
    0.00 :	  42e929:       mov    %rax,%rdi
    0.00 :	  42e92c:       callq  42f866 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::operator()()>
   20.00 :	  42e931:       vmovsd %xmm0,-0x30(%rbp)
    0.00 :	  42e936:       mov    -0x28(%rbp),%rax
    0.00 :	  42e93a:       mov    %rax,%rdi
    0.00 :	  42e93d:       callq  42f84a <std::uniform_real_distribution<double>::param_type::b() const>
    0.00 :	  42e942:       vmovsd %xmm0,-0x38(%rbp)
    0.00 :	  42e947:       mov    -0x28(%rbp),%rax
    0.00 :	  42e94b:       mov    %rax,%rdi
    0.00 :	  42e94e:       callq  42f830 <std::uniform_real_distribution<double>::param_type::a() const>
    0.00 :	  42e953:       vmovsd -0x38(%rbp),%xmm1
    0.00 :	  42e958:       vsubsd %xmm0,%xmm1,%xmm0
    0.00 :	  42e95c:       vmulsd -0x30(%rbp),%xmm0,%xmm2
   20.00 :	  42e961:       vmovsd %xmm2,-0x30(%rbp)
   20.00 :	  42e966:       mov    -0x28(%rbp),%rax
    0.00 :	  42e96a:       mov    %rax,%rdi
    0.00 :	  42e96d:       callq  42f830 <std::uniform_real_distribution<double>::param_type::a() const>
    0.00 :	  42e972:       vaddsd -0x30(%rbp),%xmm0,%xmm0
   40.00 :	  42e977:       vmovsd %xmm0,-0x30(%rbp)
    0.00 :	  42e97c:       mov    -0x30(%rbp),%rax
    0.00 :	  42e980:       jmp    42e98a <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)+0x8c>
    0.00 :	  42e982:       mov    %rax,%rdi
    0.00 :	  42e985:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
    0.00 :	  42e98a:       mov    %rax,-0x30(%rbp)
    0.00 :	  42e98e:       vmovsd -0x30(%rbp),%xmm0
    0.00 :	  42e993:       leaveq
    0.00 :	  42e994:       retq
 Percent |	Source code & Disassembly of main for cycles:u (5 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>:
         :	_ZNSt6vectorIiSaIiEEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    0.00 :	  41fdba:       push   %rbp
    0.00 :	  41fdbb:       mov    %rsp,%rbp
    0.00 :	  41fdbe:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41fdc2:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
    0.00 :	  41fdc6:       mov    -0x8(%rbp),%rax
   60.00 :	  41fdca:       mov    (%rax),%rax
   20.00 :	  41fdcd:       mov    -0x10(%rbp),%rdx
    0.00 :	  41fdd1:       shl    $0x2,%rdx
    0.00 :	  41fdd5:       add    %rdx,%rax
   20.00 :	  41fdd8:       pop    %rbp
    0.00 :	  41fdd9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEdeEv():
         :	                      _Container>::__type>& __i)
         :	        : _M_current(__i.base()) { }
         :
         :	      // Forward iterator requirements
         :	      reference
         :	      operator*() const
   25.00 :	  430210:       push   %rbp
    0.00 :	  430211:       mov    %rsp,%rbp
    0.00 :	  430214:       mov    %rdi,-0x8(%rbp)
         :	      { return *_M_current; }
    0.00 :	  430218:       mov    -0x8(%rbp),%rax
    0.00 :	  43021c:       mov    (%rax),%rax
   75.00 :	  43021f:       pop    %rbp
    0.00 :	  430220:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d7fb <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)>:
         :	_ZSt11lower_boundIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET_S7_S7_RKT0_():
         :	   *                  @a val.
         :	   *  @ingroup binary_search_algorithms
         :	  */
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    _ForwardIterator
         :	    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    0.00 :	  42d7fb:       push   %rbp
    0.00 :	  42d7fc:       mov    %rsp,%rbp
    0.00 :	  42d7ff:       sub    $0x40,%rsp
    0.00 :	  42d803:       mov    %rdi,-0x30(%rbp)
    0.00 :	  42d807:       mov    %rsi,-0x40(%rbp)
    0.00 :	  42d80b:       mov    %rdx,-0x38(%rbp)
         :	      // concept requirements
         :	      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
         :	      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)
         :	      __glibcxx_requires_partitioned_lower(__first, __last, __val);
         :
         :	      _DistanceType __len = std::distance(__first, __last);
    0.00 :	  42d80f:       mov    -0x40(%rbp),%rdx
    0.00 :	  42d813:       mov    -0x30(%rbp),%rax
    0.00 :	  42d817:       mov    %rdx,%rsi
    0.00 :	  42d81a:       mov    %rax,%rdi
    0.00 :	  42d81d:       callq  42d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>
    0.00 :	  42d822:       mov    %rax,-0x8(%rbp)
         :
         :	      while (__len > 0)
    0.00 :	  42d826:       jmp    42d8a5 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xaa>
         :	        {
         :	          _DistanceType __half = __len >> 1;
    0.00 :	  42d828:       mov    -0x8(%rbp),%rax
    0.00 :	  42d82c:       sar    %rax
    0.00 :	  42d82f:       mov    %rax,-0x10(%rbp)
         :	          _ForwardIterator __middle = __first;
    0.00 :	  42d833:       mov    -0x30(%rbp),%rax
   50.00 :	  42d837:       mov    %rax,-0x20(%rbp)
         :	          std::advance(__middle, __half);
    0.00 :	  42d83b:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d83f:       lea    -0x20(%rbp),%rax
    0.00 :	  42d843:       mov    %rdx,%rsi
    0.00 :	  42d846:       mov    %rax,%rdi
    0.00 :	  42d849:       callq  42e9c4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long)>
         :	          if (*__middle < __val)
    0.00 :	  42d84e:       lea    -0x20(%rbp),%rax
    0.00 :	  42d852:       mov    %rax,%rdi
    0.00 :	  42d855:       callq  420636 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator*() const>
    0.00 :	  42d85a:       vmovsd (%rax),%xmm1
   25.00 :	  42d85e:       mov    -0x38(%rbp),%rax
    0.00 :	  42d862:       vmovsd (%rax),%xmm0
    0.00 :	  42d866:       vucomisd %xmm1,%xmm0
   25.00 :	  42d86a:       seta   %al
    0.00 :	  42d86d:       test   %al,%al
    0.00 :	  42d86f:       je     42d89d <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xa2>
         :	            {
         :	              __first = __middle;
    0.00 :	  42d871:       mov    -0x20(%rbp),%rax
    0.00 :	  42d875:       mov    %rax,-0x30(%rbp)
         :	              ++__first;
    0.00 :	  42d879:       lea    -0x30(%rbp),%rax
    0.00 :	  42d87d:       mov    %rax,%rdi
    0.00 :	  42d880:       callq  420616 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator++()>
         :	              __len = __len - __half - 1;
    0.00 :	  42d885:       mov    -0x10(%rbp),%rax
    0.00 :	  42d889:       mov    -0x8(%rbp),%rdx
    0.00 :	  42d88d:       sub    %rax,%rdx
    0.00 :	  42d890:       mov    %rdx,%rax
    0.00 :	  42d893:       sub    $0x1,%rax
    0.00 :	  42d897:       mov    %rax,-0x8(%rbp)
    0.00 :	  42d89b:       jmp    42d8a5 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xaa>
         :	            }
         :	          else
         :	            __len = __half;
    0.00 :	  42d89d:       mov    -0x10(%rbp),%rax
    0.00 :	  42d8a1:       mov    %rax,-0x8(%rbp)
         :	      while (__len > 0)
    0.00 :	  42d8a5:       cmpq   $0x0,-0x8(%rbp)
    0.00 :	  42d8aa:       jg     42d828 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0x2d>
         :	        }
         :	      return __first;
    0.00 :	  42d8b0:       mov    -0x30(%rbp),%rax
    0.00 :	  42d8b4:       jmp    42d8be <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > std::lower_bound<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)+0xc3>
    0.00 :	  42d8b6:       mov    %rax,%rdi
    0.00 :	  42d8b9:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  42d8be:       leaveq
    0.00 :	  42d8bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (4 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d0b6 <std::vector<LLcol, std::allocator<LLcol> >::operator[](unsigned long)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
   50.00 :	  42d0b6:       push   %rbp
   25.00 :	  42d0b7:       mov    %rsp,%rbp
    0.00 :	  42d0ba:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d0be:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
    0.00 :	  42d0c2:       mov    -0x8(%rbp),%rax
    0.00 :	  42d0c6:       mov    (%rax),%rax
    0.00 :	  42d0c9:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d0cd:       shl    $0x4,%rdx
    0.00 :	  42d0d1:       add    %rdx,%rax
    0.00 :	  42d0d4:       pop    %rbp
   25.00 :	  42d0d5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEC2ERKS2_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    0.00 :	  42e1a2:       push   %rbp
    0.00 :	  42e1a3:       mov    %rsp,%rbp
    0.00 :	  42e1a6:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42e1aa:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42e1ae:       mov    -0x10(%rbp),%rax
   66.67 :	  42e1b2:       mov    (%rax),%rdx
   33.33 :	  42e1b5:       mov    -0x8(%rbp),%rax
    0.00 :	  42e1b9:       mov    %rdx,(%rax)
    0.00 :	  42e1bc:       pop    %rbp
    0.00 :	  42e1bd:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
   66.67 :	  42f1a6:       push   %rbp
    0.00 :	  42f1a7:       mov    %rsp,%rbp
    0.00 :	  42f1aa:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
    0.00 :	  42f1ae:       mov    -0x8(%rbp),%rax
   33.33 :	  42f1b2:       pop    %rbp
    0.00 :	  42f1b3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxmiIP5LLcolSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_():
         :	#endif
         :	    { return __lhs.base() - __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :	    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    0.00 :	  42e1fa:       push   %rbp
    0.00 :	  42e1fb:       mov    %rsp,%rbp
    0.00 :	  42e1fe:       push   %rbx
    0.00 :	  42e1ff:       sub    $0x18,%rsp
    0.00 :	  42e203:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42e207:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() - __rhs.base(); }
    0.00 :	  42e20b:       mov    -0x18(%rbp),%rax
    0.00 :	  42e20f:       mov    %rax,%rdi
    0.00 :	  42e212:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  42e217:       mov    (%rax),%rax
    0.00 :	  42e21a:       mov    %rax,%rbx
    0.00 :	  42e21d:       mov    -0x20(%rbp),%rax
    0.00 :	  42e221:       mov    %rax,%rdi
    0.00 :	  42e224:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  42e229:       mov    (%rax),%rax
   66.67 :	  42e22c:       sub    %rax,%rbx
   33.33 :	  42e22f:       mov    %rbx,%rax
    0.00 :	  42e232:       sar    $0x4,%rax
    0.00 :	  42e236:       add    $0x18,%rsp
    0.00 :	  42e23a:       pop    %rbx
    0.00 :	  42e23b:       pop    %rbp
    0.00 :	  42e23c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428e0f <std::_Niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEENSt11_Niter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  428e0f:       push   %rbp
    0.00 :	  428e10:       mov    %rsp,%rbp
    0.00 :	  428e13:       sub    $0x10,%rsp
    0.00 :	  428e17:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  428e1b:       mov    -0x10(%rbp),%rax
   33.33 :	  428e1f:       mov    %rax,%rdi
    0.00 :	  428e22:       callq  42916e <std::_Iter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, true>::_S_base(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
   33.33 :	  428e27:       leaveq
   33.33 :	  428e28:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430390 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __unguarded_linear_insert(_RandomAccessIterator __last,
    0.00 :	  430390:       push   %rbp
    0.00 :	  430391:       mov    %rsp,%rbp
    0.00 :	  430394:       push   %rbx
    0.00 :	  430395:       sub    $0x38,%rsp
    0.00 :	  430399:       mov    %rdi,-0x40(%rbp)
    0.00 :	  43039d:       mov    %rsi,-0x38(%rbp)
         :	                              _Compare __comp)
         :	    {
         :	      typename iterator_traits<_RandomAccessIterator>::value_type
         :	        __val = _GLIBCXX_MOVE(*__last);
    0.00 :	  4303a1:       lea    -0x40(%rbp),%rax
    0.00 :	  4303a5:       mov    %rax,%rdi
   33.33 :	  4303a8:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4303ad:       mov    %rax,%rdi
    0.00 :	  4303b0:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  4303b5:       mov    0x8(%rax),%rdx
    0.00 :	  4303b9:       mov    (%rax),%rax
    0.00 :	  4303bc:       mov    %rax,-0x20(%rbp)
    0.00 :	  4303c0:       mov    %rdx,-0x18(%rbp)
         :	      _RandomAccessIterator __next = __last;
    0.00 :	  4303c4:       mov    -0x40(%rbp),%rax
    0.00 :	  4303c8:       mov    %rax,-0x30(%rbp)
         :	      --__next;
    0.00 :	  4303cc:       lea    -0x30(%rbp),%rax
    0.00 :	  4303d0:       mov    %rax,%rdi
    0.00 :	  4303d3:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	      while (__comp(__val, *__next))
    0.00 :	  4303d8:       jmp    43041f <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x8f>
         :	        {
         :	          *__last = _GLIBCXX_MOVE(*__next);
    0.00 :	  4303da:       lea    -0x40(%rbp),%rax
    0.00 :	  4303de:       mov    %rax,%rdi
    0.00 :	  4303e1:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4303e6:       mov    %rax,%rbx
    0.00 :	  4303e9:       lea    -0x30(%rbp),%rax
    0.00 :	  4303ed:       mov    %rax,%rdi
    0.00 :	  4303f0:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  4303f5:       mov    %rax,%rdi
    0.00 :	  4303f8:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  4303fd:       mov    0x8(%rax),%rdx
    0.00 :	  430401:       mov    (%rax),%rax
    0.00 :	  430404:       mov    %rax,(%rbx)
    0.00 :	  430407:       mov    %rdx,0x8(%rbx)
         :	          __last = __next;
    0.00 :	  43040b:       mov    -0x30(%rbp),%rax
    0.00 :	  43040f:       mov    %rax,-0x40(%rbp)
         :	          --__next;
    0.00 :	  430413:       lea    -0x30(%rbp),%rax
    0.00 :	  430417:       mov    %rax,%rdi
    0.00 :	  43041a:       callq  430d40 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator--()>
         :	      while (__comp(__val, *__next))
   33.33 :	  43041f:       lea    -0x30(%rbp),%rax
    0.00 :	  430423:       mov    %rax,%rdi
    0.00 :	  430426:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  43042b:       mov    %rax,%rcx
    0.00 :	  43042e:       lea    -0x20(%rbp),%rdx
    0.00 :	  430432:       mov    -0x38(%rbp),%rax
    0.00 :	  430436:       mov    %rcx,%rsi
    0.00 :	  430439:       mov    %rdx,%rdi
    0.00 :	  43043c:       callq  *%rax
    0.00 :	  43043e:       test   %al,%al
    0.00 :	  430440:       jne    4303da <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x4a>
         :	        }
         :	      *__last = _GLIBCXX_MOVE(__val);
   33.33 :	  430442:       lea    -0x40(%rbp),%rax
    0.00 :	  430446:       mov    %rax,%rdi
    0.00 :	  430449:       callq  430210 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator*() const>
    0.00 :	  43044e:       mov    %rax,%rbx
    0.00 :	  430451:       lea    -0x20(%rbp),%rax
    0.00 :	  430455:       mov    %rax,%rdi
    0.00 :	  430458:       callq  42f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>
    0.00 :	  43045d:       mov    0x8(%rax),%rdx
    0.00 :	  430461:       mov    (%rax),%rax
    0.00 :	  430464:       mov    %rax,(%rbx)
    0.00 :	  430467:       mov    %rdx,0x8(%rbx)
    0.00 :	  43046b:       jmp    430475 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xe5>
    0.00 :	  43046d:       mov    %rax,%rdi
    0.00 :	  430470:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  430475:       add    $0x38,%rsp
    0.00 :	  430479:       pop    %rbx
    0.00 :	  43047a:       pop    %rbp
    0.00 :	  43047b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d13e <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	   *  The relative ordering of equivalent elements is not preserved, use
         :	   *  @p stable_sort() if this is needed.
         :	  */
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    inline void
         :	    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    0.00 :	  42d13e:       push   %rbp
    0.00 :	  42d13f:       mov    %rsp,%rbp
    0.00 :	  42d142:       sub    $0x20,%rsp
    0.00 :	  42d146:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42d14a:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42d14e:       mov    %rdx,-0x18(%rbp)
         :	            _RandomAccessIterator>)
         :	      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _ValueType,
         :	                                  _ValueType>)
         :	      __glibcxx_requires_valid_range(__first, __last);
         :
         :	      if (__first != __last)
    0.00 :	  42d152:       lea    -0x20(%rbp),%rdx
    0.00 :	  42d156:       lea    -0x10(%rbp),%rax
    0.00 :	  42d15a:       mov    %rdx,%rsi
    0.00 :	  42d15d:       mov    %rax,%rdi
    0.00 :	  42d160:       callq  42e1be <bool __gnu_cxx::operator!=<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42d165:       test   %al,%al
    0.00 :	  42d167:       je     42d1b9 <void std::sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x7b>
         :	        {
         :	          std::__introsort_loop(__first, __last,
         :	                                std::__lg(__last - __first) * 2, __comp);
    0.00 :	  42d169:       lea    -0x10(%rbp),%rdx
    0.00 :	  42d16d:       lea    -0x20(%rbp),%rax
    0.00 :	  42d171:       mov    %rdx,%rsi
    0.00 :	  42d174:       mov    %rax,%rdi
    0.00 :	  42d177:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42d17c:       mov    %rax,%rdi
    0.00 :	  42d17f:       callq  41eb06 <std::__lg(long)>
    0.00 :	  42d184:       lea    (%rax,%rax,1),%rdi
         :	          std::__introsort_loop(__first, __last,
   33.33 :	  42d188:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d18c:       mov    -0x20(%rbp),%rsi
    0.00 :	  42d190:       mov    -0x10(%rbp),%rax
    0.00 :	  42d194:       mov    %rdx,%rcx
    0.00 :	  42d197:       mov    %rdi,%rdx
    0.00 :	  42d19a:       mov    %rax,%rdi
    0.00 :	  42d19d:       callq  42e23d <void std::__introsort_loop<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, long, bool (*)(LLcol const&, LLcol const&))>
         :	          std::__final_insertion_sort(__first, __last, __comp);
    0.00 :	  42d1a2:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d1a6:       mov    -0x20(%rbp),%rcx
    0.00 :	  42d1aa:       mov    -0x10(%rbp),%rax
    0.00 :	  42d1ae:       mov    %rcx,%rsi
    0.00 :	  42d1b1:       mov    %rax,%rdi
    0.00 :	  42d1b4:       callq  42e2e2 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	        }
         :	    }
    0.00 :	  42d1b9:       leaveq
   66.67 :	  42d1ba:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042cff6 <std::vector<LLord, std::allocator<LLord> >::operator[](unsigned long)>:
         :	_ZNSt6vectorI5LLordSaIS0_EEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    0.00 :	  42cff6:       push   %rbp
    0.00 :	  42cff7:       mov    %rsp,%rbp
   33.33 :	  42cffa:       mov    %rdi,-0x8(%rbp)
   33.33 :	  42cffe:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
    0.00 :	  42d002:       mov    -0x8(%rbp),%rax
   33.33 :	  42d006:       mov    (%rax),%rax
    0.00 :	  42d009:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d00d:       shl    $0x4,%rdx
    0.00 :	  42d011:       add    %rdx,%rax
    0.00 :	  42d014:       pop    %rbp
    0.00 :	  42d015:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004207cc <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)>:
         :	_ZNSt6vectorIiSaIiEEC2ERKS1_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    0.00 :	  4207cc:       push   %rbp
    0.00 :	  4207cd:       mov    %rsp,%rbp
    0.00 :	  4207d0:       push   %r13
   33.33 :	  4207d2:       push   %r12
    0.00 :	  4207d4:       push   %rbx
    0.00 :	  4207d5:       sub    $0x28,%rsp
    0.00 :	  4207d9:       mov    %rdi,-0x38(%rbp)
    0.00 :	  4207dd:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  4207e1:       mov    -0x40(%rbp),%rax
    0.00 :	  4207e5:       mov    %rax,%rdi
    0.00 :	  4207e8:       callq  422b50 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>
    0.00 :	  4207ed:       mov    %rax,%rdx
    0.00 :	  4207f0:       lea    -0x21(%rbp),%rax
    0.00 :	  4207f4:       mov    %rdx,%rsi
    0.00 :	  4207f7:       mov    %rax,%rdi
    0.00 :	  4207fa:       callq  422b26 <__gnu_cxx::__alloc_traits<std::allocator<int> >::_S_select_on_copy(std::allocator<int> const&)>
    0.00 :	  4207ff:       mov    -0x40(%rbp),%rax
    0.00 :	  420803:       mov    %rax,%rdi
    0.00 :	  420806:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  42080b:       mov    %rax,%rcx
    0.00 :	  42080e:       mov    -0x38(%rbp),%rax
    0.00 :	  420812:       lea    -0x21(%rbp),%rdx
    0.00 :	  420816:       mov    %rcx,%rsi
    0.00 :	  420819:       mov    %rax,%rdi
    0.00 :	  42081c:       callq  42212e <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)>
    0.00 :	  420821:       lea    -0x21(%rbp),%rax
    0.00 :	  420825:       mov    %rax,%rdi
    0.00 :	  420828:       callq  42048a <std::allocator<int>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    0.00 :	  42082d:       mov    -0x38(%rbp),%rax
   33.33 :	  420831:       mov    %rax,%rdi
    0.00 :	  420834:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  420839:       mov    %rax,%r13
    0.00 :	  42083c:       mov    -0x38(%rbp),%rax
    0.00 :	  420840:       mov    (%rax),%r12
    0.00 :	  420843:       mov    -0x40(%rbp),%rax
    0.00 :	  420847:       mov    %rax,%rdi
    0.00 :	  42084a:       callq  422b8e <std::vector<int, std::allocator<int> >::end() const>
    0.00 :	  42084f:       mov    %rax,%rbx
    0.00 :	  420852:       mov    -0x40(%rbp),%rax
    0.00 :	  420856:       mov    %rax,%rdi
    0.00 :	  420859:       callq  422b5e <std::vector<int, std::allocator<int> >::begin() const>
   33.33 :	  42085e:       mov    %r13,%rcx
    0.00 :	  420861:       mov    %r12,%rdx
    0.00 :	  420864:       mov    %rbx,%rsi
    0.00 :	  420867:       mov    %rax,%rdi
    0.00 :	  42086a:       callq  422bbf <int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&)>
         :	      { this->_M_impl._M_finish =
    0.00 :	  42086f:       mov    -0x38(%rbp),%rdx
    0.00 :	  420873:       mov    %rax,0x8(%rdx)
    0.00 :	  420877:       jmp    4208ad <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)+0xe1>
    0.00 :	  420879:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42087c:       lea    -0x21(%rbp),%rax
    0.00 :	  420880:       mov    %rax,%rdi
    0.00 :	  420883:       callq  42048a <std::allocator<int>::~allocator()>
    0.00 :	  420888:       mov    %rbx,%rax
    0.00 :	  42088b:       mov    %rax,%rdi
    0.00 :	  42088e:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  420893:       mov    %rax,%rbx
    0.00 :	  420896:       mov    -0x38(%rbp),%rax
    0.00 :	  42089a:       mov    %rax,%rdi
    0.00 :	  42089d:       callq  420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
    0.00 :	  4208a2:       mov    %rbx,%rax
    0.00 :	  4208a5:       mov    %rax,%rdi
    0.00 :	  4208a8:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  4208ad:       add    $0x28,%rsp
    0.00 :	  4208b1:       pop    %rbx
    0.00 :	  4208b2:       pop    %r12
    0.00 :	  4208b4:       pop    %r13
    0.00 :	  4208b6:       pop    %rbp
    0.00 :	  4208b7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (3 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fa8a <std::vector<int, std::allocator<int> >::~vector()>:
         :	_ZNSt6vectorIiSaIiEED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    0.00 :	  41fa8a:       push   %rbp
    0.00 :	  41fa8b:       mov    %rsp,%rbp
    0.00 :	  41fa8e:       sub    $0x10,%rsp
    0.00 :	  41fa92:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  41fa96:       mov    -0x8(%rbp),%rax
   33.33 :	  41fa9a:       mov    %rax,%rdi
    0.00 :	  41fa9d:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  41faa2:       mov    %rax,%rdx
    0.00 :	  41faa5:       mov    -0x8(%rbp),%rax
    0.00 :	  41faa9:       mov    0x8(%rax),%rcx
    0.00 :	  41faad:       mov    -0x8(%rbp),%rax
    0.00 :	  41fab1:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  41fab4:       mov    %rcx,%rsi
    0.00 :	  41fab7:       mov    %rax,%rdi
    0.00 :	  41faba:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  41fabf:       mov    -0x8(%rbp),%rax
    0.00 :	  41fac3:       mov    %rax,%rdi
    0.00 :	  41fac6:       callq  420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
   33.33 :	  41facb:       leaveq
   33.33 :	  41facc:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f5a0 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol const* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS1_SaIS1_EEEC2ERKS3_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    0.00 :	  42f5a0:       push   %rbp
    0.00 :	  42f5a1:       mov    %rsp,%rbp
    0.00 :	  42f5a4:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f5a8:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42f5ac:       mov    -0x10(%rbp),%rax
    0.00 :	  42f5b0:       mov    (%rax),%rdx
  100.00 :	  42f5b3:       mov    -0x8(%rbp),%rax
    0.00 :	  42f5b7:       mov    %rdx,(%rax)
    0.00 :	  42f5ba:       pop    %rbp
    0.00 :	  42f5bb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043032a <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator++()>:
         :	_ZN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS1_SaIS1_EEEppEv():
         :	      pointer
         :	      operator->() const
         :	      { return _M_current; }
         :
         :	      __normal_iterator&
         :	      operator++()
    0.00 :	  43032a:       push   %rbp
    0.00 :	  43032b:       mov    %rsp,%rbp
  100.00 :	  43032e:       mov    %rdi,-0x8(%rbp)
         :	      {
         :	        ++_M_current;
    0.00 :	  430332:       mov    -0x8(%rbp),%rax
    0.00 :	  430336:       mov    (%rax),%rax
    0.00 :	  430339:       lea    0x10(%rax),%rdx
    0.00 :	  43033d:       mov    -0x8(%rbp),%rax
    0.00 :	  430341:       mov    %rdx,(%rax)
         :	        return *this;
    0.00 :	  430344:       mov    -0x8(%rbp),%rax
         :	      }
    0.00 :	  430348:       pop    %rbp
    0.00 :	  430349:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000427a16 <__gnu_cxx::new_allocator<LLord>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLordE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  427a16:       push   %rbp
   50.00 :	  427a17:       mov    %rsp,%rbp
    0.00 :	  427a1a:       sub    $0x20,%rsp
    0.00 :	  427a1e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  427a22:       mov    %rsi,-0x10(%rbp)
    0.00 :	  427a26:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.00 :	  427a2a:       mov    -0x8(%rbp),%rax
    0.00 :	  427a2e:       mov    %rax,%rdi
    0.00 :	  427a31:       callq  4285b2 <__gnu_cxx::new_allocator<LLord>::max_size() const>
   50.00 :	  427a36:       cmp    -0x10(%rbp),%rax
    0.00 :	  427a3a:       setb   %al
    0.00 :	  427a3d:       test   %al,%al
    0.00 :	  427a3f:       je     427a46 <__gnu_cxx::new_allocator<LLord>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  427a41:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :	  427a46:       mov    -0x10(%rbp),%rax
    0.00 :	  427a4a:       shl    $0x4,%rax
    0.00 :	  427a4e:       mov    %rax,%rdi
    0.00 :	  427a51:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.00 :	  427a56:       leaveq
    0.00 :	  427a57:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430f92 <void __gnu_cxx::new_allocator<double>::construct<double, double>(double*, double&&)>:
         :	_ZN9__gnu_cxx13new_allocatorIdE9constructIdIdEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    0.00 :	  430f92:       push   %rbp
    0.00 :	  430f93:       mov    %rsp,%rbp
    0.00 :	  430f96:       push   %rbx
    0.00 :	  430f97:       sub    $0x28,%rsp
    0.00 :	  430f9b:       mov    %rdi,-0x18(%rbp)
    0.00 :	  430f9f:       mov    %rsi,-0x20(%rbp)
    0.00 :	  430fa3:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  430fa7:       mov    -0x28(%rbp),%rax
    0.00 :	  430fab:       mov    %rax,%rdi
    0.00 :	  430fae:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  430fb3:       mov    (%rax),%rbx
   50.00 :	  430fb6:       mov    -0x20(%rbp),%rax
    0.00 :	  430fba:       mov    %rax,%rsi
    0.00 :	  430fbd:       mov    $0x8,%edi
    0.00 :	  430fc2:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  430fc7:       test   %rax,%rax
    0.00 :	  430fca:       je     430fcf <void __gnu_cxx::new_allocator<double>::construct<double, double>(double*, double&&)+0x3d>
    0.00 :	  430fcc:       mov    %rbx,(%rax)
    0.00 :	  430fcf:       add    $0x28,%rsp
    0.00 :	  430fd3:       pop    %rbx
    0.00 :	  430fd4:       pop    %rbp
   50.00 :	  430fd5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429769 <cmp_val(LLcol const&, LLcol const&)>:
         :	_Z7cmp_valRK5LLcolS1_():
         :
         :	bool cmp_row(const LLcol &a, const LLcol &b) {
         :	    return a.row < b.row;
         :	}
         :
         :	bool cmp_val(const LLcol &a, const LLcol &b) {
   50.00 :	  429769:       push   %rbp
   50.00 :	  42976a:       mov    %rsp,%rbp
    0.00 :	  42976d:       mov    %rdi,-0x8(%rbp)
    0.00 :	  429771:       mov    %rsi,-0x10(%rbp)
         :	    return a.cval < b.cval;
    0.00 :	  429775:       mov    -0x8(%rbp),%rax
    0.00 :	  429779:       vmovsd 0x8(%rax),%xmm1
    0.00 :	  42977e:       mov    -0x10(%rbp),%rax
    0.00 :	  429782:       vmovsd 0x8(%rax),%xmm0
    0.00 :	  429787:       vucomisd %xmm1,%xmm0
    0.00 :	  42978b:       seta   %al
         :	}
    0.00 :	  42978e:       pop    %rbp
    0.00 :	  42978f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e72b <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, std::allocator<LLcol>&)>:
         :	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES2_EvT_S8_RSaIT0_E():
         :	        __traits::destroy(__alloc, std::__addressof(*__first));
         :	    }
         :
         :	  template<typename _ForwardIterator, typename _Tp>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    0.00 :	  42e72b:       push   %rbp
    0.00 :	  42e72c:       mov    %rsp,%rbp
    0.00 :	  42e72f:       sub    $0x20,%rsp
    0.00 :	  42e733:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42e737:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42e73b:       mov    %rdx,-0x18(%rbp)
         :	             allocator<_Tp>&)
         :	    {
         :	      _Destroy(__first, __last);
    0.00 :	  42e73f:       mov    -0x20(%rbp),%rdx
  100.00 :	  42e743:       mov    -0x10(%rbp),%rax
    0.00 :	  42e747:       mov    %rdx,%rsi
    0.00 :	  42e74a:       mov    %rax,%rdi
    0.00 :	  42e74d:       callq  42f70f <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	    }
    0.00 :	  42e752:       leaveq
    0.00 :	  42e753:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE19_M_get_Tp_allocatorEv():
         :
         :	    public:
         :	      typedef _Alloc allocator_type;
         :
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    0.00 :	  422052:       push   %rbp
    0.00 :	  422053:       mov    %rsp,%rbp
    0.00 :	  422056:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
   50.00 :	  42205a:       mov    -0x8(%rbp),%rax
   50.00 :	  42205e:       pop    %rbp
    0.00 :	  42205f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424998 <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>:
         :	_ZNSt12_Vector_baseIiSaIiEE17_M_create_storageEm():
         :	          _M_impl.deallocate(__p, __n);
         :	      }
         :
         :	    private:
         :	      void
         :	      _M_create_storage(size_t __n)
   50.00 :	  424998:       push   %rbp
    0.00 :	  424999:       mov    %rsp,%rbp
    0.00 :	  42499c:       sub    $0x10,%rsp
    0.00 :	  4249a0:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4249a4:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :	  4249a8:       mov    -0x10(%rbp),%rdx
    0.00 :	  4249ac:       mov    -0x8(%rbp),%rax
    0.00 :	  4249b0:       mov    %rdx,%rsi
    0.00 :	  4249b3:       mov    %rax,%rdi
    0.00 :	  4249b6:       callq  423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    0.00 :	  4249bb:       mov    -0x8(%rbp),%rdx
    0.00 :	  4249bf:       mov    %rax,(%rdx)
         :	        this->_M_impl._M_finish = this->_M_impl._M_start;
   50.00 :	  4249c2:       mov    -0x8(%rbp),%rax
    0.00 :	  4249c6:       mov    (%rax),%rdx
    0.00 :	  4249c9:       mov    -0x8(%rbp),%rax
    0.00 :	  4249cd:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :	  4249d1:       mov    -0x8(%rbp),%rax
    0.00 :	  4249d5:       mov    (%rax),%rax
    0.00 :	  4249d8:       mov    -0x10(%rbp),%rdx
    0.00 :	  4249dc:       shl    $0x2,%rdx
    0.00 :	  4249e0:       add    %rax,%rdx
    0.00 :	  4249e3:       mov    -0x8(%rbp),%rax
    0.00 :	  4249e7:       mov    %rdx,0x10(%rax)
         :	      }
    0.00 :	  4249eb:       leaveq
    0.00 :	  4249ec:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420dfe <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseIiSaIiEED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
    0.00 :	  420dfe:       push   %rbp
    0.00 :	  420dff:       mov    %rsp,%rbp
    0.00 :	  420e02:       sub    $0x10,%rsp
    0.00 :	  420e06:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    0.00 :	  420e0a:       mov    -0x8(%rbp),%rax
    0.00 :	  420e0e:       mov    0x10(%rax),%rax
    0.00 :	  420e12:       mov    %rax,%rdx
    0.00 :	  420e15:       mov    -0x8(%rbp),%rax
    0.00 :	  420e19:       mov    (%rax),%rax
    0.00 :	  420e1c:       sub    %rax,%rdx
    0.00 :	  420e1f:       mov    %rdx,%rax
    0.00 :	  420e22:       sar    $0x2,%rax
   50.00 :	  420e26:       mov    %rax,%rdx
    0.00 :	  420e29:       mov    -0x8(%rbp),%rax
    0.00 :	  420e2d:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  420e30:       mov    -0x8(%rbp),%rax
    0.00 :	  420e34:       mov    %rcx,%rsi
    0.00 :	  420e37:       mov    %rax,%rdi
    0.00 :	  420e3a:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    0.00 :	  420e3f:       mov    -0x8(%rbp),%rax
    0.00 :	  420e43:       mov    %rax,%rdi
    0.00 :	  420e46:       callq  420dca <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  420e4b:       leaveq
   50.00 :	  420e4c:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004318ac <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
         :	_ZNSt8__detail4_ModImLm2147483647ELm16807ELm0ELb1ELb1EE6__calcEm():
         :	    // - a * (m - 1) + c fits in _Tp, there is no overflow.
         :	    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
         :	      struct _Mod<_Tp, __m, __a, __c, true, __s>
         :	      {
         :	        static _Tp
         :	        __calc(_Tp __x)
    0.00 :	  4318ac:       push   %rbp
    0.00 :	  4318ad:       mov    %rsp,%rbp
    0.00 :	  4318b0:       mov    %rdi,-0x18(%rbp)
         :	        {
         :	          _Tp __res = __a * __x + __c;
    0.00 :	  4318b4:       mov    -0x18(%rbp),%rax
    0.00 :	  4318b8:       imul   $0x41a7,%rax,%rax
    0.00 :	  4318bf:       mov    %rax,-0x8(%rbp)
         :	          if (__m)
         :	            __res %= __m;
    0.00 :	  4318c3:       mov    -0x8(%rbp),%rcx
    0.00 :	  4318c7:       movabs $0x200000005,%rdx
    0.00 :	  4318d1:       mov    %rcx,%rax
    0.00 :	  4318d4:       mul    %rdx
    0.00 :	  4318d7:       mov    %rcx,%rax
    0.00 :	  4318da:       sub    %rdx,%rax
    0.00 :	  4318dd:       shr    %rax
    0.00 :	  4318e0:       add    %rdx,%rax
    0.00 :	  4318e3:       shr    $0x1e,%rax
    0.00 :	  4318e7:       mov    %rax,%rdx
    0.00 :	  4318ea:       mov    %rdx,%rax
    0.00 :	  4318ed:       shl    $0x1f,%rax
    0.00 :	  4318f1:       sub    %rdx,%rax
    0.00 :	  4318f4:       sub    %rax,%rcx
    0.00 :	  4318f7:       mov    %rcx,%rax
    0.00 :	  4318fa:       mov    %rax,-0x8(%rbp)
         :	          return __res;
    0.00 :	  4318fe:       mov    -0x8(%rbp),%rax
         :	        }
  100.00 :	  431902:       pop    %rbp
    0.00 :	  431903:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428a25 <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)>:
         :	_ZSt10__fill_n_aIPdmdEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_():
         :	    }
         :
         :	  template<typename _OutputIterator, typename _Size, typename _Tp>
         :	    inline typename
         :	    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
         :	    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    0.00 :	  428a25:       push   %rbp
    0.00 :	  428a26:       mov    %rsp,%rbp
    0.00 :	  428a29:       mov    %rdi,-0x18(%rbp)
    0.00 :	  428a2d:       mov    %rsi,-0x20(%rbp)
    0.00 :	  428a31:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      const _Tp __tmp = __value;
    0.00 :	  428a35:       mov    -0x28(%rbp),%rax
    0.00 :	  428a39:       mov    (%rax),%rax
    0.00 :	  428a3c:       mov    %rax,-0x10(%rbp)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428a40:       mov    -0x20(%rbp),%rax
    0.00 :	  428a44:       mov    %rax,-0x8(%rbp)
    0.00 :	  428a48:       jmp    428a5f <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)+0x3a>
         :	           __niter > 0; --__niter, ++__first)
         :	        *__first = __tmp;
    0.00 :	  428a4a:       mov    -0x18(%rbp),%rdx
    0.00 :	  428a4e:       mov    -0x10(%rbp),%rax
    0.00 :	  428a52:       mov    %rax,(%rdx)
         :	      for (__decltype(__n + 0) __niter = __n;
    0.00 :	  428a55:       subq   $0x1,-0x8(%rbp)
    0.00 :	  428a5a:       addq   $0x8,-0x18(%rbp)
   50.00 :	  428a5f:       cmpq   $0x0,-0x8(%rbp)
   50.00 :	  428a64:       jne    428a4a <__gnu_cxx::__enable_if<std::__is_scalar<double>::__value, double*>::__type std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)+0x25>
         :	      return __first;
    0.00 :	  428a66:       mov    -0x18(%rbp),%rax
         :	    }
    0.00 :	  428a6a:       pop    %rbp
    0.00 :	  428a6b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f682 <std::_Miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeESA_():
         :	    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Miter_base<_Iterator>::iterator_type
         :	    __miter_base(_Iterator __it)
    0.00 :	  42f682:       push   %rbp
   50.00 :	  42f683:       mov    %rsp,%rbp
    0.00 :	  42f686:       sub    $0x10,%rsp
    0.00 :	  42f68a:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Miter_base<_Iterator>::_S_base(__it); }
    0.00 :	  42f68e:       mov    -0x10(%rbp),%rax
   50.00 :	  42f692:       mov    %rax,%rdi
    0.00 :	  42f695:       callq  4304ef <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, false>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42f69a:       leaveq
    0.00 :	  42f69b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeESA_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  4304fd:       push   %rbp
    0.00 :	  4304fe:       mov    %rsp,%rbp
    0.00 :	  430501:       sub    $0x10,%rsp
    0.00 :	  430505:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  430509:       mov    -0x10(%rbp),%rax
    0.00 :	  43050d:       mov    %rax,%rdi
   50.00 :	  430510:       callq  430e71 <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430515:       leaveq
   50.00 :	  430516:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e9c4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long)>:
         :	_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElEvRT_T0_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator, typename _Distance>
         :	    inline void
         :	    advance(_InputIterator& __i, _Distance __n)
    0.00 :	  42e9c4:       push   %rbp
    0.00 :	  42e9c5:       mov    %rsp,%rbp
    0.00 :	  42e9c8:       push   %rbx
    0.00 :	  42e9c9:       sub    $0x38,%rsp
    0.00 :	  42e9cd:       mov    %rdi,-0x28(%rbp)
   50.00 :	  42e9d1:       mov    %rsi,-0x30(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __advance
         :	      typename iterator_traits<_InputIterator>::difference_type __d = __n;
    0.00 :	  42e9d5:       mov    -0x30(%rbp),%rax
    0.00 :	  42e9d9:       mov    %rax,-0x18(%rbp)
         :	      std::__advance(__i, __d, std::__iterator_category(__i));
    0.00 :	  42e9dd:       mov    -0x28(%rbp),%rax
    0.00 :	  42e9e1:       mov    %rax,%rdi
    0.00 :	  42e9e4:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.00 :	  42e9e9:       mov    -0x18(%rbp),%rdx
   50.00 :	  42e9ed:       mov    -0x28(%rbp),%rax
    0.00 :	  42e9f1:       mov    %bl,(%rsp)
    0.00 :	  42e9f4:       mov    %rdx,%rsi
    0.00 :	  42e9f7:       mov    %rax,%rdi
    0.00 :	  42e9fa:       callq  42e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>
         :	    }
    0.00 :	  42e9ff:       add    $0x38,%rsp
    0.00 :	  42ea03:       pop    %rbx
    0.00 :	  42ea04:       pop    %rbp
    0.00 :	  42ea05:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d632 <std::allocator<LLcol>::~allocator()>:
         :	_ZNSaI5LLcolED2Ev():
         :	      : __allocator_base<_Tp>(__a) { }
         :
         :	      template<typename _Tp1>
         :	        allocator(const allocator<_Tp1>&) throw() { }
         :
         :	      ~allocator() throw() { }
    0.00 :	  42d632:       push   %rbp
    0.00 :	  42d633:       mov    %rsp,%rbp
   50.00 :	  42d636:       sub    $0x10,%rsp
    0.00 :	  42d63a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d63e:       mov    -0x8(%rbp),%rax
   50.00 :	  42d642:       mov    %rax,%rdi
    0.00 :	  42d645:       callq  42e7d6 <__gnu_cxx::new_allocator<LLcol>::~new_allocator()>
    0.00 :	  42d64a:       leaveq
    0.00 :	  42d64b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d302 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEaSERKS2_():
         :	      return __first;
         :	    }
         :
         :	  template<typename _Tp, typename _Alloc>
         :	    vector<_Tp, _Alloc>&
         :	    vector<_Tp, _Alloc>::
    0.00 :	  42d302:       push   %rbp
    0.00 :	  42d303:       mov    %rsp,%rbp
    0.00 :	  42d306:       push   %r14
    0.00 :	  42d308:       push   %r13
    0.00 :	  42d30a:       push   %r12
    0.00 :	  42d30c:       push   %rbx
    0.00 :	  42d30d:       sub    $0x20,%rsp
    0.00 :	  42d311:       mov    %rdi,-0x38(%rbp)
    0.00 :	  42d315:       mov    %rsi,-0x40(%rbp)
         :	    operator=(const vector<_Tp, _Alloc>& __x)
         :	    {
         :	      if (&__x != this)
    0.00 :	  42d319:       mov    -0x40(%rbp),%rax
    0.00 :	  42d31d:       cmp    -0x38(%rbp),%rax
    0.00 :	  42d321:       je     42d607 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x305>
         :	        {
         :	#if __cplusplus >= 201103L
         :	          if (_Alloc_traits::_S_propagate_on_copy_assign())
    0.00 :	  42d327:       callq  42d2eb <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_propagate_on_copy_assign()>
    0.00 :	  42d32c:       test   %al,%al
    0.00 :	  42d32e:       je     42d404 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x102>
         :	            {
         :	              if (!_Alloc_traits::_S_always_equal()
    0.00 :	  42d334:       callq  42d2f6 <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_always_equal()>
    0.00 :	  42d339:       xor    $0x1,%eax
    0.00 :	  42d33c:       test   %al,%al
    0.00 :	  42d33e:       je     42d371 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x6f>
         :	                  && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
    0.00 :	  42d340:       mov    -0x40(%rbp),%rax
    0.00 :	  42d344:       mov    %rax,%rdi
    0.00 :	  42d347:       callq  42e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>
    0.00 :	  42d34c:       mov    %rax,%rbx
    0.00 :	  42d34f:       mov    -0x38(%rbp),%rax
    0.00 :	  42d353:       mov    %rax,%rdi
    0.00 :	  42d356:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d35b:       mov    %rbx,%rsi
    0.00 :	  42d35e:       mov    %rax,%rdi
    0.00 :	  42d361:       callq  42e56a <bool std::operator!=<LLcol>(std::allocator<LLcol> const&, std::allocator<LLcol> const&)>
         :	              if (!_Alloc_traits::_S_always_equal()
    0.00 :	  42d366:       test   %al,%al
    0.00 :	  42d368:       je     42d371 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x6f>
    0.00 :	  42d36a:       mov    $0x1,%eax
    0.00 :	  42d36f:       jmp    42d376 <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x74>
    0.00 :	  42d371:       mov    $0x0,%eax
    0.00 :	  42d376:       test   %al,%al
    0.00 :	  42d378:       je     42d3de <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0xdc>
         :	                {
         :	                  // replacement allocator cannot free existing storage
         :	                  this->clear();
    0.00 :	  42d37a:       mov    -0x38(%rbp),%rax
    0.00 :	  42d37e:       mov    %rax,%rdi
    0.00 :	  42d381:       callq  42e57e <std::vector<LLcol, std::allocator<LLcol> >::clear()>
         :	                  _M_deallocate(this->_M_impl._M_start,
         :	                                this->_M_impl._M_end_of_storage
         :	                                - this->_M_impl._M_start);
    0.00 :	  42d386:       mov    -0x38(%rbp),%rax
    0.00 :	  42d38a:       mov    0x10(%rax),%rax
    0.00 :	  42d38e:       mov    %rax,%rdx
    0.00 :	  42d391:       mov    -0x38(%rbp),%rax
    0.00 :	  42d395:       mov    (%rax),%rax
    0.00 :	  42d398:       sub    %rax,%rdx
    0.00 :	  42d39b:       mov    %rdx,%rax
    0.00 :	  42d39e:       sar    $0x4,%rax
    0.00 :	  42d3a2:       mov    %rax,%rdx
    0.00 :	  42d3a5:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3a9:       mov    (%rax),%rcx
    0.00 :	  42d3ac:       mov    -0x38(%rbp),%rax
         :	                  _M_deallocate(this->_M_impl._M_start,
    0.00 :	  42d3b0:       mov    %rcx,%rsi
    0.00 :	  42d3b3:       mov    %rax,%rdi
    0.00 :	  42d3b6:       callq  42e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>
         :	                  this->_M_impl._M_start = nullptr;
    0.00 :	  42d3bb:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3bf:       movq   $0x0,(%rax)
         :	                  this->_M_impl._M_finish = nullptr;
    0.00 :	  42d3c6:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3ca:       movq   $0x0,0x8(%rax)
         :	                  this->_M_impl._M_end_of_storage = nullptr;
    0.00 :	  42d3d2:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3d6:       movq   $0x0,0x10(%rax)
         :	                }
         :	              std::__alloc_on_copy(_M_get_Tp_allocator(),
         :	                                   __x._M_get_Tp_allocator());
    0.00 :	  42d3de:       mov    -0x40(%rbp),%rax
    0.00 :	  42d3e2:       mov    %rax,%rdi
    0.00 :	  42d3e5:       callq  42e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>
    0.00 :	  42d3ea:       mov    %rax,%rbx
         :	              std::__alloc_on_copy(_M_get_Tp_allocator(),
    0.00 :	  42d3ed:       mov    -0x38(%rbp),%rax
    0.00 :	  42d3f1:       mov    %rax,%rdi
    0.00 :	  42d3f4:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d3f9:       mov    %rbx,%rsi
    0.00 :	  42d3fc:       mov    %rax,%rdi
    0.00 :	  42d3ff:       callq  42e5d6 <void std::__alloc_on_copy<std::allocator<LLcol> >(std::allocator<LLcol>&, std::allocator<LLcol> const&)>
         :	            }
         :	#endif
         :	          const size_type __xlen = __x.size();
    0.00 :	  42d404:       mov    -0x40(%rbp),%rax
    0.00 :	  42d408:       mov    %rax,%rdi
    0.00 :	  42d40b:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42d410:       mov    %rax,-0x28(%rbp)
         :	          if (__xlen > capacity())
    0.00 :	  42d414:       mov    -0x38(%rbp),%rax
    0.00 :	  42d418:       mov    %rax,%rdi
    0.00 :	  42d41b:       callq  42e5fe <std::vector<LLcol, std::allocator<LLcol> >::capacity() const>
    0.00 :	  42d420:       cmp    -0x28(%rbp),%rax
    0.00 :	  42d424:       setb   %al
    0.00 :	  42d427:       test   %al,%al
    0.00 :	  42d429:       je     42d4ec <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x1ea>
         :	            {
         :	              pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         :	                                                   __x.end());
    0.00 :	  42d42f:       mov    -0x40(%rbp),%rax
    0.00 :	  42d433:       mov    %rax,%rdi
    0.00 :	  42d436:       callq  42e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>
    0.00 :	  42d43b:       mov    %rax,%rbx
    0.00 :	  42d43e:       mov    -0x40(%rbp),%rax
    0.00 :	  42d442:       mov    %rax,%rdi
    0.00 :	  42d445:       callq  42e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>
    0.00 :	  42d44a:       mov    %rax,%rdx
    0.00 :	  42d44d:       mov    -0x28(%rbp),%rsi
    0.00 :	  42d451:       mov    -0x38(%rbp),%rax
    0.00 :	  42d455:       mov    %rbx,%rcx
    0.00 :	  42d458:       mov    %rax,%rdi
    0.00 :	  42d45b:       callq  42e624 <LLcol* std::vector<LLcol, std::allocator<LLcol> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(unsigned long, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  42d460:       mov    %rax,-0x30(%rbp)
         :	              std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                            _M_get_Tp_allocator());
    0.00 :	  42d464:       mov    -0x38(%rbp),%rax
    0.00 :	  42d468:       mov    %rax,%rdi
    0.00 :	  42d46b:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d470:       mov    %rax,%rdx
    0.00 :	  42d473:       mov    -0x38(%rbp),%rax
    0.00 :	  42d477:       mov    0x8(%rax),%rcx
    0.00 :	  42d47b:       mov    -0x38(%rbp),%rax
    0.00 :	  42d47f:       mov    (%rax),%rax
         :	              std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  42d482:       mov    %rcx,%rsi
    0.00 :	  42d485:       mov    %rax,%rdi
    0.00 :	  42d488:       callq  42e541 <void std::_Destroy<LLcol*, LLcol>(LLcol*, LLcol*, std::allocator<LLcol>&)>
         :	              _M_deallocate(this->_M_impl._M_start,
         :	                            this->_M_impl._M_end_of_storage
         :	                            - this->_M_impl._M_start);
    0.00 :	  42d48d:       mov    -0x38(%rbp),%rax
    0.00 :	  42d491:       mov    0x10(%rax),%rax
    0.00 :	  42d495:       mov    %rax,%rdx
    0.00 :	  42d498:       mov    -0x38(%rbp),%rax
    0.00 :	  42d49c:       mov    (%rax),%rax
    0.00 :	  42d49f:       sub    %rax,%rdx
    0.00 :	  42d4a2:       mov    %rdx,%rax
    0.00 :	  42d4a5:       sar    $0x4,%rax
    0.00 :	  42d4a9:       mov    %rax,%rdx
    0.00 :	  42d4ac:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4b0:       mov    (%rax),%rcx
    0.00 :	  42d4b3:       mov    -0x38(%rbp),%rax
         :	              _M_deallocate(this->_M_impl._M_start,
    0.00 :	  42d4b7:       mov    %rcx,%rsi
    0.00 :	  42d4ba:       mov    %rax,%rdi
    0.00 :	  42d4bd:       callq  42e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>
         :	              this->_M_impl._M_start = __tmp;
    0.00 :	  42d4c2:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4c6:       mov    -0x30(%rbp),%rdx
    0.00 :	  42d4ca:       mov    %rdx,(%rax)
         :	              this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
    0.00 :	  42d4cd:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4d1:       mov    (%rax),%rax
    0.00 :	  42d4d4:       mov    -0x28(%rbp),%rdx
    0.00 :	  42d4d8:       shl    $0x4,%rdx
    0.00 :	  42d4dc:       add    %rax,%rdx
    0.00 :	  42d4df:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4e3:       mov    %rdx,0x10(%rax)
    0.00 :	  42d4e7:       jmpq   42d5ed <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x2eb>
         :	            }
         :	          else if (size() >= __xlen)
    0.00 :	  42d4ec:       mov    -0x38(%rbp),%rax
    0.00 :	  42d4f0:       mov    %rax,%rdi
    0.00 :	  42d4f3:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42d4f8:       cmp    -0x28(%rbp),%rax
    0.00 :	  42d4fc:       setae  %al
    0.00 :	  42d4ff:       test   %al,%al
    0.00 :	  42d501:       je     42d56c <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x26a>
         :	            {
         :	              std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
         :	                            end(), _M_get_Tp_allocator());
    0.00 :	  42d503:       mov    -0x38(%rbp),%rax
    0.00 :	  42d507:       mov    %rax,%rdi
    0.00 :	  42d50a:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d50f:       mov    %rax,%r12
    0.00 :	  42d512:       mov    -0x38(%rbp),%rax
    0.00 :	  42d516:       mov    %rax,%rdi
    0.00 :	  42d519:       callq  42e702 <std::vector<LLcol, std::allocator<LLcol> >::end()>
    0.00 :	  42d51e:       mov    %rax,%rbx
    0.00 :	  42d521:       mov    -0x38(%rbp),%rax
    0.00 :	  42d525:       mov    %rax,%rdi
    0.00 :	  42d528:       callq  42d0d6 <std::vector<LLcol, std::allocator<LLcol> >::begin()>
    0.00 :	  42d52d:       mov    %rax,%r14
    0.00 :	  42d530:       mov    -0x40(%rbp),%rax
    0.00 :	  42d534:       mov    %rax,%rdi
    0.00 :	  42d537:       callq  42e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>
    0.00 :	  42d53c:       mov    %rax,%r13
    0.00 :	  42d53f:       mov    -0x40(%rbp),%rax
    0.00 :	  42d543:       mov    %rax,%rdi
    0.00 :	  42d546:       callq  42e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>
    0.00 :	  42d54b:       mov    %r14,%rdx
    0.00 :	  42d54e:       mov    %r13,%rsi
    0.00 :	  42d551:       mov    %rax,%rdi
    0.00 :	  42d554:       callq  42e6bb <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::copy<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	              std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
    0.00 :	  42d559:       mov    %r12,%rdx
    0.00 :	  42d55c:       mov    %rbx,%rsi
    0.00 :	  42d55f:       mov    %rax,%rdi
    0.00 :	  42d562:       callq  42e72b <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, std::allocator<LLcol>&)>
    0.00 :	  42d567:       jmpq   42d5ed <std::vector<LLcol, std::allocator<LLcol> >::operator=(std::vector<LLcol, std::allocator<LLcol> > const&)+0x2eb>
         :	            }
         :	          else
         :	            {
         :	              std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
         :	                        this->_M_impl._M_start);
    0.00 :	  42d56c:       mov    -0x38(%rbp),%rax
    0.00 :	  42d570:       mov    (%rax),%rbx
    0.00 :	  42d573:       mov    -0x40(%rbp),%rax
    0.00 :	  42d577:       mov    (%rax),%r12
         :	              std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
    0.00 :	  42d57a:       mov    -0x38(%rbp),%rax
    0.00 :	  42d57e:       mov    %rax,%rdi
    0.00 :	  42d581:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
         :	                        this->_M_impl._M_start);
    0.00 :	  42d586:       shl    $0x4,%rax
    0.00 :	  42d58a:       lea    (%r12,%rax,1),%rcx
    0.00 :	  42d58e:       mov    -0x40(%rbp),%rax
    0.00 :	  42d592:       mov    (%rax),%rax
         :	              std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
    0.00 :	  42d595:       mov    %rbx,%rdx
    0.00 :	  42d598:       mov    %rcx,%rsi
    0.00 :	  42d59b:       mov    %rax,%rdi
    0.00 :	  42d59e:       callq  42e754 <LLcol* std::copy<LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>
         :	              std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
         :	                                          __x._M_impl._M_finish,
         :	                                          this->_M_impl._M_finish,
         :	                                          _M_get_Tp_allocator());
    0.00 :	  42d5a3:       mov    -0x38(%rbp),%rax
    0.00 :	  42d5a7:       mov    %rax,%rdi
    0.00 :	  42d5aa:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d5af:       mov    %rax,%r13
    0.00 :	  42d5b2:       mov    -0x38(%rbp),%rax
    0.00 :	  42d5b6:       mov    0x8(%rax),%r12
    0.00 :	  42d5ba:       mov    -0x40(%rbp),%rax
    0.00 :	  42d5be:       mov    0x8(%rax),%rbx
    0.00 :	  42d5c2:       mov    -0x40(%rbp),%rax
    0.00 :	  42d5c6:       mov    (%rax),%r14
         :	              std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
    0.00 :	  42d5c9:       mov    -0x38(%rbp),%rax
    0.00 :	  42d5cd:       mov    %rax,%rdi
    0.00 :	  42d5d0:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
         :	                                          _M_get_Tp_allocator());
    0.00 :	  42d5d5:       shl    $0x4,%rax
    0.00 :	  42d5d9:       add    %r14,%rax
         :	              std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
    0.00 :	  42d5dc:       mov    %r13,%rcx
    0.00 :	  42d5df:       mov    %r12,%rdx
    0.00 :	  42d5e2:       mov    %rbx,%rsi
    0.00 :	  42d5e5:       mov    %rax,%rdi
    0.00 :	  42d5e8:       callq  42e79a <LLcol* std::__uninitialized_copy_a<LLcol*, LLcol*, LLcol>(LLcol*, LLcol*, LLcol*, std::allocator<LLcol>&)>
         :	            }
         :	          this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    0.00 :	  42d5ed:       mov    -0x38(%rbp),%rax
    0.00 :	  42d5f1:       mov    (%rax),%rax
  100.00 :	  42d5f4:       mov    -0x28(%rbp),%rdx
    0.00 :	  42d5f8:       shl    $0x4,%rdx
    0.00 :	  42d5fc:       add    %rax,%rdx
    0.00 :	  42d5ff:       mov    -0x38(%rbp),%rax
    0.00 :	  42d603:       mov    %rdx,0x8(%rax)
         :	        }
         :	      return *this;
    0.00 :	  42d607:       mov    -0x38(%rbp),%rax
         :	    }
    0.00 :	  42d60b:       add    $0x20,%rsp
    0.00 :	  42d60f:       pop    %rbx
    0.00 :	  42d610:       pop    %r12
    0.00 :	  42d612:       pop    %r13
    0.00 :	  42d614:       pop    %r14
    0.00 :	  42d616:       pop    %rbp
    0.00 :	  42d617:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.00 :	  42d016:       push   %rbp
    0.00 :	  42d017:       mov    %rsp,%rbp
    0.00 :	  42d01a:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :	  42d01e:       mov    -0x8(%rbp),%rax
  100.00 :	  42d022:       mov    0x8(%rax),%rax
    0.00 :	  42d026:       mov    %rax,%rdx
    0.00 :	  42d029:       mov    -0x8(%rbp),%rax
    0.00 :	  42d02d:       mov    (%rax),%rax
    0.00 :	  42d030:       sub    %rax,%rdx
    0.00 :	  42d033:       mov    %rdx,%rax
    0.00 :	  42d036:       sar    $0x4,%rax
    0.00 :	  42d03a:       pop    %rbp
    0.00 :	  42d03b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d2a8 <std::vector<LLcol, std::allocator<LLcol> >::~vector()>:
         :	_ZNSt6vectorI5LLcolSaIS0_EED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    0.00 :	  42d2a8:       push   %rbp
    0.00 :	  42d2a9:       mov    %rsp,%rbp
    0.00 :	  42d2ac:       sub    $0x10,%rsp
    0.00 :	  42d2b0:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  42d2b4:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2b8:       mov    %rax,%rdi
    0.00 :	  42d2bb:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d2c0:       mov    %rax,%rdx
    0.00 :	  42d2c3:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2c7:       mov    0x8(%rax),%rcx
    0.00 :	  42d2cb:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2cf:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  42d2d2:       mov    %rcx,%rsi
    0.00 :	  42d2d5:       mov    %rax,%rdi
    0.00 :	  42d2d8:       callq  42e541 <void std::_Destroy<LLcol*, LLcol>(LLcol*, LLcol*, std::allocator<LLcol>&)>
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  42d2dd:       mov    -0x8(%rbp),%rax
    0.00 :	  42d2e1:       mov    %rax,%rdi
    0.00 :	  42d2e4:       callq  42e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>
   50.00 :	  42d2e9:       leaveq
   50.00 :	  42d2ea:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d904 <std::vector<double, std::allocator<double> >::push_back(double const&)>:
         :	_ZNSt6vectorIdSaIdEE9push_backERKd():
         :	       *  to it.  Due to the nature of a %vector this operation can be
         :	       *  done in constant time if the %vector has preallocated space
         :	       *  available.
         :	       */
         :	      void
         :	      push_back(const value_type& __x)
    0.00 :	  42d904:       push   %rbp
    0.00 :	  42d905:       mov    %rsp,%rbp
    0.00 :	  42d908:       sub    $0x10,%rsp
    0.00 :	  42d90c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d910:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  42d914:       mov    -0x8(%rbp),%rax
    0.00 :	  42d918:       mov    0x8(%rax),%rdx
   50.00 :	  42d91c:       mov    -0x8(%rbp),%rax
    0.00 :	  42d920:       mov    0x10(%rax),%rax
   50.00 :	  42d924:       cmp    %rax,%rdx
    0.00 :	  42d927:       je     42d95a <std::vector<double, std::allocator<double> >::push_back(double const&)+0x56>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     __x);
    0.00 :	  42d929:       mov    -0x8(%rbp),%rax
    0.00 :	  42d92d:       mov    0x8(%rax),%rcx
    0.00 :	  42d931:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  42d935:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d939:       mov    %rcx,%rsi
    0.00 :	  42d93c:       mov    %rax,%rdi
    0.00 :	  42d93f:       callq  42ea2b <decltype (_S_construct({parm#1}, {parm#2}, (forward<double const&>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double const&>(std::allocator<double>&, double*, double const&)>
         :	            ++this->_M_impl._M_finish;
    0.00 :	  42d944:       mov    -0x8(%rbp),%rax
    0.00 :	  42d948:       mov    0x8(%rax),%rax
    0.00 :	  42d94c:       lea    0x8(%rax),%rdx
    0.00 :	  42d950:       mov    -0x8(%rbp),%rax
    0.00 :	  42d954:       mov    %rdx,0x8(%rax)
    0.00 :	  42d958:       jmp    42d96d <std::vector<double, std::allocator<double> >::push_back(double const&)+0x69>
         :	          }
         :	        else
         :	#if __cplusplus >= 201103L
         :	          _M_emplace_back_aux(__x);
    0.00 :	  42d95a:       mov    -0x10(%rbp),%rdx
    0.00 :	  42d95e:       mov    -0x8(%rbp),%rax
    0.00 :	  42d962:       mov    %rdx,%rsi
    0.00 :	  42d965:       mov    %rax,%rdi
    0.00 :	  42d968:       callq  42ea64 <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double const&>(double const&)>
         :	#else
         :	          _M_insert_aux(end(), __x);
         :	#endif
         :	      }
    0.00 :	  42d96d:       leaveq
    0.00 :	  42d96e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d97e <std::vector<double, std::allocator<double> >::push_back(double&&)>:
         :	_ZNSt6vectorIdSaIdEE9push_backEOd():
         :	#endif
         :	      }
         :
         :	#if __cplusplus >= 201103L
         :	      void
         :	      push_back(value_type&& __x)
    0.00 :	  42d97e:       push   %rbp
    0.00 :	  42d97f:       mov    %rsp,%rbp
    0.00 :	  42d982:       sub    $0x10,%rsp
    0.00 :	  42d986:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d98a:       mov    %rsi,-0x10(%rbp)
         :	      { emplace_back(std::move(__x)); }
    0.00 :	  42d98e:       mov    -0x10(%rbp),%rax
    0.00 :	  42d992:       mov    %rax,%rdi
    0.00 :	  42d995:       callq  42d96f <std::remove_reference<double&>::type&& std::move<double&>(double&)>
   50.00 :	  42d99a:       mov    %rax,%rdx
    0.00 :	  42d99d:       mov    -0x8(%rbp),%rax
    0.00 :	  42d9a1:       mov    %rdx,%rsi
    0.00 :	  42d9a4:       mov    %rax,%rdi
    0.00 :	  42d9a7:       callq  42ec5c <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)>
    0.00 :	  42d9ac:       leaveq
   50.00 :	  42d9ad:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b5e <std::vector<int, std::allocator<int> >::begin() const>:
         :	_ZNKSt6vectorIiSaIiEE5beginEv():
         :	       *  Returns a read-only (constant) iterator that points to the
         :	       *  first element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      const_iterator
         :	      begin() const _GLIBCXX_NOEXCEPT
    0.00 :	  422b5e:       push   %rbp
    0.00 :	  422b5f:       mov    %rsp,%rbp
    0.00 :	  422b62:       sub    $0x20,%rsp
    0.00 :	  422b66:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_start); }
    0.00 :	  422b6a:       mov    -0x18(%rbp),%rax
    0.00 :	  422b6e:       mov    (%rax),%rax
    0.00 :	  422b71:       mov    %rax,-0x8(%rbp)
    0.00 :	  422b75:       lea    -0x8(%rbp),%rdx
    0.00 :	  422b79:       lea    -0x10(%rbp),%rax
    0.00 :	  422b7d:       mov    %rdx,%rsi
    0.00 :	  422b80:       mov    %rax,%rdi
   50.00 :	  422b83:       callq  42509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>
    0.00 :	  422b88:       mov    -0x10(%rbp),%rax
   50.00 :	  422b8c:       leaveq
    0.00 :	  422b8d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (2 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b8e <std::vector<int, std::allocator<int> >::end() const>:
         :	_ZNKSt6vectorIiSaIiEE3endEv():
         :	       *  Returns a read-only (constant) iterator that points one past
         :	       *  the last element in the %vector.  Iteration is done in
         :	       *  ordinary element order.
         :	       */
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
    0.00 :	  422b8e:       push   %rbp
    0.00 :	  422b8f:       mov    %rsp,%rbp
    0.00 :	  422b92:       sub    $0x20,%rsp
    0.00 :	  422b96:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_finish); }
    0.00 :	  422b9a:       mov    -0x18(%rbp),%rax
    0.00 :	  422b9e:       mov    0x8(%rax),%rax
   50.00 :	  422ba2:       mov    %rax,-0x8(%rbp)
    0.00 :	  422ba6:       lea    -0x8(%rbp),%rdx
    0.00 :	  422baa:       lea    -0x10(%rbp),%rax
    0.00 :	  422bae:       mov    %rdx,%rsi
    0.00 :	  422bb1:       mov    %rax,%rdi
    0.00 :	  422bb4:       callq  42509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>
    0.00 :	  422bb9:       mov    -0x10(%rbp),%rax
   50.00 :	  422bbd:       leaveq
    0.00 :	  422bbe:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041f6d4 <LLMatOrd::LLMatOrd(SparseMatrix&)>:
         :	_ZN8LLMatOrdC2ER12SparseMatrix():
         :	struct LLMatOrd{
         :	    long n;
         :	    std::vector<Tind> cols;
         :	    std::vector<LLord> lles;
         :	    LLMatOrd(){}
         :	    LLMatOrd(SparseMatrix &a)
    0.00 :	  41f6d4:       push   %rbp
    0.00 :	  41f6d5:       mov    %rsp,%rbp
    0.00 :	  41f6d8:       push   %rbx
    0.00 :	  41f6d9:       sub    $0x78,%rsp
    0.00 :	  41f6dd:       mov    %rdi,-0x68(%rbp)
    0.00 :	  41f6e1:       mov    %rsi,-0x70(%rbp)
         :	    {
    0.00 :	  41f6e5:       mov    -0x68(%rbp),%rax
    0.00 :	  41f6e9:       add    $0x8,%rax
    0.00 :	  41f6ed:       mov    %rax,%rdi
    0.00 :	  41f6f0:       callq  41fa70 <std::vector<int, std::allocator<int> >::vector()>
    0.00 :	  41f6f5:       mov    -0x68(%rbp),%rax
    0.00 :	  41f6f9:       add    $0x20,%rax
    0.00 :	  41f6fd:       mov    %rax,%rdi
    0.00 :	  41f700:       callq  4203d4 <std::vector<LLord, std::allocator<LLord> >::vector()>
         :	        long n = a.colnum;
    0.00 :	  41f705:       mov    -0x70(%rbp),%rax
    0.00 :	  41f709:       mov    0x60(%rax),%rax
    0.00 :	  41f70d:       mov    %rax,-0x38(%rbp)
         :	        this->n = n;
    0.00 :	  41f711:       mov    -0x68(%rbp),%rax
    0.00 :	  41f715:       mov    -0x38(%rbp),%rdx
    0.00 :	  41f719:       mov    %rdx,(%rax)
         :	        long m = a.elems;
    0.00 :	  41f71c:       mov    -0x70(%rbp),%rax
    0.00 :	  41f720:       mov    0x68(%rax),%rax
    0.00 :	  41f724:       mov    %rax,-0x40(%rbp)
         :	        // std::cout << n << ' ' <<  m;
         :	        cols.resize(n + 1);
    0.00 :	  41f728:       mov    -0x38(%rbp),%rax
    0.00 :	  41f72c:       add    $0x1,%rax
    0.00 :	  41f730:       mov    -0x68(%rbp),%rdx
    0.00 :	  41f734:       add    $0x8,%rdx
    0.00 :	  41f738:       mov    %rax,%rsi
    0.00 :	  41f73b:       mov    %rdx,%rdi
    0.00 :	  41f73e:       callq  41fc46 <std::vector<int, std::allocator<int> >::resize(unsigned long)>
         :
         :	        long ptr = 0;
    0.00 :	  41f743:       movq   $0x0,-0x18(%rbp)
         :	        for (int i = 0; i < n; i++)
    0.00 :	  41f74b:       movl   $0x0,-0x1c(%rbp)
    0.00 :	  41f752:       jmpq   41f859 <LLMatOrd::LLMatOrd(SparseMatrix&)+0x185>
         :	        {
         :	            long next = -1;
    0.00 :	  41f757:       movq   $0xffffffffffffffff,-0x28(%rbp)
         :	            for (int ind = a.colptrs[i]; ind < a.colptrs[i + 1]; ind++)
    0.00 :	  41f75f:       mov    -0x1c(%rbp),%eax
    0.00 :	  41f762:       cltq
    0.00 :	  41f764:       mov    -0x70(%rbp),%rdx
    0.00 :	  41f768:       add    $0x30,%rdx
    0.00 :	  41f76c:       mov    %rax,%rsi
    0.00 :	  41f76f:       mov    %rdx,%rdi
    0.00 :	  41f772:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  41f777:       mov    (%rax),%eax
    0.00 :	  41f779:       mov    %eax,-0x2c(%rbp)
    0.00 :	  41f77c:       jmpq   41f80c <LLMatOrd::LLMatOrd(SparseMatrix&)+0x138>
         :	            {
         :	                Tind j = a.rows[ind];
    0.00 :	  41f781:       mov    -0x2c(%rbp),%eax
    0.00 :	  41f784:       cltq
    0.00 :	  41f786:       mov    -0x70(%rbp),%rdx
    0.00 :	  41f78a:       add    $0x18,%rdx
    0.00 :	  41f78e:       mov    %rax,%rsi
    0.00 :	  41f791:       mov    %rdx,%rdi
    0.00 :	  41f794:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  41f799:       mov    (%rax),%eax
    0.00 :	  41f79b:       mov    %eax,-0x44(%rbp)
         :	                if (i < j)
    0.00 :	  41f79e:       mov    -0x1c(%rbp),%eax
    0.00 :	  41f7a1:       cmp    -0x44(%rbp),%eax
    0.00 :	  41f7a4:       jge    41f808 <LLMatOrd::LLMatOrd(SparseMatrix&)+0x134>
         :	                {
         :	                    Tval v = a.vals[ind];
    0.00 :	  41f7a6:       mov    -0x2c(%rbp),%eax
    0.00 :	  41f7a9:       movslq %eax,%rdx
    0.00 :	  41f7ac:       mov    -0x70(%rbp),%rax
    0.00 :	  41f7b0:       mov    %rdx,%rsi
    0.00 :	  41f7b3:       mov    %rax,%rdi
    0.00 :	  41f7b6:       callq  41fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>
    0.00 :	  41f7bb:       mov    (%rax),%rax
    0.00 :	  41f7be:       mov    %rax,-0x50(%rbp)
         :	                    lles.push_back(LLord(j, next, v));
    0.00 :	  41f7c2:       mov    -0x28(%rbp),%rax
    0.00 :	  41f7c6:       mov    %eax,%edx
    0.00 :	  41f7c8:       mov    -0x50(%rbp),%rax
    0.00 :	  41f7cc:       mov    -0x44(%rbp),%esi
    0.00 :	  41f7cf:       lea    -0x60(%rbp),%rcx
    0.00 :	  41f7d3:       mov    %rax,-0x78(%rbp)
    0.00 :	  41f7d7:       vmovsd -0x78(%rbp),%xmm0
    0.00 :	  41f7dc:       mov    %rcx,%rdi
    0.00 :	  41f7df:       callq  41f6a0 <LLord::LLord(int, int, double)>
    0.00 :	  41f7e4:       mov    -0x68(%rbp),%rax
    0.00 :	  41f7e8:       lea    0x20(%rax),%rdx
    0.00 :	  41f7ec:       lea    -0x60(%rbp),%rax
    0.00 :	  41f7f0:       mov    %rax,%rsi
    0.00 :	  41f7f3:       mov    %rdx,%rdi
    0.00 :	  41f7f6:       callq  420440 <std::vector<LLord, std::allocator<LLord> >::push_back(LLord&&)>
         :	                    next = ptr;
    0.00 :	  41f7fb:       mov    -0x18(%rbp),%rax
    0.00 :	  41f7ff:       mov    %rax,-0x28(%rbp)
         :	                    ptr++;
    0.00 :	  41f803:       addq   $0x1,-0x18(%rbp)
         :	            for (int ind = a.colptrs[i]; ind < a.colptrs[i + 1]; ind++)
    0.00 :	  41f808:       addl   $0x1,-0x2c(%rbp)
    0.00 :	  41f80c:       mov    -0x1c(%rbp),%eax
    0.00 :	  41f80f:       add    $0x1,%eax
    0.00 :	  41f812:       cltq
    0.00 :	  41f814:       mov    -0x70(%rbp),%rdx
    0.00 :	  41f818:       add    $0x30,%rdx
    0.00 :	  41f81c:       mov    %rax,%rsi
    0.00 :	  41f81f:       mov    %rdx,%rdi
    0.00 :	  41f822:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  41f827:       mov    (%rax),%eax
    0.00 :	  41f829:       cmp    -0x2c(%rbp),%eax
    0.00 :	  41f82c:       setg   %al
    0.00 :	  41f82f:       test   %al,%al
    0.00 :	  41f831:       jne    41f781 <LLMatOrd::LLMatOrd(SparseMatrix&)+0xad>
         :	                }
         :	            }
         :	            cols[i] = next;
    0.00 :	  41f837:       mov    -0x1c(%rbp),%eax
    0.00 :	  41f83a:       cltq
    0.00 :	  41f83c:       mov    -0x68(%rbp),%rdx
    0.00 :	  41f840:       add    $0x8,%rdx
    0.00 :	  41f844:       mov    %rax,%rsi
    0.00 :	  41f847:       mov    %rdx,%rdi
    0.00 :	  41f84a:       callq  41fdba <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :	  41f84f:       mov    -0x28(%rbp),%rdx
    0.00 :	  41f853:       mov    %edx,(%rax)
         :	        for (int i = 0; i < n; i++)
    0.00 :	  41f855:       addl   $0x1,-0x1c(%rbp)
    0.00 :	  41f859:       mov    -0x1c(%rbp),%eax
    0.00 :	  41f85c:       cltq
    0.00 :	  41f85e:       cmp    -0x38(%rbp),%rax
    0.00 :	  41f862:       jl     41f757 <LLMatOrd::LLMatOrd(SparseMatrix&)+0x83>
    0.00 :	  41f868:       jmp    41f8a2 <LLMatOrd::LLMatOrd(SparseMatrix&)+0x1ce>
    0.00 :	  41f86a:       mov    %rax,%rbx
    0.00 :	  41f86d:       jmp    41f872 <LLMatOrd::LLMatOrd(SparseMatrix&)+0x19e>
    0.00 :	  41f86f:       mov    %rax,%rbx
         :	    {
    0.00 :	  41f872:       mov    -0x68(%rbp),%rax
    0.00 :	  41f876:       add    $0x20,%rax
    0.00 :	  41f87a:       mov    %rax,%rdi
    0.00 :	  41f87d:       callq  4203ee <std::vector<LLord, std::allocator<LLord> >::~vector()>
    0.00 :	  41f882:       jmp    41f887 <LLMatOrd::LLMatOrd(SparseMatrix&)+0x1b3>
    0.00 :	  41f884:       mov    %rax,%rbx
    0.00 :	  41f887:       mov    -0x68(%rbp),%rax
    0.00 :	  41f88b:       add    $0x8,%rax
    0.00 :	  41f88f:       mov    %rax,%rdi
    0.00 :	  41f892:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41f897:       mov    %rbx,%rax
    0.00 :	  41f89a:       mov    %rax,%rdi
    0.00 :	  41f89d:       callq  41dda0 <_Unwind_Resume@plt>
         :	        }
         :
         :	    }
    0.00 :	  41f8a2:       add    $0x78,%rsp
  100.00 :	  41f8a6:       pop    %rbx
    0.00 :	  41f8a7:       pop    %rbp
    0.00 :	  41f8a8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041f8f4 <LLMatOrd::~LLMatOrd()>:
         :	_ZN8LLMatOrdD2Ev():
         :	    LLord(Tind row, Tind next, Tval val):row(row), next(next), val(val){}
         :	};
         :
         :	std::vector<Tind> invperm(std::vector<Tind> &perm);
         :
         :	struct LLMatOrd{
    0.00 :	  41f8f4:       push   %rbp
    0.00 :	  41f8f5:       mov    %rsp,%rbp
    0.00 :	  41f8f8:       sub    $0x10,%rsp
    0.00 :	  41f8fc:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41f900:       mov    -0x8(%rbp),%rax
  100.00 :	  41f904:       add    $0x20,%rax
    0.00 :	  41f908:       mov    %rax,%rdi
    0.00 :	  41f90b:       callq  4203ee <std::vector<LLord, std::allocator<LLord> >::~vector()>
    0.00 :	  41f910:       mov    -0x8(%rbp),%rax
    0.00 :	  41f914:       add    $0x8,%rax
    0.00 :	  41f918:       mov    %rax,%rdi
    0.00 :	  41f91b:       callq  41fa8a <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :	  41f920:       leaveq
    0.00 :	  41f921:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422b26 <__gnu_cxx::__alloc_traits<std::allocator<int> >::_S_select_on_copy(std::allocator<int> const&)>:
         :	_ZN9__gnu_cxx14__alloc_traitsISaIiEE17_S_select_on_copyERKS1_():
         :	    template<typename _Ptr>
         :	      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
         :	      destroy(_Alloc& __a, _Ptr __p)
         :	      { _Base_type::destroy(__a, std::addressof(*__p)); }
         :
         :	    static _Alloc _S_select_on_copy(const _Alloc& __a)
    0.00 :	  422b26:       push   %rbp
  100.00 :	  422b27:       mov    %rsp,%rbp
    0.00 :	  422b2a:       sub    $0x10,%rsp
    0.00 :	  422b2e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  422b32:       mov    %rsi,-0x10(%rbp)
         :	    { return _Base_type::select_on_container_copy_construction(__a); }
    0.00 :	  422b36:       mov    -0x8(%rbp),%rax
    0.00 :	  422b3a:       mov    -0x10(%rbp),%rdx
    0.00 :	  422b3e:       mov    %rdx,%rsi
    0.00 :	  422b41:       mov    %rax,%rdi
    0.00 :	  422b44:       callq  42504b <std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const&)>
    0.00 :	  422b49:       mov    -0x8(%rbp),%rax
    0.00 :	  422b4d:       leaveq
    0.00 :	  422b4e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>:
         :	_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv():
         :	      __normal_iterator
         :	      operator-(const difference_type& __n) const
         :	      { return __normal_iterator(_M_current - __n); }
         :
         :	      const _Iterator&
         :	      base() const
    0.00 :	  4224b2:       push   %rbp
    0.00 :	  4224b3:       mov    %rsp,%rbp
    0.00 :	  4224b6:       mov    %rdi,-0x8(%rbp)
         :	      { return _M_current; }
    0.00 :	  4224ba:       mov    -0x8(%rbp),%rax
  100.00 :	  4224be:       pop    %rbp
    0.00 :	  4224bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f896 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::operator+=(long const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEpLERKl():
         :	      reference
         :	      operator[](const difference_type& __n) const
         :	      { return _M_current[__n]; }
         :
         :	      __normal_iterator&
         :	      operator+=(const difference_type& __n)
    0.00 :	  42f896:       push   %rbp
  100.00 :	  42f897:       mov    %rsp,%rbp
    0.00 :	  42f89a:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f89e:       mov    %rsi,-0x10(%rbp)
         :	      { _M_current += __n; return *this; }
    0.00 :	  42f8a2:       mov    -0x8(%rbp),%rax
    0.00 :	  42f8a6:       mov    (%rax),%rdx
    0.00 :	  42f8a9:       mov    -0x10(%rbp),%rax
    0.00 :	  42f8ad:       mov    (%rax),%rax
    0.00 :	  42f8b0:       shl    $0x3,%rax
    0.00 :	  42f8b4:       add    %rax,%rdx
    0.00 :	  42f8b7:       mov    -0x8(%rbp),%rax
    0.00 :	  42f8bb:       mov    %rdx,(%rax)
    0.00 :	  42f8be:       mov    -0x8(%rbp),%rax
    0.00 :	  42f8c2:       pop    %rbp
    0.00 :	  42f8c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042509a <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&)>:
         :	_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC2ERKS2_():
         :	      typedef typename __traits_type::pointer           pointer;
         :
         :	      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
         :
         :	      explicit
         :	      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    0.00 :	  42509a:       push   %rbp
    0.00 :	  42509b:       mov    %rsp,%rbp
    0.00 :	  42509e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4250a2:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4250a6:       mov    -0x10(%rbp),%rax
    0.00 :	  4250aa:       mov    (%rax),%rdx
  100.00 :	  4250ad:       mov    -0x8(%rbp),%rax
    0.00 :	  4250b1:       mov    %rdx,(%rax)
    0.00 :	  4250b4:       pop    %rbp
    0.00 :	  4250b5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042fe6c <__gnu_cxx::new_allocator<LLcol>::allocate(unsigned long, void const*)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolE8allocateEmPKv():
         :	      { return std::__addressof(__x); }
         :
         :	      // NB: __n is permitted to be 0.  The C++ standard says nothing
         :	      // about what the return value is when __n == 0.
         :	      pointer
         :	      allocate(size_type __n, const void* = 0)
    0.00 :	  42fe6c:       push   %rbp
    0.00 :	  42fe6d:       mov    %rsp,%rbp
    0.00 :	  42fe70:       sub    $0x20,%rsp
    0.00 :	  42fe74:       mov    %rdi,-0x8(%rbp)
  100.00 :	  42fe78:       mov    %rsi,-0x10(%rbp)
    0.00 :	  42fe7c:       mov    %rdx,-0x18(%rbp)
         :	      {
         :	        if (__n > this->max_size())
    0.00 :	  42fe80:       mov    -0x8(%rbp),%rax
    0.00 :	  42fe84:       mov    %rax,%rdi
    0.00 :	  42fe87:       callq  430ade <__gnu_cxx::new_allocator<LLcol>::max_size() const>
    0.00 :	  42fe8c:       cmp    -0x10(%rbp),%rax
    0.00 :	  42fe90:       setb   %al
    0.00 :	  42fe93:       test   %al,%al
    0.00 :	  42fe95:       je     42fe9c <__gnu_cxx::new_allocator<LLcol>::allocate(unsigned long, void const*)+0x30>
         :	          std::__throw_bad_alloc();
    0.00 :	  42fe97:       callq  41dcf0 <std::__throw_bad_alloc()@plt>
         :
         :	        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    0.00 :	  42fe9c:       mov    -0x10(%rbp),%rax
    0.00 :	  42fea0:       shl    $0x4,%rax
    0.00 :	  42fea4:       mov    %rax,%rdi
    0.00 :	  42fea7:       callq  41dd90 <operator new(unsigned long)@plt>
         :	      }
    0.00 :	  42feac:       leaveq
    0.00 :	  42fead:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430ade <__gnu_cxx::new_allocator<LLcol>::max_size() const>:
         :	_ZNK9__gnu_cxx13new_allocatorI5LLcolE8max_sizeEv():
         :	      void
         :	      deallocate(pointer __p, size_type)
         :	      { ::operator delete(__p); }
         :
         :	      size_type
         :	      max_size() const _GLIBCXX_USE_NOEXCEPT
    0.00 :	  430ade:       push   %rbp
    0.00 :	  430adf:       mov    %rsp,%rbp
  100.00 :	  430ae2:       mov    %rdi,-0x8(%rbp)
         :	      { return size_t(-1) / sizeof(_Tp); }
    0.00 :	  430ae6:       movabs $0xfffffffffffffff,%rax
    0.00 :	  430af0:       pop    %rbp
    0.00 :	  430af1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004304a6 <__gnu_cxx::new_allocator<LLcol>::new_allocator(__gnu_cxx::new_allocator<LLcol> const&)>:
         :	_ZN9__gnu_cxx13new_allocatorI5LLcolEC2ERKS2_():
         :	      typedef std::true_type propagate_on_container_move_assignment;
         :	#endif
         :
         :	      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         :
         :	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    0.00 :	  4304a6:       push   %rbp
    0.00 :	  4304a7:       mov    %rsp,%rbp
    0.00 :	  4304aa:       mov    %rdi,-0x8(%rbp)
  100.00 :	  4304ae:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4304b2:       pop    %rbp
    0.00 :	  4304b3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000043087c <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)>:
         :	_ZN9__gnu_cxx13new_allocatorIdE9constructIdIRKdEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    0.00 :	  43087c:       push   %rbp
    0.00 :	  43087d:       mov    %rsp,%rbp
    0.00 :	  430880:       push   %rbx
    0.00 :	  430881:       sub    $0x28,%rsp
    0.00 :	  430885:       mov    %rdi,-0x18(%rbp)
  100.00 :	  430889:       mov    %rsi,-0x20(%rbp)
    0.00 :	  43088d:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  430891:       mov    -0x28(%rbp),%rax
    0.00 :	  430895:       mov    %rax,%rdi
    0.00 :	  430898:       callq  422e23 <double const& std::forward<double const&>(std::remove_reference<double const&>::type&)>
    0.00 :	  43089d:       mov    (%rax),%rbx
    0.00 :	  4308a0:       mov    -0x20(%rbp),%rax
    0.00 :	  4308a4:       mov    %rax,%rsi
    0.00 :	  4308a7:       mov    $0x8,%edi
    0.00 :	  4308ac:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  4308b1:       test   %rax,%rax
    0.00 :	  4308b4:       je     4308b9 <void __gnu_cxx::new_allocator<double>::construct<double, double const&>(double*, double const&)+0x3d>
    0.00 :	  4308b6:       mov    %rbx,(%rax)
    0.00 :	  4308b9:       add    $0x28,%rsp
    0.00 :	  4308bd:       pop    %rbx
    0.00 :	  4308be:       pop    %rbp
    0.00 :	  4308bf:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426d7a <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)>:
         :	_ZN9__gnu_cxx13new_allocatorIiE9constructIiIRKiEEEvPT_DpOT0_():
         :	      { return size_t(-1) / sizeof(_Tp); }
         :
         :	#if __cplusplus >= 201103L
         :	      template<typename _Up, typename... _Args>
         :	        void
         :	        construct(_Up* __p, _Args&&... __args)
    0.00 :	  426d7a:       push   %rbp
    0.00 :	  426d7b:       mov    %rsp,%rbp
    0.00 :	  426d7e:       push   %rbx
    0.00 :	  426d7f:       sub    $0x28,%rsp
    0.00 :	  426d83:       mov    %rdi,-0x18(%rbp)
    0.00 :	  426d87:       mov    %rsi,-0x20(%rbp)
    0.00 :	  426d8b:       mov    %rdx,-0x28(%rbp)
         :	        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    0.00 :	  426d8f:       mov    -0x28(%rbp),%rax
    0.00 :	  426d93:       mov    %rax,%rdi
    0.00 :	  426d96:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  426d9b:       mov    (%rax),%ebx
  100.00 :	  426d9d:       mov    -0x20(%rbp),%rax
    0.00 :	  426da1:       mov    %rax,%rsi
    0.00 :	  426da4:       mov    $0x4,%edi
    0.00 :	  426da9:       callq  41eb2a <operator new(unsigned long, void*)>
    0.00 :	  426dae:       test   %rax,%rax
    0.00 :	  426db1:       je     426db5 <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)+0x3b>
    0.00 :	  426db3:       mov    %ebx,(%rax)
    0.00 :	  426db5:       add    $0x28,%rsp
    0.00 :	  426db9:       pop    %rbx
    0.00 :	  426dba:       pop    %rbp
    0.00 :	  426dbb:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004274b0 <__gnu_cxx::new_allocator<int>::max_size() const>:
         :	_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv():
         :	      void
         :	      deallocate(pointer __p, size_type)
         :	      { ::operator delete(__p); }
         :
         :	      size_type
         :	      max_size() const _GLIBCXX_USE_NOEXCEPT
    0.00 :	  4274b0:       push   %rbp
  100.00 :	  4274b1:       mov    %rsp,%rbp
    0.00 :	  4274b4:       mov    %rdi,-0x8(%rbp)
         :	      { return size_t(-1) / sizeof(_Tp); }
    0.00 :	  4274b8:       movabs $0x3fffffffffffffff,%rax
    0.00 :	  4274c2:       pop    %rbp
    0.00 :	  4274c3:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f8c4 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type __gnu_cxx::operator-<double*, std::vector<double, std::allocator<double> > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>:
         :	_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_():
         :	#endif
         :	    { return __lhs.base() - __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :	    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    0.00 :	  42f8c4:       push   %rbp
    0.00 :	  42f8c5:       mov    %rsp,%rbp
    0.00 :	  42f8c8:       push   %rbx
    0.00 :	  42f8c9:       sub    $0x18,%rsp
    0.00 :	  42f8cd:       mov    %rdi,-0x18(%rbp)
    0.00 :	  42f8d1:       mov    %rsi,-0x20(%rbp)
         :	              const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() - __rhs.base(); }
    0.00 :	  42f8d5:       mov    -0x18(%rbp),%rax
    0.00 :	  42f8d9:       mov    %rax,%rdi
    0.00 :	  42f8dc:       callq  4224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>
    0.00 :	  42f8e1:       mov    (%rax),%rax
    0.00 :	  42f8e4:       mov    %rax,%rbx
    0.00 :	  42f8e7:       mov    -0x20(%rbp),%rax
    0.00 :	  42f8eb:       mov    %rax,%rdi
    0.00 :	  42f8ee:       callq  4224b2 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::base() const>
    0.00 :	  42f8f3:       mov    (%rax),%rax
    0.00 :	  42f8f6:       sub    %rax,%rbx
    0.00 :	  42f8f9:       mov    %rbx,%rax
    0.00 :	  42f8fc:       sar    $0x3,%rax
  100.00 :	  42f900:       add    $0x18,%rsp
    0.00 :	  42f904:       pop    %rbx
    0.00 :	  42f905:       pop    %rbp
    0.00 :	  42f906:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004302ee <bool __gnu_cxx::operator==<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>:
         :	_ZN9__gnu_cxxeqIP5LLcolSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_():
         :	               const __normal_iterator<_IteratorR, _Container>& __rhs)
         :	    { return __lhs.base() == __rhs.base(); }
         :
         :	  template<typename _Iterator, typename _Container>
         :	    inline bool
         :	    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
    0.00 :	  4302ee:       push   %rbp
    0.00 :	  4302ef:       mov    %rsp,%rbp
    0.00 :	  4302f2:       push   %rbx
    0.00 :	  4302f3:       sub    $0x18,%rsp
    0.00 :	  4302f7:       mov    %rdi,-0x18(%rbp)
    0.00 :	  4302fb:       mov    %rsi,-0x20(%rbp)
         :	               const __normal_iterator<_Iterator, _Container>& __rhs)
         :	    { return __lhs.base() == __rhs.base(); }
    0.00 :	  4302ff:       mov    -0x18(%rbp),%rax
    0.00 :	  430303:       mov    %rax,%rdi
    0.00 :	  430306:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  43030b:       mov    (%rax),%rbx
    0.00 :	  43030e:       mov    -0x20(%rbp),%rax
    0.00 :	  430312:       mov    %rax,%rdi
    0.00 :	  430315:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  43031a:       mov    (%rax),%rax
    0.00 :	  43031d:       cmp    %rax,%rbx
  100.00 :	  430320:       sete   %al
    0.00 :	  430323:       add    $0x18,%rsp
    0.00 :	  430327:       pop    %rbx
    0.00 :	  430328:       pop    %rbp
    0.00 :	  430329:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042974a <cmp_row(LLcol const&, LLcol const&)>:
         :	_Z7cmp_rowRK5LLcolS1_():
         :	    }
         :
         :	    return len;
         :	}
         :
         :	bool cmp_row(const LLcol &a, const LLcol &b) {
    0.00 :	  42974a:       push   %rbp
    0.00 :	  42974b:       mov    %rsp,%rbp
    0.00 :	  42974e:       mov    %rdi,-0x8(%rbp)
    0.00 :	  429752:       mov    %rsi,-0x10(%rbp)
         :	    return a.row < b.row;
    0.00 :	  429756:       mov    -0x8(%rbp),%rax
    0.00 :	  42975a:       mov    (%rax),%edx
  100.00 :	  42975c:       mov    -0x10(%rbp),%rax
    0.00 :	  429760:       mov    (%rax),%eax
    0.00 :	  429762:       cmp    %eax,%edx
    0.00 :	  429764:       setl   %al
         :	}
    0.00 :	  429767:       pop    %rbp
    0.00 :	  429768:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f70f <void std::_Destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEEvT_S8_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    0.00 :	  42f70f:       push   %rbp
    0.00 :	  42f710:       mov    %rsp,%rbp
    0.00 :	  42f713:       sub    $0x20,%rsp
    0.00 :	  42f717:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42f71b:       mov    %rsi,-0x20(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    0.00 :	  42f71f:       mov    -0x20(%rbp),%rdx
    0.00 :	  42f723:       mov    -0x10(%rbp),%rax
  100.00 :	  42f727:       mov    %rdx,%rsi
    0.00 :	  42f72a:       mov    %rax,%rdi
    0.00 :	  42f72d:       callq  430562 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
         :	        __destroy(__first, __last);
         :	    }
    0.00 :	  42f732:       leaveq
    0.00 :	  42f733:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004230b0 <void std::_Destroy<int*>(int*, int*)>:
         :	_ZSt8_DestroyIPiEvT_S1_():
         :	   * a trivial destructor, the compiler should optimize all of this
         :	   * away, otherwise the objects' destructors must be invoked.
         :	   */
         :	  template<typename _ForwardIterator>
         :	    inline void
         :	    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    0.00 :	  4230b0:       push   %rbp
    0.00 :	  4230b1:       mov    %rsp,%rbp
    0.00 :	  4230b4:       sub    $0x10,%rsp
    0.00 :	  4230b8:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4230bc:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	                       _Value_type;
         :	      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    0.00 :	  4230c0:       mov    -0x10(%rbp),%rdx
    0.00 :	  4230c4:       mov    -0x8(%rbp),%rax
    0.00 :	  4230c8:       mov    %rdx,%rsi
    0.00 :	  4230cb:       mov    %rax,%rdi
    0.00 :	  4230ce:       callq  4255de <void std::_Destroy_aux<true>::__destroy<int*>(int*, int*)>
         :	        __destroy(__first, __last);
         :	    }
    0.00 :	  4230d3:       leaveq
  100.00 :	  4230d4:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042669c <void std::_Destroy_aux<true>::__destroy<LLord*>(LLord*, LLord*)>:
         :	_ZNSt12_Destroy_auxILb1EE9__destroyIP5LLordEEvT_S4_():
         :	  template<>
         :	    struct _Destroy_aux<true>
         :	    {
         :	      template<typename _ForwardIterator>
         :	        static void
         :	        __destroy(_ForwardIterator, _ForwardIterator) { }
  100.00 :	  42669c:       push   %rbp
    0.00 :	  42669d:       mov    %rsp,%rbp
    0.00 :	  4266a0:       mov    %rdi,-0x8(%rbp)
    0.00 :	  4266a4:       mov    %rsi,-0x10(%rbp)
    0.00 :	  4266a8:       pop    %rbp
    0.00 :	  4266a9:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430570 <std::_Iter_base<LLcol*, false>::_S_base(LLcol*)>:
         :	_ZNSt10_Iter_baseIP5LLcolLb0EE7_S_baseES1_():
         :	  // untouched
         :	  template<typename _Iterator, bool _HasBase>
         :	    struct _Iter_base
         :	    {
         :	      typedef _Iterator iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  430570:       push   %rbp
    0.00 :	  430571:       mov    %rsp,%rbp
    0.00 :	  430574:       mov    %rdi,-0x8(%rbp)
         :	      { return __it; }
    0.00 :	  430578:       mov    -0x8(%rbp),%rax
  100.00 :	  43057c:       pop    %rbp
    0.00 :	  43057d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e71 <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES8_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  430e71:       push   %rbp
    0.00 :	  430e72:       mov    %rsp,%rbp
    0.00 :	  430e75:       sub    $0x10,%rsp
    0.00 :	  430e79:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
    0.00 :	  430e7d:       lea    -0x10(%rbp),%rax
    0.00 :	  430e81:       mov    %rax,%rdi
    0.00 :	  430e84:       callq  431512 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
  100.00 :	  430e89:       mov    (%rax),%rax
    0.00 :	  430e8c:       leaveq
    0.00 :	  430e8d:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430e8e <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES7_():
         :
         :	  template<typename _Iterator>
         :	    struct _Iter_base<_Iterator, true>
         :	    {
         :	      typedef typename _Iterator::iterator_type iterator_type;
         :	      static iterator_type _S_base(_Iterator __it)
    0.00 :	  430e8e:       push   %rbp
    0.00 :	  430e8f:       mov    %rsp,%rbp
    0.00 :	  430e92:       sub    $0x10,%rsp
    0.00 :	  430e96:       mov    %rdi,-0x10(%rbp)
         :	      { return __it.base(); }
    0.00 :	  430e9a:       lea    -0x10(%rbp),%rax
    0.00 :	  430e9e:       mov    %rax,%rdi
    0.00 :	  430ea1:       callq  42f1a6 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::base() const>
    0.00 :	  430ea6:       mov    (%rax),%rax
  100.00 :	  430ea9:       leaveq
    0.00 :	  430eaa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e3d8 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::~_Vector_impl()>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EE12_Vector_implD2Ev():
         :	      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
         :	        rebind<_Tp>::other _Tp_alloc_type;
         :	      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
         :	        pointer;
         :
         :	      struct _Vector_impl
    0.00 :	  42e3d8:       push   %rbp
    0.00 :	  42e3d9:       mov    %rsp,%rbp
    0.00 :	  42e3dc:       sub    $0x10,%rsp
    0.00 :	  42e3e0:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42e3e4:       mov    -0x8(%rbp),%rax
  100.00 :	  42e3e8:       mov    %rax,%rdi
    0.00 :	  42e3eb:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42e3f0:       leaveq
    0.00 :	  42e3f1:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseI5LLcolSaIS0_EED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
    0.00 :	  42e450:       push   %rbp
    0.00 :	  42e451:       mov    %rsp,%rbp
    0.00 :	  42e454:       sub    $0x10,%rsp
    0.00 :	  42e458:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    0.00 :	  42e45c:       mov    -0x8(%rbp),%rax
    0.00 :	  42e460:       mov    0x10(%rax),%rax
    0.00 :	  42e464:       mov    %rax,%rdx
    0.00 :	  42e467:       mov    -0x8(%rbp),%rax
    0.00 :	  42e46b:       mov    (%rax),%rax
  100.00 :	  42e46e:       sub    %rax,%rdx
    0.00 :	  42e471:       mov    %rdx,%rax
    0.00 :	  42e474:       sar    $0x4,%rax
    0.00 :	  42e478:       mov    %rax,%rdx
    0.00 :	  42e47b:       mov    -0x8(%rbp),%rax
    0.00 :	  42e47f:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  42e482:       mov    -0x8(%rbp),%rax
    0.00 :	  42e486:       mov    %rcx,%rsi
    0.00 :	  42e489:       mov    %rax,%rdi
    0.00 :	  42e48c:       callq  42e5a2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_deallocate(LLcol*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    0.00 :	  42e491:       mov    -0x8(%rbp),%rax
    0.00 :	  42e495:       mov    %rax,%rdi
    0.00 :	  42e498:       callq  42e3d8 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42e49d:       leaveq
    0.00 :	  42e49e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422c68 <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_base(unsigned long, std::allocator<LLord> const&)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EEC2EmRKS1_():
         :
         :	      _Vector_base(size_t __n)
         :	      : _M_impl()
         :	      { _M_create_storage(__n); }
         :
         :	      _Vector_base(size_t __n, const allocator_type& __a)
    0.00 :	  422c68:       push   %rbp
    0.00 :	  422c69:       mov    %rsp,%rbp
    0.00 :	  422c6c:       push   %rbx
    0.00 :	  422c6d:       sub    $0x28,%rsp
    0.00 :	  422c71:       mov    %rdi,-0x18(%rbp)
    0.00 :	  422c75:       mov    %rsi,-0x20(%rbp)
    0.00 :	  422c79:       mov    %rdx,-0x28(%rbp)
         :	      : _M_impl(__a)
    0.00 :	  422c7d:       mov    -0x18(%rbp),%rax
    0.00 :	  422c81:       mov    -0x28(%rbp),%rdx
    0.00 :	  422c85:       mov    %rdx,%rsi
    0.00 :	  422c88:       mov    %rax,%rdi
    0.00 :	  422c8b:       callq  42513c <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::_Vector_impl(std::allocator<LLord> const&)>
         :	      { _M_create_storage(__n); }
  100.00 :	  422c90:       mov    -0x20(%rbp),%rdx
    0.00 :	  422c94:       mov    -0x18(%rbp),%rax
    0.00 :	  422c98:       mov    %rdx,%rsi
    0.00 :	  422c9b:       mov    %rax,%rdi
    0.00 :	  422c9e:       callq  425184 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_create_storage(unsigned long)>
    0.00 :	  422ca3:       jmp    422cbf <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_base(unsigned long, std::allocator<LLord> const&)+0x57>
    0.00 :	  422ca5:       mov    %rax,%rbx
         :	      : _M_impl(__a)
    0.00 :	  422ca8:       mov    -0x18(%rbp),%rax
    0.00 :	  422cac:       mov    %rax,%rdi
    0.00 :	  422caf:       callq  421fce <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  422cb4:       mov    %rbx,%rax
    0.00 :	  422cb7:       mov    %rax,%rdi
    0.00 :	  422cba:       callq  41dda0 <_Unwind_Resume@plt>
         :	      { _M_create_storage(__n); }
    0.00 :	  422cbf:       add    $0x28,%rsp
    0.00 :	  422cc3:       pop    %rbx
    0.00 :	  422cc4:       pop    %rbp
    0.00 :	  422cc5:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042513c <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::_Vector_impl(std::allocator<LLord> const&)>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EE12_Vector_implC2ERKS1_():
         :
         :	        _Vector_impl()
         :	        : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
         :	        { }
         :
         :	        _Vector_impl(_Tp_alloc_type const& __a)
    0.00 :	  42513c:       push   %rbp
    0.00 :	  42513d:       mov    %rsp,%rbp
    0.00 :	  425140:       sub    $0x10,%rsp
    0.00 :	  425144:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425148:       mov    %rsi,-0x10(%rbp)
         :	        : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    0.00 :	  42514c:       mov    -0x10(%rbp),%rdx
    0.00 :	  425150:       mov    -0x8(%rbp),%rax
    0.00 :	  425154:       mov    %rdx,%rsi
    0.00 :	  425157:       mov    %rax,%rdi
    0.00 :	  42515a:       callq  42510c <std::allocator<LLord>::allocator(std::allocator<LLord> const&)>
    0.00 :	  42515f:       mov    -0x8(%rbp),%rax
    0.00 :	  425163:       movq   $0x0,(%rax)
    0.00 :	  42516a:       mov    -0x8(%rbp),%rax
    0.00 :	  42516e:       movq   $0x0,0x8(%rax)
  100.00 :	  425176:       mov    -0x8(%rbp),%rax
    0.00 :	  42517a:       movq   $0x0,0x10(%rax)
         :	        { }
    0.00 :	  425182:       leaveq
    0.00 :	  425183:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>:
         :	_ZNSt12_Vector_baseI5LLordSaIS0_EED2Ev():
         :	            _M_create_storage(__n);
         :	          }
         :	      }
         :	#endif
         :
         :	      ~_Vector_base()
    0.00 :	  422002:       push   %rbp
    0.00 :	  422003:       mov    %rsp,%rbp
    0.00 :	  422006:       sub    $0x10,%rsp
    0.00 :	  42200a:       mov    %rdi,-0x8(%rbp)
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start); }
    0.00 :	  42200e:       mov    -0x8(%rbp),%rax
    0.00 :	  422012:       mov    0x10(%rax),%rax
    0.00 :	  422016:       mov    %rax,%rdx
    0.00 :	  422019:       mov    -0x8(%rbp),%rax
    0.00 :	  42201d:       mov    (%rax),%rax
    0.00 :	  422020:       sub    %rax,%rdx
    0.00 :	  422023:       mov    %rdx,%rax
    0.00 :	  422026:       sar    $0x4,%rax
    0.00 :	  42202a:       mov    %rax,%rdx
    0.00 :	  42202d:       mov    -0x8(%rbp),%rax
    0.00 :	  422031:       mov    (%rax),%rcx
         :	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    0.00 :	  422034:       mov    -0x8(%rbp),%rax
    0.00 :	  422038:       mov    %rcx,%rsi
    0.00 :	  42203b:       mov    %rax,%rdi
    0.00 :	  42203e:       callq  4246d6 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_deallocate(LLord*, unsigned long)>
         :	                      - this->_M_impl._M_start); }
    0.00 :	  422043:       mov    -0x8(%rbp),%rax
    0.00 :	  422047:       mov    %rax,%rdi
    0.00 :	  42204a:       callq  421fce <std::_Vector_base<LLord, std::allocator<LLord> >::_Vector_impl::~_Vector_impl()>
    0.00 :	  42204f:       leaveq
  100.00 :	  422050:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>:
         :	_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv():
         :
         :	    public:
         :	      typedef _Alloc allocator_type;
         :
         :	      _Tp_alloc_type&
         :	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    0.00 :	  420e4e:       push   %rbp
    0.00 :	  420e4f:       mov    %rsp,%rbp
    0.00 :	  420e52:       mov    %rdi,-0x8(%rbp)
         :	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    0.00 :	  420e56:       mov    -0x8(%rbp),%rax
  100.00 :	  420e5a:       pop    %rbp
    0.00 :	  420e5b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004314b9 <LLcol* std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*)>:
         :	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK5LLcolSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_():
         :	    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
         :	                   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a2(_II __first, _II __last, _OI __result)
    0.00 :	  4314b9:       push   %rbp
    0.00 :	  4314ba:       mov    %rsp,%rbp
    0.00 :	  4314bd:       push   %r12
    0.00 :	  4314bf:       push   %rbx
    0.00 :	  4314c0:       sub    $0x20,%rsp
    0.00 :	  4314c4:       mov    %rdi,-0x20(%rbp)
    0.00 :	  4314c8:       mov    %rsi,-0x30(%rbp)
    0.00 :	  4314cc:       mov    %rdx,-0x28(%rbp)
         :	    {
         :	      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
         :	                                             std::__niter_base(__last),
         :	                                             std::__niter_base(__result)));
    0.00 :	  4314d0:       mov    -0x28(%rbp),%rax
    0.00 :	  4314d4:       mov    %rax,%rdi
    0.00 :	  4314d7:       callq  43057e <std::_Niter_base<LLcol*>::iterator_type std::__niter_base<LLcol*>(LLcol*)>
    0.00 :	  4314dc:       mov    %rax,%r12
    0.00 :	  4314df:       mov    -0x30(%rbp),%rax
    0.00 :	  4314e3:       mov    %rax,%rdi
    0.00 :	  4314e6:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  4314eb:       mov    %rax,%rbx
    0.00 :	  4314ee:       mov    -0x20(%rbp),%rax
    0.00 :	  4314f2:       mov    %rax,%rdi
    0.00 :	  4314f5:       callq  4304fd <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >)>
  100.00 :	  4314fa:       mov    %r12,%rdx
    0.00 :	  4314fd:       mov    %rbx,%rsi
    0.00 :	  431500:       mov    %rax,%rdi
    0.00 :	  431503:       callq  430531 <LLcol* std::__copy_move_a<false, LLcol const*, LLcol*>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    0.00 :	  431508:       add    $0x20,%rsp
    0.00 :	  43150c:       pop    %rbx
    0.00 :	  43150d:       pop    %r12
    0.00 :	  43150f:       pop    %rbp
    0.00 :	  431510:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430531 <LLcol* std::__copy_move_a<false, LLcol const*, LLcol*>(LLcol const*, LLcol const*, LLcol*)>:
         :	_ZSt13__copy_move_aILb0EPK5LLcolPS0_ET1_T0_S5_S4_():
         :	        }
         :	    };
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a(_II __first, _II __last, _OI __result)
    0.00 :	  430531:       push   %rbp
    0.00 :	  430532:       mov    %rsp,%rbp
    0.00 :	  430535:       sub    $0x30,%rsp
    0.00 :	  430539:       mov    %rdi,-0x18(%rbp)
    0.00 :	  43053d:       mov    %rsi,-0x20(%rbp)
    0.00 :	  430541:       mov    %rdx,-0x28(%rbp)
         :	      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
         :	      typedef typename iterator_traits<_II>::iterator_category _Category;
         :	      const bool __simple = (__is_trivial(_ValueTypeI)
         :	                             && __is_pointer<_II>::__value
         :	                             && __is_pointer<_OI>::__value
         :	                             && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    0.00 :	  430545:       movb   $0x1,-0x1(%rbp)
         :
         :	      return std::__copy_move<_IsMove, __simple,
         :	                              _Category>::__copy_m(__first, __last, __result);
    0.00 :	  430549:       mov    -0x28(%rbp),%rdx
    0.00 :	  43054d:       mov    -0x20(%rbp),%rcx
    0.00 :	  430551:       mov    -0x18(%rbp),%rax
    0.00 :	  430555:       mov    %rcx,%rsi
  100.00 :	  430558:       mov    %rax,%rdi
    0.00 :	  43055b:       callq  430eab <LLcol* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<LLcol>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    0.00 :	  430560:       leaveq
    0.00 :	  430561:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042920a <double* std::__copy_move_a<true, double*, double*>(double*, double*, double*)>:
         :	_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_():
         :	        }
         :	    };
         :
         :	  template<bool _IsMove, typename _II, typename _OI>
         :	    inline _OI
         :	    __copy_move_a(_II __first, _II __last, _OI __result)
    0.00 :	  42920a:       push   %rbp
    0.00 :	  42920b:       mov    %rsp,%rbp
    0.00 :	  42920e:       sub    $0x30,%rsp
    0.00 :	  429212:       mov    %rdi,-0x18(%rbp)
  100.00 :	  429216:       mov    %rsi,-0x20(%rbp)
    0.00 :	  42921a:       mov    %rdx,-0x28(%rbp)
         :	      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
         :	      typedef typename iterator_traits<_II>::iterator_category _Category;
         :	      const bool __simple = (__is_trivial(_ValueTypeI)
         :	                             && __is_pointer<_II>::__value
         :	                             && __is_pointer<_OI>::__value
         :	                             && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    0.00 :	  42921e:       movb   $0x1,-0x1(%rbp)
         :
         :	      return std::__copy_move<_IsMove, __simple,
         :	                              _Category>::__copy_m(__first, __last, __result);
    0.00 :	  429222:       mov    -0x28(%rbp),%rdx
    0.00 :	  429226:       mov    -0x20(%rbp),%rcx
    0.00 :	  42922a:       mov    -0x18(%rbp),%rax
    0.00 :	  42922e:       mov    %rcx,%rsi
    0.00 :	  429231:       mov    %rax,%rdi
    0.00 :	  429234:       callq  429355 <double* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<double>(double const*, double const*, double*)>
         :	    }
    0.00 :	  429239:       leaveq
    0.00 :	  42923a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430db8 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > std::__copy_move_backward_a2<true, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_():
         :	                                                                 __result);
         :	    }
         :
         :	  template<bool _IsMove, typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    0.00 :	  430db8:       push   %rbp
    0.00 :	  430db9:       mov    %rsp,%rbp
    0.00 :	  430dbc:       push   %r12
    0.00 :	  430dbe:       push   %rbx
    0.00 :	  430dbf:       sub    $0x40,%rsp
    0.00 :	  430dc3:       mov    %rdi,-0x30(%rbp)
    0.00 :	  430dc7:       mov    %rsi,-0x40(%rbp)
    0.00 :	  430dcb:       mov    %rdx,-0x50(%rbp)
         :	    {
         :	      return _BI2(std::__copy_move_backward_a<_IsMove>
         :	                  (std::__niter_base(__first), std::__niter_base(__last),
         :	                   std::__niter_base(__result)));
    0.00 :	  430dcf:       mov    -0x50(%rbp),%rax
  100.00 :	  430dd3:       mov    %rax,%rdi
    0.00 :	  430dd6:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430ddb:       mov    %rax,%r12
    0.00 :	  430dde:       mov    -0x40(%rbp),%rax
    0.00 :	  430de2:       mov    %rax,%rdi
    0.00 :	  430de5:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430dea:       mov    %rax,%rbx
    0.00 :	  430ded:       mov    -0x30(%rbp),%rax
    0.00 :	  430df1:       mov    %rax,%rdi
    0.00 :	  430df4:       callq  430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  430df9:       mov    %r12,%rdx
    0.00 :	  430dfc:       mov    %rbx,%rsi
    0.00 :	  430dff:       mov    %rax,%rdi
    0.00 :	  430e02:       callq  431488 <LLcol* std::__copy_move_backward_a<true, LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>
    0.00 :	  430e07:       mov    %rax,-0x18(%rbp)
    0.00 :	  430e0b:       lea    -0x18(%rbp),%rdx
    0.00 :	  430e0f:       lea    -0x20(%rbp),%rax
    0.00 :	  430e13:       mov    %rdx,%rsi
    0.00 :	  430e16:       mov    %rax,%rdi
    0.00 :	  430e19:       callq  42e1a2 <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol* const&)>
    0.00 :	  430e1e:       mov    -0x20(%rbp),%rax
         :	    }
    0.00 :	  430e22:       add    $0x40,%rsp
    0.00 :	  430e26:       pop    %rbx
    0.00 :	  430e27:       pop    %r12
    0.00 :	  430e29:       pop    %rbp
    0.00 :	  430e2a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431488 <LLcol* std::__copy_move_backward_a<true, LLcol*, LLcol*>(LLcol*, LLcol*, LLcol*)>:
         :	_ZSt22__copy_move_backward_aILb1EP5LLcolS1_ET1_T0_S3_S2_():
         :	        }
         :	    };
         :
         :	  template<bool _IsMove, typename _BI1, typename _BI2>
         :	    inline _BI2
         :	    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    0.00 :	  431488:       push   %rbp
    0.00 :	  431489:       mov    %rsp,%rbp
    0.00 :	  43148c:       sub    $0x30,%rsp
    0.00 :	  431490:       mov    %rdi,-0x18(%rbp)
    0.00 :	  431494:       mov    %rsi,-0x20(%rbp)
    0.00 :	  431498:       mov    %rdx,-0x28(%rbp)
         :	      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
         :	      typedef typename iterator_traits<_BI1>::iterator_category _Category;
         :	      const bool __simple = (__is_trivial(_ValueType1)
         :	                             && __is_pointer<_BI1>::__value
         :	                             && __is_pointer<_BI2>::__value
         :	                             && __are_same<_ValueType1, _ValueType2>::__value);
    0.00 :	  43149c:       movb   $0x1,-0x1(%rbp)
         :
         :	      return std::__copy_move_backward<_IsMove, __simple,
         :	                                       _Category>::__copy_move_b(__first,
         :	                                                                 __last,
         :	                                                                 __result);
    0.00 :	  4314a0:       mov    -0x28(%rbp),%rdx
    0.00 :	  4314a4:       mov    -0x20(%rbp),%rcx
    0.00 :	  4314a8:       mov    -0x18(%rbp),%rax
    0.00 :	  4314ac:       mov    %rcx,%rsi
    0.00 :	  4314af:       mov    %rax,%rdi
    0.00 :	  4314b2:       callq  4317ee <LLcol* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<LLcol>(LLcol const*, LLcol const*, LLcol*)>
         :	    }
    0.00 :	  4314b7:       leaveq
  100.00 :	  4314b8:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f866 <std::__detail::_Adaptor<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, double>::operator()()>:
         :	_ZNSt8__detail8_AdaptorISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEdEclEv():
         :	         * Converts a value generated by the adapted random number generator
         :	         * into a value in the input domain for the dependent random number
         :	         * distribution.
         :	         */
         :	        _DInputType
         :	        operator()()
    0.00 :	  42f866:       push   %rbp
    0.00 :	  42f867:       mov    %rsp,%rbp
    0.00 :	  42f86a:       sub    $0x10,%rsp
    0.00 :	  42f86e:       mov    %rdi,-0x8(%rbp)
         :	        {
         :	          return std::generate_canonical<_DInputType,
         :	                                    std::numeric_limits<_DInputType>::digits,
         :	                                    _Engine>(_M_g);
    0.00 :	  42f872:       mov    -0x8(%rbp),%rax
    0.00 :	  42f876:       mov    (%rax),%rax
    0.00 :	  42f879:       mov    %rax,%rdi
    0.00 :	  42f87c:       callq  430682 <double std::generate_canonical<double, 53ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    0.00 :	  42f881:       vmovsd %xmm0,-0x10(%rbp)
    0.00 :	  42f886:       mov    -0x10(%rbp),%rax
         :	        }
    0.00 :	  42f88a:       mov    %rax,-0x10(%rbp)
    0.00 :	  42f88e:       vmovsd -0x10(%rbp),%xmm0
  100.00 :	  42f893:       leaveq
    0.00 :	  42f894:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000431555 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
         :	_ZNSt8__detail5__modImLm2147483647ELm16807ELm0EEET_S1_():
         :	        }
         :	      };
         :
         :	    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
         :	      inline _Tp
         :	      __mod(_Tp __x)
    0.00 :	  431555:       push   %rbp
    0.00 :	  431556:       mov    %rsp,%rbp
    0.00 :	  431559:       sub    $0x10,%rsp
    0.00 :	  43155d:       mov    %rdi,-0x8(%rbp)
         :	      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }
    0.00 :	  431561:       mov    -0x8(%rbp),%rax
    0.00 :	  431565:       mov    %rax,%rdi
    0.00 :	  431568:       callq  4318ac <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
    0.00 :	  43156d:       leaveq
  100.00 :	  43156e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ea06 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::__distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, std::random_access_iterator_tag)>:
         :	_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag():
         :	      return __n;
         :	    }
         :
         :	  template<typename _RandomAccessIterator>
         :	    inline typename iterator_traits<_RandomAccessIterator>::difference_type
         :	    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    0.00 :	  42ea06:       push   %rbp
    0.00 :	  42ea07:       mov    %rsp,%rbp
    0.00 :	  42ea0a:       sub    $0x20,%rsp
    0.00 :	  42ea0e:       mov    %rdi,-0x10(%rbp)
    0.00 :	  42ea12:       mov    %rsi,-0x20(%rbp)
         :	               random_access_iterator_tag)
         :	    {
         :	      // concept requirements
         :	      __glibcxx_function_requires(_RandomAccessIteratorConcept<
         :	                                  _RandomAccessIterator>)
         :	      return __last - __first;
  100.00 :	  42ea16:       lea    -0x10(%rbp),%rdx
    0.00 :	  42ea1a:       lea    -0x20(%rbp),%rax
    0.00 :	  42ea1e:       mov    %rdx,%rsi
    0.00 :	  42ea21:       mov    %rax,%rdi
    0.00 :	  42ea24:       callq  42f8c4 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type __gnu_cxx::operator-<double*, std::vector<double, std::allocator<double> > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
         :	    }
    0.00 :	  42ea29:       leaveq
    0.00 :	  42ea2a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e2e2 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>:
         :	_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_():
         :	    }
         :
         :	  /// This is a helper function for the sort routine.
         :	  template<typename _RandomAccessIterator, typename _Compare>
         :	    void
         :	    __final_insertion_sort(_RandomAccessIterator __first,
    0.00 :	  42e2e2:       push   %rbp
    0.00 :	  42e2e3:       mov    %rsp,%rbp
    0.00 :	  42e2e6:       sub    $0x30,%rsp
  100.00 :	  42e2ea:       mov    %rdi,-0x20(%rbp)
    0.00 :	  42e2ee:       mov    %rsi,-0x30(%rbp)
    0.00 :	  42e2f2:       mov    %rdx,-0x28(%rbp)
         :	                           _RandomAccessIterator __last, _Compare __comp)
         :	    {
         :	      if (__last - __first > int(_S_threshold))
    0.00 :	  42e2f6:       lea    -0x20(%rbp),%rdx
    0.00 :	  42e2fa:       lea    -0x30(%rbp),%rax
    0.00 :	  42e2fe:       mov    %rdx,%rsi
    0.00 :	  42e301:       mov    %rax,%rdi
    0.00 :	  42e304:       callq  42e1fa <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::difference_type __gnu_cxx::operator-<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > const&)>
    0.00 :	  42e309:       cmp    $0x10,%rax
    0.00 :	  42e30d:       setg   %al
    0.00 :	  42e310:       test   %al,%al
    0.00 :	  42e312:       je     42e375 <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0x93>
         :	        {
         :	          std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
    0.00 :	  42e314:       movq   $0x10,-0x10(%rbp)
    0.00 :	  42e31c:       lea    -0x10(%rbp),%rdx
    0.00 :	  42e320:       lea    -0x20(%rbp),%rax
    0.00 :	  42e324:       mov    %rdx,%rsi
    0.00 :	  42e327:       mov    %rax,%rdi
    0.00 :	  42e32a:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
    0.00 :	  42e32f:       mov    %rax,%rcx
    0.00 :	  42e332:       mov    -0x28(%rbp),%rdx
    0.00 :	  42e336:       mov    -0x20(%rbp),%rax
    0.00 :	  42e33a:       mov    %rcx,%rsi
    0.00 :	  42e33d:       mov    %rax,%rdi
    0.00 :	  42e340:       callq  42f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	          std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
         :	                                          __comp);
    0.00 :	  42e345:       movq   $0x10,-0x8(%rbp)
    0.00 :	  42e34d:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e351:       lea    -0x20(%rbp),%rax
    0.00 :	  42e355:       mov    %rdx,%rsi
    0.00 :	  42e358:       mov    %rax,%rdi
    0.00 :	  42e35b:       callq  42d0fc <__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >::operator+(long const&) const>
         :	          std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
    0.00 :	  42e360:       mov    -0x28(%rbp),%rdx
    0.00 :	  42e364:       mov    -0x30(%rbp),%rcx
    0.00 :	  42e368:       mov    %rcx,%rsi
    0.00 :	  42e36b:       mov    %rax,%rdi
    0.00 :	  42e36e:       callq  42f453 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
    0.00 :	  42e373:       jmp    42e39e <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xbc>
         :	        }
         :	      else
         :	        std::__insertion_sort(__first, __last, __comp);
    0.00 :	  42e375:       mov    -0x28(%rbp),%rdx
    0.00 :	  42e379:       mov    -0x30(%rbp),%rcx
    0.00 :	  42e37d:       mov    -0x20(%rbp),%rax
    0.00 :	  42e381:       mov    %rcx,%rsi
    0.00 :	  42e384:       mov    %rax,%rdi
    0.00 :	  42e387:       callq  42f304 <void std::__insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))>
         :	    }
    0.00 :	  42e38c:       jmp    42e39e <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&)>(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, bool (*)(LLcol const&, LLcol const&))+0xbc>
    0.00 :	  42e38e:       mov    %rax,%rdi
    0.00 :	  42e391:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42e396:       mov    %rax,%rdi
    0.00 :	  42e399:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42e39e:       leaveq
    0.00 :	  42e39f:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>:
         :	_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_():
         :	   *  This function is not a part of the C++ standard but is syntactic
         :	   *  sugar for internal library use only.
         :	  */
         :	  template<typename _Iter>
         :	    inline typename iterator_traits<_Iter>::iterator_category
         :	    __iterator_category(const _Iter&)
  100.00 :	  42e995:       push   %rbp
    0.00 :	  42e996:       mov    %rsp,%rbp
    0.00 :	  42e999:       mov    %rdi,-0x8(%rbp)
         :	    { return typename iterator_traits<_Iter>::iterator_category(); }
    0.00 :	  42e99d:       pop    %rbp
    0.00 :	  42e99e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000428750 <std::_Miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >::iterator_type std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
         :	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEENSt11_Miter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Miter_base<_Iterator>::iterator_type
         :	    __miter_base(_Iterator __it)
    0.00 :	  428750:       push   %rbp
    0.00 :	  428751:       mov    %rsp,%rbp
    0.00 :	  428754:       sub    $0x10,%rsp
    0.00 :	  428758:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Miter_base<_Iterator>::_S_base(__it); }
    0.00 :	  42875c:       mov    -0x10(%rbp),%rax
  100.00 :	  428760:       mov    %rax,%rdi
    0.00 :	  428763:       callq  428e01 <std::_Iter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, false>::_S_base(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    0.00 :	  428768:       leaveq
    0.00 :	  428769:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000430517 <std::_Niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >::iterator_type std::__niter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > > >(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>:
         :	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP5LLcolSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_():
         :	    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
         :	    { };
         :
         :	  template<typename _Iterator>
         :	    inline typename _Niter_base<_Iterator>::iterator_type
         :	    __niter_base(_Iterator __it)
    0.00 :	  430517:       push   %rbp
    0.00 :	  430518:       mov    %rsp,%rbp
    0.00 :	  43051b:       sub    $0x10,%rsp
    0.00 :	  43051f:       mov    %rdi,-0x10(%rbp)
         :	    { return std::_Niter_base<_Iterator>::_S_base(__it); }
    0.00 :	  430523:       mov    -0x10(%rbp),%rax
    0.00 :	  430527:       mov    %rax,%rdi
    0.00 :	  43052a:       callq  430e8e <std::_Iter_base<__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >, true>::_S_base(__gnu_cxx::__normal_iterator<LLcol*, std::vector<LLcol, std::allocator<LLcol> > >)>
    0.00 :	  43052f:       leaveq
  100.00 :	  430530:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004305f6 <void std::__uninitialized_default_n<LLcol*, unsigned long>(LLcol*, unsigned long)>:
         :	_ZSt25__uninitialized_default_nIP5LLcolmEvT_T0_():
         :
         :	  // __uninitialized_default_n
         :	  // Fills [first, first + n) with n default constructed value_type(s).
         :	  template<typename _ForwardIterator, typename _Size>
         :	    inline void
         :	    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    0.00 :	  4305f6:       push   %rbp
    0.00 :	  4305f7:       mov    %rsp,%rbp
    0.00 :	  4305fa:       sub    $0x10,%rsp
    0.00 :	  4305fe:       mov    %rdi,-0x8(%rbp)
    0.00 :	  430602:       mov    %rsi,-0x10(%rbp)
         :	    {
         :	      typedef typename iterator_traits<_ForwardIterator>::value_type
         :	        _ValueType;
         :
         :	      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
    0.00 :	  430606:       mov    -0x10(%rbp),%rdx
    0.00 :	  43060a:       mov    -0x8(%rbp),%rax
    0.00 :	  43060e:       mov    %rdx,%rsi
    0.00 :	  430611:       mov    %rax,%rdi
    0.00 :	  430614:       callq  430f0e <void std::__uninitialized_default_n_1<true>::__uninit_default_n<LLcol*, unsigned long>(LLcol*, unsigned long)>
         :	        __uninit_default_n(__first, __n);
         :	    }
    0.00 :	  430619:       leaveq
  100.00 :	  43061a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d7af <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)>:
         :	_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEiEvRT_T0_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator, typename _Distance>
         :	    inline void
         :	    advance(_InputIterator& __i, _Distance __n)
    0.00 :	  42d7af:       push   %rbp
    0.00 :	  42d7b0:       mov    %rsp,%rbp
    0.00 :	  42d7b3:       push   %rbx
    0.00 :	  42d7b4:       sub    $0x38,%rsp
    0.00 :	  42d7b8:       mov    %rdi,-0x28(%rbp)
    0.00 :	  42d7bc:       mov    %esi,-0x2c(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __advance
         :	      typename iterator_traits<_InputIterator>::difference_type __d = __n;
    0.00 :	  42d7bf:       mov    -0x2c(%rbp),%eax
    0.00 :	  42d7c2:       cltq
    0.00 :	  42d7c4:       mov    %rax,-0x18(%rbp)
         :	      std::__advance(__i, __d, std::__iterator_category(__i));
    0.00 :	  42d7c8:       mov    -0x28(%rbp),%rax
    0.00 :	  42d7cc:       mov    %rax,%rdi
    0.00 :	  42d7cf:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.00 :	  42d7d4:       mov    -0x18(%rbp),%rdx
    0.00 :	  42d7d8:       mov    -0x28(%rbp),%rax
    0.00 :	  42d7dc:       mov    %bl,(%rsp)
    0.00 :	  42d7df:       mov    %rdx,%rsi
    0.00 :	  42d7e2:       mov    %rax,%rdi
    0.00 :	  42d7e5:       callq  42e99f <void std::__advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, long, std::random_access_iterator_tag)>
         :	    }
    0.00 :	  42d7ea:       jmp    42d7f4 <void std::advance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, int>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >&, int)+0x45>
    0.00 :	  42d7ec:       mov    %rax,%rdi
    0.00 :	  42d7ef:       callq  41dda0 <_Unwind_Resume@plt>
  100.00 :	  42d7f4:       add    $0x38,%rsp
    0.00 :	  42d7f8:       pop    %rbx
    0.00 :	  42d7f9:       pop    %rbp
    0.00 :	  42d7fa:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f4b3 <std::allocator_traits<std::allocator<LLcol> >::select_on_container_copy_construction(std::allocator<LLcol> const&)>:
         :	_ZNSt16allocator_traitsISaI5LLcolEE37select_on_container_copy_constructionERKS1_():
         :	       *
         :	       *  Returns @c __rhs.select_on_container_copy_construction() if that
         :	       *  expression is well-formed, otherwise returns @a __rhs
         :	      */
         :	      static _Alloc
         :	      select_on_container_copy_construction(const _Alloc& __rhs)
    0.00 :	  42f4b3:       push   %rbp
    0.00 :	  42f4b4:       mov    %rsp,%rbp
    0.00 :	  42f4b7:       sub    $0x10,%rsp
    0.00 :	  42f4bb:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42f4bf:       mov    %rsi,-0x10(%rbp)
         :	      { return _S_select(__rhs); }
    0.00 :	  42f4c3:       mov    -0x8(%rbp),%rax
  100.00 :	  42f4c7:       mov    -0x10(%rbp),%rdx
    0.00 :	  42f4cb:       mov    %rdx,%rsi
    0.00 :	  42f4ce:       mov    %rax,%rdi
    0.00 :	  42f4d1:       callq  43047c <std::enable_if<!std::allocator_traits<std::allocator<LLcol> >::__select_helper<std::allocator<LLcol> const>::value, std::allocator<LLcol> const>::type std::allocator_traits<std::allocator<LLcol> >::_S_select<std::allocator<LLcol> const>(std::allocator<LLcol> const&)>
    0.00 :	  42f4d6:       mov    -0x8(%rbp),%rax
    0.00 :	  42f4da:       leaveq
    0.00 :	  42f4db:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>:
         :	_ZNSt16allocator_traitsISaIiEE9constructIiIRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_():
         :	       *  if that expression is well-formed, otherwise uses placement-new
         :	       *  to construct an object of type @a _Tp at location @a __p from the
         :	       *  arguments @a __args...
         :	      */
         :	      template<typename _Tp, typename... _Args>
         :	        static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    0.00 :	  422904:       push   %rbp
    0.00 :	  422905:       mov    %rsp,%rbp
    0.00 :	  422908:       sub    $0x20,%rsp
    0.00 :	  42290c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  422910:       mov    %rsi,-0x10(%rbp)
    0.00 :	  422914:       mov    %rdx,-0x18(%rbp)
         :	        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
         :	        { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    0.00 :	  422918:       mov    -0x18(%rbp),%rax
  100.00 :	  42291c:       mov    %rax,%rdi
    0.00 :	  42291f:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  422924:       mov    %rax,%rdx
    0.00 :	  422927:       mov    -0x10(%rbp),%rcx
    0.00 :	  42292b:       mov    -0x8(%rbp),%rax
    0.00 :	  42292f:       mov    %rcx,%rsi
    0.00 :	  422932:       mov    %rax,%rdi
    0.00 :	  422935:       callq  424fee <std::enable_if<std::allocator_traits<std::allocator<int> >::__construct_helper<int<int const&> >::value, void>::type std::allocator_traits<std::allocator<int> >::_S_construct<int, int const&>(std::allocator<int>&, int*, int const&)>
    0.00 :	  42293a:       leaveq
    0.00 :	  42293b:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042504b <std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const&)>:
         :	_ZNSt16allocator_traitsISaIiEE37select_on_container_copy_constructionERKS0_():
         :	       *
         :	       *  Returns @c __rhs.select_on_container_copy_construction() if that
         :	       *  expression is well-formed, otherwise returns @a __rhs
         :	      */
         :	      static _Alloc
         :	      select_on_container_copy_construction(const _Alloc& __rhs)
    0.00 :	  42504b:       push   %rbp
    0.00 :	  42504c:       mov    %rsp,%rbp
    0.00 :	  42504f:       sub    $0x10,%rsp
    0.00 :	  425053:       mov    %rdi,-0x8(%rbp)
    0.00 :	  425057:       mov    %rsi,-0x10(%rbp)
         :	      { return _S_select(__rhs); }
    0.00 :	  42505b:       mov    -0x8(%rbp),%rax
    0.00 :	  42505f:       mov    -0x10(%rbp),%rdx
    0.00 :	  425063:       mov    %rdx,%rsi
    0.00 :	  425066:       mov    %rax,%rdi
    0.00 :	  425069:       callq  426de1 <std::enable_if<!std::allocator_traits<std::allocator<int> >::__select_helper<std::allocator<int> const>::value, std::allocator<int> const>::type std::allocator_traits<std::allocator<int> >::_S_select<std::allocator<int> const>(std::allocator<int> const&)>
    0.00 :	  42506e:       mov    -0x8(%rbp),%rax
    0.00 :	  425072:       leaveq
  100.00 :	  425073:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d8c0 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)>:
         :	_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_():
         :	   *  For random access iterators, this uses their @c + and @c - operations
         :	   *  and are constant time.  For other %iterator classes they are linear time.
         :	  */
         :	  template<typename _InputIterator>
         :	    inline typename iterator_traits<_InputIterator>::difference_type
         :	    distance(_InputIterator __first, _InputIterator __last)
    0.00 :	  42d8c0:       push   %rbp
    0.00 :	  42d8c1:       mov    %rsp,%rbp
    0.00 :	  42d8c4:       push   %rbx
    0.00 :	  42d8c5:       sub    $0x48,%rsp
    0.00 :	  42d8c9:       mov    %rdi,-0x30(%rbp)
    0.00 :	  42d8cd:       mov    %rsi,-0x40(%rbp)
         :	    {
         :	      // concept requirements -- taken care of in __distance
         :	      return std::__distance(__first, __last,
         :	                             std::__iterator_category(__first));
    0.00 :	  42d8d1:       lea    -0x30(%rbp),%rax
    0.00 :	  42d8d5:       mov    %rax,%rdi
    0.00 :	  42d8d8:       callq  42e995 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > const&)>
    0.00 :	  42d8dd:       mov    -0x40(%rbp),%rdx
    0.00 :	  42d8e1:       mov    -0x30(%rbp),%rax
    0.00 :	  42d8e5:       mov    %bl,(%rsp)
  100.00 :	  42d8e8:       mov    %rdx,%rsi
    0.00 :	  42d8eb:       mov    %rax,%rdi
    0.00 :	  42d8ee:       callq  42ea06 <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::__distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, std::random_access_iterator_tag)>
    0.00 :	  42d8f3:       jmp    42d8fd <std::iterator_traits<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >::difference_type std::distance<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >)+0x3d>
    0.00 :	  42d8f5:       mov    %rax,%rdi
    0.00 :	  42d8f8:       callq  41dda0 <_Unwind_Resume@plt>
         :	    }
    0.00 :	  42d8fd:       add    $0x48,%rsp
    0.00 :	  42d901:       pop    %rbx
    0.00 :	  42d902:       pop    %rbp
    0.00 :	  42d903:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>:
         :	_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE():
         :	   *
         :	   *  This function is used to implement "perfect forwarding".
         :	   */
         :	  template<typename _Tp>
         :	    constexpr _Tp&&
         :	    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    0.00 :	  420751:       push   %rbp
    0.00 :	  420752:       mov    %rsp,%rbp
    0.00 :	  420755:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<_Tp&&>(__t); }
    0.00 :	  420759:       mov    -0x8(%rbp),%rax
  100.00 :	  42075d:       pop    %rbp
    0.00 :	  42075e:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424228 <std::less<int>::operator()(int const&, int const&) const>:
         :	_ZNKSt4lessIiEclERKiS2_():
         :	  /// One of the @link comparison_functors comparison functors@endlink.
         :	  template<typename _Tp>
         :	    struct less : public binary_function<_Tp, _Tp, bool>
         :	    {
         :	      bool
         :	      operator()(const _Tp& __x, const _Tp& __y) const
    0.00 :	  424228:       push   %rbp
    0.00 :	  424229:       mov    %rsp,%rbp
    0.00 :	  42422c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  424230:       mov    %rsi,-0x10(%rbp)
    0.00 :	  424234:       mov    %rdx,-0x18(%rbp)
         :	      { return __x < __y; }
    0.00 :	  424238:       mov    -0x10(%rbp),%rax
    0.00 :	  42423c:       mov    (%rax),%edx
  100.00 :	  42423e:       mov    -0x18(%rbp),%rax
    0.00 :	  424242:       mov    (%rax),%eax
    0.00 :	  424244:       cmp    %eax,%edx
    0.00 :	  424246:       setl   %al
    0.00 :	  424249:       pop    %rbp
    0.00 :	  42424a:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f2f6 <std::remove_reference<LLcol&>::type&& std::move<LLcol&>(LLcol&)>:
         :	_ZSt4moveIR5LLcolEONSt16remove_referenceIT_E4typeEOS3_():
         :	   *  @param  __t  A thing of arbitrary type.
         :	   *  @return The parameter cast to an rvalue-reference to allow moving it.
         :	  */
         :	  template<typename _Tp>
         :	    constexpr typename std::remove_reference<_Tp>::type&&
         :	    move(_Tp&& __t) noexcept
    0.00 :	  42f2f6:       push   %rbp
  100.00 :	  42f2f7:       mov    %rsp,%rbp
    0.00 :	  42f2fa:       mov    %rdi,-0x8(%rbp)
         :	    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    0.00 :	  42f2fe:       mov    -0x8(%rbp),%rax
    0.00 :	  42f302:       pop    %rbp
    0.00 :	  42f303:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d774 <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
         :	_ZNSt25uniform_real_distributionIdEclISt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEEdRT_():
         :	      /**
         :	       * @brief Generating functions.
         :	       */
         :	      template<typename _UniformRandomNumberGenerator>
         :	        result_type
         :	        operator()(_UniformRandomNumberGenerator& __urng)
    0.00 :	  42d774:       push   %rbp
    0.00 :	  42d775:       mov    %rsp,%rbp
    0.00 :	  42d778:       sub    $0x20,%rsp
    0.00 :	  42d77c:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42d780:       mov    %rsi,-0x10(%rbp)
         :	        { return this->operator()(__urng, _M_param); }
    0.00 :	  42d784:       mov    -0x8(%rbp),%rdx
    0.00 :	  42d788:       mov    -0x10(%rbp),%rcx
  100.00 :	  42d78c:       mov    -0x8(%rbp),%rax
    0.00 :	  42d790:       mov    %rcx,%rsi
    0.00 :	  42d793:       mov    %rax,%rdi
    0.00 :	  42d796:       callq  42e8fe <double std::uniform_real_distribution<double>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_real_distribution<double>::param_type const&)>
    0.00 :	  42d79b:       vmovsd %xmm0,-0x18(%rbp)
    0.00 :	  42d7a0:       mov    -0x18(%rbp),%rax
    0.00 :	  42d7a4:       mov    %rax,-0x18(%rbp)
    0.00 :	  42d7a8:       vmovsd -0x18(%rbp),%xmm0
    0.00 :	  42d7ad:       leaveq
    0.00 :	  42d7ae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>:
         :	_ZNKSt6vectorI5LLcolSaIS0_EE3endEv():
         :	       *  Returns a read-only (constant) iterator that points one past
         :	       *  the last element in the %vector.  Iteration is done in
         :	       *  ordinary element order.
         :	       */
         :	      const_iterator
         :	      end() const _GLIBCXX_NOEXCEPT
    0.00 :	  42e4d0:       push   %rbp
    0.00 :	  42e4d1:       mov    %rsp,%rbp
    0.00 :	  42e4d4:       sub    $0x20,%rsp
    0.00 :	  42e4d8:       mov    %rdi,-0x18(%rbp)
         :	      { return const_iterator(this->_M_impl._M_finish); }
    0.00 :	  42e4dc:       mov    -0x18(%rbp),%rax
    0.00 :	  42e4e0:       mov    0x8(%rax),%rax
    0.00 :	  42e4e4:       mov    %rax,-0x8(%rbp)
    0.00 :	  42e4e8:       lea    -0x8(%rbp),%rdx
    0.00 :	  42e4ec:       lea    -0x10(%rbp),%rax
    0.00 :	  42e4f0:       mov    %rdx,%rsi
    0.00 :	  42e4f3:       mov    %rax,%rdi
  100.00 :	  42e4f6:       callq  42f5a0 <__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >::__normal_iterator(LLcol const* const&)>
    0.00 :	  42e4fb:       mov    -0x10(%rbp),%rax
    0.00 :	  42e4ff:       leaveq
    0.00 :	  42e500:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042d1bc <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)>:
         :	_ZNSt6vectorI5LLcolSaIS0_EEC2ERKS2_():
         :	       *  The newly-created %vector uses a copy of the allocation
         :	       *  object used by @a __x.  All the elements of @a __x are copied,
         :	       *  but any extra memory in
         :	       *  @a __x (for fast expansion) will not be copied.
         :	       */
         :	      vector(const vector& __x)
    0.00 :	  42d1bc:       push   %rbp
    0.00 :	  42d1bd:       mov    %rsp,%rbp
    0.00 :	  42d1c0:       push   %r13
    0.00 :	  42d1c2:       push   %r12
    0.00 :	  42d1c4:       push   %rbx
    0.00 :	  42d1c5:       sub    $0x28,%rsp
    0.00 :	  42d1c9:       mov    %rdi,-0x38(%rbp)
    0.00 :	  42d1cd:       mov    %rsi,-0x40(%rbp)
         :	      : _Base(__x.size(),
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42d1d1:       mov    -0x40(%rbp),%rax
  100.00 :	  42d1d5:       mov    %rax,%rdi
    0.00 :	  42d1d8:       callq  42e3ca <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator() const>
    0.00 :	  42d1dd:       mov    %rax,%rdx
    0.00 :	  42d1e0:       lea    -0x21(%rbp),%rax
    0.00 :	  42d1e4:       mov    %rdx,%rsi
    0.00 :	  42d1e7:       mov    %rax,%rdi
    0.00 :	  42d1ea:       callq  42e3a0 <__gnu_cxx::__alloc_traits<std::allocator<LLcol> >::_S_select_on_copy(std::allocator<LLcol> const&)>
    0.00 :	  42d1ef:       mov    -0x40(%rbp),%rax
    0.00 :	  42d1f3:       mov    %rax,%rdi
    0.00 :	  42d1f6:       callq  42d016 <std::vector<LLcol, std::allocator<LLcol> >::size() const>
    0.00 :	  42d1fb:       mov    %rax,%rcx
    0.00 :	  42d1fe:       mov    -0x38(%rbp),%rax
    0.00 :	  42d202:       lea    -0x21(%rbp),%rdx
    0.00 :	  42d206:       mov    %rcx,%rsi
    0.00 :	  42d209:       mov    %rax,%rdi
    0.00 :	  42d20c:       callq  42e3f2 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_Vector_base(unsigned long, std::allocator<LLcol> const&)>
    0.00 :	  42d211:       lea    -0x21(%rbp),%rax
    0.00 :	  42d215:       mov    %rax,%rdi
    0.00 :	  42d218:       callq  42d632 <std::allocator<LLcol>::~allocator()>
         :	      { this->_M_impl._M_finish =
         :	          std::__uninitialized_copy_a(__x.begin(), __x.end(),
         :	                                      this->_M_impl._M_start,
         :	                                      _M_get_Tp_allocator());
    0.00 :	  42d21d:       mov    -0x38(%rbp),%rax
    0.00 :	  42d221:       mov    %rax,%rdi
    0.00 :	  42d224:       callq  42e502 <std::_Vector_base<LLcol, std::allocator<LLcol> >::_M_get_Tp_allocator()>
    0.00 :	  42d229:       mov    %rax,%r13
    0.00 :	  42d22c:       mov    -0x38(%rbp),%rax
    0.00 :	  42d230:       mov    (%rax),%r12
    0.00 :	  42d233:       mov    -0x40(%rbp),%rax
    0.00 :	  42d237:       mov    %rax,%rdi
    0.00 :	  42d23a:       callq  42e4d0 <std::vector<LLcol, std::allocator<LLcol> >::end() const>
    0.00 :	  42d23f:       mov    %rax,%rbx
    0.00 :	  42d242:       mov    -0x40(%rbp),%rax
    0.00 :	  42d246:       mov    %rax,%rdi
    0.00 :	  42d249:       callq  42e4a0 <std::vector<LLcol, std::allocator<LLcol> >::begin() const>
    0.00 :	  42d24e:       mov    %r13,%rcx
    0.00 :	  42d251:       mov    %r12,%rdx
    0.00 :	  42d254:       mov    %rbx,%rsi
    0.00 :	  42d257:       mov    %rax,%rdi
    0.00 :	  42d25a:       callq  42e510 <LLcol* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, LLcol>(__gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, __gnu_cxx::__normal_iterator<LLcol const*, std::vector<LLcol, std::allocator<LLcol> > >, LLcol*, std::allocator<LLcol>&)>
         :	      { this->_M_impl._M_finish =
    0.00 :	  42d25f:       mov    -0x38(%rbp),%rdx
    0.00 :	  42d263:       mov    %rax,0x8(%rdx)
    0.00 :	  42d267:       jmp    42d29d <std::vector<LLcol, std::allocator<LLcol> >::vector(std::vector<LLcol, std::allocator<LLcol> > const&)+0xe1>
    0.00 :	  42d269:       mov    %rax,%rbx
         :	        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    0.00 :	  42d26c:       lea    -0x21(%rbp),%rax
    0.00 :	  42d270:       mov    %rax,%rdi
    0.00 :	  42d273:       callq  42d632 <std::allocator<LLcol>::~allocator()>
    0.00 :	  42d278:       mov    %rbx,%rax
    0.00 :	  42d27b:       mov    %rax,%rdi
    0.00 :	  42d27e:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  42d283:       mov    %rax,%rbx
    0.00 :	  42d286:       mov    -0x38(%rbp),%rax
    0.00 :	  42d28a:       mov    %rax,%rdi
    0.00 :	  42d28d:       callq  42e450 <std::_Vector_base<LLcol, std::allocator<LLcol> >::~_Vector_base()>
    0.00 :	  42d292:       mov    %rbx,%rax
    0.00 :	  42d295:       mov    %rax,%rdi
    0.00 :	  42d298:       callq  41dda0 <_Unwind_Resume@plt>
         :	      }
    0.00 :	  42d29d:       add    $0x28,%rsp
    0.00 :	  42d2a1:       pop    %rbx
    0.00 :	  42d2a2:       pop    %r12
    0.00 :	  42d2a4:       pop    %r13
    0.00 :	  42d2a6:       pop    %rbp
    0.00 :	  42d2a7:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004203ee <std::vector<LLord, std::allocator<LLord> >::~vector()>:
         :	_ZNSt6vectorI5LLordSaIS0_EED2Ev():
         :	       *  The dtor only erases the elements, and note that if the
         :	       *  elements themselves are pointers, the pointed-to memory is
         :	       *  not touched in any way.  Managing the pointer is the user's
         :	       *  responsibility.
         :	       */
         :	      ~vector() _GLIBCXX_NOEXCEPT
    0.00 :	  4203ee:       push   %rbp
    0.00 :	  4203ef:       mov    %rsp,%rbp
    0.00 :	  4203f2:       sub    $0x10,%rsp
    0.00 :	  4203f6:       mov    %rdi,-0x8(%rbp)
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  4203fa:       mov    -0x8(%rbp),%rax
    0.00 :	  4203fe:       mov    %rax,%rdi
    0.00 :	  420401:       callq  422052 <std::_Vector_base<LLord, std::allocator<LLord> >::_M_get_Tp_allocator()>
    0.00 :	  420406:       mov    %rax,%rdx
    0.00 :	  420409:       mov    -0x8(%rbp),%rax
    0.00 :	  42040d:       mov    0x8(%rax),%rcx
    0.00 :	  420411:       mov    -0x8(%rbp),%rax
    0.00 :	  420415:       mov    (%rax),%rax
         :	      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  420418:       mov    %rcx,%rsi
    0.00 :	  42041b:       mov    %rax,%rdi
    0.00 :	  42041e:       callq  422060 <void std::_Destroy<LLord*, LLord>(LLord*, LLord*, std::allocator<LLord>&)>
         :	                      _M_get_Tp_allocator()); }
    0.00 :	  420423:       mov    -0x8(%rbp),%rax
  100.00 :	  420427:       mov    %rax,%rdi
    0.00 :	  42042a:       callq  422002 <std::_Vector_base<LLord, std::allocator<LLord> >::~_Vector_base()>
    0.00 :	  42042f:       leaveq
    0.00 :	  420430:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042058a <std::vector<double, std::allocator<double> >::begin()>:
         :	_ZNSt6vectorIdSaIdEE5beginEv():
         :	       *  Returns a read/write iterator that points to the first
         :	       *  element in the %vector.  Iteration is done in ordinary
         :	       *  element order.
         :	       */
         :	      iterator
         :	      begin() _GLIBCXX_NOEXCEPT
  100.00 :	  42058a:       push   %rbp
    0.00 :	  42058b:       mov    %rsp,%rbp
    0.00 :	  42058e:       sub    $0x20,%rsp
    0.00 :	  420592:       mov    %rdi,-0x18(%rbp)
         :	      { return iterator(this->_M_impl._M_start); }
    0.00 :	  420596:       mov    -0x18(%rbp),%rdx
    0.00 :	  42059a:       lea    -0x10(%rbp),%rax
    0.00 :	  42059e:       mov    %rdx,%rsi
    0.00 :	  4205a1:       mov    %rax,%rdi
    0.00 :	  4205a4:       callq  422496 <__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::__normal_iterator(double* const&)>
    0.00 :	  4205a9:       mov    -0x10(%rbp),%rax
    0.00 :	  4205ad:       leaveq
    0.00 :	  4205ae:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042ec5c <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)>:
         :	_ZNSt6vectorIdSaIdEE12emplace_backIIdEEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    0.00 :	  42ec5c:       push   %rbp
    0.00 :	  42ec5d:       mov    %rsp,%rbp
    0.00 :	  42ec60:       sub    $0x10,%rsp
    0.00 :	  42ec64:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42ec68:       mov    %rsi,-0x10(%rbp)
         :	      emplace_back(_Args&&... __args)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  42ec6c:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec70:       mov    0x8(%rax),%rdx
    0.00 :	  42ec74:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec78:       mov    0x10(%rax),%rax
    0.00 :	  42ec7c:       cmp    %rax,%rdx
    0.00 :	  42ec7f:       je     42ecbd <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)+0x61>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  42ec81:       mov    -0x10(%rbp),%rax
    0.00 :	  42ec85:       mov    %rax,%rdi
    0.00 :	  42ec88:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42ec8d:       mov    %rax,%rdx
    0.00 :	  42ec90:       mov    -0x8(%rbp),%rax
    0.00 :	  42ec94:       mov    0x8(%rax),%rcx
    0.00 :	  42ec98:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  42ec9c:       mov    %rcx,%rsi
    0.00 :	  42ec9f:       mov    %rax,%rdi
    0.00 :	  42eca2:       callq  42f964 <decltype (_S_construct({parm#1}, {parm#2}, (forward<double>)({parm#3}))) std::allocator_traits<std::allocator<double> >::construct<double, double>(std::allocator<double>&, double*, double&&)>
         :	            ++this->_M_impl._M_finish;
    0.00 :	  42eca7:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecab:       mov    0x8(%rax),%rax
    0.00 :	  42ecaf:       lea    0x8(%rax),%rdx
    0.00 :	  42ecb3:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecb7:       mov    %rdx,0x8(%rax)
  100.00 :	  42ecbb:       jmp    42ecdb <void std::vector<double, std::allocator<double> >::emplace_back<double>(double&&)+0x7f>
         :	          }
         :	        else
         :	          _M_emplace_back_aux(std::forward<_Args>(__args)...);
    0.00 :	  42ecbd:       mov    -0x10(%rbp),%rax
    0.00 :	  42ecc1:       mov    %rax,%rdi
    0.00 :	  42ecc4:       callq  42ec4e <double&& std::forward<double>(std::remove_reference<double>::type&)>
    0.00 :	  42ecc9:       mov    %rax,%rdx
    0.00 :	  42eccc:       mov    -0x8(%rbp),%rax
    0.00 :	  42ecd0:       mov    %rdx,%rsi
    0.00 :	  42ecd3:       mov    %rax,%rdi
    0.00 :	  42ecd6:       callq  42f99c <void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&)>
         :	      }
    0.00 :	  42ecdb:       leaveq
    0.00 :	  42ecdc:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041fdfa <std::vector<double, std::allocator<double> >::operator[](unsigned long)>:
         :	_ZNSt6vectorIdSaIdEEixEm():
         :	       *  Note that data access with this operator is unchecked and
         :	       *  out_of_range lookups are not defined. (For checked lookups
         :	       *  see at().)
         :	       */
         :	      reference
         :	      operator[](size_type __n)
    0.00 :	  41fdfa:       push   %rbp
    0.00 :	  41fdfb:       mov    %rsp,%rbp
    0.00 :	  41fdfe:       mov    %rdi,-0x8(%rbp)
    0.00 :	  41fe02:       mov    %rsi,-0x10(%rbp)
         :	      { return *(this->_M_impl._M_start + __n); }
    0.00 :	  41fe06:       mov    -0x8(%rbp),%rax
    0.00 :	  41fe0a:       mov    (%rax),%rax
    0.00 :	  41fe0d:       mov    -0x10(%rbp),%rdx
    0.00 :	  41fe11:       shl    $0x3,%rdx
  100.00 :	  41fe15:       add    %rdx,%rax
    0.00 :	  41fe18:       pop    %rbp
    0.00 :	  41fe19:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042293c <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)>:
         :	_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_():
         :
         :	#if __cplusplus >= 201103L
         :	  template<typename _Tp, typename _Alloc>
         :	    template<typename... _Args>
         :	      void
         :	      vector<_Tp, _Alloc>::
    0.00 :	  42293c:       push   %rbp
    0.00 :	  42293d:       mov    %rsp,%rbp
    0.00 :	  422940:       push   %rbx
    0.00 :	  422941:       sub    $0x38,%rsp
    0.00 :	  422945:       mov    %rdi,-0x38(%rbp)
    0.00 :	  422949:       mov    %rsi,-0x40(%rbp)
         :	      _M_emplace_back_aux(_Args&&... __args)
         :	      {
         :	        const size_type __len =
         :	          _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
    0.00 :	  42294d:       mov    -0x38(%rbp),%rax
    0.00 :	  422951:       mov    $0x433a5f,%edx
    0.00 :	  422956:       mov    $0x1,%esi
    0.00 :	  42295b:       mov    %rax,%rdi
    0.00 :	  42295e:       callq  4235ba <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const>
    0.00 :	  422963:       mov    %rax,-0x20(%rbp)
         :	        pointer __new_start(this->_M_allocate(__len));
    0.00 :	  422967:       mov    -0x38(%rbp),%rax
    0.00 :	  42296b:       mov    -0x20(%rbp),%rdx
  100.00 :	  42296f:       mov    %rdx,%rsi
    0.00 :	  422972:       mov    %rax,%rdi
    0.00 :	  422975:       callq  423684 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    0.00 :	  42297a:       mov    %rax,-0x28(%rbp)
         :	        pointer __new_finish(__new_start);
    0.00 :	  42297e:       mov    -0x28(%rbp),%rax
    0.00 :	  422982:       mov    %rax,-0x18(%rbp)
         :	        __try
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  422986:       mov    -0x40(%rbp),%rax
    0.00 :	  42298a:       mov    %rax,%rdi
    0.00 :	  42298d:       callq  420751 <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :	  422992:       mov    %rax,%rbx
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  422995:       mov    -0x38(%rbp),%rax
    0.00 :	  422999:       mov    %rax,%rdi
    0.00 :	  42299c:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
         :	                                     std::forward<_Args>(__args)...);
    0.00 :	  4229a1:       lea    0x0(,%rax,4),%rdx
    0.00 :	  4229a9:       mov    -0x28(%rbp),%rax
    0.00 :	  4229ad:       lea    (%rdx,%rax,1),%rcx
    0.00 :	  4229b1:       mov    -0x38(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    0.00 :	  4229b5:       mov    %rbx,%rdx
    0.00 :	  4229b8:       mov    %rcx,%rsi
    0.00 :	  4229bb:       mov    %rax,%rdi
    0.00 :	  4229be:       callq  422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
         :	            __new_finish = 0;
    0.00 :	  4229c3:       movq   $0x0,-0x18(%rbp)
         :
         :	            __new_finish
         :	              = std::__uninitialized_move_if_noexcept_a
         :	              (this->_M_impl._M_start, this->_M_impl._M_finish,
         :	               __new_start, _M_get_Tp_allocator());
    0.00 :	  4229cb:       mov    -0x38(%rbp),%rax
    0.00 :	  4229cf:       mov    %rax,%rdi
    0.00 :	  4229d2:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  4229d7:       mov    %rax,%rcx
    0.00 :	  4229da:       mov    -0x38(%rbp),%rax
    0.00 :	  4229de:       mov    0x8(%rax),%rsi
    0.00 :	  4229e2:       mov    -0x38(%rbp),%rax
    0.00 :	  4229e6:       mov    (%rax),%rax
         :	            __new_finish
    0.00 :	  4229e9:       mov    -0x28(%rbp),%rdx
    0.00 :	  4229ed:       mov    %rax,%rdi
    0.00 :	  4229f0:       callq  4236bc <int* std::__uninitialized_move_if_noexcept_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&)>
    0.00 :	  4229f5:       mov    %rax,-0x18(%rbp)
         :
         :	            ++__new_finish;
    0.00 :	  4229f9:       addq   $0x4,-0x18(%rbp)
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
         :	            _M_deallocate(__new_start, __len);
         :	            __throw_exception_again;
         :	          }
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         :	                      _M_get_Tp_allocator());
    0.00 :	  4229fe:       mov    -0x38(%rbp),%rax
    0.00 :	  422a02:       mov    %rax,%rdi
    0.00 :	  422a05:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  422a0a:       mov    %rax,%rdx
    0.00 :	  422a0d:       mov    -0x38(%rbp),%rax
    0.00 :	  422a11:       mov    0x8(%rax),%rcx
    0.00 :	  422a15:       mov    -0x38(%rbp),%rax
    0.00 :	  422a19:       mov    (%rax),%rax
         :	        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :	  422a1c:       mov    %rcx,%rsi
    0.00 :	  422a1f:       mov    %rax,%rdi
    0.00 :	  422a22:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	        _M_deallocate(this->_M_impl._M_start,
         :	                      this->_M_impl._M_end_of_storage
         :	                      - this->_M_impl._M_start);
    0.00 :	  422a27:       mov    -0x38(%rbp),%rax
    0.00 :	  422a2b:       mov    0x10(%rax),%rax
    0.00 :	  422a2f:       mov    %rax,%rdx
    0.00 :	  422a32:       mov    -0x38(%rbp),%rax
    0.00 :	  422a36:       mov    (%rax),%rax
    0.00 :	  422a39:       sub    %rax,%rdx
    0.00 :	  422a3c:       mov    %rdx,%rax
    0.00 :	  422a3f:       sar    $0x2,%rax
    0.00 :	  422a43:       mov    %rax,%rdx
    0.00 :	  422a46:       mov    -0x38(%rbp),%rax
    0.00 :	  422a4a:       mov    (%rax),%rcx
    0.00 :	  422a4d:       mov    -0x38(%rbp),%rax
         :	        _M_deallocate(this->_M_impl._M_start,
    0.00 :	  422a51:       mov    %rcx,%rsi
    0.00 :	  422a54:       mov    %rax,%rdi
    0.00 :	  422a57:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	        this->_M_impl._M_start = __new_start;
    0.00 :	  422a5c:       mov    -0x38(%rbp),%rax
    0.00 :	  422a60:       mov    -0x28(%rbp),%rdx
    0.00 :	  422a64:       mov    %rdx,(%rax)
         :	        this->_M_impl._M_finish = __new_finish;
    0.00 :	  422a67:       mov    -0x38(%rbp),%rax
    0.00 :	  422a6b:       mov    -0x18(%rbp),%rdx
    0.00 :	  422a6f:       mov    %rdx,0x8(%rax)
         :	        this->_M_impl._M_end_of_storage = __new_start + __len;
    0.00 :	  422a73:       mov    -0x20(%rbp),%rax
    0.00 :	  422a77:       lea    0x0(,%rax,4),%rdx
    0.00 :	  422a7f:       mov    -0x28(%rbp),%rax
    0.00 :	  422a83:       add    %rax,%rdx
    0.00 :	  422a86:       mov    -0x38(%rbp),%rax
    0.00 :	  422a8a:       mov    %rdx,0x10(%rax)
    0.00 :	  422a8e:       jmpq   422b1f <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1e3>
    0.00 :	  422a93:       mov    %rax,%rbx
         :	        __catch(...)
    0.00 :	  422a96:       callq  41dce0 <__cxa_end_catch@plt>
    0.00 :	  422a9b:       mov    %rbx,%rax
    0.00 :	  422a9e:       mov    %rax,%rdi
    0.00 :	  422aa1:       callq  41dda0 <_Unwind_Resume@plt>
    0.00 :	  422aa6:       mov    %rax,%rdi
    0.00 :	  422aa9:       callq  41dd40 <__cxa_begin_catch@plt>
         :	            if (!__new_finish)
    0.00 :	  422aae:       cmpq   $0x0,-0x18(%rbp)
    0.00 :	  422ab3:       jne    422ae1 <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1a5>
         :	              _Alloc_traits::destroy(this->_M_impl, __new_start + size());
    0.00 :	  422ab5:       mov    -0x38(%rbp),%rax
    0.00 :	  422ab9:       mov    %rax,%rdi
    0.00 :	  422abc:       callq  4212e6 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :	  422ac1:       lea    0x0(,%rax,4),%rdx
    0.00 :	  422ac9:       mov    -0x28(%rbp),%rax
    0.00 :	  422acd:       add    %rax,%rdx
    0.00 :	  422ad0:       mov    -0x38(%rbp),%rax
    0.00 :	  422ad4:       mov    %rdx,%rsi
    0.00 :	  422ad7:       mov    %rax,%rdi
    0.00 :	  422ada:       callq  425026 <void std::allocator_traits<std::allocator<int> >::destroy<int>(std::allocator<int>&, int*)>
    0.00 :	  422adf:       jmp    422b03 <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)+0x1c7>
         :	              std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
    0.00 :	  422ae1:       mov    -0x38(%rbp),%rax
    0.00 :	  422ae5:       mov    %rax,%rdi
    0.00 :	  422ae8:       callq  420e4e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :	  422aed:       mov    %rax,%rdx
    0.00 :	  422af0:       mov    -0x18(%rbp),%rcx
    0.00 :	  422af4:       mov    -0x28(%rbp),%rax
    0.00 :	  422af8:       mov    %rcx,%rsi
    0.00 :	  422afb:       mov    %rax,%rdi
    0.00 :	  422afe:       callq  420e5c <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
         :	            _M_deallocate(__new_start, __len);
    0.00 :	  422b03:       mov    -0x38(%rbp),%rax
    0.00 :	  422b07:       mov    -0x20(%rbp),%rdx
    0.00 :	  422b0b:       mov    -0x28(%rbp),%rcx
    0.00 :	  422b0f:       mov    %rcx,%rsi
    0.00 :	  422b12:       mov    %rax,%rdi
    0.00 :	  422b15:       callq  42307c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
         :	            __throw_exception_again;
    0.00 :	  422b1a:       callq  41db40 <__cxa_rethrow@plt>
         :	      }
    0.00 :	  422b1f:       add    $0x38,%rsp
    0.00 :	  422b23:       pop    %rbx
    0.00 :	  422b24:       pop    %rbp
    0.00 :	  422b25:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420760 <std::vector<int, std::allocator<int> >::push_back(int const&)>:
         :	_ZNSt6vectorIiSaIiEE9push_backERKi():
         :	       *  to it.  Due to the nature of a %vector this operation can be
         :	       *  done in constant time if the %vector has preallocated space
         :	       *  available.
         :	       */
         :	      void
         :	      push_back(const value_type& __x)
    0.00 :	  420760:       push   %rbp
    0.00 :	  420761:       mov    %rsp,%rbp
    0.00 :	  420764:       sub    $0x10,%rsp
    0.00 :	  420768:       mov    %rdi,-0x8(%rbp)
    0.00 :	  42076c:       mov    %rsi,-0x10(%rbp)
         :	      {
         :	        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    0.00 :	  420770:       mov    -0x8(%rbp),%rax
    0.00 :	  420774:       mov    0x8(%rax),%rdx
    0.00 :	  420778:       mov    -0x8(%rbp),%rax
    0.00 :	  42077c:       mov    0x10(%rax),%rax
    0.00 :	  420780:       cmp    %rax,%rdx
    0.00 :	  420783:       je     4207b6 <std::vector<int, std::allocator<int> >::push_back(int const&)+0x56>
         :	          {
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         :	                                     __x);
    0.00 :	  420785:       mov    -0x8(%rbp),%rax
    0.00 :	  420789:       mov    0x8(%rax),%rcx
    0.00 :	  42078d:       mov    -0x8(%rbp),%rax
         :	            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    0.00 :	  420791:       mov    -0x10(%rbp),%rdx
    0.00 :	  420795:       mov    %rcx,%rsi
    0.00 :	  420798:       mov    %rax,%rdi
    0.00 :	  42079b:       callq  422904 <decltype (_S_construct({parm#1}, {parm#2}, (forward<int const&>)({parm#3}))) std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
         :	            ++this->_M_impl._M_finish;
    0.00 :	  4207a0:       mov    -0x8(%rbp),%rax
  100.00 :	  4207a4:       mov    0x8(%rax),%rax
    0.00 :	  4207a8:       lea    0x4(%rax),%rdx
    0.00 :	  4207ac:       mov    -0x8(%rbp),%rax
    0.00 :	  4207b0:       mov    %rdx,0x8(%rax)
    0.00 :	  4207b4:       jmp    4207c9 <std::vector<int, std::allocator<int> >::push_back(int const&)+0x69>
         :	          }
         :	        else
         :	#if __cplusplus >= 201103L
         :	          _M_emplace_back_aux(__x);
    0.00 :	  4207b6:       mov    -0x10(%rbp),%rdx
    0.00 :	  4207ba:       mov    -0x8(%rbp),%rax
    0.00 :	  4207be:       mov    %rdx,%rsi
    0.00 :	  4207c1:       mov    %rax,%rdi
    0.00 :	  4207c4:       callq  42293c <void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)>
         :	#else
         :	          _M_insert_aux(end(), __x);
         :	#endif
         :	      }
    0.00 :	  4207c9:       leaveq
    0.00 :	  4207ca:       retq
 Percent |	Source code & Disassembly of main for cycles:u (1 samples)
--------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004212e6 <std::vector<int, std::allocator<int> >::size() const>:
         :	_ZNKSt6vectorIiSaIiEE4sizeEv():
         :	#endif
         :
         :	      // [23.2.4.2] capacity
         :	      /**  Returns the number of elements in the %vector.  */
         :	      size_type
         :	      size() const _GLIBCXX_NOEXCEPT
    0.00 :	  4212e6:       push   %rbp
    0.00 :	  4212e7:       mov    %rsp,%rbp
    0.00 :	  4212ea:       mov    %rdi,-0x8(%rbp)
         :	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :	  4212ee:       mov    -0x8(%rbp),%rax
    0.00 :	  4212f2:       mov    0x8(%rax),%rax
    0.00 :	  4212f6:       mov    %rax,%rdx
    0.00 :	  4212f9:       mov    -0x8(%rbp),%rax
    0.00 :	  4212fd:       mov    (%rax),%rax
    0.00 :	  421300:       sub    %rax,%rdx
    0.00 :	  421303:       mov    %rdx,%rax
  100.00 :	  421306:       sar    $0x2,%rax
    0.00 :	  42130a:       pop    %rbp
    0.00 :	  42130b:       retq
